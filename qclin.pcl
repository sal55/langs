!PROC PCL
addlib    "msvcrt"
addlib    "user32"
addlib    "gdi32"
addlib    "kernel32"

extproc    malloc
extproc    realloc
extproc    free
extproc    memset
extproc    memcpy
extproc    memmove
extproc    clock
extproc    ftell
extproc    fseek
extproc    fread
extproc    fwrite
extproc    getc
extproc    ungetc
extproc    fopen
extproc    fclose
extproc    fgets
extproc    remove
extproc    rename
extproc    getchar
extproc    putchar
extproc    setbuf
extproc    strlen
extproc    strcpy
extproc    strcmp
extproc    strncmp
extproc    strncpy
extproc    memcmp
extproc    strcat
extproc    tolower
extproc    toupper
extproc    isalpha
extproc    isupper
extproc    islower
extproc    isalnum
extproc    isspace
extproc    strstr
extproc    atol
extproc    atoi
extproc    strtod
extproc    _strdup
extproc    puts
extproc    printf
extproc    sprintf
extproc    sscanf
extproc    scanf
extproc    rand
extproc    srand
extproc    system
extproc    fgetc
extproc    fputc
extproc    fprintf
extproc    fputs
extproc    feof
extproc    getch
extproc    _getch
extproc    kbhit
extproc    _mkdir
extproc    mkdir
extproc    strchr
extproc    _setmode
extproc    _exit
extproc    exit
extproc    pow
extproc    sin
extproc    cos
extproc    tan
extproc    asin
extproc    acos
extproc    atan
extproc    log
extproc    log10
extproc    exp
extproc    floor
extproc    ceil
extproc    qsort
extproc    __getmainargs
extproc    dlopen
extproc    dlsym
extproc    tcgetattr
extproc    tcsetattr
extproc    gettimeofday
extproc    gmtime_r
extproc    stdin
extproc    stdout
zstatic  i64       msysc.fmtparam:
zstatic  i64       msysc.$cmdskip::     
istatic  i64       msysc.needgap:       
    data     i64       0                
istatic  i64       msysc.outdev:        
    data     i64       1                
istatic  u64       msysc.outchan:       
    data     i64       0                
istatic  u64       msysc.fmtstr:        
    data     i64       0                
zstatic  mem:80       msysc.outchan_stack:
zstatic  mem:80       msysc.outdev_stack:
zstatic  mem:80       msysc.fmtstr_stack:
zstatic  mem:10       msysc.needgap_stack:
zstatic  mem:80       msysc.ptr_stack:  
istatic  i64       msysc.niostack:      
    data     i64       0                
istatic  mem:16       msysc.digits:     
    data mem:16  48 49 50 51 52 53 54 55 56 57 65 66 67 68 69 70 
istatic  mem:16       msysc.defaultfmt: 
    data     u8        0                
    data     i8        0                
    data     u8        10               
    data     u8        0                
    data     u8        32               
    data     u8        102              
    data     u8        0                
    data     u8        0                
    data     u8        0                
    data     u8        82               
    data     u8        0                
    data     u8        0                
    data     u8        0                
    data     u8        0                
    data     u8        0                
    data     u8        0                
zstatic  u64       msysc.rd_buffer:     
zstatic  i64       msysc.rd_length:     
zstatic  u64       msysc.rd_pos:        
zstatic  u64       msysc.rd_lastpos:    
zstatic  i64       msysc.termchar:      
zstatic  i64       msysc.itemerror:     
zstatic  mem:4096       msysc.printbuffer:
zstatic  u64       msysc.printptr:      
zstatic  i64       msysc.printlen:      
zstatic  i64       msysc.ncmdparams:    
zstatic  u64       msysc.cmdparams:     
zstatic  mem:16       msysc.getfmt.fmt: 
zstatic  mem:100       msysc.strint.str:
zstatic  mem:100       msysc.strword.str:
zstatic  mem:320       msysc.strreal.str:
zstatic  mem:2408       mlib.allocupper:
zstatic  i64       mlib.alloccode:      
zstatic  i64       mlib.allocbytes:     
istatic  i64       mlib.fdebug:         
    data     i64       0                
zstatic  i64       mlib.rfsize:         
zstatic  u64       mlib.maxmemory:      
zstatic  i64       mlib.maxalloccode:   
istatic  u8        mlib.pcm_setup:      
    data     u8        0                
istatic  i64       mlib.show:           
    data     i64       0                
istatic  i64       mlib.memtotal:       
    data     i64       0                
istatic  i64       mlib.smallmemtotal:  
    data     i64       0                
istatic  i64       mlib.smallmemobjs:   
    data     i64       0                
istatic  i64       mlib.maxmemtotal:    
    data     i64       0                
zstatic  mem:24       mlib.memalloctable:
zstatic  mem:12       mlib.memallocsize:
zstatic  u64       mlib.pcheapstart:    
zstatic  u64       mlib.pcheapend:      
zstatic  u64       mlib.pcheapptr:      
zstatic  mem:2049       mlib.sizeindextable:
zstatic  mem:72       mlib.freelist:    
istatic  mem:48       mlib.pmnames:     
    data     i64       "pm_end"         
    data     i64       "pm_option"      
    data     i64       "pm_sourcefile"  
    data     i64       "pm_libfile"     
    data     i64       "pm_colon"       
    data     i64       "pm_extra"       
istatic  mem:16       mlib.seed:        
    data     i64       2993073034246558322
    data     i64       1617678968452121188
zstatic  i64       mlib.pcm_newblock.totalheapsize:
istatic  mem:36       mlib.pcm_round.allocbytes:
    data     i32       0                
    data     i32       16               
    data     i32       32               
    data     i32       64               
    data     i32       128              
    data     i32       256              
    data     i32       512              
    data     i32       1024             
    data     i32       2048             
zstatic  mem:260       mlib.changeext.newfile:
zstatic  mem:260       mlib.extractpath.str:
zstatic  mem:100       mlib.extractbasefile.str:
istatic  i64       mlib.nextcmdparamnew.infile:
    data     i64       0                
istatic  u64       mlib.nextcmdparamnew.filestart:
    data     i64       0                
istatic  u64       mlib.nextcmdparamnew.fileptr:
    data     i64       0                
istatic  u8        mlib.nextcmdparamnew.colonseen:
    data     u8        0                
zstatic  mem:300       mlib.nextcmdparamnew.str:
zstatic  mem:256       mlib.readnextfileitem.str:
zstatic  mem:256       mlib.padstr.str: 
zstatic  u64       mlib.chr.str:        
istatic  i64       mlinux.init_flag:    
    data     i64       0                
zstatic  i64       qq_cli.nalldot:      
zstatic  i64       qq_cli.nalldot1field:
zstatic  u64       qq_cli.syslibname:   
istatic  mem:48       qq_cli.runnames:  
    data     i64       "load_cc"        
    data     i64       "parse_cc"       
    data     i64       "names_cc"       
    data     i64       "gencode_cc"     
    data     i64       "fixup_cc"       
    data     i64       "run_cc"         
zstatic  u8        qq_cli.fshowpcl1:    
zstatic  u8        qq_cli.fshowpcl2:    
zstatic  u8        qq_cli.fshowast1:    
zstatic  u8        qq_cli.fshowast2:    
zstatic  u8        qq_cli.fshowst:      
zstatic  u8        qq_cli.fshowstflat:  
zstatic  u8        qq_cli.fshowtypes:   
istatic  u8        qq_cli.foptimise:    
    data     u8        1                
zstatic  u8        qq_cli.fwriteqa:     
zstatic  u8        qq_cli.fshowmodules: 
zstatic  u8        qq_cli.fallsp:       
istatic  u8        qq_cli.runcode:      
    data     u8        6                
zstatic  u64       qq_cli.sourcestr:    
zstatic  u64       qq_cli.inputfile:    
zstatic  u64       qq_cli.allprocdefs:  
zstatic  u64       qq_cli.allstaticdefs:
zstatic  u64       qq_cli.pclstr:       
zstatic  i64       qq_cli.cmdstartindex:
zstatic  mem:16       qq_decls.nextlx:  
zstatic  mem:16       qq_decls.lx:      
zstatic  i64       qq_decls.qpos:       
zstatic  i64       qq_decls.pcerrorpos: 
zstatic  u64       qq_decls.pcerrormodule:
zstatic  mem:1120000       qq_decls.varstack:
zstatic  u64       qq_decls.sptr:       
zstatic  u64       qq_decls.stacklimit: 
zstatic  u64       qq_decls.frameptr:   
zstatic  u64       qq_decls.pcptr:      
zstatic  i64       qq_decls.stopped:    
zstatic  u64       qq_decls.stprogram:  
zstatic  u64       qq_decls.stmodule:   
zstatic  u64       qq_decls.stsubprog:  
zstatic  u64       qq_decls.stcurrmodule:
zstatic  u64       qq_decls.stcurrproc: 
zstatic  u64       qq_decls.currmodule: 
zstatic  i64       qq_decls.debug:      
zstatic  i64       qq_decls.inproc:     
zstatic  mem:8000       qq_decls.genfieldtable:
zstatic  i64       qq_decls.ngenfields: 
zstatic  i64       qq_decls.nlibfiles:  
zstatic  mem:400       qq_decls.libtable:
zstatic  mem:50       qq_decls.libtypes:
zstatic  mem:400       qq_decls.dllinsttable:
zstatic  i64       qq_decls.ndllprocs:  
zstatic  mem:16000       qq_decls.dllproctable:
zstatic  mem:2000       qq_decls.dllproclibindex:
zstatic  mem:16000       qq_decls.dllprocaddr:
istatic  u8        qq_decls.usebundled: 
    data     u8        1                
istatic  mem:48       qq_decls.dispatchnames:
    data     i64       "-lab"           
    data     i64       "-sw"            
    data     i64       "-fn"            
    data     i64       "-debug"         
    data     i64       "-fdebug"        
    data     i64       "-asm"           
zstatic  i64       qq_decls.nqparams:   
zstatic  mem:256       qq_decls.qparamtable:
zstatic  u64       qq_decls.proclist:   
zstatic  u64       qq_decls.proclistx:  
zstatic  i64       qq_decls.nproclist:  
istatic  u64       qq_decls.pcl_callbackfn:
    data     i64       0                
zstatic  mem:2048       qq_decls.chrtable:
zstatic  u8        qq_decls.fnosys:     
zstatic  u8        qq_decls.fverbose:   
zstatic  mem:512       qq_decls.baseclasstable:
zstatic  mem:2048       qq_decls.baseclassdef:
zstatic  i64       qq_decls.nbaseclasses:
zstatic  i64       qq_decls.lastretindex:
zstatic  mem:1608       qq_decls.modules:
zstatic  mem:240       qq_decls.subprogs:
zstatic  i64       qq_decls.nmodules:   
zstatic  i64       qq_decls.nsubprogs:  
zstatic  i64       qq_decls.nalllines:  
zstatic  mem:800       qq_decls.qafilenames:
zstatic  mem:800       qq_decls.qatext: 
zstatic  mem:800       qq_decls.qasize: 
zstatic  i64       qq_decls.nqafiles:   
istatic  mem:184       qq_decls.optionnames:
    data     i64       "load"           
    data     i64       "parse"          
    data     i64       "names"          
    data     i64       "gen"            
    data     i64       "fixup"          
    data     i64       "run"            
    data     i64       "ast1"           
    data     i64       "ast2"           
    data     i64       "pcl1"           
    data     i64       "pcl2"           
    data     i64       "allsp"          
    data     i64       "st"             
    data     i64       "stflat"         
    data     i64       "types"          
    data     i64       "modules"        
    data     i64       "opt"            
    data     i64       "no"             
    data     i64       "ext"            
    data     i64       "qa"             
    data     i64       "qas"            
    data     i64       "v"              
    data     i64       "nosys"          
    data     i64       "sys"            
istatic  mem:184       qq_decls.optionvars:
    data     u64       &qq_cli.runcode  
    data     u64       &qq_cli.runcode  
    data     u64       &qq_cli.runcode  
    data     u64       &qq_cli.runcode  
    data     u64       &qq_cli.runcode  
    data     u64       &qq_cli.runcode  
    data     u64       &qq_cli.fshowast1
    data     u64       &qq_cli.fshowast2
    data     u64       &qq_cli.fshowpcl1
    data     u64       &qq_cli.fshowpcl2
    data     u64       &qq_cli.fallsp   
    data     u64       &qq_cli.fshowst  
    data     u64       &qq_cli.fshowstflat
    data     u64       &qq_cli.fshowtypes
    data     u64       &qq_cli.fshowmodules
    data     u64       &qq_cli.foptimise
    data     u64       &qq_cli.foptimise
    data     u64       &qq_decls.usebundled
    data     u64       &qq_cli.fwriteqa 
    data     u64       &qq_cli.fwriteqa 
    data     u64       &qq_decls.fverbose
    data     u64       &qq_decls.fnosys 
    data     u64       &qq_decls.fnosys 
istatic  mem:23       qq_decls.optionvalues:
    data mem:20  1 2 3 4 5 6 1 1 1 1 1 1 1 1 1 1 0 0 1 2 
    data mem:3   1 1 0 
zstatic  u64       qq_decls.stopseq:    
zstatic  u64       qq_decls.raiseseq:   
zstatic  i64       qq_decls.nproclocals:
zstatic  u64       qq_decls.pproclocals:
zstatic  mem:1616       qq_decls.pclcounts:
zstatic  i64       qq_decls.nallpcl:    
istatic  mem:32       qq_decimal.fpnames:
    data     i64       "zero_type"      
    data     i64       "normal_type"    
    data     i64       "inf_type"       
    data     i64       "nan_type"       
istatic  i64       qq_decimal.currprec: 
    data     i64       55               
zstatic  i64       qq_decimal.stblz:    
istatic  u64       qq_decimal.constlist:
    data     i64       0                
zstatic  i64       qq_decimal.decstrsize:
zstatic  mem:16       qq_decimal.vtemp: 
zstatic  u8        qq_dicts.expanddict.inuse:
zstatic  u64       qq_host.procrefs:    
zstatic  mem:256       qq_host.pch_gethostname.name:
zstatic  mem:256       qq_host.pch_getprogname.name:
zstatic  i64       qq_host.initprocrefs.oldnprocs:
zstatic  u64       qq_lex.lxsource:     
zstatic  u64       qq_lex.lxstart:      
zstatic  u64       qq_lex.lxsptr:       
zstatic  i64       qq_lex.lxifcond:     
zstatic  i64       qq_lex.longsuffix:   
zstatic  i64       qq_lex.lxlineno:     
zstatic  i64       qq_lex.nextlxlength: 
zstatic  i64       qq_lex.lxlength:     
zstatic  mem:4194304       qq_lex.hashtable:
zstatic  u64       qq_lex.hashtablelast:
istatic  u64       qq_lex.u64maxstr:    
    data     i64       "18446744073709551615"
zstatic  mem:256       qq_lex.namemap:  
zstatic  i64       qq_lex.lexinit.n:    
zstatic  i64       qq_lib.currlineno:   
istatic  i64       qq_lib.nextavindex:  
    data     i64       0                
zstatic  mem:16       qq_lib.exprstrvar:
istatic  u64       qq_lib.exprstr:      
    data     u64       &qq_lib.exprstrvar
zstatic  i64       qq_lib.nlocalunits:  
zstatic  u64       qq_lib.errormess:    
istatic  u64       qq_lib.bytemasks:    
    data mem:8   1 2 4 8 16 32 64 128 
zstatic  mem:2000       qq_lib.convtostringz.strbuffer1:
zstatic  mem:2000       qq_lib.convtostringz.strbuffer2:
zstatic  mem:2000       qq_lib.convtostringz.strbuffer3:
zstatic  mem:2000       qq_lib.convtostringz.strbuffer4:
zstatic  mem:2000       qq_lib.convtostringz.strbuffer5:
zstatic  mem:2000       qq_lib.convtostringz.strbuffer6:
istatic  i64       qq_lib.convtostringz.strindex:
    data     i64       0                
istatic  mem:48       qq_lib.convtostringz.table:
    data     u64       &qq_lib.convtostringz.strbuffer1
    data     u64       &qq_lib.convtostringz.strbuffer2
    data     u64       &qq_lib.convtostringz.strbuffer3
    data     u64       &qq_lib.convtostringz.strbuffer4
    data     u64       &qq_lib.convtostringz.strbuffer5
    data     u64       &qq_lib.convtostringz.strbuffer6
istatic  u64       qq_lib.convtostringz.longstr:
    data     i64       0                
zstatic  u64       qq_lists.emptylist:  
zstatic  mem:300       qq_modules.getmodulefilename.str:
istatic  i64       qq_modules.loadstring.nextstrname:
    data     i64       0                
zstatic  i64       qq_names.sdsize:     
zstatic  i64       qq_names.sdoffset:   
zstatic  i64       qq_names.sdaligned:  
zstatic  i64       qq_names.sdlevel:    
zstatic  i64       qq_names.sdmode:     
zstatic  i64       qq_names.sdnfields:  
zstatic  i64       qq_names.sdmaxalign: 
zstatic  mem:10       qq_names.sdunion: 
zstatic  mem:80       qq_names.sdmaxsize:
zstatic  i64       qq_parse.intabledata:
istatic  u64       qq_parse.tabledataname:
    data     i64       0                
zstatic  mem:80       qq_parse.dollarstack:
istatic  i64       qq_parse.ndollar:    
    data     i64       0                
zstatic  u8        qq_parse.yieldseen:  
zstatic  i64       qq_parse.currdllindex:
zstatic  i64       qq_parse.nextlambdaindex:
zstatic  mem:160       qq_parse.listtypestack:
zstatic  i64       qq_parse.nlisttype:  
zstatic  i64       qq_parse.listtype:   
zstatic  i64       qq_parse.addstructflag.structseqno:
istatic  mem:96       qq_parse.readcompilervar.monthnames:
    data     i64       "Jan"            
    data     i64       "Feb"            
    data     i64       "Mar"            
    data     i64       "Apr"            
    data     i64       "May"            
    data     i64       "Jun"            
    data     i64       "Jul"            
    data     i64       "Aug"            
    data     i64       "Sep"            
    data     i64       "Oct"            
    data     i64       "Nov"            
    data     i64       "Dec"            
istatic  mem:144       qq_pcltabs.opndnames:
    data     i64       "cnone"          
    data     i64       "cstatic"        
    data     i64       "cframe"         
    data     i64       "cproc"          
    data     i64       "cdllproc"       
    data     i64       "cgenfield"      
    data     i64       "clabel"         
    data     i64       "cint"           
    data     i64       "creal"          
    data     i64       "cstring"        
    data     i64       "cstringz"       
    data     i64       "ctype"          
    data     i64       "csymbol"        
    data     i64       "coperator"      
    data     i64       "cmaths"         
    data     i64       "chost"          
    data     i64       "cbinto"         
    data     i64       "?"              
istatic  mem:1616       qq_pcltabs.pclnames:
    data     i64       "knop"           
    data     i64       "kskip"          
    data     i64       "kprocdef"       
    data     i64       "kprocent"       
    data     i64       "kprocend"       
    data     i64       "kendmod"        
    data     i64       "kcomment"       
    data     i64       "kpushm"         
    data     i64       "kpushf"         
    data     i64       "kpushmref"      
    data     i64       "kpushfref"      
    data     i64       "kpushlab"       
    data     i64       "kpopm"          
    data     i64       "kpopf"          
    data     i64       "kpushci"        
    data     i64       "kpushvoid"      
    data     i64       "kpushnil"       
    data     i64       "kpushcr"        
    data     i64       "kpushcs"        
    data     i64       "kpushtype"      
    data     i64       "kpushopc"       
    data     i64       "kpushsym"       
    data     i64       "kpushptr"       
    data     i64       "kpopptr"        
    data     i64       "kzpopm"         
    data     i64       "kzpopf"         
    data     i64       "kdupl"          
    data     i64       "kcopy"          
    data     i64       "kswap"          
    data     i64       "kconvrefp"      
    data     i64       "kjump"          
    data     i64       "kjumpptr"       
    data     i64       "kjumpt"         
    data     i64       "kjumpf"         
    data     i64       "kjumpeq"        
    data     i64       "kjumpne"        
    data     i64       "kjumplt"        
    data     i64       "kjumple"        
    data     i64       "kjumpge"        
    data     i64       "kjumpgt"        
    data     i64       "kwheneq"        
    data     i64       "kwhenne"        
    data     i64       "kjumplab"       
    data     i64       "kswitch"        
    data     i64       "ktom"           
    data     i64       "ktof"           
    data     i64       "kformci"        
    data     i64       "kforfci"        
    data     i64       "kformm"         
    data     i64       "kforff"         
    data     i64       "kcallproc"      
    data     i64       "kcallptr"       
    data     i64       "kretproc"       
    data     i64       "kretfn"         
    data     i64       "kmodcall"       
    data     i64       "kmodret"        
    data     i64       "kcalldll"       
    data     i64       "kcallhost"      
    data     i64       "kunshare"       
    data     i64       "kaddsp"         
    data     i64       "kstop"          
    data     i64       "kmakelist"      
    data     i64       "kmakevrec"      
    data     i64       "kmakeax"        
    data     i64       "kmakebits"      
    data     i64       "kmaketrec"      
    data     i64       "kmakeset"       
    data     i64       "kmakerang"      
    data     i64       "kmakedict"      
    data     i64       "kmakedec"       
    data     i64       "kincrptr"       
    data     i64       "kincrtom"       
    data     i64       "kincrtof"       
    data     i64       "kloadincr"      
    data     i64       "kincrload"      
    data     i64       "kneg"           
    data     i64       "kabs"           
    data     i64       "knotl"          
    data     i64       "kinot"          
    data     i64       "kistruel"       
    data     i64       "kasc"           
    data     i64       "kchr"           
    data     i64       "ksqr"           
    data     i64       "kmaths"         
    data     i64       "kmaths2"        
    data     i64       "kunaryto"       
    data     i64       "knotlto"        
    data     i64       "klen"           
    data     i64       "klwb"           
    data     i64       "kupb"           
    data     i64       "kbounds"        
    data     i64       "kbytesize"      
    data     i64       "ktype"          
    data     i64       "kdictsize"      
    data     i64       "kisfound"       
    data     i64       "kminval"        
    data     i64       "kmaxval"        
    data     i64       "kistype"        
    data     i64       "kisvoid"        
    data     i64       "kconvert"       
    data     i64       "ktypepun"       
    data     i64       "kadd"           
    data     i64       "ksub"           
    data     i64       "kmul"           
    data     i64       "kdiv"           
    data     i64       "kidiv"          
    data     i64       "kirem"          
    data     i64       "kidivrem"       
    data     i64       "kiand"          
    data     i64       "kior"           
    data     i64       "kixor"          
    data     i64       "kshl"           
    data     i64       "kshr"           
    data     i64       "kin"            
    data     i64       "kinx"           
    data     i64       "kcmp"           
    data     i64       "kmin"           
    data     i64       "kmax"           
    data     i64       "kconcat"        
    data     i64       "kappend"        
    data     i64       "ksame"          
    data     i64       "kpower"         
    data     i64       "kbinto"         
    data     i64       "kandlto"        
    data     i64       "korlto"         
    data     i64       "kconcatto"      
    data     i64       "kappendto"      
    data     i64       "kdot"           
    data     i64       "kpopdot"        
    data     i64       "kdotref"        
    data     i64       "kindex"         
    data     i64       "kpopix"         
    data     i64       "kindexref"      
    data     i64       "kkeyindex"      
    data     i64       "kpopkeyix"      
    data     i64       "kkeyixref"      
    data     i64       "kdotix"         
    data     i64       "kpopdotix"      
    data     i64       "kdotixref"      
    data     i64       "kexpand"        
    data     i64       "kpushtry"       
    data     i64       "kraise"         
    data     i64       "kmap"           
    data     i64       "kpushfff"       
    data     i64       "kpushff"        
    data     i64       "kpushmm"        
    data     i64       "kpushfm"        
    data     i64       "kpushmf"        
    data     i64       "kpushmci"       
    data     i64       "kpushfci"       
    data     i64       "kmoveff"        
    data     i64       "kmovemm"        
    data     i64       "kmovefm"        
    data     i64       "kmovemf"        
    data     i64       "kzmoveff"       
    data     i64       "kmovefci"       
    data     i64       "kmovemci"       
    data     i64       "kzmovefci"      
    data     i64       "kpushv2"        
    data     i64       "kpushv3"        
    data     i64       "kjmpeqfci"      
    data     i64       "kjmpnefci"      
    data     i64       "kjmpltfci"      
    data     i64       "kjmplefci"      
    data     i64       "kjmpgefci"      
    data     i64       "kjmpgtfci"      
    data     i64       "kjmpeqff"       
    data     i64       "kjmpneff"       
    data     i64       "kjmpltff"       
    data     i64       "kjmpleff"       
    data     i64       "kjmpgeff"       
    data     i64       "kjmpgtff"       
    data     i64       "kaddfci"        
    data     i64       "ksubfci"        
    data     i64       "kaddff"         
    data     i64       "ksubff"         
    data     i64       "kaddci"         
    data     i64       "ksubci"         
    data     i64       "kiandci"        
    data     i64       "kshlci"         
    data     i64       "kshrci"         
    data     i64       "kbintof"        
    data     i64       "kaddtof"        
    data     i64       "kaddtofci"      
    data     i64       "ksubtofci"      
    data     i64       "kshltofci"      
    data     i64       "kshrtofci"      
    data     i64       "kindexmf"       
    data     i64       "kindexff"       
    data     i64       "kswitchf"       
    data     i64       "kpushptrf"      
    data     i64       "kpushipm"       
    data     i64       "kpushipf"       
    data     i64       "kpopipm"        
    data     i64       "kpopipf"        
    data     i64       "kupbm"          
    data     i64       "kupbf"          
    data     i64       "klenf"          
    data     i64       "kstoref"        
    data     i64       "kwheneqci"      
    data     i64       "kwhenneci"      
    data     i64       "klastpcl"       
istatic  mem:202       qq_pcltabs.pclopnd:
    data mem:20  0 0 12 0 0 0 0 1 2 1 2 6 1 2 7 0 0 8 9 11 
    data mem:20  13 12 0 0 1 2 0 0 0 0 6 0 6 6 6 6 6 6 6 6 
    data mem:20  6 6 6 0 6 6 6 6 6 6 3 0 0 0 12 0 4 15 0 0 
    data mem:20  0 0 0 0 0 0 0 0 0 0 0 1 2 0 0 0 0 0 0 0 
    data mem:20  0 0 0 14 14 13 0 0 0 0 0 0 0 0 0 0 0 11 0 11 
    data mem:20  11 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
    data mem:20  0 0 16 0 0 0 0 5 5 5 0 0 0 0 0 0 0 0 0 0 
    data mem:20  6 0 0 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
    data mem:20  0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 7 
    data mem:20  7 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 7 
    data mem:2   7 0 
istatic  mem:808       qq_pcltabs.pclattrs:
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976366        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538999160        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976366        
    data     u32       538976366        
    data     u32       538998894        
    data     u32       544831598        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976366        
    data     u32       538976288        
    data     u32       538976366        
    data     u32       538976366        
    data     u32       538976366        
    data     u32       538999160        
    data     u32       538998136        
    data     u32       1987410296       
    data     u32       1987410296       
    data     u32       538998136        
    data     u32       538976376        
    data     u32       538976288        
    data     u32       538976376        
    data     u32       538976288        
    data     u32       538976376        
    data     u32       538976376        
    data     u32       538976376        
    data     u32       538976376        
    data     u32       538976376        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976366        
    data     u32       538976288        
    data     u32       538976366        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976366        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976366        
    data     u32       538976288        
    data     u32       538976355        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976366        
    data     u32       538999160        
    data     u32       538976376        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
    data     u32       538976288        
istatic  mem:264       qq_pcltabs.bintotable:
    data     i64       101              
    data     u64       &qq_vars.var_add 
    data     u64       &qq_vars.var_addmixed
    data     i64       102              
    data     u64       &qq_vars.var_sub 
    data     u64       &qq_vars.var_submixed
    data     i64       103              
    data     u64       &qq_vars.var_mul 
    data     u64       &qq_vars.var_mulmixed
    data     i64       104              
    data     u64       &qq_vars.var_div 
    data     u64       &qq_vars.var_divmixed
    data     i64       108              
    data     u64       &qq_vars.var_iand
    data     i64       0                
    data     i64       109              
    data     u64       &qq_vars.var_ior 
    data     i64       0                
    data     i64       110              
    data     u64       &qq_vars.var_ixor
    data     i64       0                
    data     i64       116              
    data     u64       &qq_vars.var_min 
    data     i64       0                
    data     i64       117              
    data     u64       &qq_vars.var_max 
    data     i64       0                
    data     i64       111              
    data     u64       &qq_vars.var_shl 
    data     i64       0                
    data     i64       112              
    data     u64       &qq_vars.var_shr 
    data     i64       0                
zstatic  mem:640       qq_pclgen.loopstack:
zstatic  mem:160       qq_pclgen.trylevelstack:
istatic  i64       qq_pclgen.loopindex: 
    data     i64       0                
zstatic  i64       qq_pclgen.looptrylevel:
istatic  i64       qq_pclgen.trylevel:  
    data     i64       0                
zstatic  i64       qq_pclgen.retindex:  
zstatic  i64       qq_pclgen.retvaloffset:
zstatic  i64       qq_pclgen.nprocparams:
zstatic  u64       qq_pclgen.pprocentry:
zstatic  i64       qq_pclgen.procskiplabel:
zstatic  u64       qq_pcllib.pcstart:   
zstatic  u64       qq_pcllib.pccurr:    
zstatic  u64       qq_pcllib.pcend:     
zstatic  i64       qq_pcllib.pcalloc:   
zstatic  u64       qq_pcllib.pcsourcestart:
zstatic  u64       qq_pcllib.pcsourcecurr:
zstatic  i64       qq_pcllib.pclcurrlineno:
zstatic  u64       qq_pcllib.labelpctable:
zstatic  i64       qq_pcllib.labelalloc:
zstatic  i64       qq_pcllib.nextlabelno:
zstatic  i64       qq_print.mindev:     
zstatic  i64       qq_print.moutdev:    
zstatic  u64       qq_print.minchan:    
zstatic  u64       qq_print.moutchan:   
zstatic  mem:16       qq_print.minvar:  
zstatic  mem:16       qq_print.moutvar: 
zstatic  mem:24       qq_print.moutdevstack:
zstatic  mem:48       qq_print.moutchanstack:
zstatic  mem:96       qq_print.moutvarstack:
zstatic  mem:6       qq_print.mgapstack:
zstatic  mem:48       qq_print.mfmtstrstack:
zstatic  mem:48       qq_print.mfmtcurrstack:
zstatic  i64       qq_print.noclevels:  
zstatic  u64       qq_print.mfmtstr:    
zstatic  u64       qq_print.mfmtcurr:   
istatic  mem:16       qq_print.defaultfmt:
    data     u8        0                
    data     i8        0                
    data     u8        10               
    data     u8        0                
    data     u8        32               
    data     u8        102              
    data     u8        0                
    data     u8        0                
    data     u8        0                
    data     u8        82               
    data     u8        0                
    data     u8        0                
    data     u8        0                
    data     u8        0                
    data     u8        0                
    data     u8        0                
zstatic  u8        qq_print.mgapneeded: 
zstatic  u64       qq_print.kb_start:   
zstatic  u64       qq_print.kb_pos:     
zstatic  u64       qq_print.kb_lastpos: 
zstatic  i64       qq_print.kb_size:    
zstatic  i64       qq_print.kb_linelength:
zstatic  i64       qq_print.kb_length:  
zstatic  i64       qq_print.kb_lastlength:
zstatic  u8        qq_print.termchar:   
zstatic  i64       qq_print.itemerror:  
zstatic  u64       qq_print.testfilech: 
istatic  i64       qq_print.listdepth:  
    data     i64       0                
zstatic  i64       qq_resolve.nprocs:   
zstatic  i64       qq_resolve.noexpand: 
zstatic  i64       qq_resolve.symbolmode:
zstatic  i64       qq_resolve.macrolevels:
zstatic  i64       qq_resolve.allowmodname:
zstatic  mem:400       qq_resolve.macroparams:
zstatic  mem:400       qq_resolve.macroparamsgen:
zstatic  mem:400       qq_resolve.macroargs:
zstatic  i64       qq_resolve.nmacroparams:
zstatic  i64       qq_resolve.nmacroargs:
zstatic  mem:800       qq_resolve.structfields:
zstatic  i64       qq_resolve.ntopfields:
zstatic  i64       qq_resolve.nallfields:
zstatic  u64       qq_runx.jumptable:   
zstatic  u8        qq_runx.getjt:       
istatic  i64       qq_runx.disploop.count:
    data     i64       100              
zstatic  i64       qq_runaux.runproc_m.rmsg_typeno:
zstatic  mem:320       qq_runaux.k_map.codeseq:
istatic  i64       qq_sets.var_make_set.count:
    data     i64       0                
istatic  u64       qq_sets.var_in_set.masks:
    data mem:8   1 2 4 8 16 32 64 128 
zstatic  u64       qq_strings.emptystring:
istatic  mem:136       qq_syslibs.syslibnames:
    data     i64       "syswin.q"       
    data     i64       "syslin.q"       
    data     i64       "sysp.q"         
    data     i64       "windows.q"      
    data     i64       "linux.q"        
    data     i64       "clibp.q"        
    data     i64       "smlib.q"        
    data     i64       "winapi.q"       
    data     i64       "gxlib.q"        
    data     i64       "bmlib.q"        
    data     i64       "console.q"      
    data     i64       "lincon.q"       
    data     i64       "winconsts.q"    
    data     i64       "wingxlib.q"     
    data     i64       "winmessages.q"  
    data     i64       "gxmisc.q"       
    data     i64       "dates.q"        
istatic  mem:136       qq_syslibs.libtext:
    data     i64       "!Q standard library - Windows\n\n!===============================\nmodule sysp\nmodule clibp\nmodule winapi\nmodule windows\n\nmodule gxlib\nmodule bmlib\nmodule console\nmodule winconsts\nmodule wingxlib\nmodule winmessages\nmodule gxmisc\nmodule dates\nmodule smlib\n!===============================\n\n"
    data     i64       "!Q standard library - Linux\n\n!===============================\nmodule sysp\nmodule clibp\nmodule linux\n!module winapi\n\n!module gxlib\n!module bmlib\n!module console\nmodule lincon\n!module winconsts\n!module wingxlib\n!module winmessages\n!module gxmisc\n!module dates\n!module smlib\n!===============================\n\nexport macro console = lincon\n"
    data     i64       "!Q Main Library\n\nexport type rkey=struct\t!key info as it's used locally\n\tu16\tcharcode\n\tbyte\tkeycode\n\tbyte\tshift\nend\n\nexport var ncmdparams\nexport var cmdparams\nexport var stclock=0\n\nexport const tab=\"\\t\"\n\nexport var readfilesize\n\nexport var infinity=$infinity()\nexport var nan=$nan()\n\nproc start=\n\n\tncmdparams:=getcmdparam()\n\n\tcmdparams:=new(list,1..ncmdparams)\n\n\ts::=\"\"\n\tfor i:=1 to ncmdparams do\n\t\tcmdparams[i]:=getcmdparam(i)\n\t\ts+:=cmdparams[i]+\" \"\n    od\n\n\tsreadln(s)\nend\n\nexport proc reporterror(m)=\n#print \"Error:\" followed by message m. Is that it? Count as being deprecated\n\n\tprintln \"Error:\",m\nend\n\nexport func splitstring(s,?sep)=\n#split up the string s into strings separated by the sep sequence\n#return a list of all the individual strings, excluding the sep seq\n\n\tif s=\"\" or sep=\"\" then return (s,) fi\n\n\ta::=()\n\tns:=0\n\n\tif sep.isvoid then\t\t\t!use any white space of variable width\n\n\t\twhitespace:=(' ','\\t',13,10)\n\n\t\ts:=s+chr(0)\n\t\tp:=&s\n\t\tt::=\"\"\n\t\tinstr:=0\n\n\t\twhile c:=p++^ do\n\t\t\tif c in whitespace then\n\t\t\t\tif instr then\n\t\t\t\t\ta[++ns]:=t\n\t\t\t\t\tt::=\"\"\n\t\t\t\t\tinstr:=0\n\t\t\t\tfi\n\t\t\telse\n\t\t\t\tinstr:=1\n\t\t\t\tt+:=c\n\t\t\tfi\n\t\tod\n\t\n\t\tif t then\n\t\t\ta[++ns]:=t\n\t\tfi\n\n\t\treturn a\n\n\telse\n\t\tdo\n\t\t\tn:=sep inx s\n\t\t\tif not n.isfound then\n\t\t\t\ta[++ns]:=s\n\t\t\t\treturn a\n\t\t\tfi\n\t\t\tt:=leftstr(s,n-1)\n\t\t\ta[++ns]:=t\n\t\t\ts:=rightstr(s,-(n+sep.len-1))\n\t\tod\n\tfi\n\treturn \"\"\nend\n\nexport func joinstrings(a,sep)=\n#join the strings in list, using the given separator string\n#return new single string\n\tif a.upb=0 then return \"\" fi\n\ts:=a[1]\n\tfor i:=2 to a.upb do\n\t\ts:=s+sep+a[i]\n\tod\n\treturn s\nend\n\nexport proc abort(s)=\n#Print message, pause for keypress, then stop the interpreter with stopcode 1\n\n\tprintln \"Abort:\",s,\"Error\"\n\twaitkey()\n\tstop 1\nend\n\nexport func extractpath(fs)=\n#fs is a full filespec string\n#extract any path from it and return that; ie, strip the filename\n#otherwise return \"\"\n\tl:=fs.len\n\tfor i:=l downto 1 do\n\t\tif chr(fs.[i]) in \"\\\\/:\" then\n\t\t\treturn leftstr(fs,i)\n\t\tfi\n\tod\n\treturn \"\"\nend\n\nexport func extractfile(fs)=\n#return filename portion of path fs\n\tp:=extractpath(fs)\n\tif p=\"\" then return fs fi\n\treturn rightstr(fs,-p.len)\nend\n\nexport func extractbasefile(fs)=\n#return filename portion of path fs\n\tf:=extractfile(fs)\n\tif f=\"\" then return \"\" fi\n\te:=extractext(f)\n\tif e.len then\n\t\tf:=leftstr(f,-e.len)\n\tfi\n\tif rightstr(f)=\".\" then\n\t\tf:=leftstr(f,-1)\n\tfi\n\treturn f\nend\n\nexport func extractext(fs,period=0)=\n#extract extension part of filespec fs\n#endings of \"xxx\" (no extension) and \"xxx.\" both return \"\"\n#with period=1, then \"xxx\" returns \"\" and \"xxx.\" returns . (so can be used to\n#override default extensions)\n\n\tf:=extractfile(fs)\n\tif f=\"\" then return \"\" fi\n\te:=\"\"\n\tdo\n\t\tn:=\".\" inx f\n\t\tif n.isfound then\n\t\t\te:=rightstr(f,-n)\n\t\t\tif e=\"\" then\t\t!. ending\n\t\t\t\treturn (period.defined and period|\".\"|\"\")\n\t\t\tfi\n\n\t\t\tf:=e\n\t\telse\n\t\t\texit\n\t\tfi\n\tod\n\n\treturn e\nend\n\nexport func changeext(file,newext,soft=0)=\n#normally face a change of extension to the file spec\n#use soft=1 to only change extension if no extension is present (a \".\" ending is an extension)\n\text:=extractext(file)\n\n\tp:=extractpath(file)\n\tbf:=extractbasefile(file)\n\tep:=extractext(file,1)\n\n\tif soft and ep<>\"\" then return file fi\t\t!has extension, don't change!\n\n\tif newext=\"\" then\n\t\treturn p+bf\n\telsif leftstr(newext)=\".\" then\n\t\treturn p+bf+newext\n\telse\n\t\treturn p+bf+\".\"+newext\n\tfi\nend\n\nexport func addpath(path,file)=\n#If file doesn't already have an absolute path (here, starting with \\ / or ?:)\n#then prepend 'path', which must end with \\ or /\n\tif leftstr(file) in \"/\\\\.\" or file.len>=2 and file.[2]=\":\" then\n\t\treturn file\n\tfi\n\treturn path+file\nend\n\nexport func addext(file,ext)=\n#add extension to filename, if it doesn't already have it's own extenstion\n\n\tif extractext(file,1)=\"\" then\n\t\treturn changeext(file,ext)\n\tfi\n\treturn file\nend\n\nexport func replacestr (s,a,b)=\n#if string a exists in s, then replace with b\n#return original or modified s\n\tdo\n\t\tn:=a inx s\n\t\tif not n.isfound then return s fi\n\t\ts:=leftstr(s,n-1)+b+rightstr(s,1-n-a.len)\n\tod\n\treturn \"\"\nend\n\nexport func parsecmdparams(cmd)=\n#cmd consists of:\n#blocks of text separated by whitespace or commas\n#each block is one of these formats\n# ...\t\tparam only\n# /...\t\tconsists of switches only\n# .../...\tparam followed by switches\n#return of (params,switches), where each is a list of strings\n#note that any correspondence between params and switches is lost; all switches assumed\n#to be global, but can appear anywhere\n#NOTE: cmd can also already be a list of blocks\n\n\tconst dash=\"-\"\n\n\tif cmd.islist then\n\t\tblocks:=cmd\n\telse\n\t\tsreadln(cmd)\n\t\tblocks::=()\n\t\tdo\n\t\t\tread a:\"s\"\n\t\t\tif a=\"\" then exit fi\n\t\t\tblocks append:=a\n\t\tod\n\tfi\n\n\tparams::=()\n\tswitches::=()\n\n\tfor x in blocks do\n\t\tn:=dash inx x\n!\t\tif n=0 then\t\t!pure param\n!\t\t\tparams append:=x\n\t\tif n=1 then\t\t!pure switches\n\t\t\tswitches concat:=splitstring(convlc(rightstr(x,-1)),\"/\")\n\t\telse\t\t\t!param followed by switches\n\t\t\tparams append:=x\n!\t\t\tparams append:=leftstr(x,n-1)\n!\t\t\tswitches concat:=splitstring(convlc(rightstr(x,-n)),\"/\")\n\t\tfi\n\tod\n\n\treturn (params,switches)\nend\n\nexport proc waitsec(secs)=\n#wait for given number of seconds, which can be a float. Call sleep()\n\tsleep(int(secs*1000))\nend\n\nexport func cmd_getswitches=\n#params is a list of strings, which\n#read all switches, and return a list of switch names (minus the \"/\")\n#each string can have more than one switch\n#some switches can follow a name in a string\n\n\tswitches::=()\n\tfor i:=1 to cmdparams.upb do\t\t!use 1..len in case called on <cmdparams> which has lwb 0\n\t\ts:=cmdparams[i]\n\t\tif leftstr(s) in \"-/\" then\n\t\t\tswitches append:=convlc(rightstr(s,-1))\n\t\tfi\n\tod\n\treturn switches\nend\n\nexport func cmd_getparams=\n#params is a list of strings\n#return list of actual params, not including any switches\n#switches are read separately using cmd_getswitches, but are not associated with\n#specific params. That would need to be done here (when / is detected in the middle\n#of a param, then make use readswitches. But to return that info, may be best to\n#create a parallel function)\n\n\tcmds::=()\n\n\tfor i:=1 to cmdparams.upb do\n\t\tpm:=cmdparams[i]\n!for pm in params do\n\t\tif leftstr(pm) in \"/-\" then\n\t\t\tnextloop\n\t\tfi\n!\tn:=\"/\" in pm\n!\tif n=0 then\n\t\t\tcmds append:=pm\n!\telse\n!\t\tcmds append:=leftstr(pm,n-1)\n!\tfi\n\tod\n\treturn cmds\nend\n\nexport func starttimer=\n#Start timer and remember ticks at this point\n\treturn stclock:=ticks()\nend\n\nexport func stoptimer=\n#Return number of ticks since starttimer was called, or last stoptimer\n#as the count is reset\n\n \td:=ticks()-stclock\n\tstclock:=ticks()\n\treturn d\nend\n\nexport func bnfact(n)=\n#n is limited to 9 million million million\n\n\tif n<=2 then\n\t\treturn longint(n)\n\tfi\n\n\tf:=1L\n\tg:=2L\n\tto n-1 do\n\t\tf:=f*g\n\t\tg:=g+1L\n\n\tod\n\treturn f\nend\n\nexport proc isort(a,?ll,?rr)=\n#inplace quicksort of a, which is anything that is indexable\n#ll rr are used for recursive calls\n\tif ll.isvoid then\n\t\tll:=a.lwb\n\t\trr:=a.upb\n\tfi\n\n\ti:=ll\n\tj:=rr\n\n\tpivot:=a[(ll+rr)%2]\n\n\trepeat\n\t\twhile pivot>a[i] and i<rr do ++i od\n\t\twhile pivot<a[j] and j>ll do --j od\n\t\tif i<=j then\n\t\t\tswap(a[i],a[j])\n\t\t\t++i\n\t\t\t--j\n\t\tfi\n\tuntil i>j\n\tif ll<j then isort(a,ll,j) fi\n\tif i<rr then isort(a,i,rr) fi\nend\n\nexport func sort(a)=\n#quicksort a and return newly sorted list. Duplicates a then uses isort\n\tb::=a\n\tisort(b)\n\treturn b\nend\n\nexport func pcerror(m)=\n#Force an interpreter error; advantage is that source location is reported.\n\n\tprintln \"Internal error:\",m\n\ta:=b+c\n\treturn 0\nend\n\n\n\n!=========================================\nexport proc insert(&a, b, c)=\n#insert value c just before index b\n#c is always a single value; to insert a sequence c, use insertn()\n\tn:=a.upb\n\ta[n+1]:=c\n\tfor i:=n downto b do\n\t\tswap(a[i+1],a[i])\n\tod\nend\n\nexport proc isort2(a,b,?ll,?rr)=\n#Like isort but also sorts b in parallel; sort order is determined by a however\n\tif ll.isvoid then\n\t\tll:=a.lwb\n\t\trr:=a.upb\n\tfi\n\n\ti:=ll\n\tj:=rr\n\n\tpivot:=a[(ll+rr)%2]\n\n\trepeat\n\t\twhile pivot>a[i] and i<rr do ++i od\n\t\twhile pivot<a[j] and j>ll do --j od\n\t\tif i<=j then\n\t\t\tswap(a[i],a[j])\n\t\t\tswap(b[i],b[j])\n\t\t\t++i\n\t\t\t--j\n\t\tfi\n\tuntil i>j\n\tif ll<j then isort2(a,b,ll,j) fi\n\tif i<rr then isort2(a,b,i,rr) fi\nend\n\nexport func left(a,n=1)=\n#return leftmost n elements of a (default left element)\n#when n is negative, all except rightmost -n\n\n\tif n>=0 then\n\t\treturn take(a,n)\n\telse\n\t\treturn take(a,a.len+n)\n\tfi\nend\n\nexport func right(a,n=1)=\n#return rightmost n elements of a (default right element)\n#when n is negative, all except leftmost -n\n\n\tif n>=0 then\n\t\treturn drop(a,a.len-n)\n\telse\n\t\treturn drop(a,-n)\n\tfi\nend\n\nexport func reverse(a)=\n#return reversed version of a\n#when 0, returns empty\n#when 1 element, returns a distinct, writeable copy\n\n\tif a.len=0 then\n\t\treturn makeempty(a)\n\tfi\n\tb::=a\n\n\tif a then\n\t\tfor i in a.bounds do\n\t\t\tb[a.upb-i+a.lwb]:=a[i]\n\t\tod\n\tfi\n\treturn b\nend\n\nexport func expandrange(a,step=1)=\n#Turn range a into a list of inclusive values\n\tx::=()\n\ti:=a.lwb\n\twhile i<=a.upb do\n\t\tx append:=i\n\t\ti+:=step\n\tod\n\treturn x\nend\n\nexport func head(a)=\n#return first element, or empty when empty\n\n\tif a.len then\n\t\treturn a[a.lwb]\n\telse\n\t\treturn makeempty(a)\n\tfi\nend\n\nexport func tail(a)=\n#return all except the first element\n#returns empty when only 0 or 1 elements\n\n\tcase a.len\n\twhen 0,1 then\n\t\treturn makeempty(a)\n\tesac\n\treturn a[2..$]\nend\n\nexport func init(a)=\n#return all except last element\n#returns empty when only 0 or 1 elements\n\tcase a.len\n\twhen 0,1 then\n\t\treturn makeempty(a)\n\tesac\n\treturn a[a.lwb..$-1]\nend\n\nexport func last(a)=\n#return last element, or empty\n\tif a.len then\n\t\treturn a[$]\n\telse\n\t\treturn makeempty(a)\n\tfi\nend\n\nexport func take(a,n)=\n#return first n elements from list/string a\n#returns () or \"\" when a is empty\n#n > 0 (n<=0 returns empty)\n\n\tif a.len=0 or n<=0 then\n\t\treturn makeempty(a)\n\tfi\n\tif n>=a.len then\n\t\treturn a\n\tfi\n\treturn a[a.lwb..a.lwb+n-1]\nend\n\nexport func drop(a,n)=\n#skips first n elements of a then returns the rest\n#returns () when empty, or skipping the whole list\n#n >= 0\n\n\tif a.len=0 or n>=a.len then\n\t\treturn makeempty(a)\n\tfi\n\tif n<=0 then\n\t\treturn a\n\tfi\n\treturn a[a.lwb+n..$]\nend\n\nexport func zip(a,b)=\n#return a list consisting of alternate elements from a and b\n#uses smaller of the two dimensions\n\n\tn:=min(a.len,b.len)\n\tc::=()\n\n!\tj:=a.lwb; k:=b.lwb\n\t(j, k) := (a.lwb, b.lwb)\n\n\tto n do\n\t\tc append:=a[j++]\n\t\tc append:=b[k++]\n\tod\n\treturn c\nend\n\nexport func repeatlist(a,n)=\n#duplicate a n times, and return the result\n#this ought to be built-in as a*n, but that's only implemented for a.len=1\n\n\tb:=makeempty(a)\n\tto n do\n\t\tb concat:=a\n\tod\n\treturn b\nend\n\n!export func minimum(a)=\n!#return minimum value of elements in a\n!\tif not a then\n!\t\treturn void\n!\tfi\n!\tx:=head(a)\n!\tfor y in tail(a) do\n!\t\tx min:=y\n!\tod\n!\treturn x\n!end\n!\n!export func maximum(a)=\n!#return maximum value of elements in a\n!\tif not a then\n!\t\treturn void\n!\tfi\n!\tx:=head(a)\n!\tfor y in tail(a) do\n!\t\tx max:=y\n!\tod\n!\treturn x\n!end\n!\n!export func sumlist(a)=\n!# apply \"+\" between all elements of a, and return result\n!# all elements must be compatble (all strings or all numbers for example)\n!# returns void then a is empty, or head(a) when just one element\n!\n!\tif not a then\n!\t\treturn void\n!\tfi\n!\tx:=head(a)\n!\tfor y in tail(a) do\n!\t\tx +:=y\n!\tod\n!\treturn x\n!end\n\nexport proc delete(&a,?b)=\n#delete element b\n\tn:=a.upb\n\tif b.isvoid then b:=n fi\n\n\tif n=b=1 then\n\t\ta::=()\n\t\treturn\n\tfi\n\n\tif b>n then return fi\n\tif b<a.lwb then return fi\n\tfor i:=b to n-1 do\n\t\tswap(a[i],a[i+1])\t\t\t!swap is faster for complex elements\n\tod\n!a[n]:=0\t\t!don't leave any heap data beyond new end of list\n\n\tresize(a,n-1)\nend\n\nexport proc resize(&a,n)=\n#hange the upper bound of a to n\n\n\tif n<a.lwb then\n\t\ta:=makeempty(a)\n\t\treturn\n\tfi\n\n\ta::=a[a.lwb..n]\t\t\t!duplication forces original to be freed\nend\n \nexport func makebits(data,t=bit)=\n#turn data (list, array, or bit array of different type) into a bit array\n\n\ta:=new(bits,t,data.bounds)\n\tfor i:=data.lwb to data.upb do\n\t\ta[i]:=data[i]\n\tod\n\treturn a\nend\n\nexport func makearray(data,t=i64)=\n#turn data (list, array of different type, or bit array) into an array of \n#given element type\n\n\ta:=new(array,t,data.bounds)\n\tfor i:=data.lwb to data.upb do\n\t\ta[i]:=data[i]\n\tod\n\treturn a\nend\n\nexport func tolist(a)=\n#convert a, a string, array or bits, to a list, and return that list\n\n\tcase a.basetype\n\twhen array,string,bits then\n\t\tb:=new(list,a.bounds)\n\t\tfor i,x in a do\n\t\t\tb[i]:=x\n\t\tod\n\t\treturn b\n!\twhen string then\n!\t\tb:=new(list,a.len)\n!\t\ti:=1\n!\t\tfor i,x in a do\n!\t\t\tb[i++]:=x\n!\t\tod\n!\t\treturn b\n\n\twhen list then\n\t\treturn a\n\telse\n\t\tpcerror(\"tolist:\"+tostr(a.type))\n\tesac\n\treturn 0\nend\n\nexport func toarray(a,?t)=\n#convert a, a list, string, array or bits, to an array, and return that array\n#can be used to turn one array type into another\n\tcase a.basetype\n\twhen list then\n\t\tif t.isvoid then\n\t\t\tif a then\n\t\t\t\tt:=a[a.lwb].type\n\t\t\telse\n\t\t\t\tt:=i32\n\t\t\tfi\n\t\tfi\n\n\twhen bits then\n\t\tif t.isvoid then\n\t\t\tt:=byte\n\t\tfi\n\n\twhen string then\n\t\tif t.isvoid then t:=byte fi\n\t\tb:=new(array,t,a.len)\n\t\tforeach i,x in a do\n\t\t\tb[i]:=x\n\t\tod\n\t\treturn b\n\twhen array then\n\t\tif t.isvoid then\n\t\t\treturn a\n\t\tfi\n\t\tu:=e.elemtype\n\t\tif t=u then return a fi\n\telse\n\t\tpcerror(\"toarray:\"+tostr(a.type))\n\tesac\n\tb:=new(array,t,a.bounds)\n\n\tfor i,x in a do\n\t\tb[i]:=x\n\tod\n\treturn b\nend\n\nexport func tobits(a,t=bit)=\n#convert a, a list, array or other bit array, into a bit array\n\n\tcase a.basetype\n\twhen list,array then\n\n\twhen bits then\n\t\tif a.elemtype=t then\n\t\t\treturn a\n\t\tfi\n\n\telse\n\t\tpcerror(\"tobits:\"+tostr(a.type))\n\tesac\n\tb:=new(bits,t,a.bounds)\n\tfor i,x in a do\n\t\tb[i]:=x\n\tod\n\treturn b\nend\n\nexport func listtostring(a)=\n#a should be a list or array\n#interpreter elements as characters and form a single string\n\ts:=\"\"\n\tfor x in a do\n\t\ts+:=chr(x)\n\tod\n\treturn s\nend\n\nexport func qversion=\n\treturn \"4.0\"\nend\n\nexport proc issort(a,?ll,?rr)=\n#Version of isort that works with dot-indexing\n\n\tif ll.isvoid then\n\t\tll:=a.lwb\n\t\trr:=a.upb\n\tfi\n\n\ti:=ll\n\tj:=rr\n\n\tpivot:=a.[(ll+rr)%2]\n\n\trepeat\n\t\twhile pivot>a.[i] and i<rr do ++i od\n\t\twhile pivot<a.[j] and j>ll do --j od\n\t\tif i<=j then\n\t\t\tswap(a.[i],a.[j])\n\t\t\t++i\n\t\t\t--j\n\t\tfi\n\tuntil i>j\n\tif ll<j then issort(a,ll,j) fi\n\tif i<rr then issort(a,i,rr) fi\nend\n\nexport func ssort(a)=\n#Version of sort() with dot-indexing, eg. strings, or int bits\n\n\tb::=a\n\tissort(b)\n\treturn b\nend\n\nexport func maketable(rows, cols, initval=0)=\n#Create a table: a rectangular list, set to either 0 or to initval\n#Each rows/cols is a range, or length\n\n\trow:=new(list,cols,initval)\n\n\ttable::=new(list,rows)\n\tif rows.isint then rows:=1..rows fi\n\n\tfor i in rows do\n\t\ttable[i]::=row\n\tod\n\n\treturn table\nend\n\nexport func mapv(op,a)=\n#Apply operator or suitable unary func to all elements of vector a,\n#and return new list \n\tb::=makeempty(a)\n\tfor i,x in a do\n\t\t\tb[i]:=mapss(op,x)\n\tod\n\treturn b\nend\n\nexport func mapvv(op,a,b)=\n#Apply op or func between corresponding elements of vectors a and b\n\tc::=makeempty(a)\n\tfor i,x in a do\n\t\tc[i]:=mapss(op,x,b[i])\n\tod\n\treturn c\nend\n\nexport func mapvs(op,a,bs)=\n#Apply op or func between elements of vector a and single value bs\n\tc::=makeempty(a)\n\tfor i,x in a do\n\t\tc[i]:=mapss(op,x,bs)\n\tod\n\treturn c\nend\n\nexport func mapsv(op,as,b)=\n#Apply op or func between elements of single value as and vector b\n!\tc::=makeempty(b)\n\tc::=()\n\tfor i,x in b do\n\t\tc[i]:=mapss(op,as,x)\n\tod\n\treturn c\nend\n\nexport func openfile(name,option=\"rb\")=\n#Open a file for reading. Uses C's fopen and default option is for binary mode\n#Return a valid file handle, which is an i64 value, or 0 when not found\n\tif not name.isstring or name=\"\" then\n\t\treturn 0\n\tfi\n\treturn fopen(name,option)\nend\n\nexport func createfile(name,options=\"wb\")=\n#Create a new file and return its handle, or 0 if there was an error\n\tif not name.isstring or name=\"\" then return 0 fi\n\treturn fopen(name,options)\nend\n\nexport func closefile(f)=\n#close the file associated with handle f\n\treturn fclose(f)=0\nend\n\nexport func checkfile(name)=\n#return 1 if file name exists, otherwise 0\n\tfile:=fopen(name,\"rb\")\n\tif file=0 then return 0 fi\n\tfclose(file)\n\treturn 1\nend\n\nexport func eof(f)=\n#return 1 if at eof on currently open file handle f\n\tc:=fgetc(f)\n\tif c=-1 then return 1 fi\n\n\tungetc(c,f)\n\treturn 0\nend\n\nexport func getfilesize(f)=\n#return size of bytes of currently open file f\n\tp:=ftell(f)\t\t\t!p=current position\n\tfseek(f,0,2)\t\t!get eof position\n\tsize:=ftell(f)\t\t!size in bytes\n\tfseek(f,p,0)\t\t!restore file position\n\treturn size\nend\n\nexport func getfilesize64(f)=\n#return size of bytes of currently open file f\n\tp:=_ftelli64(f)\t\t\t!p=current position\n\t_fseeki64(f,0,2)\t\t!get eof position\n\tsize:=_ftelli64(f)\t\t!size in bytes\n\t_fseeki64(f,p,0)\t\t!restore file position\n\treturn size\nend\n\nexport func setfilepos(f,offset)=\n#set position in file f to given byte offset\n\treturn fseek(f,offset,0)\nend\n\nexport func getfilepos(f)=\n#return current file position\n\treturn ftell(f)\nend\n\nexport func readrandom(f,mem,offset,size)=\n#read size bytes from file f, to memory at mem, from given offset\n#returns number of bytes read\n#mem needs to be a pointer\n#new file offset will be offset+size (or offset+byte read if smaller)\n\tfseek(f,offset,0)\n\treturn fread(mem,1,size,f)\nend\n\nexport func writerandom(f,mem,offset,size)=\n#write size bytes from memory at mem, to current file f from given offset\n#returns bytes written\n\tfseek(f,offset,0)\n\treturn fwrite(mem,1,size,f)\nend\n\nexport func readbytes(f,mem,size)=\n#read size bytes from current position in file f to mem\n\treturn fread(mem,1,size,f)\nend\n\nexport func writebytes(f,mem,size)=\n#write size bytes from mem to current position in f\n\treturn fwrite(mem,1,size,f)\nend\n\nexport func inbyte(file)=\t\t!INBYTE\n\treturn fgetc(file)\nend\n\nexport func inword(file)=\t\t!INWORD\n\tbb:=fgetc(file)\n\treturn fgetc(file)<<8+bb\nend\n\nexport func inlong(file)=\t\t!INLONG\n\tww:=inword(file)\n\treturn inword(file)<<16+ww\nend\n\nexport proc outbyte(file,x)=\t\t!OUTBYTE\n!writerandom(file,&x,getfilepos(file),1)\n\tfputc(x,file)\nend\n\nexport proc outword(file,x)=\t\t!OUTWORD\n\toutbyte(file,x iand 255)\n\toutbyte(file,x.[15..8])\nend\n\nexport proc outlong(file,x)=\t\t!OUTLONG\n\toutword(file,x iand 65535)\n\toutword(file,x>>16)\nend\n\nexport func instring(file)=\t\t!INSTRING\n\ts::=\"\"\n\tdo\n\t\tc:=inbyte(file)\n\t\tif c=0 then return s fi\n\t\ts+:=c\n\tod\n\treturn s\nend\n\nexport func appendfile(a,b)=\n#append line-based text file a to file b\n\n\tf:=openfile(a)\n\tif f=0 then return 0 fi\n\n\th:=openfile(b,\"ab\")\n\tif h=0 then return 0 fi\n\n\twhile not eof(f) do\n\t\treadln @f,x:\"l\"\n\t\tprintln @h,x\n\tod\n\n\tclosefile(f)\n\tclosefile(h)\n\treturn 1\nend\n\nexport func readblockfile(filename,doetx=0)=\n#read text file into a memory block\n#block is allocated here\n#return byte pointer to start of block, or nil\n#doetx=1 to add etx byte to end\n\n\tf:=openfile(filename)\n\tif f=0 then return nil fi\n\n\tn:=getfilesize(f)\n\treadfilesize:=n\n\n\ts:=malloc(n+doetx)\n\tif s=0 then abort(\"Readfile/Malloc fails\") fi\n\tsptr:=makeref(s,byte)\n\n!\treadrandom(f,&s,0,n)\n\treadrandom(f,s,0,n)\n\n\tif doetx then\n\t\t(sptr+n)^:=26\n\tfi\n\n\tclosefile(f)\n\treturn sptr\nend\n\nexport func readstrfile(filename,doetx=0)=\n#read text file into a single string\n#return string, or 0 if there was an error\n\n\tf:=openfile(filename)\n\tif f=0 then return 0 fi\n\n\tn:=getfilesize(f)\n\treadfilesize:=n\n\n\tptr:=malloc(n+1+doetx)\n\tif ptr=0 then abort(\"Readfile/Malloc fails\") fi\n\n\treadrandom(f,ptr,0,n)\n\tif doetx then\n\t\t(makeref(ptr,byte)+n)^:=26\n\tfi\n\n\tclosefile(f)\n\n\ts::=makestr(ptr,n+doetx)\n\n\tfree(ptr)\n\treturn s\nend\n\nexport func writestrfile(filename,s)=\n#read text file from a single string\n#return status\n\n\tf:=createfile(filename)\n\tif f=0 then return 0 fi\n\n\twriterandom(f,makeref(s,byte),0,s.len)\n\n\treturn closefile(f)\nend\n\nexport func readbinfile(filename)=\n#read binary file into byte array\n#return () (empty list not array) on error\n\n\tf:=openfile(filename)\n\tif f=0 then return 0 fi\n\n\tn:=getfilesize(f)\n\treadfilesize:=n\n\n\ta:=new(array,byte,n)\n\treadrandom(f,&a,0,n)\n\n\tclosefile(f)\n\treturn a\nend\n\nexport func writebinfile(filename,a)=\n#write binary file from byte array a\n#return status 1/0\n\n\tf:=createfile(filename)\n\tif f=0 then return 0 fi\n\n\twriterandom(f,(&a),0,a.len)\n\n\tclosefile(f)\n\treturn 1\nend\n\nexport func writeblockfile(filename,p,length)=\n#return status 1/0\n\n\tf:=createfile(filename)\n\tif f=0 then return 0 fi\n\n\tif not writerandom(f,p,0,length) then return 0 fi\n\n\tclosefile(f)\n\treturn 1\nend\n\nexport func erasefile(filename)=\n#delete given file, return status (check msdn)\n\treturn remove(filename)\nend\n\nexport func renamefile(oldfilename,newfilename)=\n#rename file, return status (check msnd)\n\treturn rename(oldfilename,newfilename)\nend\n\nexport func readtextfile(file)=\n#read text file into a list of strings; one per line\n#return list, or 0 on error\n\tf:=openfile(file)\n\tif not f then\n\t\treturn 0 \n\tfi\n\n\treadfilesize:=getfilesize(f)\n\ta::=()\n\n\twhile not eof(f) do\n\t\ta append:= sreadln(f)\n\tod\n\tclosefile(f)\n\treturn a\nend\n\nexport func writetextfile(file,a)=\n#write list of strings <a> as a text file <file>\n\tf:=createfile(file)\n\tif not f then return 0 fi\n\n\tfor i:=a.lwb to a.upb do\n\t\tprintln @f,a[i]\n\tod\n\tclosefile(f)\n\treturn 1\nend\n\nexport func readbinaryfile(filename,t)=\n#read binary file consisting of an array of type t values, into array of t\n#return () (empty list not array) on error\n\n\tf:=openfile(filename)\n\tif f=0 then return () fi\n\n\tn:=getfilesize(f)\n\treadfilesize:=n\n\telems:=n%t.bytes\n\n\ta:=new(array,t,elems)\n\treadrandom(f,&a,0,n)\n\n\tclosefile(f)\n\treturn a\nend\n\nexport func writebinaryfile(filename,data)=\n#write binary file from array of a fixed type to a file\n#return 1/0 status\n\treturn writeblockfile(filename,&data,data.bytes)\nend\n\nexport func confirm(m,caption=\"Confirm\",default=1)=\n#Pop-up box to ask for confirmationdefault=1/2/3 for yes/no/cancel button\n#Return 1 or 0\n\n\tflags:=0x20000+0x20\t!foreground window/question mark icon\n\tflags ior:=3\t\t!yes/no/cancel\n\n\tflags ior:=(default|0,0x100,0x200|0)\n\n\tstatus:=messagebox(nil,m,caption,flags)\n\treturn status=6\nend\n\nexport func messagebox(a=nil,mess,caption=\"Caption\",d=0)=\n#Standard Windows' Messagebox\n\treturn messageboxa(nil,mess,caption,d)\nend\n\nexport proc beep1=\n#Standard beep\n\tmessagebeep(0)\nend\n\nexport proc mem(mess)=\n\tstatic var startmem\n\tif startmem.isvoid then\n\t\tstartmem:=$smallmemtotal()\n\tfi\n\tprintln mess,,\":\",$smallmemtotal()-startmem\nend\n\nexport func reduce(op, a)=\n\tx:=head(a)\n\tfor y in tail(a) do\n\t\tx:=mapss(op,x,y)\n\tod\n\tx\nend\n"
    data     i64       "export func dirlist(s,t=1)=\n#s is a export filename (eg. \"*.dwg\") with possible drive/path; scan\n#directory for all matching files and return as a list of names\n#also returns total no. of files so far\n#t= +1\tInclude normal files, no sub-directory names\n#t= +2  Include directories\n#t= +3  Include all files including directories\n#t= +4  Convert to lower case\n#t=  0  Defaults to +1\n\n!CPL \"DIRLIST/WINLIB\"\n\n\tif t.isvoid then t:=1 fi\t\t\t!files only\n\n\tnfiles:=0\n\tdata::=()\n\tfile:=new(ws_finddata)\n\n\tif (hfind:=findfirstfile(s,&file))<>-1 then\t!at least one file\n\t\trepeat\n\t\t\tif (file.fileattributes iand 16) then\t\t!this is a directory\n\t\t\t\tif (t iand 2)=0 then goto skip fi\t\t!no directories\n\t\t\telse\t\t\t\t\t\t!this is a file\n\t\t\t\tif (t iand 1)=0 then goto skip fi\n\t\t\tfi\n\t\t\t++nfiles\n\t\t\tif (t iand 4) then\t\t\t\t!to lower case\n\t\t\t\tdata[nfiles]:=convlc(file.filename)\n\t\t\telse\n\t\t\t\tdata[nfiles]::=file.filename\n\t\t\tfi\n\tskip:\n\t\tuntil not findnextfile(hfind,&file)\n\t\tfindclose(hfind)\n\tfi\n\treturn data\nend\n\nexport func setcurrdir(newdir)=\n#Set current directory; return Windows' status code\n\treturn setcurrentdirectory(newdir)\nend\n\nexport func getcurrdir=\n#Return current directory name, always ends with \\ or /\n\ta:=new(array,byte,256)\n\tn:=getcurrentdirectory(a.len,&a[1])\n\n\tif n then\n\t\tdir::=makestr(&a[1],n)\n\telse\n\t\tdir:=\"\"\n\tfi\n\n\tif not (rightstr(dir) in \"\\\\/\") then dir +:= \"\\\\\" fi\n\treturn dir\nend\n\nexport func createdir(name)=\n#Create a new directory\n\treturn createdirectory(name,0)\nend\n\nexport func direxists(path)=\n#Return 1 if directory path exists\n\tconst file_attribute_directory=16\n\tconst invalid_file_attributes=-1\n\n\tattrib := getfileattributesa(path)\n\n\treturn attrib<>invalid_file_attributes and (attrib iand file_attribute_directory)\nend\n\n"
    data     i64       "export func dirlist(s,t=1)=\nABORT(\"DIRLIST\")\n0\nend\n\nexport func setcurrdir(newdir)=\n#Set current directory; return Windows' status code\n\tsystem(\"cd \"+newdir)=0\nend\n\nexport func getcurrdir=\n#Return current directory name, always ends with \\ or /\nABORT(\"GETCURRDIR\")\n0\nend\n\nexport func createdir(name)=\n#Create a new directory\n\tif not direxists(name) then\n\t\tsystem(\"mkdir \"+name)=0\n\telse\n\t\t1\n\tfi\nend\n\nexport func direxists(path)=\n#Return 1 if directory path exists\n\tcheckfile(path+\"/.\")\n\nend\n\n"
    data     i64       "importdll msvcrt=\n!importdll msvcr100=\n!importdll msvcr120=\n\tfunc \"malloc\"        (i64)ref byte\n\tfunc realloc(i64, i32)i64\n\tproc free        (i64)\n\tproc memset      (ref byte, i32, i32)\n\tproc memcpy      (ref byte, ref byte, i32)\n\tfunc memcmp      (ref byte, ref byte, i32)i32\n!\tfunc clock       :i32\n\tfunc ftell       (i64)i32\n\tfunc _ftelli64   (i64)i64\n\tfunc fseek       (i64, i32, i32)i32\n\tfunc _fseeki64   (i64, i32, i32)i64\n\tfunc fread       (ref byte, i32, i32, i64)i32\n\tfunc fwrite      (ref byte, i32, i32, i64)i32\n\tfunc getc   (i64)i32\n\tfunc ungetc (i32, i64)i32\n\tfunc fopen       (stringz, stringz)i64\n\tfunc fclose      (i64)i32\n\tfunc fgets       (ref byte, i32, i64)ref byte\n\tfunc remove      (stringz)i32\n\tfunc rename      (stringz, stringz)i32\n\tfunc getchar     :i32\n\tproc putchar     (i32)\n\tproc setbuf      (i64, i64)\n\n\tfunc rand        :i32\n\tproc srand       (i32)\n\n\tfunc puts        (stringz)i32\n\tfunc printf      (stringz, ...)i32\n\n\tfunc sprintf     (stringz, stringz, ...)i32\n\n\tfunc sscanf      (stringz, stringz, ...)i32\n\tfunc isalpha     (i32)i32\n\tfunc tolower     (i32)i32\n\tfunc strlen      (ref byte)i32\n\tfunc atoi        (stringz)i32\n\n!   clang func system      (stringz)i32\n\n\tfunc fgetc  (i64)i32\n\tfunc fputc  (i32,  i64)i32\n\tfunc fprintf     (i64, stringz, ...)i32\n\tfunc fputs       (stringz,  i64)i32\n\tfunc feof        (i64)i32\n!   clang func getch       :i32\n\tfunc _getch      :i32\n\tproc fflush      (ref void)\n\tproc tcflush     (int, int)\n\nend\n\nglobal const c_eof     = -1\nglobal const seek_set  = 0\nglobal const seek_curr = 1\nglobal const seek_end  = 2\n\n"
    data     i64       "\nexport var popuplist::=()\nexport var focuslist::=()\nexport var npopups=0\nexport var message\nexport var messw, messa, messb\nexport var wpopup=nil\n\nrecord blockrec=\n\tvar posx, posy\t\t\t\t!pixel position of top left of block: relative to other\n\t\t\t\t\t\t\t\t!blocks, later within client area of containing window\n\tvar dimx,dimy\t\t\t\t!'client' area of block, including margins, cells and gaps\n\tvar celldimx, celldimy\t\t!size of each cell, in pixels\n\tvar cellsx, cellsy\t\t\t!number of identically-svert hoz and vertical controls\n\tvar gapx, gapy\t\t\t\t!gap between cells, in pixels\n\tvar marginx, marginy\t\t!margins around all cells\n\tvar labelwidth\t\t\t\t!for edit boxes, how many pixels on left are for label\n\tvar cellposx,cellposy\t\t!position of top left cell within block\n\tvar pitchx,pitchy\t\t\t!1st cell is at for edit boxes, how many pixels on left are for label\n\tvar blockstyle\t\t\t\t!style record for blocks\n\tvar name\t\t\t\t\t!name for debugging\n\tvar dir\t\t\t\t\t\t!'H' or 'V' for stepping direction\n\nend\n\nvar blocklist::=()\nvar nblocks=0\nvar\tcurrblock =nil\t\t\t\t!current blockrec\nvar\tcurrgroup =nil\t\t\t\t!rwindow corresponding to currblock\nvar\tcurrpopup =nil\t\t\t\t!rwindow for menu to contain current set of blocks\nvar cellx, celly\t\t\t\t!current cell within current block\nvar slposx,slposy,sldir\t\t\t!set by smcreate in case sl-functions are used\n\n!proc showblockinfo(block)=\n!println \"Block:      \",(block.name.isdef|block.name|\"\")\n!println \"Pos:        \",block.posx,block.posy\n!println \"Dim:        \",block.dimx,block.dimy\n!println \"CellDim:    \",block.celldimx,block.celldimy\n!println \"Gap:        \",block.gapx,block.gapy\n!println \"Cells:      \",block.cellsx,block.cellsy\n!println \"Gaps:       \",block.gapx,block.gapy\n!println \"Margins:    \",block.marginx,block.marginy\n!println \"Labelwidth: \",block.labelwidth\n!println \"Cellpos:    \",block.cellposx,block.cellposy\n!println \"Pitch:      \",block.pitchx,block.pitchy\n!println \"Dir:        \",block.dir\n!println\n!end\n\nexport proc sminit=\n\tblocklist::=()\n\tnblocks:=0\nend\n\nexport func smdefblock(?dim,cells=1,style=\"\",gap=0,labeldim=\"\",margin=0,dir='V')=\n!define a matrix of cells, all the same size, to be used as controls\n!dim\tis a the size of each cell, as pixel dims, or as a sample string\n!cells\tis a the hoz and vert cell count. Or it can be an int for vert column only\n!gap\tis the inter-cell gap, specified in pixels. Default is to use chx or chy.\n!\t\tgap can be (x,y), or just n for the same gap in hoz and vert\n!style\tCurrently, a string containing various styles and options. Will be\n!\tcompatible with old uses of these functions. Or can be replaced with a dict\n!label\tWhen specified, is a sample string givibg the length of the label on the left\n!\t\tof edit boxes; can also be a pixel width\n!return handle to block\n!also add block to export blocklist\n\n\tblock:=new(blockrec,0)\n\tblock.dir:=dir\n!block.dir:='H'\n\n\tif dim.isstring then\n\t\tblock.celldimx:=gxtextwidth(labelfont,dim)+smx*2\n\t\tblock.celldimy:=chy+smy*2\n\telse\n\t\t(block.celldimx,block.celldimy):=dim\n\tfi\n\n\tif cells.isint then\n\t\tblock.cellsx:=1\n\t\tblock.cellsy:=cells\n\telse\n\t\t(block.cellsx,block.cellsy):=cells\n\tfi\n\n\tif gap.isint then\n\t\tblock.gapx:=gap\n\t\tblock.gapy:=gap\n\telse\n\t\t(block.gapx,block.gapy):=gap\n\tfi\n\n\tif margin.isint then\n\t\tblock.marginx:=margin\n\t\tblock.marginy:=margin\n\telse\n\t\t(block.marginx,block.marginy):=margin\n\tfi\n\n\tif labeldim then\n\t\tif labeldim.isstring then\n\t\t\tblock.labelwidth:=gxtextwidth(labelfont,labeldim)+smx*2\n\t\telse\n\t\t\tblock.labelwidth:=labeldim\n\t\tfi\n\t\tblock.celldimx+:=block.labelwidth\n\tfi\n\n\tblock.blockstyle:=readstylestr(style)\n\n!CPL \"BLOCKSTYLE\",STYLE,BLOCK.BLOCKSTYLE\n\n!now work out overall size of the block, and the pitch between cells\n!this needs to take account of the frame size of each cell, which depends on\n!its border style\n!block position is done at a higher level using smorder\n\n\tbdx:=bdy:=1\t\t\t\t!use border widths of 0 for now (and assume same all round)\n\n\tblock.pitchx:=block.celldimx+bdx*2+block.gapx\t\t!hoz pitch\n\tblock.pitchy:=block.celldimy+bdy*2+block.gapy\t\t!vert\n\n!CPL \"PITCHY\",BLOCK.PITCHY,=BDY,=BLOCK.GAPY\n!CPL \"MARGINY\",BLOCK.MARGINY\n\n\tblock.cellposx:=block.marginx+bdx\t\t\t\t\t!position of client area of 1st cell\n\tblock.cellposy:=block.marginy+bdy\n\n\tblock.dimx:=block.pitchx*block.cellsx-block.gapx+block.marginx*2\n\tblock.dimy:=block.pitchy*block.cellsy-block.gapy+block.marginy*2\n\n\tblocklist[++nblocks]:=block\n\n\treturn block\nend\n\nexport func smmenusize(margin=chy)=\n!work out overall bounding box for all blocks, and relocate blocks (or set their\n!pos values) so that each is positioned within to the bounding box rectangle\n!return (dimx,dimy)\n\n!get bounding box in (x1,y1), (x2,y2)\n\tfor i,block in blocklist do\n\t\tif i=1 then\t\t\t\t!first block\n\t\t\tx1:=block.posx\n\t\t\ty1:=block.posy\n\t\t\tx2:=x1+block.dimx-1\n\t\t\ty2:=y1+block.dimy-1\n\t\telse\n\t\t\tx1 min:=block.posx\n\t\t\ty1 min:=block.posy\n\t\t\tx2 max:=block.posx+block.dimx-1\n\t\t\ty2 max:=block.posy+block.dimy-1\n\t\tfi\n\tod\n\n!now, need to relocate each block so they stay at the same position relative to\n!each other, but are positioned within the client area of an owner window\n!this effectively relocates (x1,y1) to (0,0), so the offset to be applied to\n!each block is -(x1,y1), plus (margin,margin)\n\n\tfor block in blocklist do\n\t\tblock.posx+:=margin-x1\n\t\tblock.posy+:=margin-y1\n\tod\n\n!return (x1-margin,y1-margin,x2-y1+margin*2+1,y2-y1+margin*2+1)\n\treturn (x2-x1+margin*2+1,y2-y1+margin*2+1)\nend\n\nexport proc smorder(blocks,dir='D')=\n!take a blocks, and arrange all in a line, relative to the first\n!dir is one of \"U\", \"D\", \"L\", \"R\" (or can be char codes or in lower case)\n!some block elements can be an integer specifing a gap between the blocks.\n!the gap is specified in pixels. The default gap is chx for hoz and chy for vertical\n!(***I THINK that the gap override is only between two blocks, so needs the reset to\n!default after. That mean also that the first list item must be a block***)\n\n\tif dir.isstring then\n\t\tdir:=asc(convuc(dir))\t\t\t!\"r\",\"R\" or 'R' possible, but not 'r'\n\tfi\n\n\tbdx:=bdy:=1\t\t\t\t\t\t!border widths for the blocks\n\n\tdx:=chx+bdx\n\tdy:=chy+bdy\n\tfirstblock:=1\n\n\tfor block in blocks do\n\t\tif block.isint then\t\t\t!is a gap\n\t\t\tdx:=block+bdx*2\n\t\t\tdy:=block+bdy*2\n\t\t\tnextloop\n\t\tfi\n\t\tif firstblock then\n\t\t\tlastblock:=block\n\t\t\tfirstblock:=0\n\t\t\tnextloop\n\t\tfi\n\t\tcase dir\n\t\twhen 'D' then\t\t\t!add below\n\t\t\tblock.posx:=lastblock.posx\n\t\t\tblock.posy:=lastblock.posy+lastblock.dimy+dy\n\t\twhen 'R' then\n\t\t\tblock.posx:=lastblock.posx+lastblock.dimx+dx\n\t\t\tblock.posy:=lastblock.posy\n\t\twhen 'U' then\t\t\t!add above\n\t\t\tblock.posx:=lastblock.posx\n\t\t\tblock.posy:=lastblock.posy-block.dimy-dy\n\t\twhen 'L' then\n\t\t\tblock.posx:=lastblock.posx-block.dimx-dx\n\t\t\tblock.posy:=lastblock.posy\n\t\tesac\n\t\tlastblock:=block\n\tod\nend\n\nproc showtestmenu(dim)=\n\twapplic:=gxcreatewindow(dim:dim,caption:\"test\")\n\n\tfor block in blocklist do\n\t\tgxbutton(pos:(block.posx,block.posy),dim:(block.dimx,block.dimy),caption:block.name,\n\t\towner:wapplic,style:[ss_border:bs_simplew])\n\tod\n\n\teventloop()\nend\n\nexport func smcreate(caption=\"\",?dim,?pos)=\n!create a pop-up menu window\n!dim ix (x,y) client area size in pixels\n!?pos is optional position, but can also existing button, then menu is placed nearby\n!Normally used after after series of smdefblock etc calls to setup a menu layout\n!Dim usually is a call to smmenusize which exactly contains the blocks\n!return handle to window\n\n\tif dim.isvoid then dim:=smmenusize() fi\n\n\tw:=gxcreatewindow(caption:caption, dim:dim, options:[wf_minmax:0],pos:pos)\n!\tw:=gxcreatewindow(caption:caption, dim:dim)\n\tw.windclass:=popup_class\n\tcurrpopup:=w\n\tsetforegroundwindow(w.gdi.hwnd)\n\n\tslposx:=chx\n\tslposy:=chy\n\tsldir:=(dim[1]>dim[2]|'H'|'V')\n\n\twpopup:=w\n\n\toldfocus:=wfocus\n\tif wfocus then\n\t\tgxkillfocus()\n\tfi\n\n\tpopuplist[++npopups]:=w\n\tfocuslist[npopups]:=oldfocus\t\t!of underlying window\n\n\treturn w\nend\n\nexport func smblock(block,border=0)=\n!set block as the current block for subsequent \n!unlike old versions of the library, an actual window is created for the block,\n!and a handle to that is returned. That is a child group control.\n\n\twblock:=gxpanel(pos:(block.posx,block.posy),dim:(block.dimx,block.dimy),\n\t\towner:currpopup, style:[ss_border:border])\n\tcurrblock:=block\n\tcurrgroup:=wblock\n\tcellx:=celly:=1\n\n\treturn wblock\nend\n\n!export func smpanel=\n!!set block as the current block for subsequent \n!!unlike old versions of the library, an actual window is created for the block,\n!!and a handle to that is returned. That is a child group control.\n!\n!\treturn gxpanel(pos:getsmpos(),dim:getsmdim(),\n!\t\towner:currgroup, style:[ss_border:border])\n!end\n!\nexport proc smclose=\n!NOTE: for nested menus, ie. invoking another popup menu while one is still\n!on the screen, requires:\n! * blocklist needs to be moved elsewhere, eg. to data field of current popup rwindow\n! * Then smclose can close blocks in that list, not the export one\n! * Global blocklist can be reused\n! * It might require that the owner window is disabled from being clicked on, but\n!   that will be awkward to do without disabling each control within it. Or perhaps\n!   this is a check that can be done within process_wmmessage, to see if click-window\n!   has an owner that has been disabled.\n!    Disabling is one with smcreate, and re-enableing here in smclose\n\n\tgxclose(wpopup)\n!\tfor block in blocklist do\n!\t\tblock:=0\n!!\t\tfreehandle(block)\n!\tod\n\n\toldfocus:=focuslist[npopups]\n\t--npopups\n\tif npopups then\n\t\twpopup:=popuplist[npopups]\n\t\tif oldfocus then\n\t\t\tgxfocus(oldfocus)\n\t\tfi\n\telse\n\t\twpopup:=nil\n\tfi\nend\n\n!export proc smoff=\n!\tsmclose()\n!end\n\nproc nextcell=\n!step cellx,y to next cell within current block\n\tif currblock.dir='V' then\n\t\t++celly\n\t\tif celly>currblock.cellsy then\n\t\t\tcelly:=1\n\t\t\t++cellx\n\t\tfi\n\telse\t\t\t\t\t!hoz\n\t\t++cellx\n\t\tif cellx>currblock.cellsx then\n\t\t\tcellx:=1\n\t\t\t++celly\n\t\tfi\n\tfi\nend\n\nfunc getsmpos=\n\treturn ((cellx-1)*currblock.pitchx+currblock.cellposx,\n        (celly-1)*currblock.pitchy+currblock.cellposy)\nend\n\nfunc getsmdim=\n\treturn (currblock.celldimx,currblock.celldimy)\nend\n\nfunc getslpos=\n\treturn (slposx,slposy)\nend\n\nfunc getsldim(s)=\n\tif s.isint then\n\t\treturn (s*chx+chx*2,chy+smy*2)\n\telse\n\t\treturn (gxtextwidth(labelfont,s)+smx*2,chy+smy*2)\n\tfi\nend\n\nproc nextslcell(dim)=\n\tif sldir='H' then\n\t\tslposx+:=dim[1]+chx\n\telse\n\t\tslposy+:=dim[2]+chy\n\tfi\nend\n\nexport func smcmd(caption,id=0,enable=1)=\n!create button within current block\n!caption can also be an integer code:\n! 0\t\tskip this cell (just leave a blank space)\n! -1\tinsert divider line\n!when id is omitted or is zero, then creates a static label instead\n\n\tif caption.isint then\n\t\tcase caption\n\t\twhen 0 then\n\t\twhen -1 then\n\t\tesac\n\t\tnextcell()\n\t\treturn nil\n\tfi\n\n\tif id=0 then\n\t\treturn smlabel(caption)\n\tfi\n\n\tss:=[ss_border:bs_ownpanel]\n\n\tw:=gxbutton(pos:getsmpos(), dim:getsmdim(), caption:caption, id:id,\n\t\towner:currgroup, style:ss, enable:enable)\n\tnextcell()\n\treturn w\nend\n\nexport func smhozscrollbar(id=0)=\n\tw:=gxhozscrollbar(owner:currgroup, pos:getsmpos(), dim:getsmdim(), id:id,\n\tstyle:[ss_border:bs_simplew])\n\n\tnextcell()\n\treturn w\nend\n\nexport func smvertscrollbar(id=0)=\n\tw:=gxvertscrollbar(owner:currgroup, pos:getsmpos(), dim:getsmdim(), id:id,\n\tstyle:[ss_border:bs_simplew])\n\n\tnextcell()\n\treturn w\nend\n\nexport func smlabel(caption)=\n\tpos:=getsmpos()\n\tdim:=(currblock.celldimx,currblock.celldimy)\n\n\tw:=gxlabel(pos:pos,dim:dim,caption:caption,owner:currgroup)\n\tnextcell()\n\treturn w\nend\n\nexport func smarrow(dir,id)=\n\tpos:=getsmpos()\n\tdim:=(currblock.celldimx,currblock.celldimy)\n\n\tw:=gxarrow(pos:pos,dim:dim,dir:dir,owner:currgroup)\n\tnextcell()\n\treturn w\nend\n\nexport func smtoggle(caption,linkvar,id=0,enable=1)=\n!create toggle control within current block\n\n\tw:=gxtoggle(pos:getsmpos(), dim:getsmdim(), caption:caption,\n\t\t\t\tlinkvar:linkvar,id:id,owner:currgroup, enable:enable,\n\t\t\t\tstyle:currblock.blockstyle)\n\n\tnextcell()\n\treturn w\nend\n\nexport func smselect(caption,linkvar,onvalue=1,id=0,enable=1)=\n!create toggle control within current block\n\n\tw:=gxselect(pos:getsmpos(), dim:getsmdim(), caption:caption,\n\t\t\tlinkvar:linkvar,onvalue:onvalue,\n\t\t\tid:id,owner:currgroup, enable:enable, style:currblock.blockstyle)\n\n\tnextcell()\n\treturn w\nend\n\nexport func smeditbox(?caption,linkvar,id=0,enable=1,?style)=\n!create toggle control within current block\n!CPL \"SMED\",CURRBLOCK\n\tpos:=getsmpos()\n\tdim:=getsmdim()\n\n!CPL =DIM\n\n\tif caption.isdef then\n\t\tgxlabel(pos:pos, dim:(currblock.labelwidth-chx,dim[2]), caption:caption,\n\t\t owner:currgroup)\n\t\tpos[1]+:=currblock.labelwidth\n\t\tdim[1]-:=currblock.labelwidth\n\tfi\n\n\tw:=gxeditbox(pos:pos, dim:dim,\n\t\tlinkvar:linkvar,\n\t\tid:id,owner:currgroup, enable:enable, style:getstyle(style))\n!\tgxdrawmode(w,dm_screenmemory)\n\n\tnextcell()\n\treturn w\nend\n\nexport func smlistbox(linkvar,id=0,enable=1)=\n\n!CPL =CURRBLOCK.CELLSY,\"(ROWS)\"\n!CPL =CURRBLOCK.PITCHY,\"(PITCH)\"\n!CPL =CURRBLOCK.CELLDIMY,\"(CELLDIMY)\"\n!CPL =CURRBLOCK.CELLPOSY,\"(OFFSET)\"\n!CPL =CURRBLOCK.GAPY,\"(GAPY)\"\n!CPL =CURRBLOCK.DIMY,\"(DIMY)\"\n!CPL \"LBDIMY=\",CURRBLOCK.DIMY-CURRBLOCK.MARGINY*2\n!CPL =CURRBLOCK.MARGINY\n\n!$SETDEBUG(1)\n\tw:=gxlistbox(pos:getsmpos(),\n\t\tdim:(currblock.dimx-currblock.marginx*2,currblock.dimy-currblock.marginy*2),\n\t\tlinkvar:linkvar,\n\t\tstyle:[ss_vscroll:1,\n\t\tss_border:bs_simplew],\n\t\trows:currblock.cellsy,\n\t\tpitch:currblock.pitchy,\n\t!\toffset:currblock.cellposy,\n\t\tid:id,owner:currgroup)\n!CPL \"SMLB2\"\n\treturn w\nend\n\nexport func sllabel(caption)=\n\tpos:=getslpos()\n\tdim:=getsldim(caption)\n\n\tw:=gxlabel(pos:pos,dim:dim,caption:caption,owner:currpopup)\n\tnextslcell(dim)\n\treturn w\nend\n\nexport func slcmd(caption,id=201,enable=1)=\n!create button within current block\n!caption can also be an integer code:\n! 0\t\tskip this cell (just leave a blank space)\n! -1\tinsert divider line\n!when id is omitted or is zero, then creates a static label instead\n\n\tpos:=getslpos()\n\tdim:=getsldim(caption)\n\tss:=[ss_border:bs_simplew]\n\n\tw:=gxbutton(pos:pos,dim:dim,caption:caption,id:id,owner:currpopup, \n\t\tstyle:ss)\n\tnextslcell(dim)\n\treturn w\nend\n\nexport func sleditbox(linkvar,width=30,id=0,enable=1)=\n\tpos:=getslpos()\n\tdim:=getsldim(width)\n\n\tw:=gxeditbox(pos:pos, dim:dim,\n\t\tlinkvar:linkvar,\n\t\tid:id,owner:currpopup)\n\n\tnextslcell(dim)\n\treturn w\nend\n\nexport func smok(caption=\"OK\",enable=1)=\n\treturn smcmd(caption,mm_ok,enable)\nend\n\nexport func smcancel(caption=\"Cancel\",enable=1)=\n\treturn smcmd(caption,mm_cancel,enable)\nend\n\nexport func slok(caption=\"OK\")=\n\treturn slcmd(caption,mm_ok)\nend\n\nexport func slcancel(caption=\"Cancel\")=\n\treturn slcmd(caption,mm_cancel)\nend\n\nexport proc smokcancel=\n\tsmok()\n\tsmcancel()\nend\n\nexport proc slinit(w)=\n\tcurrpopup:=w\n\tslposx:=chx\n\tslposy:=0\n\tsldir:=(w.dimx>w.dimy|'H'|'V')\nend\n\nexport proc settab(?a,?b,?c,?d,?e,?f,?g,?h,?i)=\n\tstatic var oldtabs\n\n\tif not a.defined then\n\t\tgxtabstops(oldtabs)\n\t\treturn\n\tfi\n\n\toldtabs:=gxtabstops()\n\tparams::=allparams()\n\n!\tgxtabstops(allparams())\n\tgxtabstops(param)\nend\n\nexport proc smupdatevalue(w)=\n\tgxupdate(w)\nend\n\nexport proc setfocus(w,?b)=\n\tgxfocus(w)\nend\n\nexport proc askmenu(a)=\n\tmessage:=gxaskmess(1)\n\tmessw:=currmess.wind\nend\n\nfunc readstylestr(s)=\n!read cell style string s, and return option dict\n\td:=new(dict)\n\tif s=\"\" then return d fi\n\n\ts:=convuc(s)\n\n\tforeach c in s do\n\t\tcase c\n\t\twhen 'X' then d{ss_marktype}:=check_mark\n\t\twhen 'M' then d{ss_marktype}:=radio_mark\n\t\twhen 'I' then d{ss_marktype}:=invert_mark\n\t\twhen 'R' then d{ss_returnmess}:=1\n\t\twhen 'N' then d{ss_noupdate}:=1\n\t\tesac\n\tod\n\treturn d\nend\n\nfunc getstyle(style)=\n\tif style.defined then\n\t\treturn readstylestr(style)\n\telse\n\t\treturn currblock.blockstyle\n\tfi\nend\n"
    data     i64       "\nexport type wt_word\t\t= u16\nexport type wt_bool\t\t= u32\nexport type wt_dword\t= u32\nexport type wt_wchar\t= u16\nexport type wt_char\t\t= byte\nexport type wt_ichar\t= stringz\nexport type wt_string\t= stringz\nexport type wt_ptr\t\t= ref byte\nexport type wt_wndproc\t= u64\n\nexport type wt_handle\t= ref void\nexport type wt_int\t\t= i32\nexport type wt_uint\t\t= u32\nexport type wt_long\t\t= i32\nexport type wt_wparam\t= u64\nexport type wt_lparam\t= u64\nexport type wt_size\t\t= u64\n\nexport type wt_wparam32\t= u32\nexport type wt_lparam32\t= u32\nexport type wt_handle32\t= u32\nexport type wt_ptr32\t= u32\nexport type wt_string32\t= u32\nexport type wt_wndproc32\t= u32\n\nexport type wt_wparam64\t= u64\nexport type wt_lparam64\t= u64\nexport type wt_handle64\t= u64\nexport type wt_ptr64\t= u64\nexport type wt_string64\t= u64\nexport type wt_wndproc64= u64\n\nexport type wt_result\t= u64\nexport type wt_intptr\t= u64\nexport type wt_coord\t= u32\n\nexport type ws_spoint= struct\n\ti16 x,y\nend\n\nexport type ws_srect=struct\n\ti16 leftx,top, rightx,bottom\nend\n\nexport type ws_charinfo=struct\n\tunion\n\t\twt_word\tunicodechar\n\t\twt_char\tasciichar\n\tend union\n\twt_word\t\tattributes\nend\n\nexport type ws_palette16=[0..15]i32\n\nexport type ws_console=struct\n\tws_spoint size,pos\n\twt_word attributes\n\tws_srect window\n\tws_spoint maxwindowsize\nend\n\nexport type ws_consoleex=struct\n\ti32 recsize\n\tws_spoint size,pos\n\twt_word attributes\n\tws_srect window\n\tws_spoint maxwindowsize\n\twt_word wpopup\n\ti32 fullscreen\n\tws_palette16 palette\nend\n\nexport type ws_keyevent = struct $caligned\n\twt_word\teventtype\n\t\twt_bool\tkeydown\n\t\twt_word\trepeatcount\n\t\twt_word\tvirtualkeycode\n\t\twt_word\tvirtualscancode\n\t\tunion\n\t\t\twt_word unicodechar\n\t\t\twt_char asciichar\n\t\tend\n\t\twt_dword controlkeystate\nend\n\nexport type ws_cursor=struct\n\ti32 size,visible\nend\n\nexport var hconsole, hconsolein\n\nexport const stdoutputhandle=0xffff_fff5\nexport const stdinputhandle=0xfffffff6\nexport const stderrorputhandle=0xfffffff4\nexport const invalidhandlevalue=0xffffffff\n\nexport const maxpathlen=260\n\ntype spath=stringz*maxpathlen\ntype sshort=stringz*14\n!\nexport type ws_filetime=struct\n\ti32 ftlow\n\ti32 fthigh\nend\n\nexport type ws_finddata=struct\n\ti32\t\tfileattributes\n\tws_filetime\tcreationtime\n\tws_filetime\tlastaccesstime\n\tws_filetime\tlastwritetime\n\ti32\t\tfilesizehigh\n\ti32\t\tfilesizelow\n\ti32\t\treserved0\n\ti32\t\treserved1\n\tspath\t\tfilename\n\tsshort\t\tshortfilename\nend\n\nexport type ws_systemtime = struct\n\tu16\tyear\n\tu16\tmonth\n\tu16\tdayofweek\n\tu16\tday\n\tu16\thour\n\tu16\tminute\n\tu16\tsecond\n\tu16\tmilliseconds\nend\n\nexport type ws_msg64 = struct $caligned\n\tref void\thwnd\n\ti32\t\tmessage\n\ti64\t\twparam\n\ti64\t\tlparam\n\ti32\t\ttime\n\ti32\t\tptx\n\ti32\t\tpty\nend\n\nexport type ws_point = struct\n\ti32 x, y\nend\n\nexport type ws_rect=struct\t\t!rect record occupying 16 bytes\n\tunion\n\t\tstruct\n\t\t\ti32 leftx,top, rightx,bottom\n\t\tend\n\t\tstruct\n\t\t\tunion i32 x,x1 end\n\t\t\tunion i32 y,y1 end\n\t\t\ti32 x2,y2\n\t\tend\n\tend\nend\n\nexport type ws_logbrush = struct\n\ti32 lbstyle\n\ti32 lbcolour\n\ti32 lbhatch\nend\n\nexport type ws_textmetrics = struct\n\ti32\theight\n\ti32\tascent\n\ti32\tdescent\n\ti32\ti32ernalleading\n\ti32\texternalleading\n\ti32\tavecharwidth\n\ti32\tmaxcharwidth\n\ti32\tweight\n\ti32\toverhang\n\ti32\tdigitizedaspectx\n\ti32\tdigitizedaspecty\n\tbyte\tfirstchar\n\tbyte\tlastchar\n\tbyte\tdefaultchar\n\tbyte\tbreakchar\n\tbyte\titalic\n\tbyte\tunderlined\n\tbyte\tstruckout\n\tbyte\tpitchandfamily\n\tbyte\tcharset\nend\n!=========================================\n\nexport type ws_bitmapv5header = struct\n\ti32\tsize\n\ti32\twidth\n\ti32\theight\n\tu16\tplanes\n\tu16\tbitcount\n\ti32\tcompression\n\ti32\tsizeimage\n\ti32\txpelspermeter\n\ti32\typelspermeter\n\ti32\tclrused\n\ti32\tclrimportant\n\ti32\tredmask\n\ti32\tgreenmask\n\ti32\tbluemask\n\ti32\talphamask\n\ti32\tcstype\n\t[1..9]i32 endpoints\n\ti32\tredgamma\n\ti32\tgreengamma\n\ti32\tbluegamma\n\ti32\tintent\n\ti32\tprofiledata\n\ti32\tprofilesize\n\ti32\treserved\nend\n\nexport type ws_bitmapfileheader = struct\n\twt_word\t\ttypex\n\twt_dword\tsize\n\twt_word\t\tres1, res2\n\twt_dword\toffbits\nend\n\nexport type ws_bitmapinfoheader = struct\n\twt_dword \tsize\n\twt_long\t\twidth\n\twt_long\t\theight\n\twt_word\t\tplanes\n\twt_word\t\tbitcount\n\twt_dword\tcompression\n\twt_dword\tsizeimage\n\twt_long\t\txpelspermetre\n\twt_long\t\typelspermetre\n\twt_dword\tclrused\n\twt_dword\tclrimportant\nend\n\nexport type ws_paintstruct = struct\n!\ti64\t\thdc\n\ti64\t\thdc\n\ti32\t\terase\n\tws_rect\t\tpaintrect\n\ti32\t\trestore\n\ti32\t\tincupdate\n\t[32]byte\trgbreserved\nend\n\n!32-BIT VERSION\nexport type ws_openfilename32 = struct\n\twt_dword\t\tstructsize\n\twt_handle32\t\towner\n\twt_handle32\t\tinstance\n\twt_string32\t\tfilter\n\twt_string32\t\tcustomfilter\n\twt_dword\t\tmaxcustfilter\n\twt_dword\t\tfilterindex\n\twt_string32\t\tfile\n\twt_dword\t\tmaxfile\n\twt_string32\t\tfiletitle\n\twt_dword\t\tmaxfiletitle\n\twt_string32\t\tinitialdir\n\twt_string32\t\ttitle\n\twt_dword\t\tflags\n\twt_word\t\t\tfileoffset\n\twt_word\t\t\tfileextension\n\twt_string32\t\tdefext\n\twt_lparam32\t\tcustdata\n\twt_wndproc32\thook\n\twt_string32\t\ttemplatename\n\twt_ptr32\t\treserved1\n\twt_dword\t\treserved2\n\twt_dword\t\tflagsex\nend\n\n!64-BIT VERSION\nexport type ws_openfilename64 = struct $caligned\n\twt_dword\t\tstructsize\n\twt_handle64\t\towner\n\twt_handle64\t\tinstance\n\twt_string64\t\tfilter\n\twt_string64\t\tcustomfilter\n\twt_dword\t\tmaxcustfilter\n\twt_dword\t\tfilterindex\n\twt_string64\t\tfile\n\twt_dword\t\tmaxfile\n\twt_string64\t\tfiletitle\n\twt_dword\t\tmaxfiletitle\n\twt_string64\t\tinitialdir\n\twt_string64\t\ttitle\n\twt_dword\t\tflags\n\twt_word\t\t\tfileoffset\n\twt_word\t\t\tfileextension\n\twt_string64\t\tdefext\n\twt_lparam64\t\tcustdata\n\twt_wndproc64\thook\n\twt_string64\t\ttemplatename\n\twt_ptr64\t\treserved1\n\twt_dword\t\treserved2\n\twt_dword\t\tflagsex\nend\n\nimportdll kernel32=\n\tfunc\t\"GetLastError\"\t\t\t\t\t:wt_dword\n\tfunc\t\"GetStdHandle\"\t\t\t\t\t(wt_dword)wt_handle\n\tfunc\t\"WriteConsoleA\" as writeconsole\t\t\t\t(wt_handle,wt_string,wt_dword,wt_ptr,wt_ptr)wt_bool\n\tfunc\t\"SetConsoleCursorPosition\"\t\t(wt_handle,wt_coord)wt_bool\n\tfunc\t\"GetConsoleScreenBufferInfo\"\t(wt_handle,wt_ptr)wt_bool\n\tfunc\t\"SetConsoleMode\"\t\t\t\t(wt_handle,wt_dword)wt_bool\n\tfunc\t\"WriteConsoleOutputA\" as writeconsoleoutput\t\t\t(wt_handle,wt_ptr,wt_coord,wt_coord,wt_ptr)wt_bool\n\n\tfunc\t\"GetConsoleScreenBufferInfoEx\"\t(wt_handle,wt_ptr)wt_bool\n\tfunc\t\"SetConsoleScreenBufferInfoEx\"\t(wt_handle,wt_ptr)wt_bool\n\tfunc\t\"GetConsoleWindow\"\t\t\t\t:wt_handle\n\n\tfunc\t\"SetConsoleTextAttribute\"\t\t(wt_handle,wt_word)wt_bool\n\tfunc\t\"SetConsoleTitleA\" as setconsoletitle\t\t\t\t(wt_string)wt_bool\n\tfunc\t\"ReadConsoleInputA\" as readconsoleinput\t\t\t(wt_handle,wt_ptr,wt_dword,wt_ptr)wt_bool\n\tfunc\t\"PeekConsoleInputA\"\t\t\t(wt_handle,wt_ptr,wt_dword,wt_ptr)wt_bool\n\tfunc\t\"FlushConsoleInputBuffer\"\t\t(wt_handle)wt_bool\n\tfunc\t\"SetConsoleWindowInfo\"\t\t\t(wt_handle,wt_bool,wt_ptr)wt_bool\n\tfunc\t\"SetConsoleScreenBufferSize\"\t(wt_handle,wt_coord)wt_bool\n\tfunc\t\"GetConsoleCursorInfo\"\t\t\t(wt_handle,wt_ptr)wt_bool\n\tfunc\t\"SetConsoleCursorInfo\"\t\t\t(wt_handle,wt_ptr)wt_bool\n\tfunc\t\"GetNumberOfConsoleInputEvents\"(wt_handle,wt_ptr)wt_bool\n\n\tfunc\t\"FindFirstFileA\" as findfirstfile\t\t(stringz,ref i32)i32\n\tfunc\t\"FindNextFileA\"  as findnextfile\t\t\t(i32,ref i32)i32\n\tfunc\t\"FindClose\"\t\t\t\t\t(i32)i32\n\tfunc\t\"SetCurrentDirectoryA\" as setcurrentdirectory\t(stringz)i32\n\tfunc\t\"GetCurrentDirectoryA\" as getcurrentdirectory\t(i32,i32)i32\n\tfunc\t\"CreateDirectoryA\" as createdirectory\t\t(stringz,i32)i32\n\tfunc\t\"GetFileAttributesA\"\t\t\t(stringz)i32\n\tfunc\t\"GetModuleHandleA\" as getmodulehandle\t\t(wt_string)wt_handle\n\tfunc\t\"GetTickCount\"\t\t\t\t\t\t\t\t:wt_dword\n\tfunc\t\"GlobalAlloc\"\t\t\t\t\t\t\t\t\t(wt_uint,wt_size)wt_handle\n\tfunc\t\"GlobalLock\"\t\t\t\t\t\t\t\t\t(wt_handle)wt_ptr\n\tfunc\t\"GlobalUnlock\"\t\t\t\t\t\t\t\t(wt_handle)wt_bool\n\tfunc\t\"GlobalSize\"\t\t\t\t\t\t\t\t\t(wt_handle)wt_size\n\n\tfunc\t\"GetSystemTime\"(ref byte)i32\n\tfunc\t\"Beep\"\t\t\t\t\t\t\t(wt_dword, wt_dword)wt_bool\n\tfunc\t\"SetConsoleCP\"\t\t\t\t\t\t\t\t(wt_uint)wt_bool\n\tfunc\t\"GetCommandLineA\" : stringz\nend\n\nimportdll user32=\n\tfunc\t\"CreateWindowExA\" as createwindowex\t\t(wt_dword, wt_string, wt_string, wt_dword, wt_int,wt_int,wt_int,wt_int,\n\t\t\t\t\t\t\t\t\t\t\t\t\t wt_handle, wt_handle, wt_handle, wt_ptr)wt_handle\n\n\tfunc \"GetMessageA\" as getmessage\t\t\t\t(wt_ptr, wt_handle, wt_uint, wt_uint)wt_bool\n\tfunc \"TranslateMessage\"\t\t\t\t\t\t\t(wt_ptr)wt_bool\n\tfunc \"DispatchMessageA\" as dispatchmessage\t\t(wt_ptr)wt_result\n\tfunc \"SetTimer\"\t\t\t\t\t\t\t\t\t(wt_handle,wt_intptr,wt_uint,wt_ptr)wt_intptr\n\tfunc \"KillTimer\"\t\t\t\t\t\t\t\t(wt_handle,wt_intptr)wt_bool\n\tfunc \"SystemParametersInfoA\"\t\t\t\t\t(wt_uint,wt_uint,wt_ptr,wt_uint)wt_bool\n\tfunc \"GetSystemMetrics\"\t\t\t\t\t\t\t(wt_int)wt_int\n!\tfunc \"CreateMenu\"\t\t\t\t\t\t\t\t:int\n\tfunc \"AppendMenuA\" as appendmenu\t\t\t\t(wt_handle,wt_uint,wt_intptr,wt_string)wt_bool\n\tfunc \"GetDC\"\t\t\t\t\t\t\t\t\t(wt_handle)wt_handle\n\tfunc \"ReleaseDC\"\t\t\t\t\t\t\t\t(wt_handle,wt_handle)wt_int\n\n\tfunc \"SendMessageA\" as sendmessage\t\t\t\t(wt_handle,wt_uint,wt_wparam,wt_lparam)wt_result\n\tfunc \"PostMessageA\" as postmessage\t\t\t\t(wt_handle,wt_uint,wt_wparam,wt_lparam)wt_bool\n\tfunc \"PeekMessageA\" as peekmessage\t\t\t\t(wt_ptr,wt_handle,wt_uint,wt_uint,wt_uint)wt_bool\n\tfunc \"BeginPaint\"\t\t\t\t\t\t\t\t(wt_handle,wt_ptr)wt_handle\n\tfunc \"EndPaint\"\t\t\t\t\t\t\t\t\t(wt_handle,wt_ptr)wt_bool\n\tproc \"PostQuitMessage\"\t\t\t\t\t\t\t(wt_int)\n\tfunc \"LoadIconA\" as loadicon\t\t\t\t\t(wt_handle,wt_string)wt_handle\n\tfunc \"LoadCursorA\" as loadcursor\t\t\t\t(wt_handle,wt_string)wt_handle\n\tfunc \"SetCursor\"\t\t\t\t\t\t\t\t(wt_handle)wt_handle\n\tfunc \"DrawMenuBar\"\t\t\t\t\t\t\t\t(wt_handle)wt_bool\n\tfunc \"GetSystemMenu\"\t\t\t\t\t\t\t(wt_handle,wt_bool)wt_handle\n\tfunc \"CreateMenu\"\t\t\t\t\t\t\t\t:wt_handle\n\tfunc \"CreatePopupMenu\"\t\t\t\t\t\t\t:wt_handle\n\tfunc \"DestroyMenu\"\t\t\t\t\t\t\t\t(wt_handle)wt_bool\n\tfunc \"CheckMenuItem\"\t\t\t\t\t\t\t(wt_handle,wt_uint,wt_uint)wt_dword\n\tfunc \"EnableMenuItem\"\t\t\t\t\t\t\t(wt_handle,wt_uint,wt_uint)wt_bool\n\tfunc \"GetSubMenu\"\t\t\t\t\t\t\t\t(wt_handle,wt_int)wt_handle\n\tfunc \"GetMenuItemID\"\t\t\t\t\t\t\t(wt_handle,wt_int)wt_uint\n\tfunc \"GetMenuItemCount\"\t\t\t\t\t\t\t(wt_handle)wt_int\n\tfunc \"InsertMenuA\" as insertmenu\t\t\t\t(wt_handle,wt_uint,wt_uint,wt_intptr,wt_string)wt_bool\n\tfunc \"ModifyMenuA\" as modifymenu\t\t\t\t(wt_handle,wt_uint,wt_uint,wt_intptr,wt_string)wt_bool\n\tfunc \"RemoveMenu\"\t\t\t\t\t\t\t\t(wt_handle,wt_uint,wt_uint)wt_bool\n\tfunc \"DeleteMenu\"\t\t\t\t\t\t\t\t(wt_handle,wt_uint,wt_uint)wt_bool\n\n\tfunc \"DestroyWindow\"\t\t\t\t\t\t\t(wt_handle)wt_bool\n\tfunc \"InvalidateRect\"\t\t\t\t\t\t\t(wt_handle,wt_ptr,wt_bool)wt_bool\n\tfunc \"ValidateRect\"\t\t\t\t\t\t\t(wt_handle,wt_ptr)wt_bool\n\tfunc \"ShowWindow\"\t\t\t\t\t\t\t\t(wt_handle,wt_int)wt_bool\n\tfunc \"GetClassLongA\" as getclassint\t\t\t(wt_handle,wt_int)wt_word\n\tfunc \"SetClassLongA\" as setclasslong\t\t\t(wt_handle,wt_int,wt_dword)wt_word\n\tfunc \"SetWindowTextA\" as setwindowtext\t\t\t(wt_handle,wt_string)wt_bool\n\tfunc \"GetWindowTextA\" as getwindowtext\t\t\t(wt_handle,wt_string,wt_int)wt_int\n\tfunc \"GetWindowTextLengthA\" as getwindowtextlength\t(wt_handle)wt_int\n\tfunc \"GetKeyState\"\t\t\t\t\t\t\t\t(wt_int)wt_word\n\n!\tfunc \"GetWindowLongPtrA\" as getwindowlongptr\t(wt_handle,wt_int)i64\n!\tfunc \"SetWindowLongPtrA\" as setwindowlongptr\t(wt_handle,wt_int,wt_int)i64\n\tfunc \"GetWindowLongA\" as getwindowlongptr\t\t(wt_handle,wt_int)i64\n\tfunc \"SetWindowLongA\" as setwindowlongptr\t\t(wt_handle,wt_int,i64)i64\n\n\tfunc \"GetClientRect\"\t\t\t\t\t\t\t(wt_handle,wt_ptr)wt_bool\n\tfunc \"ClientToScreen\"\t\t\t\t\t\t\t(wt_handle,wt_ptr)wt_bool\n\tfunc \"ScreenToClient\"\t\t\t\t\t\t\t(wt_handle,wt_ptr)wt_bool\n\tfunc \"GetWindowRect\"\t\t\t\t\t\t\t(wt_handle,wt_ptr)wt_bool\n\tfunc \"GetSysColor\" as getsyscolour\t\t\t\t(wt_int)wt_dword\n\tfunc \"GetScrollInfo\"\t\t\t\t\t\t\t(wt_handle,wt_int,wt_ptr)wt_bool\n\tfunc \"GetMenu\"\t\t\t\t\t\t\t\t\t(wt_handle)wt_handle\n\tfunc \"SetMenu\"\t\t\t\t\t\t\t\t\t(wt_handle,wt_handle)wt_ptr\n\tfunc \"TrackPopupMenu\"\t\t\t\t\t\t\t(wt_handle,wt_uint,wt_int,wt_int,wt_int,wt_handle,wt_ptr)wt_bool\n\tfunc \"GetMenuState\"\t\t\t\t\t\t\t\t(wt_handle,wt_uint,wt_uint)wt_uint\n\tfunc \"MessageBoxA\" \t\t\t\t\t\t\t\t(wt_handle a=nil,wt_string message, wt_string caption=\"Caption\", wt_uint b=0)wt_int\n\tfunc \"OpenClipboard\"\t\t\t\t\t\t\t(wt_handle)wt_bool\n\tfunc \"CloseClipboard\"\t\t\t\t\t\t\t:wt_bool\n\tfunc \"EmptyClipboard\"\t\t\t\t\t\t\t:wt_bool\n\tfunc \"GetClipboardData\"\t\t\t\t\t\t\t(wt_uint)wt_handle\n\tfunc \"SetClipboardData\"\t\t\t\t\t\t\t(wt_uint,wt_handle)wt_handle\n\tfunc \"MessageBeep\"\t\t\t\t\t\t\t\t(wt_uint x=0)wt_bool\n\tfunc \"SetActiveWindow\"\t\t\t\t\t\t\t(wt_handle)wt_handle\n\tfunc \"SetForegroundWindow\"\t\t\t\t\t\t(wt_handle)wt_bool\nend\n\nimportdll gdi32=\n\tfunc \"Rectangle\"\t\t\t\t\t\t\t\t(wt_handle,wt_int,wt_int,wt_int,wt_int)wt_bool\n\tfunc \"RoundRect\"\t\t\t\t\t\t\t\t(wt_handle,wt_int,wt_int,wt_int,wt_int,wt_int,wt_int)wt_bool\n\tfunc \"Ellipse\"\t\t\t\t\t\t\t\t\t(wt_handle,wt_int,wt_int,wt_int,wt_int)wt_bool\n\tfunc \"Arc\"\t\t\t\t\t\t\t\t\t\t(wt_handle,wt_int,wt_int,wt_int,wt_int,wt_int,wt_int,wt_int,wt_int)wt_bool\n\tfunc \"Chord\"\t\t\t\t\t\t\t\t\t(wt_handle,wt_int,wt_int,wt_int,wt_int,wt_int,wt_int,wt_int,wt_int)wt_bool\n\tfunc \"Pie\"\t\t\t\t\t\t\t\t\t\t(wt_handle,wt_int,wt_int,wt_int,wt_int,wt_int,wt_int,wt_int,wt_int)wt_bool\n\tfunc \"Polygon\"\t\t\t\t\t\t\t\t\t(wt_handle,wt_handle,wt_int)wt_bool\n\tfunc \"TextOutA\" as textout\t\t\t\t\t\t(wt_handle,wt_int,wt_int,wt_string,wt_int)wt_bool\n\tfunc \"TextOutW\" \t\t\t\t\t\t\t\t(wt_handle,wt_int,wt_int,wt_ptr,wt_int)wt_bool\n\tfunc \"GetStockObject\"\t\t\t\t\t\t\t(wt_int)wt_handle\n\tfunc \"SelectObject\"\t\t\t\t\t\t\t\t(wt_handle,wt_handle)wt_handle\n\tfunc \"CreateDCA\" as createdc\t\t\t\t\t(wt_string,wt_string,wt_string,wt_ptr)wt_handle\n\tfunc \"MoveToEx\"\t\t\t\t\t\t\t\t\t(wt_handle a,wt_int b,wt_int c,wt_ptr d=nil)wt_bool\n\tfunc \"CreatePen\"\t\t\t\t\t\t\t\t(wt_int,wt_int,wt_dword)wt_handle\n\tfunc \"CreateSolidBrush\"\t\t\t\t\t\t\t(wt_dword)wt_handle\n\tfunc \"CreateBrushIndirect\"\t\t\t\t\t\t(wt_ptr)wt_handle\n\tfunc \"LineTo\"\t\t\t\t\t\t\t\t\t(wt_handle,wt_int,wt_int)wt_bool\n\tfunc \"GetPixel\"\t\t\t\t\t\t\t\t\t(wt_handle,wt_int,wt_int)wt_dword\n\tfunc \"SetPixel\"\t\t\t\t\t\t\t\t\t(wt_handle,wt_int,wt_int,wt_dword)wt_dword\n\tfunc \"SetGraphicsMode\"\t\t\t\t\t\t\t(wt_handle,wt_int)wt_int\n\tfunc \"CreateFontIndirectA\" as createfontindirect\t(wt_ptr)wt_handle\n\tfunc \"CreateFontA\" as createfont \\\n\t\t\t(wt_int height, wt_int width=0, wt_int escapement=0, wt_int orientation=0, wt_int bold=0,\n\t\t\t wt_dword italic=0, wt_dword underline=0, wt_dword strikeout=0, wt_dword charset=0,\n\t\t\t wt_dword outprec=0, wt_dword clipprec=0, wt_dword quality=0, wt_dword pitch=0, wt_string facename)wt_handle\n\tfunc \"SaveDC\"\t\t\t\t\t\t\t\t\t(wt_handle)wt_int\n\tfunc \"GetTextMetricsA\" as gettextmetrics\t\t(wt_handle,wt_ptr)wt_bool\n\tfunc \"DeleteObject\"\t\t\t\t\t\t\t\t(wt_handle)wt_bool\n\tfunc \"RestoreDC\"\t\t\t\t\t\t\t\t(wt_handle,wt_int)wt_bool\n\tfunc \"GetTextExtentPoint32A\" as gettextextentpoint32\t(wt_handle,wt_string,wt_int,wt_ptr)wt_bool\n\tfunc \"GetObjectA\" as getobject\t\t\t\t\t(wt_handle,wt_int,wt_ptr)wt_int\n\tfunc \"CreatePalette\"\t\t\t\t\t\t\t(wt_ptr)wt_handle\n\tfunc \"GetWindowExtEx\"\t\t\t\t\t\t\t(wt_handle,wt_ptr)wt_bool\n\tfunc \"CreateCompatibleBitmap\"\t\t\t\t\t(wt_handle,wt_int,wt_int)wt_handle\n\tfunc \"SetBitmapBits\"\t\t\t\t\t\t\t(wt_handle,wt_dword,wt_ptr)wt_long\n\tfunc \"SelectPalette\"\t\t\t\t\t\t\t(wt_handle,wt_handle,wt_bool)wt_handle\n\tfunc \"RealizePalette\"\t\t\t\t\t\t\t(wt_handle)wt_uint\n\tfunc \"SetDIBitsToDevice\"\t\t\t\t\t\t(wt_handle,wt_int,wt_int,wt_dword,wt_dword,wt_int,wt_int,wt_uint,wt_uint,wt_ptr,wt_ptr,wt_uint)wt_int\n\tfunc \"StretchDIBits\"\t\t\t\t\t\t\t(wt_handle,wt_int,wt_int,wt_int,wt_int,wt_int,wt_int,wt_int,wt_int,wt_ptr,wt_ptr,wt_uint,wt_dword)wt_int\n\tfunc \"SetStretchBltMode\"\t\t\t\t\t\t(wt_handle,wt_int)wt_int\n\tfunc \"PatBlt\"\t\t\t\t\t\t\t\t\t(wt_handle,wt_int,wt_int,wt_int,wt_int,wt_dword)wt_bool\n\tfunc \"BitBlt\"\t\t\t\t\t\t\t\t\t(wt_handle,wt_int,wt_int,wt_int,wt_int,wt_handle,wt_int,wt_int,wt_dword)wt_bool\n\tfunc \"SetROP2\"\t\t\t\t\t\t\t\t\t(wt_handle,wt_int)wt_int\n\tfunc \"CreateCompatibleDC\"\t\t\t\t\t\t(wt_handle)wt_handle\n\tfunc \"DeleteDC\"\t\t\t\t\t\t\t\t\t(wt_handle)wt_bool\n\tfunc \"CreateBitmap\"\t\t\t\t\t\t\t\t(wt_int,wt_int,wt_uint,wt_uint,wt_ptr)wt_handle\n\tfunc \"CreateBitmapIndirect\"\t\t\t\t\t\t(wt_ptr)wt_handle\n\tfunc \"CreateDIBitmap\"\t\t\t\t\t\t\t(wt_handle,wt_ptr,wt_dword,wt_ptr,wt_ptr,wt_uint)wt_handle\n\tfunc \"CreateDIBSection\"\t\t\t\t\t\t\t(wt_handle,wt_ptr,wt_uint,wt_ptr,wt_handle,wt_dword)wt_handle\n\tfunc \"StretchBlt\"\t\t\t\t\t\t\t\t(wt_handle,wt_int,wt_int, wt_int,wt_int,wt_handle, wt_int,wt_int,wt_int, wt_int,wt_dword)wt_bool\n\tfunc \"PlgBlt\"\t\t\t\t\t\t\t\t\t(wt_handle,wt_ptr,wt_handle, wt_int,wt_int,wt_int,wt_int, wt_handle, wt_int,wt_int)wt_bool\n\tfunc \"SetTextColor\"  as settextcolour\t\t\t(wt_handle,wt_dword)wt_dword\n\tfunc \"SetTextAlign\"\t\t\t\t\t\t\t\t(wt_handle,wt_uint)wt_uint\n\tfunc \"SetTextJustification\"\t\t\t\t\t\t(wt_handle,wt_int,wt_int)wt_bool\n\tfunc \"SetBkColor\"  as setbkcolour\t\t\t\t(wt_handle,wt_dword)wt_dword\n\tfunc \"SetBkMode\"\t\t\t\t\t\t\t\t(wt_handle,wt_int)wt_int\n\tfunc \"GetBkColor\"  as getbkcolour\t\t\t\t(wt_handle)wt_dword\n\tfunc \"GetBkMode\"\t\t\t\t\t\t\t\t(wt_handle)wt_int\n\tfunc \"StartDocA\" as startdoc\t\t\t\t\t(wt_handle,wt_ptr)wt_int\n\tfunc \"StartPage\"\t\t\t\t\t\t\t\t(wt_handle)wt_int\n\tfunc \"EndPage\"\t\t\t\t\t\t\t\t\t(wt_handle)wt_int\n\tfunc \"EndDoc\"\t\t\t\t\t\t\t\t\t(wt_handle)wt_int\n\tfunc \"AbortDoc\"\t\t\t\t\t\t\t\t\t(wt_handle)wt_int\n\tfunc \"GetViewportOrgEx\"\t\t\t\t\t\t\t(wt_handle,wt_ptr)wt_bool\n\tfunc \"GetDIBits\"\t\t\t\t\t\t\t\t(wt_handle,wt_handle,wt_uint,wt_uint,wt_ptr,wt_ptr,wt_uint)wt_int\n\tfunc \"GetDIBColorTable\" as getdibcolourtable\t(wt_handle,wt_uint,wt_uint,wt_ptr)wt_uint\n\tfunc \"SetDIBColorTable\" as setdibcolourtable\t(wt_handle,wt_uint,wt_uint,wt_ptr)wt_uint\n\tfunc \"GetTextAlign\"\t\t\t\t\t\t\t\t(wt_handle)wt_uint\nend\n\nimportdll comdlg32=\n\tfunc \"GetOpenFileNameA\"\t\t\t\t\t\t\t(wt_ptr)wt_bool\n\tfunc \"GetSaveFileNameA\"\t\t\t\t\t\t\t(wt_ptr)wt_bool\nend\n"
    data     i64       "!MODULE winmessages\nmodule sysp\n\nmodule winconsts\nmodule winapi\nmodule wingxlib\nmodule gxmisc\n\nVAR GGDI\n\nexport var debug=0\n\nexport var messhandlertable=9000\t!message by windowclass table of message handlers\nexport var actionhandlertable\n\nexport var chx,chy\t\t!default text sizes for menus\nexport var cha,chd\t\t!ascender/descender heights\nexport const smx=3\t\t!margins around button text in pixels (both sides)\nexport const smy=4\nexport var arrowdim\nexport var markdim\nexport var buttonheight\nexport var listrowheight\nexport const labelfont=1\n\nexport var tabstops=(8,)*20\n\nexport var wmouse=nil\nexport var wfocus=nil\nexport var wprinter=nil\nexport var lastmousepos=nil\nexport var lastmousewindow=nil\nexport var currmousewindow=nil\n\nexport var mousepos\nexport var mousesw\nexport var quitmess=0\nexport var dragmode=0\nexport var lastbuttontime=0\n\nexport var buttonstate=0\nexport var wmessagetable\t\t!see initdata\nexport var buttontable\t\t!see initdata\n\nconst maxqueuesize=100\nexport var messagequeue=()\nexport var nmessages=()\n\nconst dragtol=1\n\nexport var copymode=4\n\nvar vktomesstable\n\n!Describe gx window (also bitmap, control or child window)\nexport record rwindow =\n\n\tvar windclass\t\t\t\t\t! type of window (popup, control, etc)\n\tvar flags\t\t\t\t\t\t! general purpose flags\n\tvar style\t\t\t\t\t\t! stylerec entry\n\tvar name\t\t\t\t\t\t! Optional debugging name\n\n\tvar owner\t\t\t\t\t\t! owner when this is a child window\n\tvar index\t\t\t\t\t\t! index 1..n when part of a list (eg. .childlist of owner)\n\tvar childlist\t\t\t\t\t! list of child windows\n\n!framepos/dim describe the overall window size including Windows or gx-drawn borders,\n\tvar frameposx, frameposy\t\t! top left of frame, in screen or owner window client coords\n\tvar framedimx, framedimy\t\t! pixels dims including frame and caption\n\n\tvar\tposx, posy\t\t\t\t\t! Pixel pos client area as seen by application\n\tvar\tdimx, dimy\t\t\t\t\t! Pixel dims of client area as seen by application\n\n\tvar gdi\t\t\t\t\t\t\t! (rgdistate)\tgdi state record\n\n\tvar enable\t\t\t\t\t\t! 1 to enable toggle/button/arrow etc, 0 to disable and show greyed out\n\tvar id\t\t\t\t\t\t\t! button/et al: command code associated with control\n\tvar text\t\t\t\t\t\t! caption or label or primary data\n!\t\tvar data \t@text\n\tvar linkvar\t\t\t\t\t\t! pointer to linked var for toggle/select/scroll\n\tvar gindex\t\t\t\t\t\t! window export index\n\n\tvar attrs\t\t\t\t\t\t! general purpose attributes, depends on window class\n\n!bitmap data\n\tvar pixelbits\t\t\t\t\t! 1, 4, 16, 24, 32 bits per pixel\n\tvar pixelptr\t\t\t\t\t! pointer to image data\n\tvar pixelbytes\t\t\t\t\t!bytes/pixel (round up to next whole byte)\n\tvar linebytes\t\t\t\t\t!bytes/per row, also pitch\n\tvar framebytes\n\tvar paltype\t\t\t\t\t\t!0, or palette type\n\n\tvar closed\nend\n\nexport enumdata paltypenames =\n\t(no_pal=0,\t\t$),\n\t(greyscale_pal,\t$),\n\t(tinted_pal,\t$),\n\t(colour_pal,\t$),\n\t(uv_pal,\t\t$),\nend\n\nexport type rgdistate = struct\n\tref void hwnd\t\t\t\t! win32 handle (hwnd)\n\tref void hdc\t\t\t\t! 0 or device context handle for hwnd\n\tref void hwnd2\t\t\t\t! secondary window/memory backup\n\tref void hdc2\t\t\t\t! 0 or hwnd3 DC screen or memory hdc\n\ti64 originalwndproc\t! win32 control handling proc\n\tunion\n\t\ti64 menuhandle\t\t! win32 handle to any menubar\n\t\ti64 oldbmobj\t\t\t!used for bitmaps\n\tend\n\ti32 drawmode\t\t\t! see dm- drawcodes\n\ti32 updated\t\t\t\t! 1 when pixels have changed\n\n\ti32 posx,posy\t\t\t!current drawing position\n\ti32 pencolour\t\t\t! current line colour (rgb)\n\ti32 penwidth\t\t\t! current line width\n\n\ti32 penstyle\t\t\t! current line dotted style\n\n\ti32 xormode\t\t\t\t! 0=normal, 1=xor\n\ti32 brushcolour\t\t\t! current brush colour\n\ti32 brushstyle\t\t\t! current brush style (bs_solid/etc)\n\ti32 brushpattern\t\t! current brush hatch/bitmap pattern\n\n\ti32 font\t\t\t\t! current font number\nend\n\nexport enumdata marktypenames =\n\t(no_mark=0,\t\t\t$),\n\t(radio_mark,\t\t$),\n\t(tick_mark,\t\t\t$),\n\t(check_mark,\t\t$),\n\t(invert_mark,\t\t$),\n\t(outline_mark,\t\t$),\n\t(bold_mark,\t\t\t$),\nend\n\nexport enumdata hilitetypenames =\n\t(no_hilite=0,\t\t$),\n\t(invert_hilite,\t\t$),\n\t(outline_hilite,\t$),\nend\n\nexport record togglerec=\t\t!for toggle and select\n\tvar textoffset\n\tvar onvalue\nend\n\nexport record scrollbarrec=\t\t!scroll bars\n\tvar limits\t\t\t\t\t\t!range\n\tvar span\t\t\t\t\t\t!portion of limits represented by visible data (0 means not relevant)\n\tvar thumbsize\t\t\t\t\t!pixel length of thumb (vert or hoz extent along scrollbar)\n\tvar thumbspan\t\t\t\t\t!pixels that the thumb can move\n\tvar thumbpos\t\t\t\t\t!current thumb position in pixels from start of scrollbar\n\tvar currpos\t\t\t\t\t\t!current position, will be in limits range\n\tvar dragmode\t\t\t\t\t!1 if thum currently being dragged\nend\n\nexport record editboxrec=\t\t!edit boxes\n!current char position within edit text\n!if text has N characters, then position will be 1..N+1\n!The position is just /before/ the stated character\n!This matches column position within the MED text editor\n\tvar currpos\t\t\t\t\t\t!cursor position, 1 to N+1 (N=chars in edit text)\n\tvar caretpos\t\t\t\t\t!current pixel position of any caret\n\tvar textpos\t\t\t\t\t\t!start x,y pixel position of text, set by gxjust_text\nend\n\nexport record listboxrec=\n\tvar rows\t\t\t\t\t\t!number of displayed rows\n\tvar pagepos\t\t\t\t\t\t!data position corresponding to row 1 of display\n\tvar length\t\t\t\t\t\t!all data items, same as linkvar^.len\n\tvar currpos\t\t\t\t\t\t!cursor position within the data, 1 to N (can be 0 when N=0)\n\tvar pitch, offset\t\t\t\t!pixel dims of each row\nend\n\nexport record rmessage=\n\tvar\t\twind\t\t!main window/button associated with message\n\tvar\t\tmenuwind\t!top-level window owning button\n\tvar\t\tmessage\t\t!message number\n\tvar\t\tstate\t\t!button/shift key state at time of message\n\tvar\t\ta,b\t\t\t!general purpose data, depends on message\n\tvar\t\tx,y\t\t\t!current mouse position\nend\n\n!contains many different flags and style codes for assorted controls\n!But at one mostly byte each, is very low overhead (32 values is same as two vars)\n\nexport type stylerec = struct\n\tbyte\tborder\t\t\t\t!bs_ code\n\tbyte\tjustify\t\t\t\t!'L', 'R', 'C'\n\tbyte\tvjustify\t\t\t!'T', 'B', 'M'\n\tbyte\twindbgnd\t\t\t!colour index for window background\n\tbyte\ttextfgnd\t\t\t!colour index\n\tbyte\ttextbgnd\t\t\t!\n\tbyte\tbgndmode\t\t\t!\n\tbyte\ttextfont\t\t\t!font index\n\tbyte\ttextsize\t\t\t!pixel size\n\tbyte\ttextbold\t\t\t!1 if bold\n\tbyte\ttextitalic\t\t\t!1 if italic\n\tbyte\tispassword\t\t\t!1 when edit field is a password\n\tbyte\tfieldwidth\t\t\t!edit field maximum char width\n\tbyte\tdir\t\t\t\t\t!'L','R','U','D'\n\tbyte\tmarktype\t\t\t!xxx_mark style, or:\n\tbyte\thilitetype\t\t\t!xxx_hilite style\n\tbyte\tiframe\t\t\t\t!1: pos/dim include frame\n\tbyte\timark\t\t\t\t!1: pos/dim include mark for toggle/select\n\tbyte\thscroll\t\t\t\t!1: include windows-drawn hoz scroll bar\n\tbyte\tvscroll\t\t\t\t!1: include windows-drawn vert scroll bar\n\tbyte\tlbchange\t\t\t!1: return mm_change on list boxes when row has changed\n\tbyte\treturnmess\t\t\t!1: return id code when clicking toggle/select/editbox\n\tbyte\tnoupdate\t\t\t!1: don't change or allow editing on toggle/select/editbox\nend\n\nexport record rpoint = var x,y end\nexport record rrect  =\n\tvar pos,dim\nend\n\nexport record rframe =\n\tvar x1,y1,x2,y2\nend\n\nexport record getrec=\n\tfun getbounds(&self)= 0\n\tfun getitem(&self,n)= 0\n\tfun getstritem(&self,n)= \"\"\nend\n\nexport enumdata stylenames =\t! (default)\n\t(ss_border,\t\t\t$),\t\t! Border style (wbs_simple)\n\t(ss_justify,\t\t$),\t\t! 'L' 'C' 'R'\tHorizontal text justify ('L')\n\t(ss_vjustify,\t\t$),\t\t! 'T' 'M' 'B'\tVertical text justify ('M' for buttons)\n\t(ss_textfgnd,\t\t$),\t\t! Text colour index (black)\n\t(ss_textbgnd,\t\t$),\t\t! Text background colour index (if opaque mode) (0)\n\t(ss_bgndmode,\t\t$),\t\t! 0\n\t(ss_textfont,\t\t$),\t\t! Text font number (1)\n\t(ss_textsize,\t\t$),\t\t! (0)\n\t(ss_textbold,\t\t$),\t\t! (0)\n\t(ss_textitalic,\t\t$),\t\t! (0)\n\t(ss_ispassword,\t\t$),\t\t! (0)\n\t(ss_marktype,\t\t$),\t\t! Toggle/select mark style (radio_mark)\n\t(ss_hilitetype,\t\t$),\t\t! Toggle/select hilite style (no_hilite)\n\t(ss_iframe,\t\t\t$),\t\t! Whether pos and dim include frame width (also caption bar/menu for windows)\n\t(ss_windbgnd,\t\t$),\t\t! Background colour of window or button (ltgrey)\n\t(ss_imark,\t\t\t$),\t\t! Background colour of window or button (ltgrey)\n\t(ss_hscroll,\t\t$),\t\t! (0)\n\t(ss_vscroll,\t\t$),\t\t! (0)\n\t(ss_lbchange,\t\t$),\t\t! (0)\n\t(ss_returnmess,\t\t$),\t\t! (0) Toggle/select/editbox, return id when clicked\n\t(ss_noupdate,\t\t$),\t\t! (0) Toggle/select/editbox, don't change or allow edit\nend\n\nexport enumdata drawmodenames =\n\t\t\t\t\t\t\t\t!HDC\tHDC2\tRestore\n\t(dm_screen=0,\t\t$),\t\t!screen\t--\t\tCustom routine\tDraw directly to screen; no mem backup\n\t(dm_memory,\t\t\t$),\t\t!memory\t--\t\tNA\t\t\t\tDraw to memory only; no screen hdc (eg. bitmap)\n\t(dm_screenmemory,\t$),\t\t!screen\tmemory\tBlit mem->scr\tDraw to both screen and memory at same time\n\t(dm_memoryscreen,\t$),\t\t!memory\tscreen\tBlit mem->scr\tDraw to memory; update screen periodically\nend\n\n!var windowlist=nil\n\nexport enumdata wfnames =\n\t(wa_rightclick=0,\t$),\t\t!allow right click\n\t(wa_middleclick,\t$),\t\t!allow middle click\n\t(wa_leftdbl,\t\t$),\t\t!allow left double click\n\t(wa_rightdbl,\t\t$),\t\t!allow right double click\n\t(wa_middledbl,\t\t$),\t\t!allow middle double click\n\t(wa_leftdrag,\t\t$),\t\t!allow left drag\n\t(wa_rightdrag,\t\t$),\t\t!etc\n\t(wa_middledrag,\t\t$),\n\t(wa_autoupdate,\t\t$),\t\t!auto update screen for toggles/etc\n\t(wa_tab,\t\t\t$), \t!allow tab to switch to next button which has watab\n\t(wa_strvar,\t\t\t$), \t!1 for listbox linkvar to use string not index\n\t(wa_retmess,\t\t$), \t!1 for button to return .value as mess not qmcommand\n\t(wa_retsel,\t\t\t$), \t!1 for button to return .value as mess not qmcommand\n\t(wa_memory,\t\t\t$), \t!1 when hdc/hdcmem have been switched, hdc points to memory dev\n\t(wa_maximised,\t\t$),\t\t!1 when maximised, 0 when normal/minimised\n\t(wa_param1,\t\t\t$), \t!general purpose control-specific flags\n\t(wa_param2,\t\t\t$), \n\t(wa_useenter,\t\t$),\n\t(wa_closed,\t\t\t$),\t\t!whether window has been closed\n\n\t(wa_$last,\t\t\t$)\nend\n\nconst wa_needdbl\t= wa_param1\t!1 requires double-click on listbox to return wmcommand\nconst wa_editdd\t\t= wa_param2\t!1 means editable dropdown box\n\n!GX border styles, used for child windows.\n!some child windows\nexport enumdata bsnames, bscat, bswidths=\n\t(bs_none=0,\t\t$,\t0,\tws_rect(0,0,0,0)),\t\t\t!no border\n!\t(bs_windows,\t$,\t'W',\tws_rect(0,0,0,0)),\t\t\t!windows-drawn, but no own-drawn border\n\t(bs_simplew,\t$,\t'W',\tws_rect(1,1,1,1)),\t\t\t!single 1-pixel black line, windows drawn\n\t(bs_simple,\t\t$,\t'X',\tws_rect(1,1,1,1)),\t\t\t!single 1-pixel black line\n\t(bs_thick,\t\t$,\t'X',\tws_rect(2,2,2,2)),\t\t\t!2-pixel border\n\t(bs_panel,\t\t$,\t'X',\tws_rect(1,1,1,1)),\t\t\t!raised panel, 1-pixel\n\t(bs_inset,\t\t$,\t'X',\tws_rect(1,1,1,1)),\t\t\t!inset panel, 1-pixel\n\t(bs_ownsimple,\t$,\t'I',\tws_rect(0,0,0,0)),\t\t\t!included inset panel, 1-pixel (drawn as part of client area)\n\t(bs_ownpanel,\t$,\t'I',\tws_rect(0,0,0,0)),\t\t\t!included inset panel, 1-pixel (drawn as part of client area)\n\t(bs_owninset,\t$,\t'I',\tws_rect(0,0,0,0)),\t\t\t!included inset panel, 1-pixel\n\t(bs_testext,\t$,\t'X',\tws_rect(10,10,10,10)),\n\t(bs_testint,\t$,\t'I',\tws_rect(8,8,8,8)),\n\t(bs_dummy,\t\t$,\t0,\tws_rect(0,0,0,0))\nend\n\nexport enumdata windowclassnames, defaultborderstyles =\n\t(no_class=0,\t\t$,\tbs_none),\t\t\t!Unassigned\n\t(window_class,\t\t$,\twbs_resize),\t\t!Main window\n\t(memwindow_class,\t$,\twbs_none),\t\t\t!memory backup to any window\n\t(popup_class,\t\t$,\twbs_thick),\t\t\t!Pop-up window (forms a stack)\n\t(float_class,\t\t$,\tbs_thick),\t\t\t!Independent window\n\t(bitmap_class,\t\t$,\tbs_none),\t\t\t!(image handling)\n\t(screen_class,\t\t$,\tbs_none),\t\t\t!Describes the desktop screen (not owned by my app)\n\t(printer_class,\t\t$,\tbs_none),\t\t\t!Used for printing\n\n\t(group_class,\t\t$,\tbs_inset),\t\t\t!Used mainly for grouping other buttons (eg. for Smdefblock)\n\t(panel_class,\t\t$,\tbs_inset),\t\t\t!General purpose panel for drawing in etc\n!\t(button_class,\t\t$,\tbs_panel),\t\t\t!Click button\n\t(button_class,\t\t$,\tbs_simplew),\t\t!Click button\n\t(toggle_class,\t\t$,\tbs_none),\t\t\t!Toggle button (can be composite, eg mark and label)\n\t(select_class,\t\t$,\tbs_none),\t\t\t!Select from several choices\n\t(editbox_class,\t\t$,\tbs_simplew),\t\t!Single-line edit control\n\t(scrollbar_class,\t$,\tbs_simplew),\t\t!Hoz or vert scroll bar (Some windows can also have Windows-drawn scroll bars)\n\t(listbox_class,\t\t$,\tbs_simplew),\t\t!List of options (scrollable usually)\n\t(dropdown_class,\t$,\tbs_none),\t\t\t!Button revealing attached listbox when clicked\n\t(framebar_class,\t$,\tbs_panel),\t\t\t!Left or right full-height panel used for toolboxes etc\n\t(statusbar_class,\t$,\tbs_panel),\t\t\t!Top or bottom full-width panel used for scrollbars\n\t(tooltip_class,\t\t$,\tbs_simplew),\t\t!Tooltops displayed when hovering over enabled buttons\n\t(arrow_class,\t\t$,\tbs_ownpanel),\t\t!Click button normally displaying an error in one of 4 orientations\n\t(mark_class,\t\t$,\tbs_none),\t\t\t!Toggle or select mark\n\t(label_class,\t\t$,\tbs_none),\t\t\t!Contains unclickable text usually\n\t(dummy_class,\t\t$,\tbs_none)\nend\n\nexport enumdata actionnames=\n\t(draw_w,\t\t$),\n\t(update_w,\t\t$),\n\t(last_w,\t\t$),\nend\n\n!MM Message Numbers\n\nexport enumdata messagenames=\n\n!all messages have x,y coord relative to top most window or child window\n!\n\t(mm_null=0,\t\t\t$),\t\t! empty message\n\n!window messages\n\t(mm_activate,\t\t$),\t\t! (w,a) a=1/0 activate/deactivate window\n\t(mm_close,\t\t\t$),\t\t! (w) close window (X button clicked)\n\t(mm_sizewindow,\t\t$),\t\t! (w...) resize window\n\t(mm_movewindow,\t\t$),\t\t! (w...) move window\n\t(mm_restore,\t\t$),\t\t! (w...) repaint window\n\n!cursor/focus messages\n\t(mm_setcursor,\t\t$),\t\t! (w...) update cursor type\n\t(mm_setfocus,\t\t$),\t\t! (w...) set focus to w\n\t(mm_killfocus,\t\t$),\t\t! (w...) lose focus from w\n\n!basic mouse messages (click messages can be promoted to other messages eg mm_command)\n\t(mm_move,\t\t\t$),\t\t! (w,x,y,b) mouse move, btns up/down (also drag messages when down)\n\t(mm_click,\t\t\t$),\t\t! (w,x,y) left btn click, can be promoted to mm_command etc depending on context\n\t(mm_dblclick,\t\t$),\t\t! (w,x,y) left btn dbl click, usu promoted\n\t(mm_clickup,\t\t$),\t\t! (w,x,y) left btn released\n\t(mm_rclick,\t\t\t$),\t\t! (w,x,y) right click in window, these usu. promoted\n\t(mm_rdblclick,\t\t$),\t\t! (w,x,y) right double click\n\t(mm_rclickup,\t\t$),\t\t! (w,x,y) right button released\n\t(mm_mclick,\t\t\t$),\t\t! (w,x,y) middle button versions of above\n\t(mm_mdblclick,\t\t$),\t\t! (w,x,y)\n\t(mm_mclickup,\t\t$),\t\t! (w,x,y)\n\t(mm_hover,\t\t\t$),\t\t! (w,x,y) paused over button\n\n\t(mm_onwindow,\t\t$),\t\t! (w,x,y) newly over a window\n\t(mm_offwindow,\t\t$),\t\t! (w,x,y) just came off window\n\t(mm_draw,\t\t\t$),\t\t! (w,x,y) redraw window\n\t(mm_update,\t\t\t$),\t\t! (w,x,y) update window (change of pos etc)\n\n!drag messages\n\t(mm_startdrag,\t\t$),\t\t! (w) start mouse movement with some btns down\n\t(mm_rstartdrag,\t\t$),\t\t! (w)\n\t(mm_mstartdrag,\t\t$),\t\t! (w)\n\t(mm_drag,\t\t\t$),\t\t! (w,x,y) moving mouse with buttons down (also qmmove sent)\n\t(mm_enddrag,\t\t$),\t\t! (w,x,y) all buttons up after drag\n\n!left command\n\t(mm_command,\t\t$),\t\t! (w,id) button clicked, id and sub-event given\n\t(mm_dblcommand,\t\t$),\t\t! (w,id) button double clicked\n\n!right command\n\t(mm_rcommand,\t\t$),\t\t! (w,id) right click button\n\t(mm_rdblcommand,\t$),\t\t! (w,id) right double click button\n\n!middle command\n\t(mm_mcommand,\t\t$),\t\t! (w,id)\n\t(mm_mdblcommand,\t$),\t\t! (w,id)\n\n!general key messages\n\t(mm_char,\t\t\t$),\t\t! (w,ch)\n\t(mm_key,\t\t\t$),\t\t! (w,k,shift)\n\t(mm_keyup,\t\t\t$),\t\t! (w,k,shift)\n\n!scroll/select/wheel messages\n\t(mm_sethozpos,\t\t$),\t\t! (w,pos)\t\tNew logical position set by hoz scrollbar\n\t(mm_setvertpos,\t\t$),\t\t! (w,pos)\t\tfrom vertical scrollbar\n\t(mm_select,\t\t\t$),\t\t! (w,n)\t\t\tSet nth item as current/highlighted/selected item\n\t(mm_pick,\t\t\t$),\t\t! (w,n)\t\t\tPick and return item n\n\t(mm_wheel,\t\t\t$),\t\t! (w,delta)\t\tMove log pos etc but depends on context\n\t(mm_lbchange,\t\t$),\t\t! (w,n)\t\t\tA listbox position has changed\n\n!misc messages\n\t(mm_timer,\t\t\t$),\t\t! (w)\n\n!high level window messages\n\t(mm_cancel,\t\t\t$),\t\t! (w)\n\t(mm_ok,\t\t\t\t$),\t\t! (w)\n\t(mm_help,\t\t\t$),\t\t! (w,id)\n\t(mm_cmdline,\t\t$),\t\t! (w,s)\n\n!specific key messages\n\t(mm_leftkey ,\t\t$),\t\t! (w,shift)\n\t(mm_rightkey,\t\t$),\t\t! (w,shift)\n\t(mm_upkey,\t\t\t$),\t\t! (w,shift)\n\t(mm_downkey,\t\t$),\t\t! (w,shift)\n\t(mm_pageupkey,\t\t$),\t\t! (w,shift)\n\t(mm_pagedownkey,\t$),\t\t! (w,shift)\n\t(mm_homekey,\t\t$),\t\t! (w,shift)\n\t(mm_endkey,\t\t\t$),\t\t! (w,shift)\n\t(mm_tabkey,\t\t\t$),\t\t! (w,shift)\n\t(mm_bskey,\t\t\t$),\t\t! (w,shift)\n\t(mm_deletekey,\t\t$),\t\t! (w,shift)\n\t(mm_enterkey,\t\t$),\t\t! (w,shift)\n\t(mm_insertkey,\t\t$),\t\t! (w,shift)\n\t(mm_functionkey,\t$),\t\t! (w,shift)\n\n!Other messages for controls, mainly for attached arrow buttons\n\t(mm_up,\t\t\t\t$),\t\t! (w,id) Arrow up/etc\n\t(mm_down,\t\t\t$),\t\t! (w,id)\n\t(mm_right,\t\t\t$),\t\t! (w,id)\n\t(mm_left,\t\t\t$),\t\t! (w,id)\n\t(mm_edit,\t\t\t$),\t\t! (w,id)\tUpdate of edit box\n\t(mm_edited,\t\t\t$),\t\t! (w,id)\tFinished edit box entry (tab etc)\n\t(mm_last,\t\t\t$)\nend\n\n!export const mm_scroll\t= mm_hscroll\t!general scroll independent of orientation\n\n!!other messages wmuser+ are user assigned, usually applied as\n!ids to controls. Depending on the options to Waitmess(), a wm_commmand message\n!is coverted to a direct message number. So (wm_command, 230) is covered to\n!message 230. So message ids have to start from 200 so that they occupy a different\n!number space from normal message codes.\nexport const mm_user\t= 200\n\nexport const kb_lbutton\t= 0x1\t!used in buttonstate\nexport const kb_rbutton\t= 0x2\nexport const kb_mbutton\t= 0x4\n\nexport const kb_shift\t= 0x8\t!used in shiftstate\nexport const kb_ctrl\t= 0x10\nexport const kb_alt\t\t= 0x20\nexport const kb_capslock\t= 0x40\nexport const kb_dblclick\t= 0x80\t!used for some messages that don't have dblclick versions,\n\nexport const kb_rshift\t= 0x100\nexport const kb_rctrl\t= 0x200\nexport const kb_ralt\t= 0x400\n\nexport enumdata colournames, colourvalues =\n!\t\t\t\t\t   BB'GG'RR\n\t(black,\t\t$,\t0x_00'00'00),\n\t(red,\t\t$,\t0x_00'00'C0),\n\t(dkred,\t\t$,\t0x_00'00'90),\n\t(red3,\t\t$,\t0x_00'00'70),\n\t(green,\t\t$,\t0x_00'C0'00),\n\t(dkgreen,\t$,\t0x_00'90'00),\n\t(green3,\t$,\t0x_00'70'00),\n\t\n\t(blue,\t\t$,\t0x_C0'00'00),\n\t(dkblue,\t$,\t0x_90'00'00),\n\t(blue3,\t\t$,\t0x_70'00'00),\n\n\t(cyan,\t\t$,\t0x_c0'c0'00),\n\t(dkcyan,\t$,\t0x_90'90'00),\n\t(cyan3,\t\t$,\t0x_70'70'00),\n\n\t(magenta,\t$,\t0x_c0'00'c0),\n\t(dkmagenta,\t$,\t0x_90'00'90),\n\t(magenta3,\t$,\t0x_70'00'70),\n\n\t(yellow,\t$,\t0x_00'C0'C0),\n\t(dkyellow,\t$,\t0x_00'90'90),\n\t(yellow3,\t$,\t0x_00'70'70),\n\t(yellow4,\t$,\t0x_00'50'50),\n\n\t(white,\t\t$,\t0x_FF'FF'FF),\n\t(ltgrey,\t$,\t0x_C0'C0'C0),\n\t(grey,\t\t$,\t0x_90'90'90),\n\t(dkgrey,\t$,\t0x_70'70'70),\n\n\t(ltorange,\t$,\t0x_00'A0'FF),\n\t(orange,\t$,\t0x_00'60'FF),\n\t(flesh,\t\t$,\t0x_70'85'EE),\n\t(pink,\t\t$,\t0x_9A'32'DB),\n\t(dkpink,\t$,\t0x_72'24'A9),\n\t(brown,\t\t$,\t0x_46'43'7D),\n\t(blue4,\t\t$,\t0x_B7'1C'5E),\n\t(blue5,\t\t$,\t0x_6F'3D'0D),\n\t(olive,\t\t$,\t0x_05'A0'88),\n\t(ltbrown,\t$,\t0x_00'70'B0),\n\n\t(blue6,\t\t$,\t0x_9C'63'1C),\n\t(green4,\t$,\t0x_12'51'11),\n\t(purple,\t$,\t0x_5E'0D'73),\n\t(blue7,\t\t$,\t0x_E6'27'1C),\n\t(crimson,\t$,\t0x_15'2A'D3),\n\t(violet,\t$,\t0x_54'16'A0),\n\t(blue8,\t\t$,\t0x_86'68'1E),\n\t(dkorange,\t$,\t0x_25'6A'D4),\n\t(green5,\t$,\t0x_09'46'41),\n\t(blue9,\t\t$,\t0x_65'0A'1D),\n\n\t(ltred,\t\t$,\t0x_00'00'FF),\n\t(ltgreen,\t$,\t0x_00'FF'00),\n\t(ltblue,\t$,\t0x_FF'00'00),\n\t(ltcyan,\t$,\t0x_FF'FF'00),\n\t(ltmagenta,\t$,\t0x_FF'00'FF),\n\t(ltyellow,\t$,\t0x_00'FF'FF),\n\n!The following are the Windows system colours, set up as indices\n!Init needs need to retrieve the values and set up the rgb values in this table\n\t(button_col,\t$,\t0),\t\t!button colour\n\t(window_col,\t$,\t0),\t\t!window colour\n\t(text_col,\t\t$,\t0),\t\t!text in windows\nend\n\nexport const skipmess = 1\t\t!message has been processed; caller must wait for another message\nexport const thismess = 0\t\t!caller should deal with this message (it has not been processed, or has been but caller can process it too)\n\nexport var bmbgnd\nexport var defstyle\t\t\t!set initdata\nexport var currmess=nil\n\nexport var wapplic=nil\nexport var wscreen=nil\n\nvar data,ndata\nvar tabstack,ntab\nvar breakflag\n\nconst k_menu=30000\nconst kdivide=30001\nconst kcolumn=30002\nconst kfilehistory=30003\n\nvar caretdrawn=0\nvar dkcolour=0x000000\nvar ltcolour=0xFFFFFF\nvar thumbdragmode=0\nvar thumbstartpos=0\n\nvar dirtomess=['L':mm_left,'R':mm_right,'U':mm_up,'D':mm_down]\n\nproc start=\n!CPL \"GXLIB START\"\n\n\tinitdata()\n\tmxinit()\n\tinitmenuhandlers()\nend\n\nexport proc setupgdi(w,hwnd)=\t\t\t!SETUPGDI\n!NOTE: rare care of a func within a data header. This is to allow bitmap module\n!to be higher up the hierarchy than gx, but still let it use some gx functions.\n\n!set up the default gdi descriptor for window w\n\n\tif w.gdi then\n\t\treturn\t\t\t!assume already done\n\tfi\n\n\tgdi:=new(rgdistate)\n\tgdi.hwnd:=hwnd\n\n!start with default drawmodes of dm_screen, or dm_memory for bitmaps\n!These can be converted later using gxdrawmode\n\n\tif w.type=rwindow then\n\t\tgdi.hdc:=getdc(hwnd)\n\t\tgdi.drawmode:=dm_screen\n\telse\t\t\t\t\t\t!assume bitmap\n\t\tgdi.hdc:=createcompatibledc(nil)\n\t\tgdi.drawmode:=dm_memory\n\tfi\n\n\tgdi.posx:=gdi.posy:=0\n\tgdi.updated:=0\n\tgdi.font:=0\n\tgdi.pencolour:=getsyscolour(colour_windowtext)\n\tgdi.penwidth:=0\n\tgdi.penstyle:=ps_solid\n\tgdi.xormode:=0\n\tgdi.brushcolour:=0xff'ff'ff\n\tgdi.brushstyle:=bs_solid\n\tgdi.brushpattern:=0\n\tw.gdi:=gdi\n\tend\n\nexport const arleft = \"<\"\nexport const arright = \">\"\nexport const arup = \"^\"\nexport const ardown = \"V\"\n\nexport var allwindows::=()\t\t\t!list of all windows and controls\n\nexport func ctrlpressed = return (currmess.state iand kb_ctrl) end\nexport func shiftpressed = return (currmess.state iand kb_shift) end\n\nproc initdata=\n\tmessagequeue:=new(list,100)\n\tnmessages:=0\n\n\tcolourvalues::=colourvalues\n\n\tcolourvalues[button_col]:=getsyscolour(colour_btnface)\n\n\tcolourvalues[window_col]:=getsyscolour(colour_window)\n\tcolourvalues[text_col]:=getsyscolour(colour_windowtext)\n\n\tdefstyle:=new(stylerec)\n\tdefstyle.border\t\t:= bs_simplew\n\tdefstyle.justify\t:= 'L'\n\tdefstyle.vjustify\t:= 'M'\n\tdefstyle.textfgnd\t:= black\n\tdefstyle.marktype\t:= check_mark\n\tdefstyle.hilitetype\t:= no_hilite\n\tdefstyle.windbgnd\t:= button_col\n\tdefstyle.imark\t\t:= 1\n!defstyle.windbgnd\t:= window_col\n\n\tinit_handlertables()\n\td:=gxchardim(labelfont)\n\tchx:=d.x\n\tchy:=d.y\n\n\td:=gxchardim(0,1)\n\tcha:=d.x\n\tchd:=d.y\n\tarrowdim:=chy+2\n\tmarkdim:=arrowdim-2\n\n\tbuttonheight:=chy+smy*2\n\tlistrowheight:=chy+smy*2\nend\n\nexport func gxcreatewindow(?caption,?pos,?dim,?options,owner=nil)=\t\t!CREATEWINDOW\n\t#create a popup window which is not a child window.\n\t#(nevertheless, it can have an owner window, such as the main window of the\n\t#application)\n\t#returns an rwindow handle\n\t#caption\toptional caption txt\n\t#pos\t\t(x,y) is pixel pos of top left corner in screen coordinates (of frame?)\n\t#\t\t\"cent\" to place centrally\n\t#\t\tomitted: use default placement\n\t#dim\t\t(width,height) overall pixel size\n\t#\t\t\"max\" maximised\n\t#\t\t\"desktop\" fill desktop screen\n\t#\t\tomitted: use (640,480)\n\t#owner\toptional owner window (default nil)\n\t#options\toption dict, default is [wf_caption:1, wf_border:wbs_resize]\n\n\thwnd:=wx_createpopup(caption,pos,dim,options,(owner|owner.gdi.hwnd|nil))\n\n\tw:=newwindow(hwnd,0,no_class,bs_windows)\n\n\tif wapplic=nil then\n\t\twapplic:=w\n\tfi\n\n\tW.STYLE:=NEW(STYLEREC)\n\tW.STYLE.BORDER:=0\n\tW.WINDCLASS:=WINDOW_CLASS\n\tW.STYLE.WINDBGND:=WINDOW_COL\n\tW.ENABLE:=1\n\tW.FLAGS.[WA_LEFTDRAG]:=1\n\tW.FLAGS.[WA_LEFTDBL]:=1\n\n\tsetwindowdims_w(w,hwnd)\n\n\tsetupgdi(w,hwnd)\n\tgxfont(w,1)\n\n\tGXDRAWMODE(W,DM_SCREENMEMORY)\n\tGXCLEAR(W)\n\n\treturn w\nend\n\nproc setwindowdims_w(w,hwnd)=\t\t\t!SETWINDOWDIMS\n!use windows functions to set up client and frame pos and dims of top-level window\n\n\tbox:=new(ws_rect)\n\tgetwindowrect(hwnd,&box)\n\tw.frameposx:=box.x\n\tw.frameposy:=box.y\n\tw.framedimx:=box.x2-box.x\n\tw.framedimy:=box.y2-box.y\n\n\tgetclientrect(hwnd,&box)\n\n\tw.dimx:=box.x2-box.x\n\tw.dimy:=box.y2-box.y\n\n\tpt:=ws_point(0,0)\n\tclienttoscreen(hwnd,&pt)\t\t!pos starts at 0,0\n\tw.posx:=pt.x\n\tw.posy:=pt.y\nend\n\nproc setwindowdims_c(w,hwnd)=\t\t\t!SETWINDOWDIMS\n!use windows functions to set up client and frame pos and dims of child window\n\n\n\tbox:=new(ws_rect)\n\tgetwindowrect(hwnd,&box)\t\t\t!client dims also Windows frame dims as has no Windows border\n\tw.posx:=box.x-w.owner.posx\n\tw.posy:=box.y-w.owner.posy\n\tw.dimx:=box.x2-box.x\n\tw.dimy:=box.y2-box.y\n\n\twidths:=bswidths[w.style.border]\n\tif bscat[w.style.border]='I' then widths:=ws_rect(0,0,0,0) fi\n\n\tw.frameposx:=w.posx-widths.x1\n\tw.frameposy:=w.posy-widths.y1\n\tw.framedimx:=w.dimx+widths.x1+widths.x2\n\tw.framedimy:=w.dimy+widths.y1+widths.y2\nend\n\nexport proc gxclear(w,?colour)=\t\t\t!GXCLEAR\n\t#fill window w with <colour>, or with current background if omitted\n\n!RETURN\n\tgdi:=w.gdi\n\tgdi.updated:=1\n\n\tgxcolour(w,getrgb(black))\n\tgxstyle(w,0)\n\n\tif colour.isvoid then\n\t\tcolour:=getrgb(w.style.windbgnd)\n\tfi\n\n\toldpenstyle:=gdi.penstyle\n\toldbrushstyle:=gdi.brushstyle\n\n\tgxbrushstyle(w,bs_solid)\n\tgxstyle(w,ps_null)\n\n\tgxfillrect(w,0,0,w.dimx,w.dimy,colour)\n\tgxbrushstyle(w,oldbrushstyle)\n\tgxstyle(w,oldpenstyle)\nend\n\nexport func gxstyle(w,?style)=\t\t\t!GXSTYLE\n\t#style omitted: get pen current pen style\n\t#style supplied: set pen style for subsequent line drawing\n\t#Style is a char code or int refering to a small variety of Windows dotted styles:\n\t#\t0 S |\t\tSolid\n\t#\tSpace\t\tNull (pen up?)\n\t#\t-\t\t\tDotted\n\t#\t:\t\t\tDashdotdot\n\t#\t!\t\t\tDashdotd\n\t#\tF\t\t\tInside frame\n\n\tgdi:=w.gdi\n\n\tif style.isdef and gdi.penstyle<>style then\n\t\tcase style\n\t\twhen '!' then style:=ps_dashdot\n\t\twhen ':' then style:=ps_dashdotdot\n\t\twhen '-' then style:=ps_dot\n\t\twhen ' ' then style:=ps_null\n\t\twhen 'D' then style:=ps_alternate\n\t\twhen '|','S',0 then style:=ps_solid\n\t\twhen 'F' then style:=ps_insideframe\n\t\tesac\n\n\t\tgdi.penstyle:=style\n\t\tif style>=10 then style:=ps_dot fi\n\t\tdeleteobject(selectobject(gdi.hdc,createpen(style,gdi.penwidth,gdi.pencolour)))\n\t\tif gdi.drawmode=dm_screenmemory then\n\t\t\tdeleteobject(selectobject(gdi.hdc2,createpen(style,gdi.penwidth,gdi.pencolour)))\n\t\tfi\n\tfi\n\treturn gdi.penstyle\nend\n\nexport proc gxbrushstyle(w,?style,?pattern)=\t\t!GXBRUSHSTYLE\n\t#Set Windows brush style and pattern\n\t#Style supplied:\tset style\n\t#pattern supplied:\tset style\n\t#style is:\t\tS, H, Space, B for Solid, Hatched, Null, DIB\n\t#pattern is:\t- | \\ / + x/X for Hoz, Vert, Diag, Fwd Diag, Cross, Diag Cross\n\n\tgdi:=w.gdi\n\tbrush:=new(ws_logbrush)\n\n\tif style.isdef then\n\t\tif style<>gdi.brushstyle then\n\t\t\tcase style\n\t\t\twhen 'S' then style:=bs_solid\n\t\t\twhen 'H' then style:=bs_hatched\n\t\t\twhen ' ' then style:=bs_null\n\t\t\twhen 'B' then style:=bs_dibpattern\n\t\t\tesac\n\n\t\t\tgdi.brushstyle:=style\n\t\tfi\n\t\tgdi.brushpattern:=0\t\t!default to no pattern, will be changed by pattern if supplied\n\tfi\n\n\tif pattern.isdef and pattern<>gdi.brushpattern then\n\t\tcase pattern\n\t\twhen '-' then pattern:=hs_horizontal\n\t\twhen '|' then pattern:=hs_vertical\n\t\twhen '\\\\' then pattern:=hs_fdiagonal\n\t\twhen '/' then pattern:=hs_bdiagonal\n\t\twhen '+' then pattern:=hs_cross\n\t\twhen 'x','X' then pattern:=hs_diagcross\n\t\tesac\n\t\tgdi.brushpattern:=pattern\n\tfi\n\n\tbrush.lbstyle:=gdi.brushstyle\n\tbrush.lbcolour:=gdi.brushcolour\n\tbrush.lbhatch:=gdi.brushpattern\n\n\tdeleteobject(selectobject(gdi.hdc,createbrushindirect(&brush)))\n\tif gdi.drawmode=dm_screenmemory then\n\t\tdeleteobject(x:=selectobject(gdi.hdc2,createbrushindirect(&brush)))\n\tfi\nend\n\nexport func gxbrushcolour(w,?colour)=\t\t\t!GXBRUSHCOLOUR\n\t#colour supplied:\tset current fill colour\n\t#colour omitted:\treturn current fill colour\n\n\tgdi:=w.gdi\n\n\tif colour.isdef and colour<>gdi.brushcolour then\n\t\tgdi.brushcolour:=colour\n\t\tbrush:=new(ws_logbrush)\n\t\tbrush.lbstyle:=gdi.brushstyle\n\t\tbrush.lbcolour:=colour\n\t\tbrush.lbhatch:=gdi.brushpattern\n\n\t\tdeleteobject(selectobject(gdi.hdc,createbrushindirect(&brush)))\n\t\tif gdi.drawmode=dm_screenmemory then\n\t\t\tdeleteobject(selectobject(gdi.hdc2,createbrushindirect(&brush)))\n\t\tfi\n\tfi\n\treturn gdi.brushcolour\nend\n\nexport proc gxfillrect(w,x,y,width,height,?colour,mode=0)=\t\t!GXFILLRECT\n\t#Draw filled rectangle with optional outline\n\t#x,y are top-left coordinates\n\t#width, height are overall pixel dimensions, inclusive; they include any outline\n\t#(When the outline is drawn, the filled region is 1 pixel smaller all round)\n\t#colour is the colour of the filled region (current brush colour when omitted)\n\t#mode=1 to draw the outline, or mode=0 (default) to omit it\n\t#The outline is drawn in the current pen colour\n\n\tgdi:=w.gdi\n\tgdi.updated:=1\n\n\toldbrushcolour:=gdi.brushcolour\n\tif colour.isdef then\n\t\tgxbrushcolour(w,colour)\n\tfi\n\n\toldpenstyle:=gdi.penstyle\n\tif mode=0 then\t\t!inside only\n\t\tgxstyle(w,ps_null)\n\tfi\n\n\tif height<0 then y:=y+height+1; height:=-height fi\n\tif width<0 then x:=x+width+1; width:=-width fi\n\n\tif mode=0 then\t\t!inside only, needs extra pixel width\n\t\trectangle(gdi.hdc,x, y,x+width+1,y+height+1)\n\t\tif gdi.drawmode=dm_screenmemory then\n\t\t\trectangle(gdi.hdc2,x,y,x+width+1,y+height+1)\n\t\tfi\n\telse\t\t\t!inside and outside\n\t\trectangle(gdi.hdc,x, y, x+width, y+height)\n\t\tif gdi.drawmode=dm_screenmemory then\n\t\t\trectangle(gdi.hdc2,x,y,x+width,y+height)\n\t\tfi\n\tfi\n\tgxstyle(w,oldpenstyle)\n\tgxbrushcolour(w,oldbrushcolour)\nend\n\nexport func gxcolour(w,?colour)=\t\t!GXCOLOUR\n\t# colour supplied:\tset current outline colour for subsequent line drawing\n\t# colour omitted:\treturn current outline colour\n\n\tgdi:=w.gdi\n\n\tif colour.isdef and gdi.pencolour<>colour then\n\t\tgdi.pencolour:=colour\n\t\tgdi.xormode:=0\n\t\tdeleteobject(selectobject(gdi.hdc,createpen(gdi.penstyle,gdi.penwidth,gdi.pencolour)))\n\t\tsetrop2(gdi.hdc,r2_copypen)\n\t\tif gdi.drawmode=dm_screenmemory then\n\t\t\tdeleteobject(selectobject(gdi.hdc2,createpen(gdi.penstyle,gdi.penwidth,gdi.pencolour)))\n\t\t\tsetrop2(gdi.hdc2,r2_copypen)\n\t\tfi\n\n\tfi\n\n\treturn gdi.pencolour\nend\n\nexport proc gxsetpen(w,pen)=\n\tgxcolour(w,getrgb(pen))\nend\n\nexport proc gxline(w,x,y,?x2,?y2)=\t\t!GXLINE\n\t#gxline(w,x,y)\t\t\tDraw line from current position to x,y\n\t#gxline(w,x,y,x2,y2)\tDraw line from x,y to x2,y2\n\n\tgdi:=w.gdi\n\n\tif x2.isvoid then\t\t!assume 2 params\n\t\tx2:=x\n\t\ty2:=y\n\n\t\tmovetoex(gdi.hdc,gdi.posx, gdi.posy)\n\t\tif gdi.drawmode=dm_screenmemory then\n\t\t\tmovetoex(gdi.hdc2,gdi.posx, gdi.posy)\n\t\tfi\n\telse\n\t\tmovetoex(gdi.hdc,x, y)\n\t\tif gdi.drawmode=dm_screenmemory then\n\t\t\tmovetoex(gdi.hdc2,x, y)\n\t\tfi\n\t\tgdi.posx:=x\n\t\tgdi.posy:=y\n\tfi\n\n\tlineto(gdi.hdc,x2,y2)\n\n\tif gdi.drawmode=dm_screenmemory then\n\t\tlineto(gdi.hdc2,x2,y2)\n\tfi\n\tgdi.posx:=x2\n\tgdi.posy:=y2\nend\n\nexport func gxwidth(w,width)=\n!get/set pen width for subsequent line drawing\n\tgdi:=w.gdi\n\tif width.isvoid then\n\t\treturn gdi.penwidth\n\tfi\n\n\tif gdi.penwidth<>width then\n\t\tgdi.penwidth:=width\n\t\tdeleteobject(selectobject(gdi.hdc,createpen(gdi.penstyle,gdi.penwidth,gdi.pencolour)))\n\t\tif gdi.drawmode=dm_screenmemory then\n\t\t\tdeleteobject(selectobject(gdi.hdc2,createpen(gdi.penstyle,gdi.penwidth,gdi.pencolour)))\n\t\tfi\n\n\tfi\n\treturn width\nend\n\nexport proc gxlinerel(w,dx,dy)=\t\t!GXLINEREL\n\t#Draw line from current position, to current position + (dx,dy)\n\n\tgdi:=w.gdi\n\tmovetoex(gdi.hdc, gdi.posx, gdi.posy)\n\tif gdi.drawmode=dm_screenmemory then\n\t\tmovetoex(gdi.hdc2, gdi.posx, gdi.posy)\n\tfi\n\tx:=gdi.posx+dx\n\ty:=gdi.posy+dy\n\tgxline(w,x,y)\n\tgdi.posx:=x\n\tgdi.posy:=y\nend\n\nexport proc gxmove(w,x2,y2)=\t\t!GXMOVE\n\t#Set current position to x2,y2\n\n\tgdi:=w.gdi\n\n\tmovetoex(gdi.hdc, x2, y2)\n\tif gdi.drawmode=dm_screenmemory then\n\t\tmovetoex(gdi.hdc2,x2, y2)\n\tfi\n\tgdi.posx:=x2\n\tgdi.posy:=y2\nend\n\nexport proc gxmoverel(w,dx,dy)=\t\t!GXMOVEREL\n\t#\tSet current position to current position+(dx,dy)\n\tgdi:=w.gdi\n\n\tgdi.posx+:=dx\n\tgdi.posy+:=dy\n\n\tmovetoex(gdi.hdc,gdi.posx, gdi.posy)\n\tif gdi.drawmode=dm_screenmemory then\n\t\tmovetoex(gdi.hdc2,gdi.posx, gdi.posy)\n\tfi\nend\n\nexport proc gxrect(w,x,y,width,height)=\t\t!GXRECT\n\t#draw outline rectangle starting from x,y at top left, in current pen colour\n\t#overall size is width by height pixels inclusive (x,y to x+width+1,y+height-1)\n\t#outline is 1 pixel wide\n\n\tgdi:=w.gdi\n\tgdi.updated:=1\n\tif height<0 then y:=y+height+1; height:=-height fi\n\tif width<0 then x:=x+width+1; width:=-width fi\n\n\toldbrushstyle:=gdi.brushstyle\n\tgxbrushstyle(w,bs_hollow)\n\n\trectangle(gdi.hdc,x, y, x+width, y+height)\n\tif gdi.drawmode=dm_screenmemory then\n\t\trectangle(gdi.hdc2,x, y, x+width,y+height)\n\tfi\n\tgxbrushstyle(w,oldbrushstyle)\nend\n\nexport proc gxcircle(w,x,y,r)=\t\t!GXCIRCLE\n\t#draw circle at centre x,y in window w, of radius r, using current pen colour\n\t#outline is 1 pixel wide\n\n\tgdi:=w.gdi\n\tgdi.updated:=1\n\toldbrushstyle:=gdi.brushstyle\n\tgxbrushstyle(w,bs_hollow)\n\n\tellipse(gdi.hdc,x-r, y-r, x+r-1, y+r-1)\n\tif gdi.drawmode=dm_screenmemory then\n\t\tellipse(gdi.hdc2,x-r, y-r, x+r-1, y+r-1)\n\tfi\n\tgxbrushstyle(w,oldbrushstyle)\nend\n\nexport proc gxfillcircle(w,x,y,r,?colour,mode=0)=\t\t!GXFILLCIRCLE\n\t#Draw filled circle with optional outline\n\t#x,y is the centre, r is the radius\n\t#(When the outline is drawn, the filled region is 1 pixel smaller all round)\n\t#colour is the colour of the filled region (current brush colour when omitted)\n\t#mode=1 to draw the outline, or mode=0 (default) to omit it\n\t#The outline is drawn in the current pen colour\n\tgdi:=w.gdi\n\n\tgdi.updated:=1\n\toldbrushcolour:=gdi.brushcolour\n\tif colour.isdef then\n\t\tgxbrushcolour(w,colour)\n\tfi\n\n\toldpenstyle:=gdi.penstyle\n\tif mode=0 then\t\t!inside only\n\t\tgxstyle(w,ps_null)\n\tfi\n\n\tellipse(gdi.hdc,x-r, y-r, x+r-1, y+r-1)\n\tif gdi.drawmode=dm_screenmemory then\n\t\tellipse(gdi.hdc2,x-r, y-r, x+r-1, y+r-1)\n\tfi\n\n\tgxstyle(w,oldpenstyle)\n\tgxbrushcolour(w,oldbrushcolour)\nend\n\nexport func gxpixel(w,x,y,?colour)=\t\t!GXPIXEL\n\t#colour provided: set pixel at point x,y of window w to colour\n\t#colour omitted: return pixel colour from point x,y\n!set pixel at x,y with given rgb colour, or return pixel value if omitted (-1)\n\tw.gdi.updated:=1\n\n\tif colour.isvoid then\t\t!get pixel\n\t\tres:=getpixel(w.gdi.hdc, x, y)\n\t\tif w.gdi.drawmode=dm_screenmemory then\n\t\t\tgetpixel(w.gdi.hdc2, x, y)\n\t\tfi\n\t\treturn res\n\telse\n\t\tsetpixel(w.gdi.hdc,x, y, colour)\n\t\tif w.gdi.drawmode=dm_screenmemory then\n\t\t\tsetpixel(w.gdi.hdc2,x,y,colour)\n\t\tfi\n\t\treturn colour\n\tfi\nend\n\nexport func gxcaption(w,?caption)=\t\t!GXCAPTION\n\t#caption omitted:  return current window caption text\n\t#caption provided: set new window caption text\n\n\tcase w.windclass\n\twhen window_class,popup_class then\n\n\t\tif caption.isdef then\t\t!set text\n\t\t\tsetwindowtext(w.gdi.hwnd,caption)\n\t\t\treturn caption\n\t\telse\n\t\t\tbuffer:=new(array,byte,512)\n\t\t\tn:=getwindowtext(w.gdi.hwnd,int(&buffer),buffer.len)\n\t\t\tif n then\n\t\t\t\ts:=makestr(&buffer,n)\t\t!needs assigment to ensure a copy is made befor buffer\n\t\t\t\t\t\t\t\t\t\t\t!is freed (assignment of return value might do the same)\n\t\t\telse\n\t\t\t\ts:=\"\"\n\t\t\tfi\n\t\t\treturn s\n\t\tfi\n\tesac\n\n\tif caption.isdef then\t\t!set text\n\t\tw.text:=caption\n\t\tgxdraw(w)\n\tfi\n\n\treturn w.text\nend\n\nexport proc gxtext(w,s,?x,?y)=\t\t!GXTEXT\n\t#Display text s\n\t#Text is drawn starting at (x,y) when provided, otherwise at current position\n\t#insertion point refers either to base line, or to top left of cell (not sure)\n\t#Text is drawn in current font, size, style and mode\n\t#Text typically contains no control codes, but can also contain cr and lf (also\n\t#tabs, but currently position isn't changed). However, text with control codes is\n\t#drawn a character at a time\n\t#Finishes with current position set to the end of the text\n\n!uses chr(16) for reverse tab. Reverse tabs are usually encoded as:\n!  chr(9)+chr(16), ie. normal tab then reverse tab\n!Reverse tab, after tabbing to next stop, then moves position back by width\n!of next substring\n\n\treturn when s=\"\"\n\n\tgdi:=w.gdi\n\n\tif x.isvoid then x:=gdi.posx fi\n\tif y.isvoid then y:=gdi.posy fi\n\tgdi.updated:=1\n\n!scan the string and create a table of substrings and control codes\n\tstartpos::=lengths::=()\n\tngroups:=0\n\n\tforeach i,c in s do\n\t\tif c<32 then\n\t\t\t++ngroups\n\t\t\tstartpos[ngroups]:=i\n\t\t\tlengths[ngroups]:=0\n\t\telse\n\t\t\tif ngroups and lengths[ngroups] then\t\t!extend this group\n\t\t\t\t++lengths[ngroups]\n\t\t\telse\t\t\t\t\t\t\t\t\t\t!start new substring group\n\t\t\t\t++ngroups\n\t\t\t\tstartpos[ngroups]:=i\n\t\t\t\tlengths[ngroups]:=1\n\t\t\tfi\n\t\tfi\n\tod\n\n\tfor i,l in lengths do\n\t\tpos:=startpos[i]\n\t\tif l then\n\t\t\tslicex:=pos..pos+l-1\n\t\t\ttextout(gdi.hdc,x, y,s.[slicex],l)\n\n\t\t\tif gdi.drawmode=dm_screenmemory then\n\t\t\t\ttextout(gdi.hdc2,x,y,s.[slicex],l)\n\t\t\tfi\n\t\t\tx +:= gxtextwidth(w,s.[slicex])\n\n\t\telse\t\t\t\t!Deal with control codes\n\t\t\tcase s.[pos]\n\t\t\twhen 13 then\n\t\t\t\tx:=0\n\t\t\twhen 10 then\n\t\t\t\ty+:=20\t\t\t\t!NEEDS TO PICK CURRENT FONT DIMS\n\n\t\t\twhen 9,16 then\t\t\t!16 will be used as reverse tab\n\t\t\t\tcurrx:=x\n\t\t\t\tx:=0\n\t\t\t\tfor t in tabstops do\n\t\t\t\t\tx+:=t*chx\t\t\t\t!MUST BE CURRENT FONT NOT CHX\n\t\t\t\t\tif x>currx then exit fi\n\t\t\t\tod\n\t\t\t\twhile x<=currx do x+:=chx*8 od\n\n\t\t\t\tif s.[pos]=16 and i<ngroups and lengths[i+1] then\t!reverse offset for next substring\n\t\t\t\t\tpos:=startpos[i+1]\n\t\t\t\t\tx -:= gxtextwidth(w,s.[pos..pos+lengths[i+1]-1])+1\n\t\t\t\tfi\n\n\t\t\tesac\t\n\t\tfi\n\tod\n\n\tgdi.posx:=x\n\tgdi.posy:=y\nend\n\nexport func gxtextcolour(w,?colour,?bgndcolour)=\t\t!GXTEXTCOLOUR\n\t#Set either text foreground colour or background colour, or both, or neither,\n\t#depending on which are supplied\n\t#Text colours will be colour indices, not rgb\n\t#Always returned current or new foreground\n\n\tgdi:=w.gdi\n\n\tif colour.isdef and colour<>w.style.textfgnd then\n\t\tw.style.textfgnd:=colour\n\t\tsettextcolour(gdi.hdc,getrgb(colour))\n\t\tif gdi.drawmode=dm_screenmemory then\n\t\t\tsettextcolour(gdi.hdc2,getrgb(colour))\n\t\tfi\n\tfi\n\tif bgndcolour.isdef and bgndcolour<>w.style.textbgnd then\n\t\tgxbgndcolour(w,bgndcolour)\n\tfi\n\n\treturn w.style.textfgnd\nend\n\nexport func gxtextwidth(font,?s)=\t\t!GXTEXTWIDTH\n\t# font is a window, or a font number within fonttable\n\t# font can be zero (then uses font 1)\n\t# return total pixel width of string s, using given font\n\n\tif s=\"\" then return 0 fi\n\n!if not font.isint then\t\t\t!aasume font is window\n!CPL =FONT\n!CPL =FONT.TYPE\n\n\n!if not font.ispointer then\t\t\t!aasume font is window\n\tif not font.isint then\t\t\t!aasume font is window\n\t\tfont:=font.gdi.font\n\tfi\n\tif font=0 then font:=1 fi\n\n\tselectobject(screendc,fonttable[font])\n\twidthheight:=new(ws_point)\n\n!CPL =S\n\n\tgettextextentpoint32(screendc,s,s.len,&widthheight)\n\n\treturn widthheight.x\nend\n\nexport func gxloadfont(n,facename,?style,height=0,width=0)=\t\t!GXLOADFONT\n\t#define new font\n\t#N is index into fonttable\n\t#facename is the name of the font\n\t#Style is optional font style, a string containing any of:\n\t#\tB,b\t\tBold\n\t#\tI,i\t\tItalic\n\t#\tU,u\t\tUnderline\n\t#\tS,s\t\tStrikeout\n\t#Height is height of text (default 0, gives default height?)\n\t#Weight is width; defautl 0 normally used for normal aspect of text\n\n\tCPL \"GXLOADFONT\"\n\n\tif n<=0 then return 0 fi\n!n:=min(n,nglobalfonts)\n\n\tif style.isvoid then style:=\"\" fi\n\n\tif n<=nglobalfonts and fonttable[n] then\t\t\t!remove existing font\n\t\tigxremovefont(n)\n\tfi\n\n\tp:=style\n\tbold:=400\n\titalic:=0\n\tunderline:=0\n\tstrikeout:=0\n\tfor c in style do\n\t\tcase asc(convuc(c))\n\t\twhen 'B' then bold:=700\n\t\twhen 'I' then italic:=1\n\t\twhen 'U' then underline:=1\n\t\twhen 'S' then strikeout:=1\n\t\tesac\n\tod\n\n\thfont:=createfont(\n\t\tfacename:\tfacename,\n\t\theight:\t\theight,\n\t\twidth:\t\twidth,\n\t\tbold:\t\tbold,\n\t\titalic:\t\titalic,\n\t\tunderline:\tunderline,\n\t\tcharset:\t0,\n\t\tquality:\t2,\n\t\tescapement:\t0,\n\t\torientation:0)\n\n\tif hfont=0 then\n\t\thfont:=getstockobject(system_font)\n\tfi\n\n\tfonttable[n]:=hfont\n\tnglobalfonts:=max(n,nglobalfonts)\n\n\tselectobject(screendc,fonttable[n])\n\n\ttm:=new(ws_textmetrics)\n\n\tgettextmetrics(screendc,&tm)\n\n\tfontdimtable[n]::=ws_point(tm.avecharwidth, tm.height+tm.externalleading)\n\tfontvdimtable[n]::=ws_point(tm.ascent, tm.descent)\n\n\tselectobject(screendc,getstockobject(system_font))\n\n\treturn n\nend\n\nproc igxremovefont(n)=\n!unload font n, free table entry\n\n\tunless n in 1..nglobalfonts then return end\n\tif fonttable[n]=0 then return fi\t!already freed\n\n!w:=windowlist\n!while w<>nil do\n!\tif w.gdi.hdc and w.gdi.font>0 then\t\t!font was in use, set as undefined\n!\t\tw.gdi.font:=1\n!\t\tselectobject(w.gdi.hdc,fonttable[w.gdi.font])\n!\t\tif w.gdi.hdc2 then\n!\t\t\tselectobject(w.gdi.hdc2,fonttable[w.gdi.font])\n!\t\tfi\n!\tfi\n!\tw:=w.nextwind\n!od\n\n\tdeleteobject(fonttable[n])\t\t!get rid of this font\n\tfonttable[n]:=0\nend\n\nexport func gxfont(w,font=1)=\t\t!GXFONT\n\t# select font from font table for subsequent text display; default is font 1\n\n\tif not w then w:=wapplic fi\n\tif not w then w:=wscreen fi\n\n\tgdi:=w.gdi\n\n\tif font.isdef and font<>gdi.font then\n\t\tif font not in 1..nglobalfonts then\n\t\t\tabort(\"Bad font number \"+tostr(font))\n\t\tfi\n\t\tgdi.font:=font\n\t\tif fonttable[font]=0 then\n\t\t\tabort(\"Font not in use \"+tostr(font))\n\t\tfi\n\n\t\toldhfont:=selectobject(gdi.hdc,fonttable[font])\n\t\tsendmessage(gdi.hwnd,wm_setfont,fonttable[font],0)\n\n\t\tif gdi.drawmode=dm_screenmemory then\n\t\t\toldhfont:=selectobject(gdi.hdc2,fonttable[font])\n\t\t\tsendmessage(gdi.hwnd2,wm_setfont,fonttable[font],0)\n\t\tfi\n\t\tif fontdimtable[font].x=0 then\t\t!set up dims\n\t\t\tgxchardim(font,0)\n\t\tfi\n\tfi\n\treturn gdi.font\nend\n\nfunc hascontrolchars(s)=\t\t!TESTCTRLCHAR\n!scan string s looking for control chars\n!return 1 if control chars (<20H) are present\n\n\tforeach c in s do\n\t\tif c<32 then return 1 fi\n\tod\n\treturn 0\nend\n\nexport func gxchardim(font,vert=0)=\t\t\t!GXCHARDIM\n\t#return font char average width/height info as a point rec\n\t#wfont is a font number, or hwindow when the current font in that window is used\n\t#vert=1 means get ascent/descent pair instead of (vert=0) average width/height\n\n\tif not font.isint then\n\t\tfont:=font.gdi.font\n\tfi\n\tif font=0 then font:=1 fi\n\n!CPL =FONTDIMTABLE,=FONT\n\n\tif fontdimtable[font].x=0 then\t\t!probably stock fonts not setup with gxloadfont\n\t\tselectobject(screendc,fonttable[font])\n\t\ttm:=new(ws_textmetrics)\n\t\tgettextmetrics(screendc,&tm)\n\n\t\tfontdimtable[font]::=ws_point(tm.avecharwidth, tm.height+tm.externalleading)\n\n\t\tfontvdimtable[font]::=ws_point(tm.ascent, fontvdimtable[font].y:=tm.descent)\n\n\t\tselectobject(screendc,getstockobject(ansi_var_font))\n\tfi\n\n\tif vert then\n\t\treturn fontvdimtable[font]\n\tfi\n\n\treturn fontdimtable[font]\nend\n\nexport func gxbgndcolour(w,?colour)=\t\t!GXBGNDCOLOUR\n\t#Set background colour (for text mainly)\n\t#colour will be a colour index\n\t#return current colour when omitted\n\tgdi:=w.gdi\n\n\tif colour.isdef then\n\n\t\tif colour<>w.style.textbgnd then\n\t\t\tw.style.textbgnd:=colour\n\t\t\tsetbkcolour(gdi.hdc,getrgb(colour))\n\t\t\tif gdi.drawmode=dm_screenmemory then\n\t\t\t\tsetbkcolour(gdi.hdc2,getrgb(colour))\n\t\t\tfi\n\t\tfi\n\t\tgxbgndmode(w,(colour<>w.style.windbgnd|1|0))\n\tfi\n\treturn w.style.textbgnd\nend\n\nexport func gxbgndmode(w,?mode)=\t\t!GXBGNDMODE\n\t#\tmode supplied: set new background mode:\n\t#\t\t1 y Y T\t\tSet opaque (T for True? Looks like Transparent)\n\t#\t\t0 n N F\t\tSet Transparent\n\n\tgdi:=w.gdi\n\n\tif mode.isdef  then\n\t\tcase mode\n\t\twhen 1,'y','Y','T' then\n\t\t\tw.style.bgndmode:=opaque\n\t\telse\n\t\t\tw.style.bgndmode:=transparent\n\t\tesac\n\n\t\tsetbkmode(gdi.hdc,mode+1)\n\t\tif gdi.drawmode=dm_screenmemory then\n\t\t\tsetbkmode(gdi.hdc2,mode+1)\n\t\tfi\n\tfi\n\treturn w.style.bgndmode\nend\n\nexport proc gxhighlight(w,x,y,width,height)=\t\t!GXHIGHLIGHT\n\t#Invert rectangular region\n\tconst dstinvert=0x00550009\t!patblt\n\tgdi:=w.gdi\n\n\tgdi.updated:=1\n\tpatblt(gdi.hdc, x, y, width,height,dstinvert)\n\tif gdi.drawmode=dm_screenmemory then\n\t\tpatblt(gdi.hdc2, x,y, width,height,dstinvert)\n\tfi\nend\n\nexport proc gxbitblt(w,x2,y2,width,height,x,y)=\t\t\t!GXBITBLT\n\t#Copy rectangular region of window to another location\n\tgdi:=w.gdi\n\tgdi.updated:=1\n\tbitblt(gdi.hdc, x2, y2, width,height,\n\t\t\t\tgdi.hdc,x,y,srccopy)\n\n\tif gdi.drawmode=dm_screenmemory then\n\t\tbitblt(gdi.hdc2,x2,y2,width,height,gdi.hdc2,x,y,srccopy)\n\tfi\nend\n\nexport func gxaskmess(mode=0)=\n\t#wait for next message and return message number\n\t#return 0 if close or quit message seen\n\t#some messages will be ignored here (processsed via procmess) and will wait for next\n\t#mode=0\t\tReturn currmess.message\n\t#mode=1\t\tReturn currmess.message, but if a mm_command message, then return\n\t#\t\t\tthe command id. This means message numbers and command ids share the\n\t#\t\t\tsame space. This should work because messages are below 200, and ids above 200\n\n!CPL \"AM1\",$REFCOUNT(WAPPLIC)\n\trepeat\n\t\tif mxwait_mm_message()=0 then\nCPL \"GXAM MAXWAIT =0\"\n\t\t\treturn mm_cancel\n\t\tfi\n\t\tif quitmess then return mm_cancel fi\n\t\tx:=process_message(currmess)\n\n\t\tif currmess.message=mm_key and currmess.a=27 then\n\t\t\treturn mm_cancel\n\t\tfi\n\n\tuntil x=thismess\t\t\t\t\t!message ready to return\n\n\tif mode=1 and currmess.message=mm_command then\n\t\treturn currmess.a\n\tfi\n\n\treturn currmess.message\nend\n\nfunc process_message(mess)=\n\t#user or default event processing for mm message\n\t#will call event handler if there is one\n\t#returns 1 (skipmess) if message has been processed here; caller must wait for another message\n\t#returns 0 (thismess) caller should deal with this message (it has not been processed, or has beenbut caller can process it too)\n\n!\tCP \"\t\";SHOWMESSAGE(\"PROCMESS\",MESS)\n\n\n\tif mess.wind=nil then\n\t\treturn thismess\n\tfi\n\n\tcase mess.message\n\twhen mm_close then\n\t\treturn thismess\n\tesac\n\n!CPL \"PROCESS MESSAGE\"\n\n\tstatus:=domessage(mess)\n!CPL =STATUS,\"AFTER DOMESS\"\n\n\treturn status\nend\n\nexport proc docs=\n!export proc where dostringzs for entire lib can go\n\t#Option dicts: used as args to gccreatewindow/gxcreatechildwindow:\n\t#\twf_border\t\tBorder style; see wbs_ enums\n\t#\twf_resize\t\t1 for resizable border (for top-level windows)\n\t# wf_hscroll\t\t1 for horizontal scrollbar\n\t# wf_vscroll\t\t1 for vertical scrollbar\n\t# wf_menu\t\t\t1 for a menubar\n\t# wf_caption\t\t1 for a caption bar (needs to be the right kind of border too)\n\t# wf_max\t\t\t1 for a max button\n\t# wf_minmax\t\t1 for a min/max buttons\n\t# wf_sysmenu\t\t1 for a system menu (right-click on top left I think)\n\t# wf_desktop\t\t1 to fill desktop\n\t# wf_clip\t\t\t1 to clip windows to desktop\n\t# wf_show\t\t\t1 to show window after creating\n\t# wf_iframe\t\t1 for pos/dim to refer to frame rather than client area\n\t# wf_cent\t\t\t1 to centre window\n\t# wf_toolwind\t\t1 for tool window (not sure what this means)\n\nend\n\nfunc newwindow(hwnd,index,windclass,borderstyle)=\n\n\tw:=new(rwindow,0)\n\tw.windclass:=windclass\n!w.style.borderstyle:=borderstyle\n\tw.index:=index\n\tw.childlist::=()\n\tw.owner:=nil\n\tw.closed:=0\n\n\taddwindow(w)\n\twx_setw(hwnd,w.gindex)\n\treturn w\nend\n\nexport func getrgb(index)=\n\tif index=0 then return 0 fi\n\treturn colourvalues[index]\nend\n\nfunc readstyle(owner,windclass,options)=\n!process gx options stored in the given dict type\n!return a stylerec all filled in\n\n\tif options.type=stylerec then\t\t\t!already a stylerec\n\t\treturn options\n\tfi\n\n\tss:=new(stylerec)\n\tif options.isvoid then\t\t\t\t!use bunch of defaults\n\t\td::=defstyle\n\t\td.border:=defaultborderstyles[windclass]\n\t\treturn d\n\tfi\n\n\tss.border\t:=options{ss_border,defaultborderstyles[windclass]}\n\tss.justify\t:=options{ss_justify,defstyle.justify}\n\tss.vjustify\t:=options{ss_vjustify,defstyle.vjustify}\n\tss.textfgnd\t:=options{ss_textfgnd,defstyle.textfgnd}\n\tss.textbgnd\t:=options{ss_textbgnd,defstyle.textbgnd}\n\tss.bgndmode\t:=options{ss_bgndmode,defstyle.bgndmode}\n\n\tss.iframe\t:=options{ss_iframe,0}\n\n\tss.hilitetype\t:=options{ss_hilitetype,defstyle.hilitetype}\n\tss.marktype\t:=options{ss_marktype,(ss.hilitetype|0|defstyle.marktype)}\n\tss.imark\t:=options{ss_imark,defstyle.imark}\n\n\tif windclass in [toggle_class, select_class,mark_class] and ss.marktype then\n\t\tdef:=owner.style.windbgnd\n\telse\n\t\tdef:=defstyle.windbgnd\n\tfi\n\n\tss.windbgnd\t:=options{ss_windbgnd,def}\n\tss.hscroll\t:=options{ss_hscroll,0}\n\tss.vscroll\t:=options{ss_vscroll,0}\n\tss.lbchange\t:=options{ss_lbchange,0}\n\tss.returnmess\t:=options{ss_returnmess,0}\n\tss.noupdate\t:=options{ss_noupdate,0}\n\n\treturn ss\nend\n\nexport func gxpanel(owner,pos,dim,?style)=\n\tss:=readstyle(owner,panel_class,style)\n\tw:=gxcontrol(owner,panel_class,pos,dim,ss)\n\tgxdraw(w)\n\n\treturn w\nend\n\nexport func gxgroup(owner,pos,dim,?style)=\n\tss:=readstyle(owner,group_class,style)\n\tw:=gxcontrol(owner,group_class,pos,dim,ss)\n\tgxdraw(w)\n\n\treturn w\nend\n\nexport func gxstatusbar(owner,pos,dim,?style)=\n\n\tss:=readstyle(owner,statusbar_class,style)\n\n\tif ss.iframe=0 then\t\t\t\t\t!frame not included, but can't have it leaking outside owner\n\t\tbs:=ss.border\n\t\tif bscat[bs]<>'I' then\t\t\t!do adjustments\n\t\t\tdim+:=bswidths[bs].y1+bswidths[bs].y2\n\t\tfi\n\t\tss.iframe:=1\t\t\t\t\t!stop gxcontrol expanding dims\n\tfi\n\n\t(ecapos,ecadim):=gxclientarea(owner)\n\n\tif pos.isint then pos:=chr(pos) fi\n!if pos.ispointer then pos:=chr(pos) fi\n\tif convuc(pos) in \"T TOP\" then\t\t\t!along the top\n\t\tpos:=ecapos\n\t\tdir:='T'\n\telse\t\t\t\t\t\t\t\t\t!along the bottom\n\t\tpos:=(ecapos[1],ecadim[2]-dim+ecapos[2])\n\t\tdir:='B'\n\tfi\n\tdim:=(ecadim[1],dim)\n\n\tss.dir:=dir\n\n\tw:=gxcontrol(owner,statusbar_class,pos,dim,ss)\n\n\tgxdraw(w)\n\n\treturn w\nend\n\nexport func gxframebar(owner,pos,dim,?style)=\n\n\tss:=readstyle(owner,framebar_class,style)\n\tif ss.iframe=0 then\t\t\t\t\t!frame not included, but can't have it leaking outside owner\n\t\tbs:=ss.border\n\t\tif bscat[bs]<>'I' then\t\t\t!do adjustments\n\t\t\tdim+:=bswidths[bs].y1+bswidths[bs].y2\n\t\tfi\n\t\tss.iframe:=1\t\t\t\t\t!stop gxcontrol expanding dims\n\tfi\n\n\t(ecapos,ecadim):=gxclientarea(owner)\n\n!if pos.isint then pos:=chr(pos) fi\n\tif pos.ispointer then pos:=chr(pos) fi\n\tif convuc(pos) in \"L LEFT\" then\t\t\t!along the left\n\t\tpos:=ecapos\n\t\tdir:='L'\n\telse\t\t\t\t\t\t\t\t\t!along the right\n\t\tpos:=(ecadim[1]-dim+ecapos[1],ecapos[2])\n\t\tdir:='R'\n\tfi\n\tdim:=(dim,ecadim[2])\n\n\tss.dir:=dir\n\n\tw:=gxcontrol(owner,\tframebar_class,pos,dim,ss)\n\n\tgxdraw(w)\n\n\treturn w\nend\n\nexport func gxbutton(owner,pos,dim,caption,?style,id=201,enable=1)=\n\t#create clickable button\n\t#returns rwindow\n\n\tss:=readstyle(owner,button_class,style)\n\n\tw:=gxcontrol(owner,button_class,pos,dim,ss)\n\tw.id:=id\n\n\tw.text:=caption\n\tw.enable:=enable\n\tgxdraw(w)\n\n\treturn w\nend\n\nexport func gxlabel(owner,pos,dim,caption,?style)=\n\t#create static label button\n\t#returns rwindow\n\n\tss:=readstyle(owner,label_class,style)\n\n\tw:=gxcontrol(owner,label_class,pos,dim,ss)\n\n\tw.text:=caption\n\tgxdraw(w)\n\n\treturn w\nend\n\nfunc gxcontrol(owner,windclass=button_class,pos,dim,?ss)=\n\n\tif ss.type=dict or ss.isvoid then\n\t\tss:=readstyle(owner,windclass,ss)\n\tfi\n\twb:=wbs_none\n\tcase ss.border\t\t\t!find wbs- version of windows-drawn borders\n\twhen bs_simplew then\n\t\twb:=wbs_simple\n\tesac\n\n\tif ss.iframe and bscat[ss.border]<>'I' then\n\t\twidths:=bswidths[ss.border]\n\t\tpos[1]+:=widths.x1\n\t\tpos[2]+:=widths.y1\n\t\tdim[1]-:=widths.x1+widths.x2\n\t\tdim[2]-:=widths.y1+widths.y2\n\tFI\n\n\thwnd:=wx_createcontrol(pos:pos,dim:dim,border:wb,owner:owner.gdi.hwnd)\n\n\tif hwnd=0 then\n\t\tabort(\"Can't create control window\")\n\tfi\n\n\tw:=newwindow(hwnd,0,no_class,ss.border)\n\tw.windclass:=windclass\n\tw.style:=ss\n\tw.owner:=owner\n\tw.enable:=1\n\n\tsetwindowdims_c(w,hwnd)\n\tsetupgdi(w,hwnd)\n\n\tgxdrawmode(w,dm_screenmemory)\n\n\tgxfont(w,labelfont)\n\n\tgxtextcolour(w,w.style.textfgnd,w.style.textbgnd)\n\n\tgxbgndmode(w,w.style.bgndmode)\n\n!link into owner\n\tw.owner.childlist append:=w\n\tw.index:=w.owner.childlist.upb\n\n\treturn w\nend\n\nexport func gxtoggle(owner,pos,dim,caption=\"\",linkvar,?style,id=201,enable=1)=\n\n\t(posx,posy):=pos\n\t(dimx,dimy):=dim\n\ttextoffset:=0\n\n\n\tss:=readstyle(owner,toggle_class,style)\n\n!work out whether an auxiliary window is needed\n\n\tif ss.marktype then\n\t\tif ss.imark=0 then\t\t\t!dims don't include the mark\n\t\t\tposx-:=markdim\n\t\t\tdimx+:=markdim\n\t\t\ttextoffset:=markdim\n\t\tfi\n\tfi\n\n\tw:=gxcontrol(owner,toggle_class,(posx,posy),(dimx,dimy),ss)\n!RETURN 0\n\tw.linkvar:=linkvar\n\tw.id:=id\n\tw.text:=caption\n\tw.attrs:=togglerec(textoffset,1)\n\tw.enable:=enable\n\n\tif w.style.marktype then\n!\tgxmark(owner:w,pos:(0,(w.dimy-markdim)%2),id:id,style:style)\n\t\tgxmark(owner:w,pos:(0,(w.dimy-markdim)%2),id:id, style:ss)\n\tfi\n\n\tgxdraw(w)\n\treturn w\nend\n\nexport func gxselect(owner,pos,dim,caption=\"\",linkvar,onvalue,?style,id=201,enable=1)=\n\n\t(posx,posy):=pos\n\t(dimx,dimy):=dim\n\ttextoffset:=0\n\n\tss:=readstyle(owner,select_class,style)\n\n!work out whether an auxiliary window is needed\n\tif ss.marktype and ss.imark=0 then\t\t\t!dims don't include the mark\n\t\tposx-:=markdim\n\t\tdimx+:=markdim\n\t\ttextoffset:=markdim\n\tfi\n\n\tw:=gxcontrol(owner,select_class,(posx,posy),(dimx,dimy),ss)\n\n\tw.linkvar:=linkvar\n\tw.id:=id\n\tw.text:=caption\n\tw.attrs:=togglerec(textoffset,onvalue)\n\tw.enable:=enable\n\tif w.style.marktype then\n\t\tgxmark(owner:w,pos:(0,(w.dimy-markdim)%2),id:id, style:style)\n\tfi\n\n\tgxdraw(w)\n\treturn w\nend\n\nexport proc showmessage(caption,mess)=\n!RETURN\n!\tCPL MESS.MESSAGE\n\tcp caption,,\":\",leftstr(messagenames[mess.message],14)\n\tcp \"A:\",,mess.a,\"B:\",,mess.b\n\tcp \" (X:\",,mess.x,\"Y:\",,mess.y,,\") Buttons:\",mess.state:\"b\"\n\n\tif mess.wind then\n\t\tcpl \"\tWindow:\",mess.wind.name\n\telse\n\t\tcpl\n\tfi\nend\n\nfunc domessage(mess)=\n\n\tm:=mess.message\n\tw:=mess.wind\n\n\tcase m\n\twhen mm_move,mm_setcursor then\n\t\treturn skipmess\n\tesac\n\n!CPL \"DOMESSAGE\",MESSAGENAMES[M]\n\n!\tCPL messhandlertable[m,w.windclass]\n\tx:=messhandlertable[m,w.windclass](mess,w)\n\n\treturn x\nend\n\nproc init_handlertables=\n\tmesshandlertable:=maketable(mm_null..mm_last, no_class..dummy_class, nil)\n\tactionhandlertable:=maketable(actionnames.bounds, no_class..dummy_class, nil)\n\n\tmessalltable:=new(list,mm_null..mm_last,0)\t\t!for all mess_mess_all handlers\n\tfnallall:=nil\t\t\t\t\t\t\t\t\t!for single mess_all_all handler\n\tfnfixups:=nil\n\n\tactionalltable:=new(list,actionnames.bounds,0)\n\n\tfor d to $nprocs() do\n\t\tfnptr:=$procref(d)\n\t\tfnname:=$procname(d)\n\n\t\t(name,messname,windname):=splitstring(fnname,\"_\")\t\t\t!split func name\n\n\t\tif fnname=\"gxhandler_fixups\" then\n\t\t\tfnfixups:=fnptr\n\t\telsif leftstr(fnname,5)=\"mess_\" then\n\t\t\tif messname=\"all\" and windname=\"all\" then\n\t\t\t\tfnallall:=fnptr\n\t\t\telse\n\t\t\t\tmessage:=(\"mm_\"+messname) inx messagenames\n\t\t\t\tif not message.isfound then\n\t\t\t\t\tABORT(\"CAN'T FIND MESSAGE <\"+messname+\">\")\n\t\t\t\tfi\n\n\t\t\t\tif windname=\"all\" then\t\t\t\t!assume <mess> all\n\t\t\t\t\tmessalltable[message]:=fnptr\n\t\t\t\telse\n\t\t\t\t\tmesshandlertable[message,WX:=findwindclass(windname)]:=fnptr\n\t\t\t\tfi\n\t\t\tfi\n\n\t\telsif leftstr(fnname,8)=\"do_draw_\" or leftstr(fnname,10)=\"do_update_\" then\n\t\t\taction:=messname+\"_w\" inx actionnames\n\t\t\tif not action.isfound then\n\t\t\t\tABORT(\"CAN'T FIND ACTION \"+MESSNAME)\n\t\t\tfi\n\t\t\tif windname=\"all\" then\n\t\t\t\tactionalltable[action]:=fnptr\n\t\t\telse\n\t\t\t\twindclass:=findwindclass(windname)\n\t\t\t\tactionhandlertable[action,windclass]:=fnptr\n\t\t\tfi\n\t\tfi\n\tod\n\n!!do some manual fixups\n\tif fnfixups then\n\t\tfnfixups()\n\tfi\n\n\tfor mx:=0 to mm_last do\n\t\tfor wx:=0 to dummy_class do\n\t\t\tif not messhandlertable[mx,wx] then\n\t\t\t\tmesshandlertable[mx,wx]:=(messalltable[mx]|messalltable[mx]|fnallall)\n\t\t\tfi\n\t\tod\n\tod\n\n\tif not fnallall then\n\t\tpcerror(\"Can't find all/all mess handler\")\n\tfi\n\n\tfor ax:=1 to DRAW_w do\n\t\tfor wx:=0 to dummy_class do\n\t\t\tif not actionhandlertable[ax,wx] then\n\t\t\t\tif not actionalltable then\n\t\t\t\t\tpcerror(\"No DO/ALL handler for:\"+actionnames[ax])\n\t\t\t\tfi\n\t\t\t\tactionhandlertable[ax,wx]:=actionalltable[ax]\n\t\t\tfi\n\t\tod\n\tod\nend\n\nfunc findwindclass(name)=\n\t\twindclass:=name+\"_class\" inx windowclassnames\n\t\tunless windclass.isfound then\n\t\t\tABORT(\"CAN'T FIND WINDOW \"+windname)\n\t\tend\n\t\treturn windclass\nend\n\nexport proc gxdraw(w)=\n\tfnptr:=actionhandlertable[draw_w,w.windclass]\n\n\tif fnptr then\n\t\tfnptr(w)\n\telse\n\t\tcpl \"NO DRAW HANDLER\",windowclassnames[w.windclass],w.name\n\t\twaitkey()\n\t\tstop\n\tfi\nend\n\nexport proc gxupdate(w)=\n\tfnptr:=actionhandlertable[update_w,w.windclass]\n\tif fnptr then\n\t\tfnptr(w)\n\telse\n\t\tgxdraw(w)\n\tfi\nend\n\nexport proc eventloop=\n\tdo\n\t\tm:=gxaskmess()\n\n\t\tSHOWMESSAGE(\"EVENTLOOP\",CURRMESS)\n\n\t\tcase m\n\t\twhen 0,mm_cancel then\n\t\t\treturn\n\t\tesac\n\n\tod\nend\n\nexport func gxeditbox(owner,pos,dim,linkvar,?style,id=201,enable=1)=\n\n\tss:=readstyle(owner,editbox_class,style)\n\n\tw:=gxcontrol(owner,editbox_class,pos,dim,ss)\n\n\tw.linkvar:=linkvar\n\tw.id:=id\n\tw.attrs:=new(editboxrec)\n\tw.attrs.currpos:=linkvar^.len+1\n\tw.enable:=enable\n\n\tgxdraw(w)\n\treturn w\nend\n\nexport proc gxebchange(w,?linkvar,charpos=-1)=\n\n\tif linkvar.isdef then\n\t\tw.linkvar:=linkvar\n\tfi\n\n\tif charpos=-1 then\n\t\tw.attrs.currpos:=w.linkvar^.len+1\n\telse\n\t\tw.attrs.currpos:=charpos\n\tfi\n\tgxupdate(w)\nend\n\nexport proc gxsetlbdata(w,linkvar,?pos)=\n\tw.linkvar:=linkvar\n\tif pos.isvoid then\n\t\tpos:=(linkvar^|1|0)\n\tfi\n\tw.attrs.currpos:=pos\n\n\tif w.childlist[1] then\n!\tgxsetscrolllimits(ws,linkvar^.bounds,w.attrs.rows)\n\t\tgxsetscrolllimits(ws,getlvbounds(linkvar),w.attrs.rows)\n\t\tgxscrollpos(ws,pos)\n\tfi\nend\n\nexport proc gxsetlbpos(w,pos)=\n!change in pos\n\tw.attrs.currpos:=pos\n\n!work out screen row\n\tif pos then\n\t\toldpagepos:=w.attrs.pagepos\n\t\tif pos<oldpagepos then\n\t\t\tw.attrs.pagepos:=pos\n\t\telsif pos>oldpagepos+w.attrs.rows-1 then\n\t\t\tw.attrs.pagepos:=pos-w.attrs.rows+1\n\t\tfi\n\t\tif w.attrs.pagepos<>oldpagepos then\n\t\t\tif w.childlist then\n\t\t\t\tgxscrollpos(w.childlist[1],w.attrs.pagepos)\n\t\t\tfi\n\t\t\tm:=mm_draw\n\t\telse\n\t\t\tm:=mm_update\n\t\tfi\n\telse\n\t\tm:=mm_draw\n\tfi\n\n\tpostmess(w,m)\n\tif w.style.lbchange then\n\t\tpostmess(w,mm_lbchange,w.attrs.currpos)\n\tfi\nend\n\nexport proc gxsetlbpage(w,pagepos)=\n!change in pagepos (originates from scrollbar message)\n\tw.attrs.pagepos:=pagepos\n\n\toldpos:=w.attrs.currpos\n\tif oldpos<pagepos then\n\t\tw.attrs.currpos:=pagepos\n\telsif oldpos>=pagepos+w.attrs.rows then\n\t\tw.attrs.currpos:=pagepos+w.attrs.rows-1\n\tfi\n\n\tif w.childlist then\n\t\tgxscrollpos(w.childlist[1],pagepos)\n\tfi\n\n\tpostmess(w,mm_draw)\n\tif w.style.lbchange and oldpos<>w.attrs.currpos then\n\t\tpostmess(w,mm_lbchange,w.attrs.currpos)\n\tfi\nend\n\nexport func gxlistbox(owner,pos,dim,linkvar,?style,id=201,rows=0,pitch=0,offset=0)=\n\n\tss:=readstyle(owner,listbox_class,style)\n\n\t(dimx,dimy):=dim\n\tif ss_vscroll and ss_imark=0 then\t\t\t!dims don't include the scrollbar\n\t\tdimx+:=arrowdim\n\tfi\n\n\tw:=gxcontrol(owner,listbox_class,pos,(dimx,dimy),ss)\n\tw.linkvar:=linkvar\n\tw.id:=id\n\tw.attrs:=new(listboxrec)\n\n\tif pitch=0 then\t\t\t\t\t\t\t\t!calculate all these here\n\t\tpitch:=listrowheight\n\t\toffset:=0\n\t\trows:=w.dimy%pitch\n\tfi\n\tw.attrs.rows:=rows\n\tw.attrs.pitch:=pitch\n\tw.attrs.offset:=offset\n\n\tw.attrs.pagepos:=1\n\tw.attrs.currpos:=(getlvbounds(linkvar).len|1|0)\n\n\tif w.style.vscroll then\n\t\tws:=gxvertscrollbar(owner:w,pos:(w.dimx-arrowdim,0),dim:w.dimy,id:id,style:style)\n\t\tgxsetscrolllimits(ws,getlvbounds(linkvar),w.attrs.rows)\n\n\t\tgxscrollpos(ws,getlvbounds(linkvar).lwb)\n\tfi\n\n\tgxdraw(w)\n\treturn w\nend\n\nexport func gxarrow(owner,pos,?dim,dir,?style,id=201)=\n\n\tss:=readstyle(owner,arrow_class,style)\n\tif dim.isvoid then\n\t\tdim:=(arrowdim,arrowdim)\n\tfi\n\n\tw:=gxcontrol(owner,arrow_class,pos,dim,ss)\n\tw.id:=id\n\tif dir.isstring then dir:=asc(dir) fi\n\tcase dir\t\t\t\t\t!allow compass bearings too, but convert to UDLR\n\twhen 'N' then dir:='U'\n\twhen 'E' then dir:='R'\n\twhen 'S' then dir:='D'\n\twhen 'W' then dir:='L'\n\tesac\n\n\tw.style.dir:=dir\t\t\t!don't dir allow via style options\n\tgxdraw(w)\n\n\treturn w\nend\n\nexport proc gxsetscrolllimits(w,limits,span=0)=\n!set up or change scrollbar limits\n!span=0:\n!\tPure ranging control. Limits are actual range of the thumb.\n!\tThumb is drawn at a fixed, nominal size. Might be suppressed when limits are <=1\n!\tInitial position set to limits.lwb\n!span=M:\n!\tPaging control, such as used on a listbox or text editor.\n!\tSpan can be the number of rows display at one time.\n!\tLimit can be single number N, or range 1..N.\n!\tActual scroll bar range will be 1..N-M+1. When upper limit<1 then\n!\tlimit will be 1..1, and thumb might not be drawn\n!\tData position will: actually there /is/ not data position, except for the\n!\tdata position represented by the top row, which will be the same as the scroll\n!\tposition.\n!Arrows should be disabled (and perhaps thumb suppressed) when scroll range if 1..1,\n!or data range is nor larger than a span\n\n\tw.attrs.span:=span\n\tif w.style.dir='H' then\n\t\twidth:=w.dimx\n\telse\n\t\twidth:=w.dimy\n\tfi\n\tm:=width-arrowdim*2\t\t\t\t!number of pixels movement between arrows\n\n\tif span=0 then\t\t\t\t\t\t!pure scrolling control\n\t\tw.attrs.limits:=limits\n\t\tw.attrs.currpos:=limits.lwb\n\t\tw.attrs.thumbsize:=arrowdim\n\t\tenable:=limits.len>1\n\t\tw.attrs.thumbsize:=arrowdim*enable\n\telse\n\t\tif limits.isrange then\n\t\t\tlength:=limits.len\n\t\telse\n\t\t\tlength:=limits\n\t\tfi\n\t\tif length<=span then\n\t\t\tenable:=0\n\t\t\tw.attrs.limits:=1..1\n\t\t\tw.attrs.thumbsize:=0\n\t\telse\n\t\t\tw.attrs.limits:=1..length-span+1\n\t\t\tenable:=1\n\t\t\tw.attrs.thumbsize:=max(10,int(m*(span/length)))\n\t\tfi\n\tfi\n\n\tw.attrs.currpos:=w.attrs.limits.lwb\n\tw.enable:=enable\n\n\tw.attrs.thumbspan:=m-w.attrs.thumbsize\t\t!movement available to thumb\n\tw.attrs.thumbpos:=arrowdim\n\tpostmess(w,mm_draw)\nend\n\nexport func gxscrollpos(w,pos,u=0)=\n!\n\tif pos.isvoid then\n\t\treturn w.attrs.currpos\n\tfi\n\n\tCPL =POS\n\tCPL =W.ATTRS.CURRPOS\n\tCPL =W.ATTRS.LIMITS\n\n\tw.attrs.currpos:=pos\n\tif pos not in w.attrs.limits then\n\t\tpcerror(\"Bad scroll pos\")\n\tfi\n\n\ttpos:=int(w.attrs.thumbspan*((pos-w.attrs.limits.lwb)/(w.attrs.limits.len-1)))\n\tw.attrs.thumbpos:=arrowdim+tpos\n\n\tw.childlist[1].enable:=pos>w.attrs.limits.lwb\n\tw.childlist[2].enable:=pos<w.attrs.limits.upb\n\n\tif u then\n\t\tpostmess(w,mm_update)\n\tfi\n\treturn 0\nend\n\nexport func gxhozscrollbar(owner,pos,dim,?style,id=201)=\n\n\tss:=readstyle(owner,scrollbar_class,style)\n\twidth:=arrowdim\n\tif dim.isint then\n!if dim.ispointer then\n\t\tdim:=(dim,width)\n\telse\n\t\twidth:=dim[1]\n\tfi\n\n\tw:=gxcontrol(owner,scrollbar_class,pos,dim,ss)\n\tw.id:=id\n\tw.style.dir:='H'\n\n\tw.attrs:=new(scrollbarrec)\n\tw.flags.[wa_leftdrag]:=1\n\n!Now, create the arrows at each end. The thumbbar is not an explicit control,\n!it's just a drawn box\n\twa:=gxarrow(owner:w, pos:(0,0), dim:(width,width),dir:'L')\n\twb:=gxarrow(owner:w, pos:(dim[1]-width,0), dim:(width,width),dir:'R')\n\n\tgxsetscrolllimits(w,1..200,20)\n\tgxscrollpos(w,1)\n\n\tgxdraw(w)\n\n\treturn w\nend\n\nexport func gxvertscrollbar(owner,pos,dim,?style,id=201)=\n\tss:=readstyle(owner,scrollbar_class,style)\n\twidth:=arrowdim\n\tif dim.isint then\n!if dim.ispointer then\n\t\tdim:=(width,dim)\n\telse\n\t\twidth:=dim[2]\n\tfi\n\n\tw:=gxcontrol(owner,scrollbar_class,pos,dim,ss)\n\tw.id:=id\n\tw.style.dir:='V'\n\n\tw.attrs:=new(scrollbarrec)\n\tw.flags.[wa_leftdrag]:=1\n\n!Now, create the arrows at each end. The thumbbar is not an explicit control,\n!it's just a drawn box\n\twa:=gxarrow(owner:w, pos:(0,0), dim:(width,width),dir:'U')\n\twb:=gxarrow(owner:w, pos:(0,dim[2]-width), dim:(width,width),dir:'D')\n\tgxsetscrolllimits(w,100..200,2)\n\n\tgxscrollpos(w,100)\n\n\tgxdraw(w)\n\n\treturn w\nend\n\nexport func gxmark(owner,pos,?dim,?style,id=201)=\n\n\tss:=readstyle(owner,mark_class,style)\n\tif dim.isvoid then\n\t\tdim:=(markdim,markdim)\n\tfi\n\n\tw:=gxcontrol(owner,mark_class,pos,dim,style)\n\tw.id:=id\n\tgxdraw(w)\n\n\treturn w\nend\n\nexport proc gxfocus(w)=\n!switch focus to window w\n\tif wfocus==w then\n\t\treturn\n\tfi\n\n\tif wfocus then\n\t\tdomessage(makemess(wfocus,mm_killfocus))\n\tfi\n\tcaretdrawn:=0\n\tdomessage(makemess(w,mm_setfocus))\nend\n\nexport proc gxkillfocus=\n\tif wfocus then\n\t\tdrawcaret(0)\n\tfi\n\twfocus:=nil\nend\n\nexport func gxcopy(w,?bm,x=0,y=0,scalex=1.0,scaley=0,sx=0,sy=0,dimx=0,dimy=0)=\t\t!GXCOPY\n!copy bitmap bm to window w, at position x,y in w. Scalex/y can be 0 for 1:1,\n!or Scalex/y can be any real value for unequal x/y scaling\n!For equal x/y scaling, Scaley can be 0\n!Entire bitmap is copied (sx,sy,w,h all 0); for portion, set sx,sy to top left of rect\n!and w,h to size to be copied\n![1..100]char str\n\n\tif bm.isvoid then\n\t\tbm:=w\n\t\tw:=nil\n\tfi\n\tif bm.isvoid then\n\t\treturn nil\n\tfi\n\n\tif dimx=0 then dimx:=bm.dimx-sx fi\n\tif dimy=0 then dimy:=bm.dimy-sy fi\n\n\tif scalex=0 then scalex:=1.0 fi\n\tif scaley=0 then scaley:=scalex fi\n\n\tif w=nil then\t\t!create appropriate window\n\t\tw:=gxcreatewindow(caption:\"Bitmap \"+tostr(bm.pixelbits)+\" bit\",pos:(500,500),\n\t\t\t\tdim:(bm.dimx*scalex,bm.dimy*scaley))\n\t\tw.gdi.drawmode:=dm_screenmemory\t\t\t!default when using auto-window\n\tfi\n\n\tgdi:=w.gdi\n\tgdi.updated:=1\n\n\tmode:=copymode\n\n\tsetstretchbltmode(gdi.hdc,mode)\n\tstretchblt(gdi.hdc, x, y,int(dimx*scalex),int(dimy*scaley),\n\t\t\t\t\t\t\t\t\t\t\t\tbm.gdi.hdc,sx,sy,dimx,dimy, srccopy)\n\tif gdi.drawmode=dm_screenmemory then\n\t\tsetstretchbltmode(gdi.hdc2,mode)\n\t\tstretchblt(gdi.hdc2,x,y,int(dimx*scalex),int(dimy*scaley),\n\t\t\t\t\t\t\t\t\t\t\t\tbm.gdi.hdc,sx,sy,dimx,dimy, srccopy)\n\tfi\n\n\treturn w\nend\n\nexport proc gxrestore(w,?r)=\n!repaint window w\n!only called when repaint can be done from a backup\n!r is the region to restore within w; or restore all if omitted\n\n\tif r.isvoid then\n\t\tx1:=y1:=0\n\n\t\twidth:=w.dimx\n\t\theight:=w.dimy\n\telse\n\t\tx1:=r.x1\n\t\ty1:=r.x2\n\t\twidth:=r.x2-x1+1\n\t\theight:=r.y2-y1+1\n\tfi\n\n\tcase w.gdi.drawmode\n\twhen dm_screen then\t\t\t!can't restore; need to call gx_draw\n\t\tgxdraw(w)\n\twhen dm_screenmemory then\n\t\tdestdc:=w.gdi.hdc\n\t\tsourcedc:=w.gdi.hdc2\n\twhen dm_memoryscreen then\n\t\tdestdc:=w.gdi.hdc2\n\t\tsourcedc:=w.gdi.hdc\n\telse\n\t\tabort(\"gxrest/?\")\n\tesac\n\n\tbitblt(destdc,x1,y1, width,height, sourcedc, x1,y1, srccopy)\n\nend\n\nexport func gxdrawmode(w,?drawmode)=\n!set or get drawmode\n!really requires window to be cleared afterwards.\n\n\tolddrawmode:=w.gdi.drawmode\n\tif drawmode.isvoid then\n\t\treturn olddrawmode\n\tfi\n\n\tif olddrawmode=drawmode then\t\t!already set\n\t\treturn drawmode\n\telsif olddrawmode<>dm_screen then\t!can only change screen => screenmemory/memoryscreen\n\t\tabort(\"gxdrawmode2\")\t\t\t!not memory to anything else\n\tfi\n\n!assuming currently on screen, will need extra compatible bitmap\n\tmemhwnd:=createcompatiblebitmap(screendc,w.dimx,w.dimy)\n\tmemhdc:=createcompatibledc(nil)\n\tselectobject(memhdc,memhwnd)\n\n!need to change draw mode\n\tcase drawmode\n\twhen dm_screenmemory then\n\t\tw.gdi.hwnd2:=memhwnd\n\t\tw.gdi.hdc2:=memhdc\n\twhen dm_memoryscreen then\n\t\tw.gdi.hwnd2:=w.gdi.hwnd\t\t\t!screen becomes secondary\n\t\tw.gdi.hdc2:=w.gdi.hdc\n\t\tw.gdi.hwnd:=memhwnd\n\t\tw.gdi.hdc:=memhdc\n\telse\n\t\tabort(\"gxdrawmode?\")\n\tesac\n\n\tw.gdi.drawmode:=drawmode\n\treturn drawmode\nend\n\nexport proc switchdest(w)=\n!for a window with screenmemory drawmode, switch things around so that\n!it's drawing into the memory area only\n\tgdi:=w.gdi\n\n\tcase gdi.drawmode\n\twhen dm_screenmemory then\n\t\tt:=gdi.hwnd; gdi.hwnd:=gdi.hwnd2; gdi.hwnd2:=t\n\t\tt:=gdi.hdc; gdi.hdc:=gdi.hdc2; gdi.hdc2:=t\n\t\tgdi.drawmode:=dm_memory\n\twhen dm_memory then\n\t\tt:=gdi.hwnd; gdi.hwnd:=gdi.hwnd2; gdi.hwnd2:=t\n\t\tt:=gdi.hdc; gdi.hdc:=gdi.hdc2; gdi.hdc2:=t\n\t\tgdi.drawmode:=dm_screenmemory\n\tesac\nend\n\nexport proc gxclose(w)=\n\n!CPL \"GXCLOSE1\",$REFCOUNT(W)\n\n\tcase w.windclass\n\twhen bitmap_class then\n\telse\n!ID:=$ID(W)\n\t\tif issubwindow(w,wfocus) then\n\t\t\twfocus:=nil\n\t\tfi\n\n\t\tif issubwindow(w,wmouse) then\t\n\t\t\tlastmousewindow:=nil\n\t\t\twmouse:=nil\n\t\tfi\n\n\t\tdestroywindow(w.gdi.hwnd)\n\n!IF $ID(CURRMESS.WIND)=ID THEN\n!CPL \"-------CLOSED CURRMESS.WIND\"\n!CURRMESS.WIND:=NIL\n!FI\n!CPL \"GXCLOSE2\",$REFCOUNT(W)\n\n\t\tgxfreewindow(w)\n!CPL \"GXCLOSE3\",$REFCOUNT(W)\n\n\tIF W=WAPPLIC THEN WAPPLIC:=NIL FI\n\n\tesac\nend\n\nproc gxfreewindow(w)=\n!recover memory used by this window and all childwindows\n\tfor wc in w.childlist do\n\t\tgxfreewindow(wc)\n\tod\n\n\tremovewindow(w)\n\n!CPL \"FREEING2\",$ID(W),$ID(W.GDI), $REFCOUNT(W), $REFCOUNT(W.GDI)\n\tw.gdi:=0\n\n!\tw:=0\nend\n\nexport func gxmsgbox(message,caption=\"\",options=\"\")=\n\n\tconst mb_abortretryignore\t= 0x02\n\tconst mb_applmodal\t\t\t= 0x00\n\tconst mb_defbutton1\t\t\t= 0x00\n\tconst mb_defbutton2\t\t\t= 100\n\tconst mb_defbutton3\t\t\t= 200\n\tconst mb_defbutton4\t\t\t= 300\n\tconst mb_help\t\t\t\t= 4000\n\tconst mb_iconasterisk\t\t= 40\n\tconst mb_iconerror\t\t\t= 10\n\tconst mb_iconexclamation\t= 30\n\tconst mb_iconhand\t\t\t= mb_iconerror\n\tconst mb_iconinformation\t= mb_iconasterisk\n\tconst mb_iconquestion\t\t= 20\n\tconst mb_iconstop\t\t\t= mb_iconhand\n\tconst mb_iconwarning\t\t= mb_iconexclamation\n\tconst mb_ok\t\t\t\t\t= 0x00\n\tconst mb_okcancel\t\t\t= 0x01\n\tconst mb_retrycancel\t\t= 0x05\n\tconst mb_right\t\t\t\t= 80000\n\tconst mb_setforeground\t\t= 10000\n\tconst mb_systemmodal \t\t= 1000\n\tconst mb_taskmodal\t\t\t= 2000\n\tconst mb_yesno\t\t\t\t= 0x04\n\tconst mb_yesnocancel\t\t= 0x03\n\tconst mb_topmost\t\t\t= 0x040000\n\n!return values\n\tconst idfail\t= 0\n\tconst idok\t\t= 1\n\tconst idcancel\t= 2\n\tconst idabort\t= 3\n\tconst idretry\t= 4\n\tconst idignore\t= 5\n\tconst idyes\t\t= 6\n\tconst idno\t\t= 7\n\n\tstatic var rettable=(0:\"fail\",\"ok\",\"cancel\",\"abort\",\"retry\",\"ignore\",\"yes\",\"no\",\n\t\t\t\"\",\"\",\"tryagain\",\"continue\")\n\n\tstatic var styletable=(\n\t(\"bari\",mb_abortretryignore),\n\t(\"bo\",mb_ok),\n\t(\"boc\",mb_okcancel),\n\t(\"brc\",mb_retrycancel),\n\t(\"byn\",mb_yesno),\n\t(\"bync\",mb_yesnocancel),\n\t(\"ix\",mb_iconexclamation),\n\t(\"iw\",mb_iconwarning),\n\t(\"ii\",mb_iconinformation),\n\t(\"iq\",mb_iconquestion),\n\t(\"is\",mb_iconstop),\n\t(\"ie\",mb_iconerror),\n\t(\"ih\",mb_iconhand),\n\t(\"d1\",mb_defbutton1),\n\t(\"d2\",mb_defbutton2),\n\t(\"d3\",mb_defbutton3),\n\t(\"d4\",mb_defbutton4),\n\t(\"h\",mb_help),\n\t(\"rj\",mb_right),\n\t(\"sm\",mb_systemmodal))\n\n\thwnd:=nil\n\n\tstyle:=0\n\toptioncodes:=splitstring(options,\" \")\n\n\tfor opt in optioncodes do\n\t\tfor i to styletable.len do\n\t\t\tif styletable[i,1]=opt then style ior:=styletable[i,2] fi\n\t\tod\n\tod\n\n\tstyle ior:=0x10000\n\n\tx:=messageboxa(hwnd,message,caption,style)\n\treturn rettable[x]\nend\n\n\nexport proc gxhandler(windclass,mess,fnptr)=\n!windclass is a window, or a window class\n!override the current message handler for w's window class, and fo message mess\n\n!if not windclass.isint then\n\tif not windclass.ispointer then\n\t\twindclass:=windclass.windclass\n\tfi\n\n!CPL \"SETTING GXHANDLER\",MESS,WINDCLASS,FNPTR\n\tmesshandlertable[mess,windclass]:=fnptr\nend\n\nexport func gxaskfile(caption=\"File\",filespec=\"*.*\",deffile=\"\",startdir=\"\")=\n\n\tsave:=0\n\tif caption='*' then\n\t\tsave:=1\n\t\tcaption:=rightstr(caption,-1)\n\tfi\n\n\tfilters:=array(filespec+\"@@@\")\t\t!turn into a byte-array\n\n\tfor i,bb in filters do\t\t\t!convert all @ into embedded zeros\n\t\tif bb='@' then filters[i]:=0 fi\n\tod\n\n\tofn:=new((iswin32|ws_openfilename32|ws_openfilename64))\n\n\tofn.structsize:=ofn.bytes\n\tofn.owner:=wapplic.gdi.hwnd\n\tofn.instance:=getmodulehandle(0)\n\tofn.filter:=int(&filters)\n\tofn.flags:=ofn_explorer ior ofn_nochangedir ior ofn_hidereadonly !IOR OFN_NOVALIDATE\n\n\tofn.initialdir:=getstringz(startdir)\n\n\tofn.defext:=getstringz(\"\")\n\n\tresult:=new(array,byte,300)\n\n\tresult[1]:=0\n\tif deffile<>\"\" then\n\t\tmemcpy(&result,&deffile,deffile.len)\n\tfi\n\n\tofn.file:=int(&result)\n\n\tofn.maxfile:=256\n\tofn.title:=getstringz(caption)\n\n\tif not (not save | getopenfilenamea(&ofn) | getsavefilenamea(&ofn)) then\n\t\tresult[1]:=0\t\t!return \"\" on error\n\tfi\n\n\treturn string(result)\nend\n\nexport func gxcurrpos(w)=\n\treturn w.attrs.currpos\nend\n\nexport func gxtabstops(?tabs,signed=0)=\n\tif tabs.isdef then\n\t\ttabstops::=tabs\n\t\tif signed then\n\t\t\tfor i,x in tabstops do\n\t\t\t\ttabstops[i]:=abs(x)\n\t\t\tod\n\t\tfi\n\tfi\n\treturn tabstops\n\nend\n\nexport func getlvbounds(linkvar)=\n\tif linkvar.ispointer and linkvar^.islist then\n\t\treturn linkvar^.bounds\n\telse\n\t\treturn linkvar.getbounds()\n\tfi\n\treturn 0\nend\n\nexport func getlvitem(linkvar,n)=\n\tif linkvar.ispointer and linkvar^.islist then\n\t\treturn linkvar^[n]\n\telse\n\t\tPCERROR(\"GETLVITEM\")\n\tfi\n\treturn 0\nend\n\nexport func getlvstritem(linkvar,n)=\n\tif linkvar.ispointer and linkvar^.islist then\n\t\treturn tostr(linkvar^[n])\n\telse\n\t\treturn linkvar.getstritem(n)\n\tfi\n\treturn 0\nend\n\nexport proc gxtext16(w,s,n,x=0,y=0)=\t\t!GXTEXT\n\t\tgdi:=w.gdi\n\n\t\ttextoutw(gdi.hdc,x, y,&s,n)\n\t\tif gdi.drawmode=dm_screenmemory then\n\t\t\ttextoutw(gdi.hdc2,x,y,&s,n)\n\t\tfi\nend\n\nexport func gxenable(w,flag)=\n\tif flag.isdef then\n\t\tw.enable:=flag\n\t\tgxupdate(w)\n\tfi\n\treturn w.enable\nend\n\nexport func gxclientarea(w)=\n!scan child windows of w, work out remaining client area after taking account of\n!framebars etc\n!return (pos, dim), each being a 2-element list\n\n\taposx:=aposy:=0\n\n\tadimx:=w.dimx\n\tadimy:=w.dimy\n\n\tcentx:=(aposx+adimx)%2\n\tcenty:=(aposy+adimy)%2\n\n!for cw in w.childlist when cw.windclass in [statusbar_class,framebar_class] do\n\tfor cw in w.childlist do\n\n\t\t(posx,posy):=(cw.frameposx,cw.frameposy)\n\t\t(dimx,dimy):=(cw.framedimx,cw.framedimy)\n\n!need to find out which of the four sides the bar is against, and set up side= L R T B\n\t\tcase cw.style.dir\n\t\twhen 'B' then\t\t\t\t!bottom\n\t\t\tif posy<(aposy+adimy) then\n\t\t\t\tadimy-:=dimy\n\t\t\tfi\n\n\t\twhen 'T' then\t\t\t\t!top\n\t\t\tif (posy+dimy)>aposy then\t\t!\n\t\t\t\taposy+:=(posy+dimy)\n\t\t\t\tadimy-:=(posy+dimy)\n\t\t\tfi\n\n\t\twhen 'R' then\t\t\t\t!right\n\t\t\tif posx<(aposx+adimx) then\n\t\t\t\tadimx-:=dimx\n\t\t\tfi\n\n\t\twhen 'L' then\t\t\t\t!LEFT\n\t\t\tif (posx+dimx)>aposx then\t\t!\n\t\t\t\taposx+:=(posx+dimx)\n\t\t\t\tadimx-:=(posx+dimx)\n\t\t\tfi\n\t\telse\n\n\t\t\tif dimx>dimy then\t\t\t!assume hoz\n\t\t\t\tif posy>centy then\t\t\t!assume bottom\n\t\t\t\t\tif posy<(aposy+adimy) then\n\t\t\t\t\t\tadimy-:=dimy\n\t\t\t\t\tfi\n\n\t\t\t\telse\t\t\t\t\t!top\n\t\t\t\t\tif (posy+dimy)>aposy then\t\t!\n\t\t\t\t\t\taposy+:=(posy+dimy)\n\t\t\t\t\t\tadimy-:=(posy+dimy)\n\t\t\t\t\tfi\n\t\t\t\tfi\n\t\t\telse\t\t\t\t\t!assume vert\n\t\t\t\tif posx>centx then\t\t\t!assume right\n\n\t\t\t\t\tif posx<(aposx+adimx) then\n\t\t\t\t\t\tadimx-:=dimx\n\t\t\t\t\tfi\n\n\t\t\t\telse\t\t\t\t\t!left\n\n\t\t\t\t\tif (posx+dimx)>aposx then\t\t!\n\t\t\t\t\t\taposx+:=(posx+dimx)\n\t\t\t\t\t\tadimx-:=(posx+dimx)\n\t\t\t\t\tfi\n\n\t\t\t\tfi\n\t\t\tfi\n\t\tesac\n\tod\n\n\treturn ((aposx,aposy), (adimx,adimy))\nend\n\nexport func addwindow(w)=\n!w is a newly created window\n!add it to all windows\n\tn:=nil inx allwindows\n\tif not n.isfound then\n\t\tn:=allwindows.len+1\n\tfi\n\n\tallwindows[n]:=w\n\tw.gindex:=n\n\treturn n\nend\n\nexport proc removewindow(w)=\n!remove w from all windows\n\tn:=w inx allwindows\n\tif n.isfound then\n\t\tallwindows[n]:=nil\n\tfi\n\n\tfor i to nmessages do\n\t\tm:=messagequeue[i]\n\t\tif m.wind==w then\n\t\t\tm.wind:=nil\n\t\tfi\n\tod\n\n!\tif currmess.wind==w then\n!\t\tcurrmess.wind:=nil\n!\tfi\n\nend\n\nfunc process_wmmessage(msg)=\n!STATIC VAR CC=0\n!CPL \"PROCESS/WMMESSAGE\",++CC\n!CPL \"PROC/WM1\",MSG, MSG.HWND\n\t\tx:=process_wmmessage2(msg)\n!CPL \"RETURN X:\",X\n!$SETDEBUG(1)\n\t\treturn x\nend\n\nfunc process_wmmessage2(msg)=\n!msg is a windows rmsg record\n!Called from MainWndProc callback func (via mechanisms for B code to call into MPL code)\n!this func processes some wm_ Windows messages and converts them\n!into mm_ messages as necessary\n!It returns:\n!\t0 The wm_ message has been processed\n!\t1 The wm_ message has not been processed, and the caller should call DefWindowProc.\n!\t  Or, the DefWindowProc should also be called anyway.\n\n!CPL \"PROCESSWMM2\",MSG.MESSAGE, WINMESSAGENAMES{MSG.MESSAGE}\n\n\thwnd:=msg.hwnd\n!CPL \"PM2\",=HWND,MSG.HWND\n\tw:=getwindow(hwnd)\n!CPL \"AFTER GW1\"\n\n\tmessage:=msg.message\n\twparam:=msg.wparam\n\tlparam:=msg.lparam\n\n\tcase msg.message\n\twhen wm_command then\n\t\tw:=getwindow(lparam)\t\t\t!w was owner, use control window\n!CPL \"AFTER GW2\"\n\t\ti:=wparam iand 0xffff\t\t\t!id\n\t\tj:=wparam>>16\t\t\t\t!notify code\n\t\tm:=mm_command\n\n\t\tif not w then\n\t\t\tw:=wapplic\n\t\tfi\n\n\t\tpostmess(w,m,i,j,0)\n\n\t\treturn 0\n\n\twhen wm_activate then\n\t\tif wparam then\t\t\t\t!being activated\n\t\tfi\n\n\twhen wm_syskeydown,wm_syskeyup,wm_keydown,wm_keyup then\n!\n!\tSTATIC VAR COUNT=0\n!\n!\tIF MSG.MESSAGE=WM_KEYDOWN THEN\n!\tCPL \"KEY\",++COUNT\n!\tFI\n\n\t\tif dokeymessage(hwnd,message,wparam,lparam) then\n\t\t\treturn 0\n\t\tfi\n\n\twhen wm_char then\n\t\tpostmess((wfocus|wfocus|w),mm_char,wparam,lparam,0)\n\n\twhen wm_close then\n\t\tif w==wapplic then\n\t\t\tpostmess(w,mm_close,0,0,0)\n\t\t\treturn 0\n\t\telse\n\t\t\tpostmess(w,mm_cancel,0,0,0)\n\t\t\treturn 0\n\t\tfi\n\n\twhen wm_timer then\n\t\tif not background and not stationary then\t\t!test for pausing of mouse\n\t\t\tif gettickcount()-lastxytime>pausetime then\n\t\t\t\tstationary:=1\n\t\t\tfi\n\t\tfi\n\n\twhen wm_destroy then\n\t\tif w and wapplic and w==wapplic then\n\t\t\tkilltimer(hwnd,1)\n!*\t\tif tick then killtimer(hwnd,1) fi\n!CPL \"**********************POSTING QUIT WM\",WAPPLIC\n\n\n!\t\t\tpostquitmessage(0)\t\t\t!mm_quit message\n\t\t\treturn 0\n\t\telse\n\t\t\treturn 1\n\t\tfi\n\n!when wm_setcursor then\n!\tpostmess(w,mm_setcursor,wparam,lparam,0)\n\n\twhen wm_mousemove then\n\n\t\tbuttonstate:=wparam iand (kb_lbutton ior kb_rbutton ior kb_mbutton)\n\t\tmousepos.x:=lparam iand 65535\n\t\tmousepos.y:=lparam>>16\n\n\tdomousemove:\n\t\txyvalid:=1\t\t\t\t!known again\n\t\tsetnewmousewindow(w)\n\n\t\twmouse:=w\n\t\tpostmess(wmouse,mm_move)\n\n\t\tlastxy::=getscreencoords(wmouse,mousepos)\n\t\tlastxytime:=gettickcount()\n\t\tstationary:=0\n\n!do drag processing; states are:\n!pen up/recent pen down/first drag/subsequent drag\n!any drag messages are sent as well as mm_move messages\n!dragmode=1/2/3 indicates drag has started (reset by buttonswitching)\n\n\t\tif buttonstate<>0 and lastmousewindow<>nil then\t\t!switch pressed\n\t\t\tpt:=getscreencoords(lastmousewindow,lastmousepos)\n\t\t\tdx:=lastxy.x-pt.x\n\t\t\tdy:=lastxy.y-pt.y\n\n\t\t\tif dragmode then\t\t!1st drag message already generated\n\t\t\t\tpostmess(lastmousewindow,mm_drag,dx,dy,-1)\t\t\t!send latest drag coords\n\n\t\t\telse\t\t\t\t!test for drag enabling\n\t\t\t\tif ((mousesw=1 and lastmousewindow.flags.[wa_leftdrag]<>0) or \\\n\t\t\t\t\t\t\t\t(mousesw=2 and lastmousewindow.flags.[wa_rightdrag]<>0) or \\\n\t\t\t\t\t\t\t\t(mousesw=3 and lastmousewindow.flags.[wa_middledrag]<>0)) and \\\n\t\t\t\t\t\t\t(abs(dx)>dragtol or abs(dy)>dragtol) then\n\t\t\t\t\tdragmode:=mousesw\n\t\t\t\t\tpostmess(lastmousewindow,mm_startdrag,dx,dy,-1)\t\t!send latest drag coords\n\t\t\t\tfi\n\n\t\t\tfi\n\t\telse\n\t\t\tif dragmode then\n\t\t\t\tpostmess(lastmousewindow,mm_enddrag,dx,dy,-1)\t!send latest drag coords\n\t\t\t\tdragmode:=0\n\t\t\tfi\n\t\tfi\n\n\t\treturn 0\n\n\twhen wm_enteridle then\t\t!enter idle\n\t\tidlemode:=1\n\t\treturn 0\n\n\twhen wm_paint then\n\n\t\tif w<>nil then\n\t\t\tps:=new(ws_paintstruct)\n\t\t\trect:=new(ws_rect)\n\t\t\tbeginpaint(hwnd,&ps)\n\t\t\tpostmess(w,mm_restore,0,0,0)\n\t\t\tendpaint(hwnd,&ps)\n\t\t\treturn 0\n\t\tfi\n\n\twhen wm_erasebkgnd then\n\n\twhen wm_move then\n\t\tif w<>nil then\n!*!\t\tgxmovewindow(w,lparam iand 65535,lparam>>16)\n\t\tfi\n\n\twhen wm_size then\n\t\tx:=lparam iand 0xffff\n\t\ty:=lparam>>16\n\t\tif w<>nil  and (w.dimx<>x or w.dimy<>y) then\n!*!\t\tgxmplresize(w,x,y,wparam)\n\t\t\treturn 0\n\t\tfi\n\n!when wm_killfocus,wm_setfocus then\n\n\twhen wm_contextmenu then\n\t\tsendmess(w,mm_rclick,wparam>>16,wparam iand 0xffff,0)\n\t\treturn 0\n\n\twhen wm_mousewheel then\n\t\tif not wmouse then wmouse:=w fi\n\t\tpostmess(wmouse,mm_wheel,int(wparam>>16),wparam iand 0xffff,0)\n\t\treturn 0\n\n\twhen wm_nclbuttondown,wm_nclbuttondblclick then\n\n\twhen wm_activateapp then\n\t\tif wparam then\n\t\t\tpostmess(w,mm_activate,1,0,0)\n\t\tfi\n\n\telse\n\tbtnmessages:\n!check for sequential messages\n!CPL \"FALLTHROUGH\"\n\t\tif message>=wm_lbuttondown and message<=wm_mbuttondblclk then\n\t\t\tbuttonmessages(hwnd,message,wparam,lparam)\n\t\t\treturn 0\n\t\tfi\n\tesac\n!end\n!fall-through here to do default message processing instead of/in addition to local processing\n\treturn 1\t!defwindowproc(hwnd,imsg,wparam,lparam)\nend\n\nexport proc mxinit=\n\twmessagetable := [\\\n\t\twm_lbuttondown:\t\tmm_click,\n\t\twm_lbuttonup:\t\tmm_clickup,\n\t\twm_lbuttondblclk:\tmm_dblclick,\n\n\t\twm_rbuttondown:\t\tmm_rclick,\n\t\twm_rbuttonup:\t\tmm_rclickup,\n\t\twm_rbuttondblclk:\tmm_rdblclick,\n\n\t\twm_mbuttondown:\t\tmm_mclick,\n\t\twm_mbuttonup:\t\tmm_mclickup,\n\t\twm_mbuttondblclk:\tmm_mdblclick]\n\n!table gives button number 1,2,3 for Windows button message (always 0 for button up)\n\tbuttontable\t:= [\\\n\t\twm_lbuttondown:\t\t1,\n\t\twm_lbuttonup:\t\t0,\n\t\twm_lbuttondblclk:\t1,\n\n\t\twm_rbuttondown:\t\t2,\n\t\twm_rbuttonup:\t\t0,\n\t\twm_rbuttondblclk:\t2,\n\n\t\twm_mbuttondown:\t\t3,\n\t\twm_mbuttonup:\t\t0,\n\t\twm_mbuttondblclk:\t3]\n\n\tmousepos:=new(ws_point)\n\n\tsetmesshandler(process_wmmessage)\n!CPL =PROCESS_WMMESSAGE\n!setmesshandler(bill)\n\n\tvktomesstable:=[\\\n\t\tvkleft:\t\tmm_leftkey,\n\t\tvkright:\tmm_rightkey,\n\t\tvkup:\t\tmm_upkey,\n\t\tvkdown:\t\tmm_downkey,\n\t\tvkpageup:\tmm_pageupkey,\n\t\tvkpagedown:\tmm_pagedownkey,\n\t\tvkhome:\t\tmm_homekey,\n\t\tvkend:\t\tmm_endkey,\n\t\tvktab:\t\tmm_tabkey,\n\t\tvkbackspace:\tmm_bskey,\n\t\tvkdelete:\tmm_deletekey,\n\t\tvkenter:\tmm_enterkey,\n\t\tvkinsert:\tmm_insertkey,\n\t\tvkescape:\tmm_cancel\n\t]\nend\n\nexport func postmess(w,mess,a=0,b=0,c=0)=\n!add message m to end of message queue\n!use mess+1000 to add message to start of queue rather than the end\n\n\tif w=nil then w:=wapplic fi\n\tif w=nil then\n return 0 fi\n\n\tif w.flags.[wa_closed] then\n\n return 0 fi\n\n\tif mess>=1000 then\n\t\theadx:=1; mess-:=1000\n\telse\n\t\theadx:=0\n\tfi\n\n!check if new message can be combined with an old message\n\tcase mess\n\twhen mm_sethozpos,mm_setvertpos,mm_draw,mm_restore,mm_update then\n\t\tfor i:=1 to nmessages do\n\t\t\tm:=messagequeue[i].message\n\t\t\tif m=mess and w==messagequeue[i].wind then\t\t\t\t!use the old message but update any params\n\t\t\t\tmessagequeue[i].a:=a\n\t\t\t\tmessagequeue[i].b:=b\n\t\t\t\treturn 0\n\t\t\telsif mess=mm_draw and m=mm_update then\t\t!convert update to draw\n\t\t\t\tmessagequeue[i].message:=mm_draw\n\t\t\t\treturn 0\n\t\t\tfi\n\t\tod\n\tesac\n\n\tif quitmess or nmessages>=maxqueuesize then\n\t\treturn 0\n\tfi\n\n\tpostmsg(makemess(w,mess,a,b,c))\n\n\treturn 0\t\t\t\t\t!return zero for use in mainwndproc\nend\n\nexport func postmsg(msg,headx=0)=\n!add complete message msg to end of message queue\n!use head=1 to add to start of queue rather than the end\n\n\tif quitmess or nmessages>=maxqueuesize then\n\t\treturn 0\n\tfi\n\n\tif msg.wind.flags.[wa_closed] then return 0 fi\n\n\tif headx then\n\n!avoid dupl paint messages\n\t\t++nmessages\n\t\tfor i:=nmessages downto 2 do\n\t\t\tmessagequeue[i]:=messagequeue[i-1]\n\t\tod\n\t\tmessagequeue[1]:=msg\n\n\telse\n\t\t++nmessages\n\t\tmessagequeue[nmessages]:=msg\n\tfi\n\n\treturn 0\t\t\t\t\t!return zero for use in mainwndproc\nend\n\nexport proc sendmess(w,mess,a=0,b=0,c=0)=\n!add message m to head of message queue\n!(may be 100% handled in q smlib)\n\n\tif w=nil then return fi\n\tif w.flags.[wa_closed] then return fi\n\n\tsendmsg(makemess(w,mess,a,b,c))\nend\n\nproc sendmsg(msg)=\n!call event handler for msg or add to head of queue\n\tif msg.wind.flags.[wa_closed] then return fi\n\tpostmsg(msg,1)\nend\n\nexport func makemess(w,mess,a=0,b=0,state=-1)=\n!turn params into a new messrec @nemm_ess\n!the q version makemess also accepts makemess(w,msg)\n\n\tif w=nil then w:=wapplic fi\n\n\tm:=new(rmessage,0)\n\n\tm.wind:=w\n\n\tm.message:=mess\n\tm.a:=a\n\tm.b:=b\n\tm.state:=state\n\n\tm.x:=mousepos.x\n\tm.y:=mousepos.y\n\n\tif m.state=-1 then m.state:=getshiftstate() fi\n\n\treturn m\nend\n\nfunc dokeymessage(hwnd,msg,wparam,lparam)=\n!return 1 if message has been dealt with\n\n\tcase msg\n\twhen wm_syskeydown then\n\t\tif wparam=vkf10 then msg:=wm_keydown; goto dokey fi\n\n\twhen wm_syskeyup then\n\t\tif wparam=vkf10 then msg:=wm_keyup; goto dokey fi\n\n\twhen wm_keydown,wm_keyup then\n\tdokey:\n\t\tcase wparam\n\t\twhen vkshift,vkctrl,vkalt,vkcapslock then\n\t\telse\n\t\t\tw:=wfocus\n!\t\tif not w then w:=wx_getw(hwnd) fi\n!CPL \"XXXXX\"\n\t\t\tif not w then w:=getwindow(hwnd)\n!CPL \"AFTER GW3\"\n fi\n!CPL =GETSHIFTSTATE()\n!\t\tpostmess(w,(msg=wm_keydown|mm_key|mm_keyup),wparam,getshiftstate(),lparam)\n\t\t\tpostmess(w,(msg=wm_keydown|mm_key|mm_keyup),wparam,lparam,-1)\n\t\t\treturn 1\n\t\tesac\n\tesac\n\treturn 0\nend\n\nfunc getshiftstate=\n\tstate:=0\n\n\tif getkeystate(vklshift) iand 0x8000 then state ior:=kb_shift fi\n\tif getkeystate(vklcontrol) iand 0x8000 then state ior:=kb_ctrl fi\n\tif getkeystate(vklalt) iand 0x8000 then state ior:=kb_alt fi\n\n\tif getkeystate(vkrshift) iand 0x8000 then state ior:=kb_rshift fi\n\tif getkeystate(vkrcontrol) iand 0x8000 then state ior:=kb_rctrl fi\n\tif getkeystate(vkralt) iand 0x8000 then\n\t\tstate ior:=kb_ralt\n\t\tstate iand:=(inot kb_ctrl)\t\t\t!AltGr gives Lctrl+Ralt; return Ralt only\n\tfi\n\tif getkeystate(vkcapslock) iand 1 then state ior:=kb_capslock fi\n\n\treturn state ior buttonstate\nend\n\nproc buttonmessages(hwnd,msg,wp,lp)=\n!process Windows mouse message <msg>\n\n!update button from wparam, excluding ctrl/shift (which are updated from key msgs)\n\tbuttonstate:=wp iand (kb_lbutton ior kb_rbutton ior kb_mbutton)\n\n!update mouse position\n\tmousepos.x:=lp iand 0xffff\n\tmousepos.y:=int(lp)>>16\n\twmouse:=getwindow(hwnd)\n!CPL \"AFTER GW4\"\n\n!set mousesw to last pressed button (1,2,3) or 0 if one just released\n!(note other buttons may still be down, used for drag processing)\n\tmousesw:=buttontable{msg}\n\n\tif mousesw then\t\t\t!down up on click or dblclick\n\t\tlastbuttontime:=gettickcount()\n\t\tlastmousepos::=mousepos\n\t\tlastmousewindow:=wmouse\n\telse\n\t\tmousesw:=0\n\n\t\tif dragmode then\n\t\t\tpostmess(lastmousewindow,mm_enddrag,0,0,-1)\n\t\t\tdragmode:=0\n\t\tfi\n\n\t\tlastbuttontime:=0\n\t\tlastmousewindow:=nil\n\tfi\n\n\tnewmess:=wmessagetable{msg}\n\n!filter double-click messages and convert to repeated click if not enabled\n\tcase newmess\n\twhen mm_dblclick then unless wmouse.flags.[wa_leftdbl] then newmess:=mm_click end\n\twhen mm_rdblclick then unless wmouse.flags.[wa_rightdbl] then newmess:=mm_click end\n\tesac\n\n\tpostmess(wmouse,newmess,wmouse.id,0,-1)\nend\n\nproc setnewmousewindow(w)=\n\treturn when not currmousewindow\n\tunless w==currmousewindow then\t\t!changed\n\t\tif currmousewindow<>nil then\n\t\t\tpostmess(currmousewindow,mm_offwindow,0,0,0)\n\t\tfi\n\n\t\tcurrmousewindow:=w\n\t\tpostmess(w,mm_onwindow,0,0,0)\n\tend unless\nend\n\nproc frame2rect(f,r)=\n\tr^.x:=f^.x\n\tr^.y:=f^.y\n\n\tr^.dimx:=f^.x2-f^.x1+1\n\tr^.dimy:=f^.y2-f^.y1+1\nend\n\nexport func mxwait_mm_message=\n\t#do windows dispatch loop\n\t#calling dispatchmessage() results in mainwndproc being called in interpreter,\n\t#which passes the Windows message params on to process_wmmessage() in this module\n\t#process_wmmessage() converts wm-messages to mpl mm-messages\n\t#return when at least one mm message is ready; (will return immediately if there\n\t#is already one in the queue)\n\t#return value is normall 1, or 0 when quitmess has been encountered\n\n\tif quitmess then\t\t\t\t!quit message already seen\nCPL \"-----------------QUITMESS SEEN\"\n\t\treturn 0\n\tfi\n\n\twindmsg:=new((iswin32|ws_msg32|ws_msg64))\n\n\twhile nmessages<=0 do\n\t\tif x:=getmessage(&windmsg,nil,0,0)<>0 then\n\t\t\tw:=windmsg.hwnd\n\t\t\ttranslatemessage(&windmsg)\n\t\t\tdispatchmessage(&windmsg)\n\t\telse\nCPL \"----GETMESSAGE RETURMS 0\"\n\t\t\tquitmess:=1\n\t\t\texit\n\t\tfi\n\tod\n\n\tif not nmessages then\t\t\t!assume quit message seen\nCPL \"----------NO MESSAGES\"\n\t\treturn 0\n\tfi\t\n\n\tcurrmess:=messagequeue[1]\n\t--nmessages\n\n\txlatkeyboard()\n\n\tfor i:=1 to nmessages do\n\t\tmessagequeue[i]:=messagequeue[i+1]\n\tod\n\treturn 1\nend\n\nproc xlatkeyboard=\n!expand any mm_key messages to special key messages\n!uses and modified currmess\n\tm:=currmess.message\n\n\tif m=mm_key then\n\n\t\tk:=currmess.a\n\t\tif k>=vkf1 and k<=vkf12 then\n\t\t\tnewmsg:=currmess\n\t\t\tcurrmess.message:=mm_functionkey\n\t\t\tcurrmess.a:=k-vkf1+1\n\t\telse\n\t\t\tkeymess:=vktomesstable{k,0}\n\t\t\tif keymess then\n\t\t\t\tcurrmess.message:=keymess\n\t\t\tfi\n\t\tfi\n\tfi\nend\n\nfunc getscreencoords(w,pos)=\n\tpt::=pos\n\tif not w then\n\t\tPCERROR(\"GSC/W=0\")\n\tfi\n\n\tclienttoscreen(w.gdi.hwnd,&pt)\t\t!pos starts at 0,0\n\treturn pt\nend\n\nexport func getwindow(hwnd)=\n!convert hwnd to window\n!return nil if any problem\n\tif hwnd=0 then\n\t\treturn nil\n\tfi\n\n\tindex:=wx_getw(hwnd)\n\tif index then\n\t\treturn allwindows[index]\n\tfi\n\treturn nil\nend\n\nproc initmenuhandlers=\n\tltcolour:=getrgb(ltgrey)\n\tdkcolour:=getrgb(dkgrey)\nend\n\nproc gxhandler_fixups=\n!do some manual fixups for various shared handlers\n!(the automatic fixup routine allows multiple window classes per message, but not\n! multiple message per window class)\n\tmesshandlertable[mm_startdrag,scrollbar_class]:=mess_drag_scrollbar\n\tmesshandlertable[mm_enddrag,scrollbar_class]:=mess_drag_scrollbar\n\tmesshandlertable[mm_leftkey,scrollbar_class]:=mess_upkey_scrollbar\nend\n\nfunc mess_all_all(mess,w)=\n!CPL \"MESSAA1\"\n\tcase mess.message\n\twhen mm_startdrag,mm_drag,mm_enddrag then\n\twhen mm_command then\n\twhen mm_ok,mm_cancel then\n\twhen mm_click then\n\t\tcase w.windclass\n\t\twhen label_class, group_class then\n\t\t\treturn skipmess\n\t\tesac\n\twhen mm_key then\n\twhen mm_sethozpos,mm_setvertpos then\n\twhen mm_pick,mm_lbchange then\n\twhen mm_leftkey,mm_rightkey,mm_upkey,mm_downkey,mm_enterkey,mm_tabkey then\n\twhen mm_pageupkey,mm_pagedownkey then\n\twhen mm_homekey, mm_endkey then\n\twhen mm_functionkey then\n\twhen mm_wheel then\n\twhen mm_edited then\n\telse\n!CPL \"MESSAA2\"\n\t\treturn skipmess\n\tesac\n!CPL \"MESSAA3\"\n\n\treturn thismess\nend\n\nfunc mess_restore_all(mess,w)=\n\tgxrestore(W)\n\n\treturn skipmess\nend\n\nfunc mess_killfocus_all(mess,w)=\n!note: can be called from mess_setfocus_all, with a different mess, but correct w\n!assume w is same as wfocus\n\n\tdrawcaret(0)\n\twfocus:=nil\n\n\treturn skipmess\nend\n\nfunc mess_setfocus_all(mess,w)=\n\tif wfocus then\n\t\tmess_killfocus_all(mess,wfocus)\n\tfi\n\n\twfocus:=w\n\tdrawcaret(1)\n\treturn skipmess\nend\n\nfunc mess_update_all(mess,w)=\n\tgxupdate(w)\n\treturn skipmess\nend\n\nfunc mess_draw_all(mess,w)=\n\tgxdraw(w)\n\treturn skipmess\nend\n\nfunc mess_click_select(mess,w)=\n\tif w.enable then\n\t\tif not w.style.noupdate then\n\t\t\tp:=w.linkvar\n\t\t\tp^:=w.attrs.onvalue\n\t\t\tfor wc in w.owner.childlist do\n\t\t\t\tif wc.windclass=select_class and wc.linkvar=p then\n\t\t\t\t\tgxdraw(wc)\n\t\t\t\tfi\n\t\t\tod\n\t\tfi\n\t\tif w.style.returnmess then\n\t\t\tpostmess(w,mm_command,w.id)\n\t\tfi\n\tfi\n\treturn skipmess\nend\n\nfunc mess_click_toggle(mess,w)=\n\tif w.enable then\n\t\tif not w.style.noupdate then\n\t\t\tw.linkvar^:=not w.linkvar^\n\t\t\tgxdraw(w)\n\t\tfi\n\t\tif w.style.returnmess then\n\t\t\tpostmess(w,mm_command,w.id)\n\t\tfi\n\tfi\n\treturn skipmess\nend\n\nfunc mess_click_button(mess,w)=\n\n\tif w.enable=0 then\n\t\tbeep1()\n\t\treturn skipmess\n\tfi\n\n\tif w.id in 0..199 then\t\t\t\t!speficies an actual message number (but no params)\n\t\tpostmess(w,w.id)\n\telse\n\t\tpostmess(w,mm_command,w.id)\n\tfi\n\treturn skipmess\nend\n\nfunc mess_click_editbox(mess,w)=\n\tif w.enable then\n\t\tif not w.style.noupdate then\n\t\t\tunless w==wfocus then\n\t\t\t\tgxfocus(w)\n\t\t\tend\n\t\tfi\n\t\tif w.style.returnmess then\n\t\t\tpostmess(w,mm_command,w.id)\n\t\tfi\n\tfi\n\n\treturn skipmess\nend\n\nfunc mess_click_arrow(mess,w)=\n\n\tcase w.owner.windclass\n\twhen scrollbar_class then\n\t\tpostmess(w.owner,dirtomess{w.style.dir},w.id,0,-1)\n\telse\n\t\tmess.message:=dirtomess{w.style.dir}\n\t\tmess.a:=w.id\n\t\treturn thismess\n\tesac\n\treturn skipmess\nend\n\nfunc mess_click_mark(mess,w)=\n\n\tcase w.owner.windclass\n\twhen toggle_class,select_class then\n\t\tpostmess(w.owner,mess.message,w.id,0,-1)\n\tesac\n\treturn skipmess\nend\n\nfunc mess_click_listbox(mess,w)=\n\tgxfocus(w)\n\n\ty:=max(w.attrs.offset,mess.y)\n\n\tpos:=(y-w.attrs.offset)%w.attrs.pitch+w.attrs.pagepos\n\tif pos<=getlvbounds(w.linkvar).len then\n\t\tgxsetlbpos(w,pos)\n\t\tpostmess(w,mm_pick,pos)\n\tfi\n\n\treturn skipmess\nend\n\nfunc mess_click_scrollbar(mess,w)=\n\tonthumb:=isonthumb(w,(w.style.dir='H'|mess.x|mess.y))\n\tstep:=w.attrs.span\n\ta:=w.attrs.currpos\n\n\tcase w.owner.windclass\n\twhen listbox_class then\n\t\tcase onthumb\n\t\twhen -1 then\n\t\t\tif a>w.attrs.limits.lwb then\n\t\t\t\ta:=max(a-step,w.attrs.limits.lwb)\n\t\t\t\tgxsetlbpage(w.owner,a)\n\t\t\tfi\n\t\twhen 1 then\n\t\t\tif a<w.attrs.limits.upb then\n\t\t\t\ta:=min(a+step,w.attrs.limits.upb)\n\t\t\t\tgxsetlbpage(w.owner,a)\n\t\t\tfi\n\t\tesac\n\telse\n\t\tif not step then step:=10 fi\n\n\t\tcase onthumb\n\t\twhen -1 then\n\t\t\tif a>w.attrs.limits.lwb then\n\t\t\t\ta:=max(a-step,w.attrs.limits.lwb)\n\t\t\t\tgxscrollpos(w,a,1)\n\t\t\t\tpostmess(w,mm_sethozpos,a)\n\t\t\tfi\n\t\twhen 1 then\n\t\t\tif a<w.attrs.limits.upb then\n\t\t\t\ta:=min(a+step,w.attrs.limits.upb)\n\t\t\t\tgxscrollpos(w,a,1)\n\t\t\t\tpostmess(w,mm_sethozpos,a)\n\t\t\tfi\n\t\tesac\n\tesac\n\treturn skipmess\nend\n\nfunc mess_wheel_scrollbar(mess,w)=\n\tdelta:=currmess.a\n\tn:=abs(currmess.a%120)\n\tto n do\n\t\tcase w.windclass\n\t\twhen scrollbar_class then\n\tdoscroll:\n\t\t\tpostmess(w,(delta>0|mm_up|mm_down))\n\t\twhen listbox_class then\n\t\t\tif w.childlist then\n\t\t\t\tw:=w.childlist[1]\n\t\t\t\tgoto doscroll\n\t\t\tfi\n\t\t\tpostmess(w,(delta>0|mm_upkey|mm_downkey))\n\t\tesac\n\tod\n\treturn skipmess\nend\n\nfunc mess_up_scrollbar(mess,w)=\n\ta:=w.attrs.currpos\n\tif a<=w.attrs.limits.lwb then\n\t\treturn skipmess\n\tfi\n\tcase w.owner.windclass\n\twhen listbox_class then\n\t\tgxsetlbpage(w.owner,a-1)\n\t\treturn skipmess\n\telse\n\t\t--a\n\t\tgxscrollpos(w,a,1)\n\t\tpostmess(w,mm_setvertpos,a)\n\tesac\n\treturn skipmess\nend\n\nfunc mess_left_scrollbar(mess,w)=\n\n\tcase w.owner.windclass\n\twhen listbox_class then\n\t\treturn skipmess\n\telse\n\t\ta:=w.attrs.currpos\n\t\tif a>w.attrs.limits.lwb then\n\t\t\t--a\n\t\t\tgxscrollpos(w,a,1)\n\t\t\tpostmess(w,mm_sethozpos,a)\n\t\tfi\n\tesac\n\treturn skipmess\nend\n\nfunc mess_right_scrollbar(mess,w)=\n\n\tcase w.owner.windclass\n\twhen listbox_class then\n\t\treturn skipmess\n\telse\n\t\ta:=w.attrs.currpos\n\t\tif a<w.attrs.limits.upb then\n\t\t\t++a\n\t\t\tgxscrollpos(w,a,1)\n\t\t\tpostmess(w,mm_sethozpos,a)\n\t\tfi\n\n\tesac\n\treturn skipmess\nend\n\nfunc mess_down_scrollbar(mess,w)=\n\n\ta:=w.attrs.currpos\n\tif a>=w.attrs.limits.upb then\n\t\treturn thismess\n\tfi\n\tcase w.owner.windclass\n\twhen listbox_class then\n\t\tgxsetlbpage(w.owner,a+1)\n\t\treturn skipmess\n\telse\n\t\t++a\n\t\tgxscrollpos(w,a,1)\n\t\tpostmess(w,mm_setvertpos,a)\n\n\tesac\n\treturn skipmess\nend\n\nfunc mess_drag_scrollbar(mess,w)=\n\tcase mess.message\n\twhen mm_startdrag then\n\t\tif isonthumb(w,(w.style.dir='H'|mess.x|mess.y))=0 then\n\t\t\tthumbdragmode:=1\t\t\t!then treat as mm_drag\n\t\t\tthumbstartpos:=w.attrs.thumbpos-arrowdim\t\t!use thumb pos at start of drag\n\t\telse\t\t\t\t\t\t\t!dragging other part of scrollbar\n\t\t\treturn skipmess\n\t\tfi\n\twhen mm_enddrag then\n\t\tthumbdragmode:=0\n\t\treturn skipmess\n\telsif not thumbdragmode then\n\t\treturn skipmess\n\tesac\n\n\toffset:=(w.style.dir='H'|mess.a|mess.b)\t\t!pixel offset from initial drag start pos\n\tnewpos:=thumbstartpos+offset\t\t\t\t\t\t!could outside thumb span range\n\n\tpos:=int(round((newpos/w.attrs.thumbspan)*(w.attrs.limits.len-1)+w.attrs.limits.lwb))\n\tpos:=clamp(pos,w.attrs.limits.lwb,w.attrs.limits.upb)\n\n\tcase w.owner.windclass\n\twhen listbox_class then\n\t\tgxsetlbpage(w.owner,pos)\n\telse\n\t\tgxscrollpos(w,pos,1)\n\t\tpostmess(w,(w.style.dir='H'|mm_sethozpos|mm_setvertpos),pos)\n\tesac\n\treturn skipmess\nend\n\nfunc mess_move_button(mess,w)=\n\treturn skipmess\nend\n\nfunc mess_move_all(mess,w)=\n\treturn skipmess\nend\n\nfunc mess_char_editbox(mess,w)=\n!\tSHOWMESSAGE(\"CHAREDIT\",MESS)\n\n\t\tif mess.a not in 32..255 then\n!\tcpl \"CHAR/EDIT2\",MESS.A,VKENTER\n\t\t\tcase mess.a\n\t\t\twhen vkenter then\n\t\t\t\tCPL \"ENTER\"\n\t\t\t\tm:=mm_edited\n\t\t\telse\n\t\t\t\tm:=mm_key\n\t\t\tesac\n\n\t\t\tif wapplic then\n!\tCPL \"CHAR/EDIT CONTROL\",=MESS.A,MESS.B\n\t\t\t\tpostmess(wapplic,m, mess.a,mess.b,mess.state)\n\t\t\tfi\n\t\t\treturn skipmess\n\t\tfi\n\t\tif not w.enable or w.style.noupdate then return skipmess fi\n\t\ts:=w.linkvar^\n\t\tn:=w.attrs.currpos\n\t\tc:=chr(mess.a)\n\n\t\tif n>s.len then\t\t\t\t!at end\n\t\t\ts+:=c\n\t\telsif n=1 then\t\t\t\t!at start\n\t\t\ts:=c+s\n\t\telse\t\t\t\t\t\t!in middle\n\t\t\ts:=leftstr(s,n-1)+c+rightstr(s,-(n-1))\n\t\tfi\n\n\t\tw.linkvar^:=s\n\t\t++w.attrs.currpos\n\t\tgxdraw(w)\n\n\t\treturn skipmess\nend\n\nfunc mess_key_editbox(mess,w)=\n!\tCPL \"KEY/EDITBOX\"\n\n\tpostmess(wapplic,mm_key,mess.a,mess.b,mess.state)\n\n\treturn skipmess\nend\n\nfunc mess_leftkey_editbox(mess,w)=\n\tif ctrlpressed() then\n\t\tpostmess(wapplic,mm_leftkey,mess.a,mess.b,mess.state)\n\t\treturn skipmess\n\tfi\n\n\tif w.attrs.currpos>1 then\n\t\tdrawcaret(0)\n\t\t--w.attrs.currpos\n\t\tdrawcaret(1)\n\tfi\n\treturn skipmess\nend\n\nfunc mess_rightkey_editbox(mess,w)=\n\tif ctrlpressed() then\n\t\tpostmess(wapplic,mm_rightkey,mess.a,mess.b,mess.state)\n\t\treturn skipmess\n\tfi\n\n\tif w.attrs.currpos<=w.linkvar^.len then\n\t\tdrawcaret(0)\n\t\t++w.attrs.currpos\n\t\tdrawcaret(1)\n\tfi\n\treturn skipmess\nend\n\nfunc mess_bskey_editbox(mess,w)=\n\ts:=w.linkvar^\n\tif not s then return skipmess fi\n\tn:=w.attrs.currpos\n\tif n=1 then return skipmess fi\n\n\tif n>s.len then\t\t\t\t!at end\n\t\ts:=leftstr(s,-1)\n\telse\t\t\t\t\t\t!in middle\n\t\ts:=leftstr(s,n-2)+rightstr(s,-(n-1))\n\tfi\n\n\tw.linkvar^:=s\n\t--w.attrs.currpos\n\tgxdraw(w)\n\n\treturn skipmess\nend\n\nfunc mess_deletekey_editbox(mess,w)=\n\ts:=w.linkvar^\n\tif not s then return skipmess fi\n\tn:=w.attrs.currpos\n\tif n>s.len then return skipmess fi\n\n\tif n=1 then\t\t\t\t!at start\n\t\ts:=rightstr(s,-1)\n\telse\t\t\t\t\t\t!in middle\n\t\ts:=leftstr(s,n-1)+rightstr(s,-n)\n\tfi\n\tw.linkvar^:=s\n\tgxdraw(w)\n\n\treturn skipmess\nend\n\nfunc mess_homekey_editbox(mess,w)=\n\tif ctrlpressed() then\n\t\tpostmess(wapplic,mm_homekey,mess.a,mess.b,mess.state)\n\t\treturn skipmess\n\tfi\n\n\tdrawcaret(0)\n\tw.attrs.currpos:=1\n\tdrawcaret(1)\n\n\treturn skipmess\nend\n\nfunc mess_homekey_listbox(mess,w)=\n\tif w.attrs.currpos>1 then\n\t\tgxsetlbpos(w,1)\n\tfi\n\n\treturn skipmess\nend\n\nfunc mess_endkey_editbox(mess,w)=\n\tif ctrlpressed() then\n\t\tpostmess(wapplic,mm_endkey,mess.a,mess.b,mess.state)\n\t\treturn skipmess\n\tfi\n\n\tdrawcaret(0)\n\tw.attrs.currpos:=w.linkvar^.len+1\n\tdrawcaret(1)\n\n\treturn skipmess\nend\n\nfunc mess_endkey_listbox(mess,w)=\n!if w.attrs.currpos<w.linkvar^.len then\n\tif w.attrs.currpos<getlvbounds(w.linkvar).len then\n!\tgxsetlbpos(w,w.linkvar^.len)\n\t\tgxsetlbpos(w,getlvbounds(w.linkvar).len)\n\tfi\n\n\treturn skipmess\nend\n\nfunc mess_upkey_listbox(mess,w)=\n\tif w.attrs.currpos>1 then\n\t\tgxsetlbpos(w,w.attrs.currpos-1)\n\tfi\n\n\treturn skipmess\nend\n\nfunc mess_upkey_scrollbar(mess,w)=\n!assume that this is independent scrollbar\n!(linked scrollbar wouldn't get the focus)\n\n\ta:=w.attrs.currpos\n\tif a>w.attrs.limits.lwb then\n\t\t--a\n\t\tgxscrollpos(w,a,1)\n\t\tpostmess(w,mm_setvertpos,a)\n\tfi\n\treturn skipmess\nend\n\nfunc mess_downkey_listbox(mess,w)=\n!if w.attrs.currpos<w.linkvar^.len then\n\tif w.attrs.currpos<getlvbounds(w.linkvar).len then\n\t\tgxsetlbpos(w,w.attrs.currpos+1)\n\tfi\n\n\treturn skipmess\nend\n\nfunc mess_pageupkey_listbox(mess,w)=\n\tif (a:=w.attrs.currpos)>1 then\n\t\ta:=max(a-w.attrs.rows,1)\n\t\tgxsetlbpos(w,a)\n\tfi\n\n\treturn skipmess\nend\n\nfunc mess_pagedownkey_listbox(mess,w)=\n\tif (a:=w.attrs.currpos)<getlvbounds(w.linkvar).len then\n\t\ta:=min(a+w.attrs.rows,getlvbounds(w.linkvar).len)\n\t\tgxsetlbpos(w,a)\n\tfi\n\n\treturn skipmess\nend\n\nfunc mess_enterkey_listbox(mess,w)=\n\tif w.attrs.currpos then\n\t\tpostmess(w,mm_pick,w.attrs.currpos)\n\tfi\n\n\treturn skipmess\nend\n\nproc do_draw_all(w)=\n\tgxclear(w)\n\tdrawborder(w)\n\tdrawchildborders(w)\nend\n\nproc do_draw_button(w)=\n\tgxclear(w)\n\n\tgxtext_just(w,w.text,0,w.enable)\n\n\tdrawborder(w)\n\nend\n\nproc do_draw_label(w)=\n\tdo_draw_button(w)\nend\n\nproc do_draw_toggle(w)=\n\tgxclear(w)\n\n\tVALSTR:=\"\"\n\n\tturnedon:=istrue w.linkvar^\n\n\tif w.style.marktype then\n\t\tdrawmark(w.childlist[1],turnedon,w.enable)\n\n\t\tgxtext_just(w,w.text+valstr,markdim,w.enable)\n\telse\n!\tcase w.style.hilitetype\n!\twhen invert_hilite then\n\t\t\tif turnedon then\n\t\t\t\tgxclear(w,getrgb(green))\n\t\t\tfi\n!\tesac\n\n\t\tgxtext_just(w,w.text+valstr)\n\tfi\nend\n\nproc do_draw_select(w)=\n\tgxclear(w)\n\n\tturnedon:=w.linkvar^=w.attrs.onvalue\n\n\tif w.style.marktype then\n\t\tdrawmark(w.childlist[1],turnedon,w.enable)\n\t\tgxtext_just(w,w.text,markdim,w.enable)\n\telse\n\t\tcase w.style.hilitetype\n\t\twhen invert_hilite then\n\t\t\tif turnedon then\n\t\t\t\tgxclear(w,getrgb(white))\n\t\t\tfi\n\t\tesac\n\t\t\tgxtext_just(w,w.text)\n\tfi\nend\n\nproc do_draw_editbox(w)=\n\tgxclear(w)\n\n\tgxtext_just(w,w.linkvar^,enable:w.enable)\n\n!Now, have to draw the cursor\n\tunless wfocus==w then\t\t\t!only draw it when this window has the focus\n\t\treturn\n\tend\n\n\tcaretdrawn:=0\n\n\tdrawcaret(1)\nend\n\nproc do_draw_arrow(w)=\n\tgxclear(w)\n\n\tdrawborder(w)\n\tdrawarrow(w,w.enable)\nend\n\nproc do_draw_mark(w)=\n\n\tcase w.owner.windclass\n\twhen toggle_class, select_class then\n\t\treturn\t\t\t\t\t!mark drawn by owner\n\tesac\n\n\tgxclear(w,getrgb(w.owner.style.windbgnd))\n\n\tdrawborder(w)\nend\n\nproc do_draw_scrollbar(w)=\n\tgxclear(w)\n\tdrawborder(w)\n\tgxdraw(w.childlist[1])\t\t\t!arrows\n\tgxdraw(w.childlist[2])\n\n!now draw the thumb\n\tif w.attrs.thumbsize then\n\t\tif w.style.dir='H' then\n\t\t\tx:=w.attrs.thumbpos\n\t\t\tdx:=w.attrs.thumbsize\n\t\t\tdrawthumb(w,x,0,dx,w.dimy)\n\t\telse\n\t\t\ty:=w.attrs.thumbpos\n\t\t\tdy:=w.attrs.thumbsize\n\t\t\tdrawthumb(w,0,y,w.dimx,dy)\n\t\tfi\n\tfi\nend\n\nproc do_draw_listbox(w)=\n\tgxclear(w)\n\tdrawborder(w)\n\tif w.childlist then\t\t\t!scrollbar\n\t\tgxdraw(w.childlist[1])\n\tfi\n\n\tfor i:=1 to w.attrs.rows do\n\t\tk:=i+w.attrs.pagepos-1\n\t\tif k<=getlvbounds(w.linkvar).len then\n\t\t\tdrawlbtext(w,i,getlvstritem(w.linkvar,k),0,k=w.attrs.currpos)\n\t\tfi\n\tod\nend\n\nproc do_update_all(w)=\n\tgxdraw(w)\nend\n\nproc do_update_listbox(w)=\n\tgxdraw(w)\nend\n\nproc drawcaret(x)=\n!x=1: draw caret in wfocus window at current position\n!x=0: delete caret in wsfocus window\n!returns x-pixel position of caret\n\n\tif wfocus=nil then\t\t!no window has focus\n\t\tcaretdrawn:=0\n\t\treturn\n\tfi\n\n\tcase wfocus.windclass\n\twhen editbox_class then\n\t\tif x then\t\t\t!new caret\n\t\t\tif caretdrawn then return fi\t!already drawn\n\t\t\txpos:=getcaretpos(wfocus.linkvar^,wfocus.attrs.currpos,0)\n\t\t\twfocus.attrs.caretpos:=xpos\t\t\t!record position\n\t\telse\t\t\t!delete caret\n\t\t\tif not caretdrawn then return fi\t!already deleted\n\t\t\txpos:=wfocus.attrs.caretpos\t\t!use stored value\n\t\tfi\n\n\t\tcaretwidth:=2\n\n\t\tgxhighlight(wfocus,xpos+wfocus.attrs.textpos[1],wfocus.attrs.textpos[2]-chd,caretwidth,20)\n\n\t\tcaretdrawn:=x\n\tesac\nend\n\nfunc getcaretpos(s,pos,offset)=\n!return pixel position of in front of pos'th character in string s\n!offset is no. of chars not shown, to left of string\n\tif pos=1 then return 0 fi\n\n\treturn wx_gettextwidth(wfocus.gdi.hdc, leftstr(s,pos-1))\nend\n\nproc drawborder(w)=\n!do own-drawn borders\n!other kinds of borders are windows-drawn, no-border, and the main bs- style\n!borders which exist in the owner's client area\n!for own-drawn borders, the window should have been cleared first\n\n\tcase bscat[w.style.border]\n\twhen 0 then\t\t\t\t\t!no border\n\t\treturn\n\twhen 'W' then\t\t\t\t!windows-drawn\n\t\treturn\n\twhen 'X' then\t\t\t\t!external (drawn in owner's client space\n\t\tposx:=w.frameposx\n\t\tposy:=w.frameposy\n\t\tdimx:=w.framedimx\n\t\tdimy:=w.framedimy\n\t\tbs:=w.style.border\n\n\t\tbs:=w.style.border\n\t\two:=w.owner\n\t\tcase bs\n\t\twhen bs_simple then\t\t\t!USUALLY BS_SIMPLE converts to BS_WINDOWS; must be override\n\t\t\tgxcolour(wo,0)\n\t\t\tgxrect(wo,posx,posy,dimx,dimy)\n\t\twhen bs_thick then\n\t\twhen bs_panel then\n\t\t\tgxcolour(wo,ltcolour)\n\t\t\tgxline(wo,posx+dimx-1,posy, posx,posy)\n\t\t\tgxline(wo,posx,posy+dimy-1)\n\t\t\tgxcolour(wo,dkcolour)\n\t\t\tgxline(wo,posx+dimx-1,posy+dimy-1)\n\t\t\tgxline(wo,posx+dimx-1,posy)\n\t\twhen bs_inset then\n\t\t\tgxcolour(wo,dkcolour)\n\t\t\tgxline(wo,posx+dimx-1,posy, posx,posy)\n\t\t\tgxline(wo,posx,posy+dimy-1)\n\t\t\tgxcolour(wo,ltcolour)\n\t\t\tgxline(wo,posx+dimx-1,posy+dimy-1)\n\t\t\tgxline(wo,posx+dimx-1,posy)\n\t\twhen bs_testext then\n\t\t\tgxcolour(wo,0)\n\t\t\tgxrect(wo,posx,posy,dimx,dimy)\n\t\t\tgxrect(wo,posx+9,posy+9,dimx-18,dimy-18)\n\t\tesac\n\twhen 'I' then\t\t\t\t!internal (drawn within window's client space\n\t\tposx:=w.frameposx\n\t\tposy:=w.frameposy\n\t\tdimx:=w.dimx\n\t\tdimy:=w.dimy\n\n\t\tcase w.style.border\n\t\twhen bs_ownpanel then\n\t\t\tgxcolour(w,ltcolour)\n\t\t\tgxline(w,w.framedimx-1,0,0,0)\n\t\t\tgxline(w,0,w.framedimy-1)\n\t\t\tgxcolour(w,dkcolour)\n\t\t\tgxline(w,w.framedimx-1,w.framedimy-1)\n\t\t\tgxline(w,w.framedimx-1,0)\n\n\t\twhen bs_owninset then\n\t\t\tgxcolour(w,dkcolour)\n\t\t\tgxline(w,w.framedimx-1,0,0,0)\n\t\t\tgxline(w,0,w.framedimy-1)\n\t\t\tgxcolour(w,ltcolour)\n\t\t\tgxline(w,w.framedimx-1,w.framedimy-1)\n\t\t\tgxline(w,w.framedimx-1,0)\n\t\twhen bs_ownsimple then\n\t\t\tgxcolour(w,0)\n\t\t\tgxrect(w,0,0,w.framedimx,w.framedimy)\n\t\twhen bs_testint then\n\t\t\tgxcolour(w,0)\n\t\t\tgxrect(w,0,0,dimx,dimy)\n\t\t\tgxrect(w,7,7,dimx-14,dimy-14)\n\t\tesac\n\tesac\nend\n\nproc drawchildborders(w)=\n\tif not w.childlist then\n\t\treturn\n\tfi\n\tfor wc in w.childlist do\n\t\tif wc.style.border in [bs_simple,bs_thick,bs_panel,bs_inset] then\n\t\t\tdrawborder(wc)\n\t\tfi\n\tod\nend\n\nproc drawarrow(w,enable)=\n!w has already been cleared\n!e=1/omitted to enable, 0 to disable (shown grey)\n\tconst factor=0.3\n\n\tgxsetpen(w,(enable|black|dkgrey))\n\n\twidth:=w.dimx\n\theight:=w.dimy\n\n\tcase w.style.dir\n\twhen 'D' then\n\t\tx:=int(round(width/2)-1)\n\n\t\twd:=0\n\n\t\th:=int(round(min(height,width)*factor))\n\t\tif h<3 then h:=3 fi\n\t\ty:=int((height+h)*0.5)-1\n\n\t\tto h do\n\t\t\tgxline(w,x,y,x+wd,y)\n\t\t\tx-:=1\n\t\t\ty-:=1\n\t\t\twd+:=2\n\t\tod\n\n\twhen 'U' then\n\t\tx:=int(round(width/2)-1)\n\t\twd:=0\n\n\t\th:=int(round(min(height,width)*factor))\n\t\tif h<3 then h:=3 fi\n\t\ty:=int(round((height-h)*0.5))\n\t\tto h do\n\t\t\tgxline(w,x,y,x+wd,y)\n\t\t\tx-:=1\n\t\t\ty+:=1\n\t\t\twd+:=2\n\t\tod\n\n\twhen 'L' then\n\t\ty:=height%2\n\n\t\tht:=0\n\t\twd:=y\n\n\t\twd:=int(round(min(height,width)*factor))\n\t\tif wd<3 then wd:=3 fi\n\t\tx:=int(round((width-wd)*0.5)-1)\n\n\t\tto wd do\n\t\t\tgxline(w,x,y,x,y+ht)\n\t\t\ty-:=1\n\t\t\tx+:=1\n\t\t\tht+:=2\n\t\tod\n\n\twhen 'R' then\n\t\ty:=height%2\n\t\tht:=0\n\n\t\twd:=int(round(min(height,width)*factor))\n\t\tif wd<3 then wd:=3 fi\n\t\tx:=int(round((width+wd)*0.5)-1)\n\n\t\tto wd do\n\t\t\tgxline(w,x,y,x,y+ht)\n\t\t\ty-:=1\n\t\t\tx-:=1\n\t\t\tht+:=2\n\t\tod\n\tesac\nend\n\nexport proc gxtext_just(w,s,offset=0,enable=1)=\n\t\tdimx:=w.dimx\n\t\tdimy:=w.dimy\n\t\twidth:=wx_gettextwidth(w.gdi.hdc, s)\n\t\theight:=chy\t\t\t\t!assume basic font\n\n\t\tcase w.style.justify\n\t\twhen 'L' then\tx:=smx\n\t\twhen 'R' then\tx:=dimx-width-smx\n\t\telse\n\t\t\t\t\tx:=(dimx-width)%2\n\t\tesac\n\n\t\tcase w.style.vjustify\n\t\twhen 'T' then\ty:=smy\n\t\twhen 'B' then\ty:=dimy-height-smy\n\t\telse\n\t\t\t\t\ty:=(dimy-height)%2!\t\t-smy%2\n\t\tesac\n\n\t\tif not enable then\n\t\t\toldtextfgnd:=w.style.textfgnd\n\t\t\tgxtextcolour(w,grey)\n\t\tfi\n\n\t\tgxtext(w,s,x+offset,y)\n\n\t\tif not enable then\n\t\t\tgxtextcolour(w,oldtextfgnd)\n\t\tfi\n\t\tif w.windclass=editbox_class then\n\t\t\tw.attrs.textpos:=(x+offset,y)\n\t\tfi\nend\n\nproc drawthumb(w,x,y,dx,dy)=\n!w is a scrollbar, vert or hoz\n!draw thumb within w, as a simple rectangle starting at x,y at top left of size dx,dy\n\n\tgxcolour(w,0)\n\tgxrect(w,x,y,dx,dy)\n\tgxfillrect(w,x+1,y+1,dx-2,dy-2,getrgb(grey))\nend\n\nfunc isonthumb(w,d)=\n!w is a scrollbar, d is a pixel position along it (0 being at left or top)\n!return:\n! -1\tis before the thumb\n!  0\tis on the thumb\n! +1\tif after the thumb\n!d can specify a spot off the thumbar if being dragged\n\n\ta:=w.attrs.thumbpos\n\tb:=w.attrs.thumbsize\n\n\tif d<a then\n\t\treturn -1\n\telsif d>(a+b) then\n\t\treturn 1\n\telse\n\t\treturn 0\n\tfi\nend\n\nproc drawmark(w,turnedon,enable)=\n!!w has already been cleared\n!draw checked check mark, tick, or radio button, according to whether\n!turnedon is 1 or 0\n!e=1 to enable, 0 to disable (shown grey)\n\n\tgxclear(w,getrgb(w.owner.style.windbgnd))\n\tgxsetpen(w,(enable|black|red))\n\n\twidth:=w.dimx\n\theight:=w.dimy\n\tx:=y:=1\n\twd:=width-2\n\tht:=height-2\n\tgxrect(w,x,y,wd,ht)\n\tif not turnedon then return fi\n\n\tcase w.style.marktype\n\twhen radio_mark then\n\n\t\tgxfillrect(w,x+3,y+3,wd-6,ht-6,getrgb(red))\n\n\twhen check_mark then\n\n\t\tgxline(w,x,y,x+wd-1,y+ht-1)\n\t\tgxline(w,x+wd-1,y,x,y+ht-1)\n\n\twhen tick_mark then\n\n\t\tgxline(w,x+3,y+ht%2,x+wd%2,y+ht-4)\n\t\tgxline(w,x+wd-3,y+2)\n\n\tesac\nend\n\nproc drawlbtext(w,row,text,clr=0,hilite=0)=\n!draw text inside given row of listbox w\n!clr=1 to clear the background first (not needed when entired lb has been cleared)\n!hilite=1 to highlight this row\n\n\tx:=0\n\ty:=(row-1)*w.attrs.pitch+w.attrs.offset\n\n\tif clr or hilite then\n\t\tgxfillrect(w,x,y,w.dimx,w.attrs.pitch,(hilite|getrgb(grey)|getrgb(w.style.windbgnd)))\n\tfi\n\n\tif hilite then\n\t\toldtextcolour:=gxtextcolour(w)\n\t\tgxtextcolour(w,white)\n\tfi\n!RETURN\n\n\tgxtext(w,text,x+smx,y+smy)\n\tif hilite then\n\t\tgxtextcolour(w,oldtextcolour)\n\tfi\nend\n\nfunc readnextitem(a)=\n!return (level,value,labelx,options)\n!special values used for divider, new column, new menu\n!next line of file should already have been read\n\n\tif a=\"\" then return list(0,0,0,0) fi\n\n\tlevel:=1\n\ttabs:=0\n\toptions:=\"\"\n\n\twhile asc(a) in [9,' '] do tabs+:=1; a:=rightstr(a,-1) od\n\n\tif a=\"\" then return list(0,0,0,0) fi\n\n\tcase asc(a)\n\twhen '!' then\n\t\treturn list(0,0,0,0)\n\tesac\n\n\tif tabs then\n\t\tj:=0\n\t\tfor i:=1 to ntab do\n\t\t\tif tabs=tabstack[i] then j:=i; exit fi\n\t\tod\n\n\t\tif j=0 then\n\t\t\tif tabs>tabstack[ntab] then\n\t\t\t\tntab+:=1\n\t\t\t\ttabstack[ntab]:=tabs\n\t\t\tfi\n\t\t\tlevel:=ntab\n\t\telse\n\t\t\tlevel:=j\n\t\t\tif j<ntab then ntab:=j fi\n\t\tfi\n\tfi\n\n\tif asc(a) in ['0'..'9'] then\n\t\tvalue:=strtoval(a)\n\t\tn:=\" \" inx a\n\t\tif not n.isfound then\n\t\t\tn:=chr(9) in a\n\t\tfi\n\t\tif n.isfound then\n\t\t\tlabelx:=rightstr(a,-n)\n\t\telse\n\t\t\tlabelx:=\"?\"\n\t\tfi\n\n\telse\t\t\t!no preceding number, maybe top-level menu\n\n\t\tif \"=\" in a then\t!command def for mpl\n\t\t\treturn (0,0,0,0)\n\t\tfi\n\n\t\tvalue:=k_menu\n\t\tlabelx:=a\n\t\tcase convlc(labelx)\n\t\twhen \"hozbreak\",\"divider\" then\n\t\t\tvalue:=kdivide\n\t\twhen \"vertbreak\" then\n\t\t\tvalue:=kcolumn\n\t\twhen \"filehistory\" then\n\t\t\tvalue:=kfilehistory\n\t\telse\n\t\t\tif leftstr(labelx)=\"-\" then value:=kdivide fi\n\t\tesac\n\tfi\n\n\tif labelx=\"\" then\t\t\t!maybe [cmd] only\n\t\treturn list(0,0,0,0)\n\tfi\n\n\treturn (level,value,(labelx),options)\nend\n\nfunc readmenu(m,n,level)=\n!starting at index n in data, read all following items that are\n!at lower level (ie. higher level number) than given level\n!insert items into menu handle m\n!return index of next item in data, which is at <level> or higher\n!will stop at end of data, and return ndata+1\n\n\trestartx:\n\tfor i:=n to ndata do\n\t\t(l,value,labelx,options):=data[i]\n\n\t\tif l<=level then\t\t!end of this submenu\n\t\t\treturn i\n\t\tfi\n\n\t\tflags:=breakflag\n\t\tenable:=1\n\t\tif rightstr(labelx)=\"?\" then\n\t\t\tenable:=0\n\t\t\tlabelx:=leftstr(labelx,-1)\n\t\tfi\n\n\t\tif options<>\"\" then\n\t\t\tif \"H\" in options then flags+:=\"h\" fi\n\t\t\tif \"C\" in options then flags+:=\"c\" fi\n\t\tfi\n\n\t\tcase value\n\t\twhen kdivide then\n\t\t\tgxaddmb(m,style:\"d\")\n\t\twhen kcolumn then\n\t\t\tbreakflag:=\"v\"\n\t\twhen k_menu then\t\t!submenu\n\t\t\tnewm:=gxcreatemb()\n\t\t\tn:=readmenu(newm,i+1,l)\n\t\t\tgxaddmb(m,labelx,newm,\"p\"+flags,enable)\n\t\t\tbreakflag:=\"\"\n\t\t\tgoto restartx\n\t\twhen kfilehistory then\n\t\t\tnfiles:=8\n\t\t\tgxaddmb(m,\"filehistory\",1060,breakflag)\n\t\telse\t\t\t\t!ordinary command\n\tnormalcmd:\n\t\t\tgxaddmb(m,labelx,value,flags,enable)\n\t\t\tbreakflag:=\"\"\n\t\tesac\n\n\tskip:\n\tod\n\n\treturn ndata+1\t\t\t!eod reached\nend\n\nfunc mbreaddata(a)=\n!a is a list of tab-indented strings for a menu bar\n!a can also be a text file containing the strings\n\n\ttabstack::=(0,)\n\tntab:=1\n\tdata::=()\n\tndata:=0\n\tbreakflag:=\"\"\n\n\tif a.isstring then\t\t!read from file\n\t\ta:=readtextfile(a)\n\t\tif a=0 then\n\t\t\ta:=(\"CANTOPENFILE\",)\n\t\tfi\n\tfi\n\n\tfor i:=1 to a.upb do\n\t\tx:=readnextitem(a[i])\n\n\t\tif x[1] then\n\t\t\t++ndata\n\t\t\tdata[ndata]:=x\n\t\tfi\n\tod\n\n\tm:=gxcreatemb()\n\treadmenu(m,1,0)\n\treturn m\nend\n\nexport func gxmenubar(w,?a)=\n!called as:\n!\tgxmenubar(a):\tcreate standalone menu; return handle\n!\tgxmenubar(w,a):\tadd menu to windows w (returns 0)\n!a:\n!\tstring:\t\t\tassume this is a filename containing menubar tabbed layout\n!\tlist:\t\t\ta list of strings containing the data\n\n\tif a.defined then\t\t!w,m: read menu into window w\n\t\tm:=mbreaddata(a)\n\n\t\tif not w.ispointer then\n\t\t\twhile w.owner<>nil do\n\t\t\t\tw:=w.owner\n\t\t\tod\n\t\tfi\n\n\t\tgxsetmb(w,m)\n\t\treturn 0\n\telse\t\t\t\t!create standalone menu, return handle\n\t\treturn mbreaddata(w)\n\tfi\nend\n\nfunc gxcreatemb(?s)=\n\tif s.defined and s in \"Pp\" then\n\t\treturn createpopupmenu()\n\telse\n\t\treturn createmenu()\n\tfi\nend\n\nproc gxsetmb(w,m)=\n\n\thwnd:=w.gdi.hwnd\n\ta:=getmenu(hwnd)\n\ts:=setmenu(hwnd,m)\n\tif a then destroymenu(a) fi\nend\n\nfunc gxaddmb(wm,caption=\"X\",id=0,style=\"\",enable=0)=\n\n\tif wm.ispointer then\t\t\t\t!assume handle\n\t\thmenu:=wm\n\t\twm:=nil\n\telse\n\t\thmenu:=getmenu(wm.gdi.hwnd)\n\tfi\n\n\tflags:=mf_string ior mf_unchecked\n\n\tif not enable then flags ior:=mf_greyed fi\n\n\tforeach c in convuc(style) do\n\t\tcase c\n\t\twhen 0 then exit\n\t\twhen 'P' then flags ior:=mf_popup\n\t\twhen 'D' then flags ior:=mf_separator\n\t\twhen 'B' then flags ior:=mf_menubreak\n\t\twhen 'V' then flags ior:=mf_menubarbreak\n\t\twhen 'H' then flags ior:=mf_help\n\t\twhen 'C' then flags ior:=mf_checked\n\t\tesac\n\tod\n\n\tif appendmenu(hmenu,flags,id,caption) then\n\t\tif wm<>nil then drawmenubar(wm.gdi.hwnd) fi\n\t\treturn hmenu\n\tfi\n\treturn 0\nend\n\nproc gxshowmb(wm,w,x,y)=\n!update menu associated with window; call this func if it has been updated\n!when wm is a menu handle, draw the popup on the screen at x,y\n!if wm.isint then\n\tif wm.ispointer then\n\n\t\tif not y.defined then\n\t\t\tx:=w\n\t\t\ty:=x\n\t\t\tw:=nil\n\t\t\thwnd:=wapplic.gdi.hwnd\n\t\telse\n\t\t\thwnd:=w.gdi.hwnd\n\t\tfi\n\n\t\tpos:=ws_point(x,y)\n\n\t\tif w<>nil then\n\t\t\tclienttoscreen(w.gdi.hwnd,&pos)\n\t\tfi\n\n\t\ttrackpopupmenu(wm,0,pos.x,pos.y,0,hwnd,0)\n\telse\n\t\tdrawmenubar(wm.gdi.hwnd)\n\tfi\nend\n\nfunc gxenablemb(wm,id,enable)=\n\n\tif wm.ispointer then\t\t\t\t!assume handle\n\t\thmenu:=wm\n\telse\n\t\thmenu:=getmenu(wm.gdi.hwnd)\n\tfi\n\n\tif enable.defined then\n\t\treturn enablemenuitem(hmenu,id,(enable|0|mf_greyed)+mf_bycommand)\n\telse\n\t\treturn (getmenustate(hmenu,id,mf_bycommand) iand mf_greyed|0|1)\n\tfi\nend\n\nfunc gxcheckmb(wm,id,check)=\n\tif wm.ispointer then\t\t\t\t!assume handle\n\t\thmenu:=wm\n\telse\n\t\thmenu:=getmenu(wm.gdi.hwnd)\n\tfi\n\n\tif check.defined then\n\t\treturn checkmenuitem(hmenu,id,(check|mf_checked|mf_unchecked)+mf_bycommand)\n\telse\n\t\treturn (getmenustate(hmenu,id,mf_bycommand) iand mf_checked|1|0)\n\tfi\nend\n\nproc gxclosemb(m)=\n\tdestroymenu(m)\nend\n\nexport func gxconfirm(m)=\n\tx:=gxmsgbox(m,\"Confirm\",\"byn\")\n\treturn x=\"yes\"\nend\n\nfunc issubwindow(w,w2)=\n\twhile w2 do\n\t\tif w2==w then return 1 fi\n\t\tw2:=w2.owner\n\tod\n\treturn 0\nend\n\nexport proc flushmessages=\n\nend\n\nPROC CHECKWIND(W, NAME)=\n\tIF W=NIL THEN RETURN FI\n\tIF W.NAME=NAME THEN\n\t\tCPL \"CHECKWIND MATCHES****************\"\n\tFI\nEND\n\nEXPORT PROC CHECKCLOSED(NAME)=\n!CPL \"CC:\",=NAME\n!CPL \"CC:\",=CURRMESS.WIND\n\n\tCHECKWIND(CURRMESS.WIND,NAME)\n\tCHECKWIND(WFOCUS,NAME)\n\n\tfor w in allwindows do\n\t\tcheckwind(w, name)\n!CPL =W\n!CPL =W.CHILDLIST.TYPE\n\t\tif w then\n\t\tfor wc in w.childlist do\n\t\t\tcheckwind(wc, name)\n\t\tod\n\t\tfi\n\tod\n\n\tfor i to nmessages do\n\t\tm:=messagequeue[i]\n\t\tcheckwind(m.wind,name)\n\tod\n\n\tCPL \"CC: OK*****\"\nEND\n"
    data     i64       "VAR DEBUG=0\n\nimportdll imglib =\n    func imgload_rgb\t\t(stringz, ref byte, ref byte, ref byte, i32)ref byte\n\n    func imgload_bgr\t\t(stringz, ref i32, ref i32, ref i32, i32)ref byte\n\n!    func nanoloadjpeg\t\t(stringz, ref i32, ref i32, ref i32)ref byte\n!    func loadjpegm\t\t\t(stringz, ref i64, ref i64, ref i64)ref byte\n\n    proc          imgload_free\t\t(ref byte)\n    func imgsave_jpeg_rgb\t(stringz, ref byte, i32, i32, i32)i32\n    func imgsave_jpeg_bgr\t(stringz, ref byte, i32, i32, i32)i32\nend\n\nimportdll jpeg =\n    func loadjpegm\t\t\t(stringz, ref i64, ref i64, ref i64)ref byte\nend\n\ntype bmpheader = struct\n\tws_bitmapfileheader fh\n\tws_bitmapinfoheader bh\nend\n\nvar\tshifts=[2:1, 4:2, 8:3, 16:4, 32:5, 64:6]\n\nproc main=\n\n!\tCPL \"TESTING BMMAIN NEW\"\n!\tFILE:=\"C:/JPEG/girl.jpg\"\n!\tFILE:=\"C:/JPEG/girl.png\"\n!\tFILE:=\"C:/JPEG/fifteen.png\"\n\tFILE:=\"C:/JPEG/CARD2.jpg\"\n!\tFILE:=\"C:/JPEG/MONA.jpg\"\n!\n\tBM:=BMLOAD(FILE)\n!\tCPL =BM.TYPE\n!\tCPL =BM\n!\tIF NOT BM THEN STOP FI\n!\n!\tBMSAVE(\"freddy.jpg\", BM)\n!\n\n!\tw:=640\n!\th:=480\n!\tw:=640\n!\th:=48\n!\n!\tbm:=bmcreate(8,w,h)\n!!\tgxclear(bm, 0xFF7FFF)\n!\n!\tgxtext(bm,\"Hello, World\")\n!\tfor y:=0 to h-1 do\n!\t\tfor x:=0 to w-1 do\n!\t\t\tc:=0x00'FF'00\n!!\t\t\tgxpixel(bm,x,y,c<<16+c<<8+c)\n!\t\t\tgxpixel(bm,x,y,c)\n!\t\tod\n!\tod\n!\t\n\n!\tbm2:=bmtopal(bm)\n!\tbm2:=bmrgb24torgb32(bm)\n!\tbm2:=bmtogrey(bm,8)\n!\tbm2:=bmtogrey(bm,24)\n!\tbm2:=bmdupl(bm)\n\n!BM2.PALTYPE:=COLOUR_PAL\n!BMRESETPALETTE(BM2)\n!CPL =BM2.PIXELBITS\n!\tBMSAVE(\"PALA.PPM\",BM2)\n!\tBMSAVE(\"FRED.bmp\",BM2)\n!\tBMSAVE(\"PALB.PPM\",BM2,1)\n\n\n!\tCPL \"LOADED\"\n!\tSTOP\n\n\tw:=GXCREATEWINDOW(DIM:(1800,700),caption:\"HI THERE\")\n\tgxcopy(w,bm)\n!\tgxcopy(w,bm,scalex:0.5)\n!\tgxcopy(w,bm,scalex:5.0, x:100)\n!\tgxcopy(w,bm,scalex:2.0, x:100)\n!\tgxcopy(w,bm)\n!T:=clock()\n!to 100 do\n!\tgxcopy(w,bm)\n!od\nglobal const srccopy =  13369376\n\n!CPL =SRCCOPY\n\tbitblt(w.gdi.hdc, 0, 0, 500,300,\n\t\t\t\tw.gdi.hdc,0,0,srccopy)\n\n\n!\tgxcopy(w,bm)\n!\tgxcopy(w,bm)\n!\tgxcopy(w,bm)\n!\tgxcopy(w,bm)\n!cpl =clock()-t\n!WAITKEY()\n\teventloop()\n\nend\n\nexport func bmcreate(pixelbits,width,height)=\n!create new bitmap with given specs, return handle to bitmap (=rwindow ref)\n!when maskptr<>nil, set up mask values\n\n\tbminfo:=new(ws_bitmapv5header)\n\tbminfo.size:=ws_bitmapv5header.bytes\n\tbminfo.width:=width\n\tbminfo.height:=-height\n\tbminfo.planes:=1\n\tbminfo.bitcount:=pixelbits\n\n\tpixelptr:=nil\n\n\tif pixelbits not in [8,24,32] then\n\t\tabort(\"bmcreate pixel size not supported:\"+tostr(pixelbits))\n\tfi\n\n!\thwnd:=createdibsection(screendc,&bminfo,0,&pixelptr,0,0)\n\n!CPL =BMINFO.BYTES\n!CPL =WS_BITMAPV5HEADER.BYTES\n!CPL =BMINFO.SIZE\n!CPL =BMINFO.WIDTH\n!CPL =BMINFO.HEIGHT\n!CPL =BMINFO.PLANES\n!CPL =BMINFO.BITCOUNT\n\n\thwnd:=createdibsection(nil,&bminfo,0,&pixelptr,nil,0)\n\n\tpixelptr:=makeref(pixelptr,byte)\n\n\tif hwnd=0 then\n\t\terror:=getlasterror()\n\t\tabort(\"bmcreate:CreateDIB failed:\"+tostr(error))\n\tfi\n\n!now create a bm record based around this handle\n\n\tbm:=new(rwindow,0)\n\tbm.windclass:=bitmap_class\n\n\tbm.dimx:=width\n\tbm.dimy:=abs(height)\t\t!neg height used for top-down bitmaps\n\n\tbm.style:=defstyle\n\n\tbm.pixelbits:=pixelbits\n\tbm.pixelptr:=pixelptr\n\n!set bytes per pixel\n\tbm.pixelbytes:=pixelbits%8\n\n!set bytes per scanline\n\tn:=bm.pixelbytes*width\n\n!n must be a multiple of 4 bytes\n\tif (n iand 3)<>0 then\t!make bytes a multiple of 4\n\t\tn:=(n+4) iand 0xfffc\n\tfi\n\tbm.linebytes:=n\n!CPL \"XXX\",=BM.TYPE\n!CPL =BM.BASETYPE\n\n\tbm.framebytes:=bm.linebytes*bm.dimy\n\n!set palette colours, using winrgb order\n\tif pixelbits=8 then\n\t\tpalette:=new(array,i32,0..255)\n\t\tbm.paltype:=greyscale_pal\n\t\tcolour:=0\n\t\tfor i:=0 to 255 do\n\t\t\tpalette[i]:=colour\n\t\t\tcolour+:=0x10101\n\t\tod\n\tfi\n\n\tsetupgdi(bm,hwnd)\n\n\tbm.gdi.hdc:=createcompatibledc(nil)\n\tbm.gdi.drawmode:=dm_memory\n\tbm.gdi.oldbmobj:=selectobject(bm.gdi.hdc,hwnd)\t!should store original bitmap\n\tsetstretchbltmode(bm.gdi.hdc,4)\t\t\t!average pixels for best result\n\n\tbmputpalette(bm,palette)\n\n\treturn bm\nend\n\nexport func bmgetpalette(bm)=\n!extract entire palette to p, in bmrgb order\n\tif bm.paltype then\n\t\tpalette:=new(array,i32,0..256)\n\t\tgetdibcolortable(bm.gdi.hdc,0,256,&palette)\n\t\tpalette[256]:=bm.paltype\n\t\treversepalette(palette)\n\telse\n\t\tpalette:=()\n\tfi\n\treturn palette\nend\n\nexport proc bmputpalette(bm,p,reverse=1)=\n!update entire palette from p, in bmrgb order\n\tif bm.paltype then\n\t\tif reverse then reversepalette(p) fi\t\t!fix colours\n\t\tsetdibcolortable(bm.gdi.hdc,0,256,&p)\t!store\n\t\tif reverse then reversepalette(p) fi\t\t\t!restore orignal palette\n\t\tif p.upb=256 then\n\t\t\tbm.paltype:=p[256]\n\t\tfi\n\tfi\nend\n\nexport func bmcolour(bm,n,?colour)=\n!get/set palette info:\n!n=given:\n! colour given: update colour entry\n! colour omitted(-1): return colour value\n\n\tif colour.isdef then\t\t!set colour\n\t\tcolour:=revpixel(colour)\n\t\tsetdibcolortable(bm.gdi.hdc,n,1,&colour)\n\t\treturn colour\n\telse\t\t\t\t!get colour\n\t\tcolour:=0\n\t\tgetdibcolortable(bm.gdi.hdc,n,1,&colour)\n\t\treturn revpixel(colour)\n\tfi\nend\n\nexport proc reversepalette(&p)=\n!reverse values of 32-bit colour data at p\n\tfor i:=0 to 255 do\n\t\tp[i]:=revpixel(p[i])\n\tod\nend\n\nexport func revpixel(a)=\n!change rgb to bgr\n!windows colours use red in lsb, bitmaps use blue in lsb, in 24-bit pixels and palette colours\nreturn (a iand 0x00ff00) ior (a>>16 iand 255) ior ((a iand 255)<<16)\nend\n\nexport proc bmshow(bm)=\n\tgxcopy(bm)\nend\n\nexport proc bmfree(bm)=\n\treturn when bm=nil\n\tif not deletedc(bm.gdi.hdc) then\n\t\tpcerror(\"ERROR DELETING BM/HDC\")\n\tfi\n\n\tif not deleteobject(bm.gdi.hwnd) then\n\t\tpcerror(\"ERROR DELETING DIB\")\n\tfi\nend\n\nexport func bmdupl(bm)=\n\tnewbm:=bmcreate(bm.pixelbits, bm.dimx, bm.dimy)\n\tmemcpy(newbm.pixelptr, bm.pixelptr, bm.linebytes*bm.dimy)\n\n\tbmduplpalette(newbm,bm)\n\n\treturn newbm\nend\n\nexport proc bmduplpalette(newbm,bm)=\n\tif bm.paltype then\n\t\tpal:=bmgetpalette(bm)\n\t\tbmputpalette(newbm,pal)\n\t\tnewbm.paltype:=bm.paltype\n\tfi\nend\n\nexport func bmduplz(bm)=\n\tnewbm:=bmcreate(bm.pixelbits, bm.dimx, bm.dimy)\n\treturn newbm\nend\n\nexport func bmgetptr(bm,x,y)=\n!return byte pointer to given pixel\n\treturn bm.pixelptr+(bm.linebytes*y+x*bm.pixelbytes)\nend\n\nexport func bmgetrowptr(bm,y)=\n\treturn bm.pixelptr+y*bm.linebytes\nend\n\n!export func bmgetpixel(bm,y)=\n!\treturn bm.pixelptr+y*bm.linebytes\n!end\n\nfunc getcbbitmap(hwnd)=\n\n\tp:=globallock(hwnd)\n\thsize:=ws_bitmapinfoheader.bytes\n\tbm:=nil\n\n\tif p then\n\t\tp:=makeref(p,ws_bitmapinfoheader)\n\t\tpb:=makeref(p,byte)\n\n\t\tbm:=bmcreate(p^.bitcount,p^.width,p^.height)\n\t\toffset:=(bm.paltype|1024|0)\t\t!offset due to palette table\n\n\t\tif offset then\n\t\t\tsetdibcolortable(bm.gdi.hdc,0,256,pb+hsize)\n\t\tfi\n\n\t\tpb:=pb+hsize+offset\n\t\tfor y:=0 to bm.dimy-1 do\n\t\t\tq:=bmgetrowptr(bm,bm.dimy-y-1)\n\t\t\tmemcpy(q,pb,bm.linebytes)\n\t\t\tpb:=pb+bm.linebytes\n\t\tod\n\n\tfi\n\n\tglobalunlock(hwnd)\n\n\treturn bm\nend\n\nexport func bmgetclipboard=\n!get image from clipboard if one is there, otherwise return nil\n\tif openclipboard(nil)=0 then\n\t\treturn nil\n\tfi\n\n\thwnd:=getclipboarddata(cf_dib)\n\n\tbm:=nil\n\tif hwnd then\n\t\tbm:=getcbbitmap(hwnd)\n\tfi\n\n\tcloseclipboard()\n\n\treturn bm\nend\n\nexport func bmputclipboard(bm)=\n\tif openclipboard(0)=0 then\n\t\treturn nil\n\tfi\n\n\temptyclipboard()\n\n\thwnd:=putcbbitmap(bm)\n\tif hwnd then\n\t\tsetclipboarddata(cf_dib,hwnd)\n\tfi\n\n\tcloseclipboard()\n\treturn 1\nend\n\nfunc putcbbitmap(bm)=\n\tvar mem\n\n\thsize:=ws_bitmapinfoheader.bytes\n\tpsize:=(bm.paltype|1024|0)\n\tfsize:=bm.linebytes*bm.dimy\n\n\thmem:=globalalloc(0,hsize+psize+fsize)\n\tmem:=makeref(globallock(hmem),byte)\n\tmem:=0!makeref(globallock(hmem),byte)\n\n\thdr:=new(ws_bitmapinfoheader)\n\thdr.size:=hsize\n\thdr.width:=bm.dimx\n\thdr.height:=bm.dimy\n\thdr.bitcount:=bm.pixelbits\n\thdr.planes:=1\n\thdr.xpelspermetre:=11811\n\thdr.ypelspermetre:=11811\n\thdr.clrused:=0\n\n\tmemcpy(mem,&hdr,hsize)\n\n\tif psize then\n\t\tpal:=bmgetpalette(bm)\n\t\tmemcpy(mem+hsize,&pal,psize)\n\tfi\n\n\tmem:=mem+hsize+psize\n\tfor y:=0 to bm.dimy-1 do\n\t\tp:=bmgetrowptr(bm,bm.dimy-1-y)\n\t\tmemcpy(mem, p, bm.linebytes)\n\t\tmem:=mem+bm.linebytes\n\tod\n\tglobalunlock(hmem)\n\n\treturn hmem\nend\n\nproc copy24to8(newbm,oldbm)=\n!both images are same size. Copy 1st plane of 24-bit oldbm to 8-bit newbm\n\tfor y:=0 to oldbm.dimy-1 do\n\t\tp:=bmgetrowptr(newbm,y)\n\t\tq:=bmgetrowptr(oldbm,y)\n\t\tto oldbm.dimx do\n\t\t\tp++^:=q^\n\t\t\tq:=q+3\n\t\tod\n\tod\nend\n\n!proc copy8to24(newbm,oldbm)=\n!!both images are same size. Copy only plane of 8-bit oldbm to all planes of 24-bit newbm\n!\tfor y:=0 to oldbm.dimy-1 do\n!\t\tp:=bmgetrowptr(newbm,y)\n!\t\tq:=bmgetrowptr(oldbm,y)\n!\t\tto oldbm.dimx do\n!\t\t\tp++^:=q^\n!\t\t\tq:=q+3\n!\t\tod\n!\tod\n!end\n\nexport proc bmresetpalette(bm)=\n# set palette back to greyscale\n\tpal:=new(array,i32,0..256)\n\tcolour:=0\n\tfor i:=0 to 255 do\n\t\tpal[i]:=colour\n\t\tcolour+:=0x010101\n\tod\n\tbmputpalette(bm,pal)\n\tbm.paltype:=greyscale_pal\nend\n\nfunc makescalemap(x)=\n!x=0..1; create 256-element lookup table to multiply 0..255 by x\n\tmap:=new(list,0..255)\n\tfor i:=0 to 255 do\n\t\tmap[i]:=clamp(int(round(i*x)),0,255)\n\tod\n\treturn map\nend\n\nfunc bmunimpl(mess)=\n!ABORT(\"UNIMPLEMENTED: \"+MESS)\nPRINTLN \"UNIMPLEMENTED:\",MESS\nPRINTLN \"ABORTING\"\nSTOP\nreturn 0\nend\n\n!===========================================================================\n!========= HANDLERS\n!===========================================================================\n\nexport func bmload(filename)=\n!CPL \"BMLOAD:\",FILENAME\n\tcase e:=convlc(extractext(filename))\n\twhen \"jpg\",\"jpeg\" then\n\t\treturn bmloadjpg(filename)\n\twhen \"bmp\" then\n\t\treturn bmloadbmp(filename)\n!\twhen \"pgm\" then\n!\t\treturn bmloadpgm_p2p5(filename)\n\twhen \"ppm\",\"pgm\" then\n\t\treturn bmloadppm_p3p6(filename)\n\twhen \"png\" then\n\t\treturn bmloadpng(filename)\n\twhen \"\" then\t\t\t\t!try all\n\t\texts:=(\"jpg\",\"bmp\",\"pgm\",\"ppm\",\"png\")\n\t\tfor ext in exts do\n\t\t\tbm:=bmload(addext(filename,ext))\n\t\t\tif bm then\n\t\t\t\treturn bm\n\t\t\tfi\n\t\tod\n\t\treturn nil\n\telse\n\t\tprintln \"CAN'T LOAD\",E,\"IMAGE\"\n\t\treturn nil\n\tesac\n\treturn nil\nend\n\nfunc bmloadbmp(filename)=\n\tf:=openfile(filename)\n\tif not f then return nil fi\n\n\tfileheader:=new(bmpheader)\n\n\treadrandom(f,&fileheader,0,bmpheader.bytes)\n\tfiledimx:=fileheader.bh.width\n\tfiledimy:=fileheader.bh.height\n\tinvert:=1\n\tif filedimy<0 then\n\t\tfiledimy:=abs(filedimy)\n\t\tinvert:=0\n\tfi\n\n\tif fileheader.fh.typex<>'BM' then\n\t\tclosefile(f)\n\t\treturn nil\n\tfi\n\n\tif fileheader.bh.compression<>0 then\n\t\tclosefile(f)\n\t\treturn nil\n\tfi\n\n\tbm:=bmcreate(fileheader.bh.bitcount,filedimx,filedimy)\n\tframebytes:=bm.linebytes*filedimy\n\n\tif bm.paltype then\n\t\tpalette:=new(array,i32,0..255)\n\t\treadrandom(f,&palette,bmpheader.bytes,1024)\n\t\tbmputpalette(bm,palette,0)\n\t\tcolour:=0\n\t\tfor i:=0 to 255 do\n\t\t\tif palette[i]<>colour then\n\t\t\t\tbm.paltype:=colour_pal\n\t\t\t\texit\n\t\t\tfi\n\t\t\tcolour+:=0x010101\n\t\tod\n\n\tfi\n\n\treadrandom(f,bm.pixelptr,fileheader.fh.offbits,framebytes)\n\tclosefile(f)\n\n\n\tif invert then\n\t\tn:=bm.linebytes\n\t\tbuffer:=makeref(malloc(n),byte)\n\n\t\tfor y:=0 to filedimy%2 do\n\t\t\tp:=bmgetrowptr(bm,y)\n\t\t\tq:=bmgetrowptr(bm,filedimy-1-y)\n!\n\t\t\tmemcpy(buffer,p,n)\n\t\t\tmemcpy(p,q,n)\n\t\t\tmemcpy(q,buffer,n)\n\t\tod\n\t\tfree(buffer)\n\tfi\n\n\treturn bm\nend\n\nexport func bmloadjpg(filename)=\n\tw:=h:=n:=0\n\nCPL \"LOADJ1\"\n!\tp:=imgload_bgr(filename,&w,&h,&n,3)\n\n!\tp:=imgload_bgr(filename,&w,&h,&n,3)\n\tp:=loadjpegm(filename,&w,&h,&n);\n!\tp:=nanoloadjpeg(filename,&w,&h,&n)\n\n\n!\tp:=imgload_bgr(filename,&w,&h,&n)\nCPL \"LOADJ2\",=P, W,H,N\n\tIF P=NIL THEN PCERROR(\"CAN'T LOAD JPG\") FI\n\n\tpixelbits:=n*8\n\n\tif p=nil then\n\t\treturn nil\n\tfi\n\n\tq:=makeref(p,byte)\n\n\tbm:=bmcreate(pixelbits,w,h)\n\n\tnbytes:=w*h*n\n\tdest:=makeref(bm.pixelptr,byte)\n\n\tto h do\n\t\tmemcpy(dest,q,w*n)\n\t\tdest:=dest+bm.linebytes\n\t\tq:=q+w*n\n\tod\n\n!\timgload_free(p)\n\n\treturn bm\nend\n\nfunc bmloadpbm_p1p4(filename)=\nCPL \"CAN'T LOAD PBM\"\nRETURN NIL\n!return bmunimpl(\"bmloadpbm\")\nend\n\nfunc bmloadpgm_p2p5(filename)=\n\nCPL \"LOAD PGM P25\",FILENAME\n\tf:=openfile(filename,\"rb\")\n\tif f=0 then return nil fi\n\n\treadln @f, sig:\"s\"\n\n!CPL =SIG\n\tcase sig\n\twhen \"P5\" then\n\t\tbinary:=1\n\twhen \"P2\" then\n\t\tbinary:=0\n\telse\n\t\tabort(\"Can't read pgm\")\n\t\treturn nil\n\tesac\t\n\n\twidth:=readnextint(f)\n\theight:=readnextint(f)\n\tmaxpix:=readnextint(f)\n\n\tbm:=bmcreate(8,width,height)\n\n\tlinebytes:=width\n\tdest:=makeref(bm.pixelptr,byte)\n\nCPL =WIDTH,=HEIGHT, LINEBYTES,=BM\n\tto height do\n\t\tif binary then\n\t\t\treadbytes(f,dest,width)\t\t\t!will be bgr\n\t\telse\n\t\t\tp:=dest\n\t\t\tto linebytes do\n\t\t\t\tp++^:=readffint(f)\n\t\t\tod\n\t\tfi\n\n\t\tdest:=dest+bm.linebytes\n\tod\n\n\tclosefile(f)\n\n\treturn bm\nend\n\nfunc bmloadppm_p3p6(filename)=\n!read p6 ppm which is binary 24-bit, but will also recognise other formats\n\n!CPL \"P3P6\"\n\tf:=openfile(filename,\"rb\")\n\tif f=0 then return nil fi\n\n\treadln @f, sig:\"s\"\n\n!CPL =SIG\n\tcase sig\n\twhen \"P6\" then\n\t\tbinary:=1\n\twhen \"P3\" then\n\t\tbinary:=0\n\twhen \"P5\",\"P2\" then\n\t\tclosefile(f)\n\t\treturn bmloadpgm_p2p5(filename)\n!\twhen \"P4\",\"P1\" then\n!\t\tclosefile(f)\n!\t\treturn bmloadpbm_p1p4(filename)\n\telse\n\t\tabort(\"Can't read ppm:\"+sig)\n\t\treturn nil\n\tesac\t\n\n!CPL \"READING P6/P3 PPM\"\n\n\twidth:=readnextint(f)\n\theight:=readnextint(f)\n\tmaxpix:=readnextint(f)\n\n\tbm:=bmcreate(24,width,height)\n\n\tlinebytes:=width*3\n\tdest:=makeref(bm.pixelptr,byte)\n\n\tto height do\n\t\tif binary then\n\t\t\treadbytes(f,dest,linebytes)\t\t\t!will be bgr\n\t\telse\n\t\t\tp:=dest\n\t\t\tto linebytes do\n\t\t\t\tp++^:=readffint(f)\n\t\t\tod\n\t\tfi\n\n\t\tp:=dest\t\t\t\t\t\t\t\t!convert to rgb\n\t\tto width do\n\t\t\tswap(p^,(p+2)^)\n\t\t\tp:=p+3\n\t\tod\n\n\t\tdest:=dest+bm.linebytes\n\tod\n\n\tclosefile(f)\n\n\treturn bm\nend\n\nfunc readnextint(f)=\n\tread x\n\twhile not x.isint and not eof(f) do\n\t\treadln @f,x\n\tod\n\tif not x.isint then return 0 fi\n\treturn x\nend\n\nfunc readffint(f)=\n!read next free-format int from f\n\trepeat\n\t\tc:=inbyte(f)\n\tuntil c in '0'..'9'\n\n\ta:=c-'0'\n\tdo\n\t\tc:=inbyte(f)\n\t\tif c in '0'..'9' then\n\t\t\ta:=a*10+c-'0'\n\t\telse\n\t\t\texit\n\t\tfi\n\tod\n\n\treturn a\nend\n\nfunc bmloadpng(filename)=\n\tw:=h:=n:=0\n\nCPL \"LOADP1\"\n!\tp:=imgload_bgr(filename,&w,&h,&n,3)\n\n\tp:=imgload_bgr(filename,&w,&h,&n,0)\n\n!\tp:=nanoloadjpeg(filename,&w,&h,&n)\n\n\n\n!\tp:=imgload_bgr(filename,&w,&h,&n)\nCPL \"LOADP2\",=P, W,H,N\n\n\tpixelbits:=n*8\n\n\tif p=nil then\n\t\treturn nil\n\tfi\n\n\tq:=makeref(p,byte)\n\n\tbm:=bmcreate(pixelbits,w,h)\n\n\tnbytes:=w*h*n\n\tdest:=makeref(bm.pixelptr,byte)\n\n\tto h do\n\t\tmemcpy(dest,q,w*n)\n\t\tdest:=dest+bm.linebytes\n\t\tq:=q+w*n\n\tod\n\n\timgload_free(p)\n\n\treturn bm\nend\n\nexport func bmsave(filename,bm,binary=0)=\n\tcase e:=convlc(extractext(filename))\n\twhen \"jpg\",\"jpeg\" then\n\t\treturn bmsavejpg(filename,bm)\n\twhen \"bmp\" then\n\t\treturn bmsavebmp(filename,bm)\n\twhen \"ppm\",\"pgm\" then\n\t\treturn bmsaveppm_p3p6(filename,bm,binary)\n\telse\n\t\tprintln \"CAN'T SAVE\",E,\"IMAGE\"\n\t\treturn nil\n\tesac\n\treturn nil\nend\n\nfunc bmsavebmp(filename,bm)=\n\tw:=bm.dimx\n\th:=bm.dimy\n\tpixelbytes:=bm.pixelbytes\n\tframebytes:=bm.linebytes*h\n\tpalettebytes:=(pixelbytes=1|1024|0)\n\n\tbmfile:=createfile(filename)\n\tif bmfile=nil then\n\t\treturn 0\n\tfi\n\n\tfileheader:=new(bmpheader)\n\n\tfileheader.fh.typex:='BM'\n\tfileheader.fh.offbits:=bmpheader.bytes+palettebytes\n\tfileheader.fh.size:=fileheader.fh.offbits+framebytes\n\tfileheader.bh.size:=ws_bitmapinfoheader.bytes\n\tfileheader.bh.width:=bm.dimx\n\tfileheader.bh.height:=-bm.dimy\n\tfileheader.bh.bitcount:=bm.pixelbits\n\tfileheader.bh.planes:=1\n\tfileheader.bh.xpelspermetre:=11811\t\t!300 dpi\n\tfileheader.bh.ypelspermetre:=11811\n\tfileheader.bh.clrused:=0\n\n\twriterandom(bmfile,&fileheader,0,bmpheader.bytes)\n\n\tif palettebytes then\n\t\tpalette:=bmgetpalette(bm)\n\t\treversepalette(palette)\n\t\twriterandom(bmfile,&palette,bmpheader.bytes,palettebytes)\n\tfi\n\n\twriterandom(bmfile,bm.pixelptr,fileheader.fh.offbits,framebytes)\n\n\treturn closefile(bmfile)\nend\n\nfunc bmsavejpg(filename,bm)=\n\tw:=bm.dimx\n\th:=bm.dimy\n\tpixelbytes:=bm.pixelbytes\n\tlinebytes:=bm.linebytes\n\n\tp:=q:=malloc(pixelbytes*w*h)\n\n\ts:=makeref(bm.pixelptr,byte)\n\n\tto h do\n\t\tmemcpy(q,s,w*pixelbytes)\n\t\tq:=q+bm.linebytes\n\t\ts:=s+w*pixelbytes\n\tod\n\n\tstatus:=imgsave_jpeg_bgr(filename,p,w,h,pixelbytes)\n\n\tfree(p)\n\n\treturn status\nend\n\nfunc bmsavepbm_p1p4(filename,bm,binary)=\nreturn bmunimpl(\"bmsaveppm-1bit\")\nend\n\nfunc bmsavepgm_p2p5(filename,bm,binary)=\n\twidth:=bm.dimx\n\theight:=bm.dimy\n\n\tf:=createfile(filename)\n\n\tCPL \"WRITEPGM\",filename\n\n\tif not f then return 0 fi\n\n\tprintln @f,(binary|\"P5\"|\"P2\")\n\tprintln @f,width,height\n\tprintln @f,\"255\"\n\n\tbuffer:=data\n\n\tbuffer:=malloc(bm.linebytes)\n\tif buffer=nil then return 0 fi\n\tbuffer:=makeref(buffer,byte)\n\n\tlinebytes:=width\t\t\t!also number of values per line when in text mode\n\n\tfor y:=0 to height-1 do\n\t\tmemcpy(buffer,bmgetrowptr(bm,y),linebytes)\n\t\tif binary then\n\t\t\twritebytes(f,buffer,linebytes)\n\t\telse\n\t\t\tp:=buffer\n\t\t\tto linebytes do\n\t\t\t\tprint @f,p++^,,\" \"\n\t\t\tod\n\t\t\tprintln @f\n\t\tfi\n\tod\n\tclosefile(f)\n\treturn 1\nend\n\nfunc bmsaveppm_p3p6(filename,bm,binary)=\n!\treturn bmunimpl(\"bmsaveppm\")\n\n\tcase bm.pixelbits\n\twhen 24 then\n\twhen 8 then\n\t\treturn bmsavepgm_p2p5(filename,bm,binary)\n\telse\n\t\treturn 0\n\tesac\n\n\twidth:=bm.dimx\n\theight:=bm.dimy\n\n\tf:=createfile(filename)\n\n\tCPL \"WRITEPPM\",filename\n\n\tif not f then return 0 fi\n\n\tprintln @f,(binary|\"P6\"|\"P3\")\n\tprintln @f,width\n\tprintln @f,height\n\tprintln @f,\"255\"\n\n\tbuffer:=data\n\n\tbuffer:=malloc(bm.linebytes)\n\tif buffer=nil then return 0 fi\n\tbuffer:=makeref(buffer,byte)\n\n\tlinebytes:=width*3\t\t\t!also number of values per line when in text mode\n\n\tfor y:=0 to height-1 do\n\t\tmemcpy(buffer,bmgetrowptr(bm,y),linebytes)\n\t\tp:=buffer\t\t\t\t\t!convert to bgr\n\t\tto width do\n\t\t\tswap(p^,(p+2)^)\n\t\t\tp:=p+3\n\t\tod\n\t\tif binary then\n\t\t\twritebytes(f,buffer,linebytes)\n\t\telse\n\t\t\tp:=buffer\n\t\t\tto linebytes do\n\t\t\t\tprint @f,p++^,,\" \"\n\t\t\tod\n\t\t\tprintln @f\n\t\tfi\n\tod\n\tclosefile(f)\n\treturn 1\nend\n\nexport func bmrotate(bm, angle)=\n\tcase angle\n\twhen 0 then return bmdupl(bm)\n\twhen -90 then return bmrotleft90(bm)\n\twhen +90 then return bmrotright90(bm)\n\twhen 180 then return rot180(bm)\n\tesac\n\treturn bmunimpl(\"bmrotate by \"+tostr(angle))\nend\n\nexport func bmrotleft90(bm)=\n\tcase bm.pixelbits\n\twhen 8 then return rotleft90_8(bm)\n\twhen 24 then return rotleft90_24(bm)\n\twhen 32 then return bmunimpl(\"ROTLEFT90/32\")\n\tesac\n\treturn nil\nend\n\nexport func bmrotright90(bm)=\n\tcase bm.pixelbits\n\twhen 8 then return rotright90_8(bm)\n\twhen 24 then return rotright90_24(bm)\n\twhen 32 then return bmunimpl(\"ROTRIGHT90/32\")\n\tesac\n\treturn nil\nend\n\nexport func rot180(bm)=\n\tnewbm1:=bmfliphoz(bm)\n\tnewbm2:=bmflipvert(newbm1)\n\tbmfree(newbm1)\n\treturn newbm2\nend\n\nfunc rotleft90_8(bm)=\n\tw:=bm.dimx\n\th:=bm.dimy\n\tlinebytes:=bm.linebytes\n\n\tnewbm:=bmcreate(8,h,w)\n\n\tfor y:=0 to w-1 do\n\t\tq:=bmgetptr(bm,w-y-1,0)\n\t\tp:=bmgetrowptr(newbm,y)\n\n\t\tto h do\n\t\t\tp++^:=q^\n!\t\t\tq:=q+w\n\t\t\tq:=q+linebytes\n\t\tod\n\tod\n\n\tbmduplpalette(newbm,bm)\n\treturn newbm\nend\n\nfunc rotright90_8(bm)=\n\tw:=bm.dimx\n\th:=bm.dimy\n\tlinebytes:=bm.linebytes\n\n\tnewbm:=bmcreate(8,h,w)\n\n\tfor y:=0 to w-1 do\n\t\tq:=bmgetptr(bm,y,h-1)\n\t\tp:=bmgetrowptr(newbm,y)\n\n\t\tto h do\n\t\t\tp++^:=q^\n\t\t\tq:=q-linebytes\n\t\tod\n\tod\n\n\tbmduplpalette(newbm,bm)\n\treturn newbm\nend\n\n!function rotleft90_24(bm)=\n!\tnewbm:=bmcreate(24,bm.dimy,bm.dimx)\n!\n!\txform:=new(array,ws_point,3)\n!\txform[1].y:=bm.dimx\n!\txform[3].x:=bm.dimy\n!\txform[3].y:=bm.dimx\n!\n!\tplgblt(newbm.gdi.hdc,&xform, bm.gdi.hdc,0,0,bm.dimx,bm.dimy, nil,0,0)\n!\n!\treturn newbm\n!end\n\nfunc rotleft90_24(bm)=\n\tw:=bm.dimx\n\th:=bm.dimy\n\n\tnewbm:=bmcreate(24,h,w)\n\n\tfor y:=0 to w-1 do\n\t\tq:=bmgetptr(bm,w-y-1,0)\n\t\tp:=bmgetrowptr(newbm,y)\n\n\t\tto h do\n\t\t\tp++^:=q^\n\t\t\tp++^:=(q+1)^\n\t\t\tp++^:=(q+2)^\n\t\t\tq:=q+bm.linebytes\n\t\tod\n\tod\n\n\treturn newbm\nend\n\n!function rotright90_24(bm)=\n!\tnewbm:=bmcreate(24,bm.dimy,bm.dimx)\n!\n!\txform:=new(array,ws_point,3)\n!\txform[1].X:=bm.dimy\n!\txform[2].x:=bm.dimy\n!\txform[2].y:=bm.dimx\n!\n!\tplgblt(newbm.gdi.hdc,&xform, bm.gdi.hdc,0,0,bm.dimx,bm.dimy, nil,0,0)\n!\n!\treturn newbm\n!end\n\nfunc rotright90_24(bm)=\n\tw:=bm.dimx\n\th:=bm.dimy\n\n\tnewbm:=bmcreate(24,h,w)\n\n\tfor y:=0 to w-1 do\n\t\tq:=bmgetptr(bm,y,h-1)\n\t\tp:=bmgetrowptr(newbm,y)\n\n\t\tto h do\n\t\t\tp++^:=q^\n\t\t\tp++^:=(q+1)^\n\t\t\tp++^:=(q+2)^\n\t\t\tq:=q-bm.linebytes\n\t\tod\n\tod\n\n\treturn newbm\nend\n\nfunc rotate8(bm,angle)=\nreturn bmunimpl(\"rotate8\")\nend\n\nexport func bmfliphoz(bm)=\n\tcase bm.pixelbytes\n    when 1 then return fliphoz8(bm)\n    when 3 then return fliphoz24(bm)\n    when 4 then return fliphoz32(bm)\n\tesac\n\treturn nil\nend\n\nfunc fliphoz8(bm)=\n\tnewbm:=bmdupl(bm)\n\n\tw:=newbm.dimx\n\th:=newbm.dimy\n\tbuffer:=makeref(malloc(bm.linebytes),byte)\n\n\tfor y:=0 to h-1 do\n\t\tp:=bmgetrowptr(newbm,y)\n\t\tq:=p+w-1\n\t\tfor x:=0 to w%2 do\n\t\t\tt:=p^\n\t\t\tp^:=q^\n\t\t\tq^:=t\n\t\t\t++p; --q\n\t\tod\n\tod\n\n\treturn newbm\nend\n\nfunc fliphoz24(bm)=\n\tnewbm:=bmdupl(bm)\n\n\tw:=newbm.dimx\n\th:=newbm.dimy\n\tbuffer:=makeref(malloc(bm.linebytes),byte)\n\n\tfor y:=0 to h-1 do\n\t\tp:=bmgetrowptr(newbm,y)\n\t\tmemcpy(buffer,p,bm.linebytes)\n\t\tq:=buffer+(w-1)*3\n\n\t\tto w do\n\t\t\tp++^:=q++^\n\t\t\tp++^:=q++^\n\t\t\tp++^:=q^\n\n\t\t\tq:=q-5\n\t\tod\n\tod\n\n\treturn newbm\nend\n\nfunc fliphoz32(bm)=\nreturn bmunimpl(\"fliphoz_32\")\nend\n\nexport func bmflipvert(bm)=\n\tnewbm:=bmdupl(bm)\n\n\tw:=newbm.dimx\n\th:=newbm.dimy\n\tn:=bm.linebytes\n\tbuffer:=makeref(malloc(n),byte)\n\n\tfor y:=0 to h%2 do\n\t\tp:=bmgetrowptr(newbm,y)\n\t\tq:=bmgetrowptr(newbm,h-1-y)\n!\n\t\tmemcpy(buffer,p,n)\n\t\tmemcpy(p,q,n)\n\t\tmemcpy(q,buffer,n)\n\tod\n\tfree(buffer)\n\n\treturn newbm\nend\n\nexport func bmrepeat(bm,cols,rows)=\n\tw:=bm.dimx\n\th:=bm.dimy\n\tnewbm:=bmcreate(bm.pixelbits, w*cols, h*rows)\n\tlinebytes:=bm.linebytes\n\n\tfor y:=0 to h-1 do\n\t\ts:=bmgetrowptr(bm,y)\n\t\tfor r:=0 to rows-1 do\n\t\t\tfor c:=0 to cols-1 do\n\t\t\t\tmemcpy(bmgetptr(newbm,c*w,r*h+y),s,linebytes)\n\t\t\tod\n\t\tod\n\tod\n\n\tif bm.pixelbits=8 then\n\t\tbmduplpalette(newbm,bm)\n\tfi\n\n\treturn newbm\nend\n\nexport func bmscale(bm, sx,?sy)=\n\tif sy.isvoid then sy:=sx fi\n\tcase bm.pixelbits\n\twhen 8 then return scalex8(bm,sx,sy)\n\twhen 24,32 then return scalex24(bm,sx,sy)\n\tesac\n\treturn nil\nend\n\nfunc scalex8(bm,sx,sy)=\n\tw:=bm.dimx\n\th:=bm.dimy\n\n\tneww:=int(round(w*sx))\n\tnewh:=int(round(h*sy))\n\n\tnewbm:=bmcreate(24, neww,newh)\n\treturn nil when not newbm\n\n\tbm24:=bmtorgb(bm,24)\n\n\tstretchblt(newbm.gdi.hdc,0,0,neww,newh,bm24.gdi.hdc,0,0,w,h, srccopy)\n\n\tif bm.paltype=greyscale_pal then\n\t\tnewbm8:=bmgetplane(newbm,\"R\")\n\telse\n\t\tnewbm8:=bmtopal(newbm)\n\tfi\n\tbmfree(newbm)\n\n\treturn newbm8\nend\n\nfunc scalex24(bm,sx,sy)=\n\tw:=bm.dimx\n\th:=bm.dimy\n\n\tneww:=int(round(w*sx))\n\tnewh:=int(round(h*sy))\n\n\tif neww<8 or newh<8 then return nil fi\n\n\tnewbm:=bmcreate(bm.pixelbits, neww,newh)\n\tif newbm then\n\t\tstretchblt(newbm.gdi.hdc,0,0,neww,newh,bm.gdi.hdc,0,0,w,h, srccopy)\n\tfi\n\n\treturn newbm\nend\n\nfunc bmscaleupi8(bm,sx,sy)=\nreturn bmunimpl(\"bmscaleupi8\")\nend\n\nfunc bmscaleupi24(bm,sx,sy)=\nreturn bmunimpl(\"bmscaleupi24\")\nend\n\nfunc bmscaleupi32(bm,sx,sy)=\nreturn bmunimpl(\"bmscaleupi32\")\nend\n\nfunc bmscaledowni8(bm,sx,sy)=\nreturn bmunimpl(\"bmscaledowni8\")\nend\n\nfunc bmscaledowni24(bm,sx,sy)=\nreturn bmunimpl(\"bmscaledowni24\")\nend\n\nfunc bmscaledowni32(bm,sx,sy)=\nreturn bmunimpl(\"bmscaledowni32\")\nend\n\nexport func bmneg(bm)=\n\tnewbm:=bmdupl(bm)\n\n\tdx:=newbm.dimx-1\n\tdy:=newbm.dimy-1\n\tn:=newbm.linebytes\n\tdo32:=0\n\tif n rem 4=0 then\n\t\tdo32:=1\n\t\tn:=n%4\n\tfi\n\n\tfor y:=0 to dy do\n\t\tif do32 then\n\t\t\tp:=makeref(bmgetrowptr(newbm,y),i32)\n\t\t\tto n do\n\t\t\t\tp++^ := p^ ixor 0xFFFFFFFF\n\t\t\tod\n\t\telse\n\t\t\tp:= bmgetrowptr(newbm,y)\n\t\t\tto n do\n\t\t\t\tp++^ := p^ ixor 255\n\t\t\tod\n\t\tfi\n\tod\n\treturn newbm\nend\n\nexport func bmmap(bm,map, channels=\"RGB\")=\n\tif channels=\"\" then channels:=\"RGB\" fi\n\n\tcase bm.pixelbits\n\twhen 8 then\n\t\treturn mapall(bm,map)\n\twhen 24 then\n\t\tif channels=\"RGB\" then\n\t\t\treturn mapall(bm,map)\n\t\tfi\n\t\treturn mapchan_24(bm,map,channels,0)\n\twhen 32 then\n\t\tif channels=\"RGBA\" then\n\t\t\treturn mapall(bm,map)\n\t\tfi\n\t\treturn mapchan_24(bm,map,channels,1)\n\tesac\n\n\treturn nil\nend\n\nfunc mapall(bm,map)=\n\tnewbm:=bmdupl(bm)\n\tp:=newbm.pixelptr\n\tto newbm.framebytes do\n\t\tp^:=map[p^]\n\t\t++p\n\tod\n\treturn newbm\nend\n\nfunc mapchan_24(bm,map,channels,alpha=0)=\n\tdored:=\"R\" in channels\n\tdogreen:=\"G\" in channels\n\tdoblue:=\"B\" in channels\n\tdoalpha:=\"A\" in channels\n\n\tnewbm:=bmdupl(bm)\n\n\tfor y:=0 to newbm.dimy-1 do\n\t\tp:=bmgetrowptr(newbm,y)\n\t\tto newbm.dimx do\n\t\t\tif doblue then p^:=map[p^] fi\n\t\t\t++p\n\t\t\tif dogreen then p^:=map[p^] fi\n\t\t\t++p\n\t\t\tif dored then p^:=map[p^] fi\n\t\t\t++p\n\t\t\tif alpha then\n\t\t\t\tif doalpha then p^:=map[p^] fi\n\t\t\t\t++p\n\t\t\tfi\n\t\tod\n\tod\n\n\treturn newbm\nend\n\n!function mapchan_32(bm,map,channels)=\n!return bmunimpl(\"mapchan_32\")\n!end\n\nexport func bmbright(bm,dx,channels=\"RGB\")=\n\treturn bmunimpl(\"bmbright\")\nend\n\nexport func bmcont(bm,x,channels=\"RGB\")=\n\treturn bmunimpl(\"bmcont\")\nend\n\nexport func bmgamma(bm,x,channels=\"RGB\")=\nreturn bmunimpl(\"bmgamma\")\nend\n\nexport func bmtogrey(bm,destbits=24)=\n\tif destbits=0 then destbits:=bm.pixelbits fi\n\tcase bm.pixelbits\n\twhen 8 then\n\t\tcase destbits\n\t\twhen 8 then\n\t\t\treturn pal8togrey8(bm)\n\t\twhen 24 then\n\t\t\tcm:=pal8togrey8(bm)\n\t\t\tnewbm:=grey8torgb24(cm)\n\t\t\tbmfree(cm)\n\t\t\treturn newbm\n\t\tesac\n\twhen 24,32 then\n\t\tcase destbits\n\t\twhen 8 then\n\t\t\treturn rgb24togrey8(bm)\n\t\twhen 24 then\n\t\t\tcm:=rgb24togrey8(bm)\n\t\t\tnewbm:=grey8torgb24(cm)\n\t\t\tbmfree(cm)\n\t\t\treturn newbm\n\t\tesac\n\tesac\nCPL =BM.PIXELBITS, =DESTBITS\n\treturn bmunimpl(\"bmtogrey bad combos\")\n\nend\n\nfunc pal8togrey8(bm)=\n\tw:=bm.dimx\n\th:=bm.dimy\n\n\t(rmap, gmap, bmap):=getlumtables()\n\n\tnewbm:=bmcreate(8,w,h)\n\tpal:=bmgetpalette(bm)\n\n\tfor y:=0 to h-1 do\n\t\tp:=bmgetrowptr(newbm,y)\n\t\tq:=bmgetrowptr(bm,y)\n\n\t\tto w do\n\t\t\tcolour:=pal[q++^]\n\t\t\tr:=colour.[0..7]\n\t\t\tg:=colour.[8..15]\n\t\t\tb:=colour.[16..23]\n\t\t\tp++^:=rmap[r]+gmap[g]+bmap[b]\n\t\tod\n\tod\n\n\treturn newbm\nend\n\nfunc pal8togrey24(bm)=\nreturn bmunimpl(\"pal8togrey24\")\nend\n\nfunc rgb24togrey8(bm)=\n!does 24/32 bits\n\tqincr:=(bm.pixelbits=32|1|0)\n\tw:=bm.dimx\n\th:=bm.dimy\n\n\t(rmap, gmap, bmap):=getlumtables()\n\n\tnewbm:=bmcreate(8,w,h)\n\n\tfor y:=0 to h-1 do\n\t\tp:=bmgetrowptr(newbm,y)\n\t\tq:=bmgetrowptr(bm,y)\n\n\t\tto w do\n\t\t\tb:=q++^; g:=q++^; r:=q++^\n\t\t\tp++^:=rmap[r]+gmap[g]+bmap[b]\n\t\t\tq:=q+qincr\n\t\tod\n\tod\n\n\treturn newbm\nend\n\nfunc rgb24togrey24(bm)=\nreturn bmunimpl(\"rgb24togrey24\")\nend\n\nexport func bmtorgb(bm,destbits=24)=\n\tif destbits=0 then destbits:=24 fi\n\tcase bm.pixelbits\n\twhen destbits then\n\t\treturn bmdupl(bm)\n\n\twhen 8 then\n\t\tcase destbits\n\t\twhen 8 then\n\t\t\tbmunimpl(\"8 to 8 bits rgb\")\n\t\twhen 24 then\n\t\t\tif bm.paltype=greyscale_pal then\n\t\t\t\treturn grey8torgb24(bm)\n\t\t\telse\n\t\t\t\treturn paltorgb24(bm)\n\t\t\tfi\n\t\tesac\n\twhen 24 then\n\t\tif destbits=32 then\n\t\t\treturn bmrgb24torgb32(bm)\n\t\tfi\n\twhen 32 then\n\t\tif destbits=24 then\n\t\t\treturn bmrgb32torgb24(bm)\n\t\tfi\n\tesac\nCPL =BM.PIXELBITS, =DESTBITS\n\treturn bmunimpl(\"bmtorgb bad combos\")\nend\n\nfunc paltorgb24(bm)=\n\tw:=bm.dimx\n\th:=bm.dimy\n\n\tnewbm:=bmcreate(24,w,h)\n\tpal:=bmgetpalette(bm)\n\n\tfor y:=0 to h-1 do\n\t\tp:=bmgetrowptr(newbm,y)\n\t\tq:=bmgetrowptr(bm,y)\n\n\t\tto w do\n\t\t\tcolour:=pal[q++^]\n\t\t\tr:=colour.[0..7]\n\t\t\tg:=colour.[8..15]\n\t\t\tb:=colour.[16..23]\n\n\t\t\tp++^:=b\n\t\t\tp++^:=g\n\t\t\tp++^:=r\n\t\tod\n\tod\n\n\treturn newbm\nend\n\nfunc grey8torgb24(bm)=\n\tw:=bm.dimx\n\th:=bm.dimy\n\n\tnewbm:=bmcreate(24,w,h)\n\n\tfor y:=0 to h-1 do\n\t\tp:=bmgetrowptr(newbm,y)\n\t\tq:=bmgetrowptr(bm,y)\n\n\t\tto w do\n\t\t\tlum:=q++^\n\t\t\tp++^:=lum\n\t\t\tp++^:=lum\n\t\t\tp++^:=lum\n\t\tod\n\tod\n\n\treturn newbm\nend\n\nexport func bmrgb24torgb32(bm)=\n\tw:=bm.dimx\n\th:=bm.dimy\n\tnewbm:=bmcreate(32,w,h)\n\n\tfor y:=0 to h-1 do\n\t\tq:=bmgetrowptr(bm,y)\n\t\tp:=bmgetrowptr(newbm,y)\n\t\tto w do\n\t\t\tp++^:=q++^\n\t\t\tp++^:=q++^\n\t\t\tp++^:=q++^\n\t\t\tp++^:=128\n\t\tod\n\tod\n\treturn newbm\nend\n\nexport func bmrgb32torgb24(bm)=\n\tw:=bm.dimx\n\th:=bm.dimy\n\tnewbm:=bmcreate(24,w,h)\n\n\tfor y:=0 to h-1 do\n\t\tq:=bmgetrowptr(bm,y)\n\t\tp:=bmgetrowptr(newbm,y)\n\t\tto w do\n\t\t\tp++^:=q++^\n\t\t\tp++^:=q++^\n\t\t\tp++^:=q++^\n\t\t\tq++\n\t\tod\n\tod\n\treturn newbm\nend\n\nexport func bmtopal(bm)=\n\tif bm.pixelbits=8 then return bmdupl(bm) fi\n\tqincr:=(bm.pixelbits=32)\n\tw:=bm.dimx\n\th:=bm.dimy\n\n\tnewbm:=bmcreate(8,w,h)\n\n\tpal:=new(array,i32,0..255)\n\n!create special palette mapping for rrrgggbb\n\tfor r:=0 to 7 do\n\t\tfor g:=0 to 7 do\n\t\t\tfor b:=0 to 3 do\n\t\t\t\tindex:=r<<5+g<<2+b\n!\t\t\t\tpal[index]:=r<<5+g<<13+b<<18\n\t\t\t\tpal[index]:=r<<5+g<<13+b<<22\n\t\t\tod\n\t\tod\n\tod\n\tbmputpalette(newbm,pal)\n\tbm.paltype:=colour_pal\n\n\tfor y:=0 to h-1 do\n\t\tp:=bmgetrowptr(newbm,y)\n\t\tq:=bmgetrowptr(bm,y)\n\n!noise:=-16..16\n!noise:=-8..8\n\n\t\tto w do\n\t\t\tb:=q++^; g:=q++^; r:=q++^\n\n!\t\t\tr+:=clamp(random(noise),0,255)\n!\t\t\tg+:=clamp(random(noise),0,255)\n!\t\t\tb+:=clamp(random(noise),0,255)\n!\n\t\t\tp++^:=r>>5<<5 + g>>5<<2 + b>>6\n\t\t\tq:=q+qincr\n\t\tod\n\tod\n\n\treturn newbm\n\nend\n\nexport func bmsplittorgb(bm,greydest=1)=\n# split 24-bit bitmap into three separate 8-bit planes\n# return 3 new bitmaps in the order red, green, blue\n# return () on error\n# dogreyscale=1 for each image to have a greyscale palette. Otherwise\n# the red image will be shades of red, etc\n\n\tif bm.pixelbits<24 then\n\t\treturn ()\n\tfi\n\tchannels:=bm.pixelbytes\n\n\tw:=bm.dimx\n\th:=bm.dimy\n\n\tpal:=new(array,i32,0..255)\n\timages::=()\n\n\tfor offset:=channels-1 downto 0 do\n\n\t\tnewbm:=bmcreate(8,w,h)\n\n\t\tfor y:=0 to h-1 do\n\t\t\tq:=bmgetrowptr(bm,y)+offset\n\t\t\tp:=bmgetrowptr(newbm,y)\n\t\t\tto w do\n\t\t\t\tp++^:=q^\n\t\t\t\tq:=q+channels\n\t\t\tod\n\t\tod\n\n\t\tif not greydest then\n\t\t\tcolour:=0\n\t\t\tincr:=(3-offset|0x00'00'01,0x00'01'00,0x01'00'00|0x01'01'01)\n\t\t\tfor i:=0 to 255 do\n\t\t\t\tpal[i]:=colour\n\t\t\t\tcolour+:=incr\n\t\t\tod\n\t\t\tbmputpalette(newbm,pal)\n\t\t\tnewbm.paltype:=tinted_pal\n\t\tfi\n\n\t\timages append:=newbm\n\tod\n\n!image order is r,g,b, or a,r,g,b\n\tif images.len=4 then\n\t\treturn (images[2],images[3],images[4],images[1])\n\telse\n\t\treturn images\n\tfi\nend\n\nexport func bmsplittoyuv(bm)=\n# split 24-bit bitmap into three separate 8-bit planes\n# return 3 new bitmaps in the order y, u, v\n# return () on error\n\n\tneedfree:=0\n\tcase bm.pixelbits\n\twhen 24 then\n\twhen 32 then\n\t\tbm:=bmtorgb(bm,24)\n\t\tneedfree:=1\n\telse\n\t\treturn nil\n\tesac\n\n!get y plane first with existing routine\n\tgreybm:=bmtogrey(bm,8)\n\n\tw:=bm.dimx\n\th:=bm.dimy\n\n!equations used are:\n! u:=int(round(0.492*(b-y)+128)\n! v:=int(round(0.702*(r-y)+128)\n!b-y and r-y will be in range +/- 255\n\n\tumap:=new(list,-255..255)\n\tvmap:=new(list,-255..255)\n\tfor i:=-255 to 255 do\n\t\tumap[i]:=int(round(0.492*(i)+128))\n\t\tvmap[i]:=int(round(0.702*(i)+128))\n\tod\n\n\tubm:=bmcreate(8,w,h)\n\tvbm:=bmcreate(8,w,h)\n\tfor c:=1 to 2 do\n\t\tif c=1 then\n\t\t\toffset:=0\n\t\t\tmap:=umap\n\t\telse\n\t\t\toffset:=2\n\t\t\tmap:=vmap\n\t\tfi\n\n\t\tfor yy:=0 to h-1 do\n\t\t\tpy:=bmgetrowptr(greybm,yy)\n\t\t\tp:=bmgetrowptr(bm,yy)\t\t\t!point to bgr pixels in original\n\n\t\t\tpu:=bmgetrowptr(ubm,yy)\n\t\t\tpv:=bmgetrowptr(vbm,yy)\n\t\t\tto w do\n\t\t\t\ty:=py++^\n\t\t\t\tr:=(p+2)^\n\t\t\t\tb:=p^\n\t\t\t\tpu++^:=umap[b-y]\n!CPL =B,=Y,=PV,=VMAP.TYPE\n\t\t\t\tpv++^:=vmap[r-y]\n\n\t\t\t\tp:=p+3\n\t\t\tod\n\t\tod\n\tod\n\n!create special greyscale for u/v images, since point of zero colour\n!info has been offset to +128\n\tpal:=new(array,i32,0..256)\n\tcolour:=0\n\tpal[128]:=0\n\tfor i:=1 to 127 do\n\t\tcolour+:=0x020202\n\t\tpal [i+128]:=colour\n\t\tpal [128-i]:=colour\n\tod\n\tpal[256]:=uv_pal\n\tbmputpalette(ubm,pal)\n\tbmputpalette(vbm,pal)\n\n\tif needfree then\n\t\tbmfree(bm)\n\tfi\n\n\treturn (greybm,ubm,vbm)\nend\n\nexport func bmgetplane(bm,plane)=\n# plane is one of \"R\",\"G\",\"B\"\n# extract given plane of a 24-bit bitmaps into a single 8-bit greyscale image\n# Return new image\n\n\tincr:=bm.pixelbytes\n\tif plane.len<>1 or bm.pixelbytes<3 then\n\t\treturn nil\n\tfi\n\n\tcase asc(plane)\n\twhen 'R' then offset:=2\n\twhen 'G' then offset:=1\n\twhen 'B' then offset:=0\n\twhen 'A' then offset:=3\n\telse return nil\n\tesac\n\n\tw:=bm.dimx\n\th:=bm.dimy\n\tnewbm:=bmcreate(8,w,h)\n\n\tfor y:=0 to h-1 do\n\t\tq:=bmgetrowptr(bm,y)+offset\n\t\tp:=bmgetrowptr(newbm,y)\n\t\tto w do\n\t\t\tp++^:=q^\n\t\t\tq:=q+incr\n\t\tod\n\tod\n\n\treturn newbm\nend\n\nexport func bmjoinrgb(redbm,greenbm,bluebm,alphabm=nil)=\n\n\tw:=redbm.dimx\n\th:=redbm.dimy\n\n\tnewbm:=bmcreate((alphabm|32|24),w,h)\n\n\tfor y:=0 to h-1 do\n\t\tp:=bmgetrowptr(newbm,y)\n\n\t\tr:=bmgetrowptr(redbm,y)\n\t\tg:=bmgetrowptr(greenbm,y)\n\t\tb:=bmgetrowptr(bluebm,y)\n\n\t\tif alphabm then\n\t\t\ta:=bmgetrowptr(alphabm,y)\n\t\t\tto w do\n\t\t\t\tp++^:=b++^\n\t\t\t\tp++^:=g++^\n\t\t\t\tp++^:=r++^\n\t\t\t\tp++^:=a++^\n\t\t\tod\n\t\telse\n\t\t\tto w do\n\t\t\t\tp++^:=b++^\n\t\t\t\tp++^:=g++^\n\t\t\t\tp++^:=r++^\n\t\t\tod\n\t\tfi\n\tod\n\n\treturn newbm\nend\n\nexport func bmjoinyuv(ybm,ubm,vbm)=\n# combine y, u, v separations into a single rgb image\n# return new bitmap, or nil\n\n\tif ybm.pixelbits<>8 then\n\t\treturn nil\n\tfi\n\n\tw:=ybm.dimx\n\th:=ybm.dimy\n\n\tv1425map:=new(list,0..255)\n\tv726map:=new(list,0..255)\n\tu395map:=new(list,0..255)\n\tu2032map:=new(list,0..255)\n\n\tfor i:=0 to 255 do\n\t\tv1425map[i]:=int(round(1.425*(i-128)))\n\t\tv726map[i]:=int(round(0.726*(i-128)))\n\t\tu395map[i]:=int(round(0.395*(i-128)))\n\t\tu2032map[i]:=int(round(2.032*(i-128)))\n\tod\n\n\tnewbm:=bmcreate(24,w,h)\n\n\tfor yy:=0 to h-1 do\n\t\tp:=bmgetrowptr(newbm,yy)\n\t\tqy:=bmgetrowptr(ybm,yy)\n\t\tqu:=bmgetrowptr(ubm,yy)\n\t\tqv:=bmgetrowptr(vbm,yy)\n\n!\t\tto w do\n\t\tFOR X:=0 TO W-1 DO\n\t\t\ty:=qy++^\n\t\t\tr:=y+v1425map[qv^]\n\t\t\tg:=y-u395map[qu^]-v726map[qv^]\n\t\t\tb:=y+u2032map[qu^]\n\t\t\t++qu\n\t\t\t++qv\n\t\t\tp++^:=clamp(b,0,255)\n\t\t\tp++^:=clamp(g,0,255)\n\t\t\tp++^:=clamp(r,0,255)\n\t\tod\n\tod\n\treturn newbm\nend\n\nexport func bmblur(bm,n)=\n\tcase bm.pixelbits\n\twhen 8 then\n\t\treturn blur8(bm,n)\n\twhen 24 then\n\t\treturn blur24(bm,n)\n\twhen 32 then\n\t\treturn blur32(bm,n)\n\tesac\n\treturn nil\nend\n\nfunc blur8(bm,n)=\n\tshift:=shifts{n,1}\n\n\tnewbm:=bmdupl(bm)\n\tiblurhoz8(newbm,n)\n\n\tnewbm2:=rotleft90_8(newbm)\n\tiblurhoz8(newbm2,n)\n\n\tnewbm3:=rotright90_8(newbm2)\n\tbmfree(newbm)\n\tbmfree(newbm2)\n\n\tbmduplpalette(newbm3,bm)\n\treturn newbm3\nend\n\nfunc blur24(bm,n)=\n\t(r,g,b):=bmsplittorgb(bm)\n\n\tr2:=bmblur(r,n)\n\tg2:=bmblur(g,n)\n\tb2:=bmblur(b,n)\n\n\tnewbm:=bmjoinrgb(r2,g2,b2)\n\tbmfree(r2)\n\tbmfree(g2)\n\tbmfree(b2)\n\n\treturn newbm\nend\n\nfunc blur32(bm,n)=\nreturn bmunimpl(\"blur32\")\nend\n\nproc iblurhoz8(bm,n)=\n\tshift:=shifts{n,1}\n\n\tw:=bm.dimx\n\th:=bm.dimy\n\n\tfor y:=0 to h-1 do\n\t\tp:=bmgetrowptr(bm,y)\n!\t\tblurhelper(w-n-1, n, shift, p)\n\n\t\tto w-n-1 do\n\t\t\tsum:=0\n\t\t\tq:=p\n\t\t\tto n do\n\t\t\t\tsum+:=q++^\n\t\t\tod\n\t\t\tp++^:=sum>>shift\n\t\tod\n\tod\nend\n\nproc blurhelper(m, n, shift, p)=\n\tvar sum\n\tvar q\n\n\tto m do\n\t\tsum:=0\n\t\tq:=p\n\t\tto n do\n\t\t\tsum+:=q++^\n\t\tod\n\t\tp++^:=sum>>shift\n\tod\nend\n\nfunc blurhoz24(bm,n)=\nreturn bmunimpl(\"blurhoz24\")\nend\n\nfunc blurhoz32(bm,n)=\nreturn bmunimpl(\"blurhoz32\")\nend\n\nexport func bmsharpen(bm,n=0)=\n\tcase bm.pixelbits\n\twhen 8 then\n\t\treturn sharpen8(bm,n)\n\twhen 24 then\n\t\treturn sharpen24(bm,n)\n\twhen 32 then\n\t\treturn sharpen32(bm,n)\n\tesac\n\treturn nil\nend\n\nexport func sharpen8(bm,n)=\n!blur in-place horizontally by averaging each set of n pixels\n!n must be multiple of 2 from 2 to 64\n!return new modified image\n\n\tw:=bm.dimx\n\th:=bm.dimy\n\n\tnewbm:=bmdupl(bm)\n\n\tfor y:=1 to h-2 do\n\t\tp:=bmgetptr(newbm,1,y)\n\n\t\tq:=bmgetptr(bm,1,y-1)\n\t\tr:=bmgetptr(bm,1,y)\n\t\ts:=bmgetptr(bm,1,y+1)\n\n\t\tto w-2 do\n!\t\t\tabcdefghij\n\t\t\ta:=(q-1)^\n\t\t\tb:=q^\n\t\t\tc:=(q+1)^\n\t\t\td:=(r-1)^\n\t\t\te:=r^\n\t\t\tf:=(r+1)^\n\t\t\tg:=(s-1)^\n\t\t\th:=s^\n\t\t\ti:=(s+1)^\n\n! a b c\n! d e f\n! g h i\n!\t\t\tsum:=e*4-b-d-f-h\n!\t\t\tp^:=clamp(p^+sum%4,0,255)\n\n\t\t\tsum:=e*8-a-b-c-d-f-g-h-i\n\t\t\tp^:=clamp(p^+sum%8,0,255)\n\n!\t\t\tsum:=e*4+c+g+i-2*(b+d+f+h)\n!\t\t\tp^:=clamp(p^+sum%4,0,255)\n\n\t\t\t++p\n\t\t\t++q\n\t\t\t++r\n\t\t\t++s\n\t\tod\n\tod\n\n\treturn newbm\n\nend\n\nexport func sharpen24(bm,n)=\n\t(r,g,b):=bmsplittorgb(bm)\n\n\tr2:=bmsharpen(r,n)\n\tg2:=bmsharpen(g,n)\n\tb2:=bmsharpen(b,n)\n\n\tnewbm:=bmjoinrgb(r2,g2,b2)\n\tbmfree(r2)\n\tbmfree(g2)\n\tbmfree(b2)\n\n\treturn newbm\nend\n\nexport func sharpen32(bm,n)=\nreturn bmunimpl(\"bmsharpen32\")\nend\n\nfunc getlumtables=\n\trmap:=makescalemap(0.299)\n\tgmap:=makescalemap(0.587)\n\tbmap:=makescalemap(0.111)\n\treturn (rmap, gmap, bmap)\nend\n"
    data     i64       "!!Virtual keycodes\nexport const vklbutton=1\t\t!note these are physical not logical buttons\nexport const vkrbutton=2\nexport const vkmbutton=4\t\t!middle button is correct\nexport const vkbackspace=8\nexport const vktab=9\nexport const vkclear=12\nexport const vkenter=13\nexport const vkshift=16\nexport const vkctrl=17\nexport const vkalt=18\nexport const vkbreak=19\nexport const vkcapslock=20\n!export const vkrshift=21\nexport const vkrctrl=22\n!export const vkralt=23\nexport const vkinslock=24\nexport const vkescape=27\nexport const vkspace=32\nexport const vkpageup=33\nexport const vkpagedown=34\nexport const vkend=35\nexport const vkhome=36\nexport const vkleft=37\nexport const vkup=38\nexport const vkright=39\nexport const vkdown=40\nexport const vkinsert=45\nexport const vkdelete=46\nexport const vkhelp=47\nexport const vk0='0'\nexport const vka='A'\nexport const vkwindows=91\nexport const vkrightbutton=93\nexport const vknumpad0=96\t\t!96..105 = '0'..'9'\nexport const vkmul=106\nexport const vkadd=107\nexport const vksub=109\nexport const vkdecimal=110\nexport const vkdiv=111\nexport const vkf1=112\nexport const vkf2=113\nexport const vkf3=114\nexport const vkf4=115\nexport const vkf5=116\nexport const vkf6=117\nexport const vkf7=118\nexport const vkf8=119\nexport const vkf9=120\nexport const vkf10=121\nexport const vkf11=122\nexport const vkf12=123\n!export const vklsq=128\n!export const vkrsq=129\n!export const vksemi=130\n!export const vkquote=131\n!export const vkstroke=132\n!export const vkdot=133\n!export const vkcomma=134\n!export const vkbackslash=135\n!export const vkquote2=136\n!export const vkequals=137\n!export const vkminus=138\n!export const vkhash=139\nexport const vklshift=160\nexport const vkrshift=161\nexport const vklcontrol=162\nexport const vkrcontrol=163\nexport const vklalt=164\nexport const vkralt=165\n\n!oem codes\nexport const vkminus=189\nexport const vkequals=187\nexport const vklsq=219\nexport const vkrsq=221\nexport const vksemi=186\nexport const vkquote=192\nexport const vkhash=222\nexport const vkcomma=188\nexport const vkperiod=190\nexport const vkslash=191\nexport const vkbackslash=220\nexport const vkbackquote=223\n\nexport const con_black=0\nexport const con_dkblue=1\nexport const con_dkred=2\nexport const con_dkmagenta=3\nexport const con_dkgreen=4\nexport const con_dkcyan=5\nexport const con_dkyellow=6\nexport const con_dkgrey=7\nexport const con_grey=8\nexport const con_blue=9\nexport const con_red=10\nexport const con_magenta=11\nexport const con_green=12\nexport const con_cyan=13\nexport const con_yellow=14\nexport const con_white=15\n\n\nexport record winrec =\n\tvar posx,posy\n\tvar cols,rows\n\tvar fgnd,bgnd\t\t\t!default text/background colour\n\n\tvar columns\t\t\t!used when divided into columns\n\tvar itemcols\t\t\t!width of each column\n\tvar pagesize\t\t\t!columns*rows\n\n\tvar name\n\n\tvar hdata\t\t\t!pointer to data record, or is nil\nend\n\nexport var wconscreen\nexport var screencols,screenrows\n\nexport var chardata\t\t\t!string these two represent row of the console\nexport var attrdata\t\t\t!string\n\nexport var defscreenfgnd=con_black\nexport var defscreenbgnd=con_grey\nexport var rlkey=0\t\t!set by readline, when special key has been input\nexport var rlbuffer\t\t\t!contents of readline buffer when special key pressed\n\nvar cmdindex,ncmds\nvar cmdhistory\n\nexport const capsmask  = 0x8\t\t!shift states as they are in .keyshift\nexport const altmask   = 0x4\nexport const ctrlmask  = 0x2\nexport const shiftmask = 0x1\n\nexport const capsbit=3\nexport const altbit=2\nexport const ctrlbit=1\nexport const shiftbit=0\n\nvar keypending=0\nvar lastkey\nvar pendkey\nexport var hconsole, hconsolein\nvar colourpalette\n\n!export var wscreencols,wscreenrows\n!export var currbgnd=-1,currfgnd=-1\nexport var currbgnd=con_grey, currfgnd=con_black\n\n!export var screencolour=con_dkred..con_grey\n\n!export var colourmap\nexport VAR SUPPRESS=0\n\nVAR ALLCHARS\n\nproc START=\n!if iswindows() then\n!\tCPL \"WINCON INIT\"\n\t\tinit()\n!fi\n\tend\n\nproc main=\n\tinit()\n\tsettitle(\"New Title\")\n\n!keyscreentest()\n\n!W:=MAKEWIN((1,20),(20,20))\n!CLEARWIN(W)\n\n!SHOWTEXT(\"^^^^^^^^^^^^^^^^^\")\n\na:=rkey(10,20,30)\n!\tsetpos(12, 10)\n!\tprint \"***********hello\"\n!\twaitkey()\nend\n\nproc keyscreentest=\n\t(cols,rows):=(screencols, screenrows)\n\tCPL =COLS,=ROWS\n\n\trow:=rows%2\n\tcol:=cols%2\n\tch:=\"X\"\n\n\tsetcolour(6,1)\n\n\tdo\n\t\tsetpos(col,row)\n\t\tcp ch\n\t\tsetpos(col,row)\n\t\tk:=getkey().keycode\n\t\tcase k\n\t\twhen 27 then\n\t\t\texit\n\t\twhen vkleft then col:=max(1,col-1)\n\t\twhen vkright then col:=min(cols,col+1)\n\t\twhen vkup then row:=max(1,row-1)\n\t\twhen vkdown then row:=min(rows,row+1)\n\t\tesac\n\tod\n\n!waitkey()\n\nend\n\nexport func makerspoint(x,y)=\n!combine x,y into 32-bit value (rspoint)\n\treturn y<<16 ior x\nend\n\nexport proc setpos(col,row)=\n\n!!ROW+:=10\n!fprint \"\\s[{#};{#}H\",row,col\n\n\tsetconsolecursorposition(hconsole,makerspoint(col-1,row-1))\nend\n\nexport func getpos=\n\tinfo:=new(ws_console)\n\tgetconsolescreenbufferinfo(hconsole,&info)\n\treturn (info.pos.x+1,info.pos.y+1)\nend\n\nexport proc init(cols=100)=\n!static var setdimdone=0\n\n!CPL \"CONSOLE INIT-----------\"\n\n\n!\tconsolesw.init(cols)\n\tcmdhistory::=()\t!\"one\",\"two\",\"three\",\"four\")\n\tncmds:=cmdhistory.upb\n\tcmdindex:=0\n\n!screencols:=consolesw.wscreencols\n!screenrows:=consolesw.wscreenrows\n!\n\n\thconsole:=getstdhandle(-11)\n\thconsolein:=getstdhandle(-10)\n\tlastkey:=new(ws_keyevent)\n\tlastkey.repeatcount:=0\n\tpendkey:=new(ws_keyevent)\n\n\tsetdims(cols,60)\n!\tsetdims(50,20)\n\n\tgetdims()\n\n!CPL =SCREENCOLS\n\n\twconscreen:=makewin((1,1),(screencols,screenrows),defscreencolour)\n\n\tcolourpalette:=new(ws_palette16)\n\n\tsetstdpalette()\nend\n\nexport func setcursor(?visible)=\n\tcursor:=new(ws_cursor)\n\tgetconsolecursorinfo(hconsole,&cursor)\n\n\tif visible.defined then\n\t\tcursor.visible:=visible\n\t\tsetconsolecursorinfo(hconsole,&cursor)\n\tfi\n\treturn cursor.visible\nend\n\nexport proc setcolour(fgnd, ?bgnd)=\n!call with as (fgnd,bgnd) or as (fgnd..bgnd)\n\n\tif bgnd.isvoid then bgnd:=currbgnd fi\n\n\tif fgnd=currfgnd and bgnd=currbgnd then\n!\t\treturn\n\tfi\n\n\tcurrfgnd:=fgnd\n\tcurrbgnd:=bgnd\n\n\tsetconsoletextattribute(hconsole,(bgnd*16+fgnd))\nend\n\nexport proc settitle(caption)=\n\tsetconsoletitle(caption)\nend\n\nexport func getkeychar=\n!wait for any key, return single char code; as returned by C's getch()\n\treturn waitkey()\nend\n\nexport func getkey2=\n!wait for any key, return keyrec\n!includes shift key presses as discrete keys\n!use getkey() to ignore these\n\n\treturn getchx()\n\n\tk:=getchx()\t\t\t!get keyrec, encoded as int\n\n\tkey:=new(rkey)\t\t\t!convert to proper keyrec\n\tkey.charcode:=k iand 65535\n\tkey.shift:=k>>24\n\tkey.keycode:=k.[23..16]\n!CPL \"GK2:\",KEY\n\n\treturn key\nend\n\nexport func getkey=\n!calls igetkey but doesn't return shift keys as discrete key presses\n\tdo\n\t\tk:=getkey2()\n\t\tcase k.keycode\n\t\twhen vkshift,vkctrl,vkalt,vkcapslock then\n\t\telse\n\t\t\texit\n\t\tesac\n\tod\n\treturn k\nend\n\nexport func keyready=\n\treturn testkey()\nend\n\nexport proc showtext(s,?x,?y)=\n\n\tif x.defined then\n\t\tsetpos(x,y)\n\tfi\n\n\tcount:=0\n\tif s then\n\t\tif not suppress then\n\t\t\twriteconsole(hconsole,s,s.len,&count,nil)\n\t\tfi\n\tfi\nend\n\nproc setwindowsize(cols,rows)=\n\tr:=new(ws_srect)\n\tr.leftx:=0\n\tr.rightx:=cols-1\n\tr.top:=0\n\tr.bottom:=rows-1\n\tif not setconsolewindowinfo(hconsole,1,&r) then\n!\tCPL \"WINDOW ERROR 1\"\n!\tabort(\"Window error 1\")\n\tfi\nend\n\nexport proc setdims(cols,rows)=\n!set new size for console, by reinitialising\n\n\tmaxcol:=cols\n\tmaxrow:=rows\n\n\tinfo:=new(ws_console)\n\toldscreenattributes:=info.attributes\n\toldscreensize:=info.size\n\n\toldcols:=info.window.rightx-info.window.leftx+1\n\toldrows:=info.window.bottom-info.window.top+1\n\n\tIF OLDSCREENSIZE.X>COLS OR OLDSCREENSIZE.Y>ROWS THEN\t!need to reduce window size first\n\t\tsetwindowsize(oldscreensize.x min cols, oldscreensize.y min rows)\n\tfi\n\n!Set the new size of the entire (virtual) console window\n\tif setconsolescreenbuffersize(hconsole,rows<<16+cols)=0 then\n!\tabort(\"Buffer size error\")\n\tfi\n\n!now set the size of the displayed portion of it; in this case exactly the same\n!size as the buffer, with no scrollbars\n\tsetwindowsize(cols,rows)\n\n\twscreencols:=cols\n\twscreenrows:=rows\n\n!hide blinking cursor\n\tcursor:=new(ws_cursor)\n\tcursor.size:=10\n\tcursor.visible:=1\nend\n\nexport proc setpalette(index,colour)=\n!index is 0..15; colour is an rgb value bbggrr\n!updates local palette array\n!to update actual console, use writepalette\n\tcolourpalette[index]:=colour\nend\n\nexport proc writepalette=\n\tr:=new(ws_consoleex)\n\tr.recsize:=ws_consoleex.bytes\n\tX:=getconsolescreenbufferinfoex(hconsole,&r)\n\n\tr.palette:=colourpalette\n\n\tR.WINDOW.RIGHTX:=R.WINDOW.RIGHTX+1\t\t!workaround off-by-one bug\n\tR.WINDOW.BOTTOM:=R.WINDOW.BOTTOM+1\n\n\tX:=setconsolescreenbufferinfoex(hconsole,&r)\n\n!export proc READPALETTE=\n!r:=new(rconsoleex)\n!r.recsize:=rconsoleex.bytes\n!x:=getconsolescreenbufferinfoex(hconsole,&r)\n!\n!CPL \"GCSBI X=\",X\n!FOR I:=0 TO 15 DO\n! CPL I,\":\",R.PALETTE[I]:\"H\"\n!OD\n!\nend\n\nproc setstdpalette=\n!export const con_black=0\n!export const con_dkblue=1\n!export const con_dkred=2\n!export const con_dkmagenta=3\n!export const con_dkgreen=4\n!export const con_dkcyan=5\n!export const con_dkyellow=6\n!export const con_grey=7\n!export const con_dkgrey=8\n!export const con_blue=9\n!export const con_red=10\n!export const con_magenta=11\n!export const con_green=12\n!export const con_cyan=13\n!export const con_yellow=14\n!export const con_white=15\n\n!R G B\n\tcols:=(\n\t(0,\t\t0,\t\t0),\t\t\t!black\n\t(0,\t\t0,\t\t128),\t\t!dk blue\n\t(128,\t0,\t\t0),\t\t\t!dk red\n\t(128,\t0,\t\t128),\t\t!dk magenta\n\t(0,\t\t128,\t0),\t\t\t!dk green\n\t(0,\t\t128,\t128),\t\t!dk cyan\n\t(128,\t128,\t0),\t\t\t!dk yellow\n\t(128,\t128,\t128),\t\t!dk grey\n\t(192,\t192,\t192),\t\t!grey\n\t(0,\t\t0,\t\t192),\t\t!blue\n\t(192,\t0,\t\t0),\t\t\t!red\n\t(192,\t0,\t\t192),\t\t!magenta\n\t(0,\t\t192,\t0),\t\t\t!green\n\t(0,\t\t192,\t192),\t\t!cyan\n\t(192,\t192,\t0),\t\t\t!yellow\n\t(255,\t255,\t255))\t\t!white\n\n\tfor i,c in cols do\n\t\tsetpalette(i-1,c[3]<<16+c[2]<<8+c[1])\n\tod\n!CPL \"WRITEPAL\"; WAITKEY()\n\twritepalette()\nend\n\nproc getdims=\n\tinfo:=new(ws_console)\n\tgetconsolescreenbufferinfo(hconsole,&info)\n\n\tscreencols:=info.window.rightx-info.window.leftx+1\n\tscreenrows:=info.window.bottom-info.window.top+1\nend\n\nexport func getchx=\n\tconst rightaltmask\t= 1\t\t\t\t!masks used by .controlkeystate\n\tconst leftaltmask\t= 2\n\tconst leftctrlmask\t= 8\n\tconst rightctrlmask\t= 4\n\tconst shiftmask\t\t= 16\n\tconst capsmask\t\t= 128\n\tconst scrollmask\t= 64\n\n\tconst leftctrlbit\t= 3\t\t!for c.l.p\n\tconst rightctrlbit\t= 2\n\n\tif keypending then\n\t\tlastkey:=pendkey\n\t\tkeypending:=0\n\telse\n\t\tif lastkey.repeatcount=0 then\n\t\t\trepeat\n\t\t\t\tcount:=0\n\t\t\t\treadconsoleinput(hconsolein,&lastkey,1,&count)\n\t\t\tuntil lastkey.eventtype=1 and lastkey.keydown=1\n\t\tfi\n\tfi\n\n\taltdown\t\t:= (lastkey.controlkeystate iand (leftaltmask ior rightaltmask)|1|0)\n\tctrldown\t:= (lastkey.controlkeystate iand (leftctrlmask ior rightctrlmask)|1|0)\n\tshiftdown\t:= (lastkey.controlkeystate iand shiftmask|1|0)\n\tcapslock\t:= (lastkey.controlkeystate iand capsmask|1|0)\n\n\tlastkey.repeatcount:=lastkey.repeatcount-1\n\n\tcharcode:=lastkey.asciichar\n\tkeycode:=lastkey.virtualkeycode iand 255\n\n!for keycodes in range 186 to 223, which are all stand-alone punctuation keys, I might\n!wish to set charcode to the appropriate printed char code (currently charcode will be\n!zero, and keyboard handlers need to detect keycodes such as vkequals)\n!\n\tif altdown and ctrldown and charcode=166 then\n\t\taltdown:=ctrldown:=0;\n\telse\n\t\tif altdown or ctrldown then\n\t\t\tcharcode:=0;\n\t\t\tif keycode>='A' and keycode<= 'Z' then\n\t\t\t\tcharcode:=keycode-'@'\n\t\t\tfi\n\t\tfi\n\tfi\n\n\tkeyshift:=capslock<<3 ior altdown<<2 ior ctrldown<<1 ior shiftdown\n\n\tkeyshift.[4]:=lastkey.controlkeystate.[leftctrlbit]\t\t!for c.l.p\n\tkeyshift.[5]:=lastkey.controlkeystate.[rightctrlbit]\n\n!need to be more ruthless with how keycoded and charcodes are combined.\n!More combinations need to have only charcode or keycode set, and the other zero\n\n\tswitch charcode\n\twhen 'A'..'Z','a'..'z','0'..'9' then\n\twhen 8,9,13,27,' ','`' then\n\twhen 0 then\t\t\t\t!already key-only event\n\telse\n\t\tkeycode:=0\n\tend switch\n\n\treturn rkey(charcode,keycode,keyshift)\n\nend\n\nexport proc flushkeyboard=\n\tflushconsoleinputbuffer(hconsolein)\nend\n\nexport proc w_writeconsolerow(text, attributes, length, row)=\n\tbuffersize:=1<<16+length\n\tcoord:=0\n\n\tbox:=ws_srect(0,row-1,length-1,row-1)\n\n\tbuffer:=new(array,ws_charinfo,length)\n\n\tfor i:=1 to length do\n\t\tx:=new(ws_charinfo)\n\t\tx.asciichar  := text.[i]\n\t\tx.attributes := attributes.[i]\n!\tx.attributes := attributes.[1]\n\t\tbuffer[i]:=x\n\tod\n!CPL \"HELLO\",text; WAITKEY()\n\n\twriteconsoleoutputa(hconsole, &buffer,buffersize,coord,&box)\nend\n\nexport func setclipboard(s)=\n!copy text to the Windows clipboard\n!return status 0 if no clipboard o/p was possible\n\tconst ghnd=2 + 0x40\n\n\tif openclipboard(nil)=0 then\n\t\treturn 0\n\tfi\n\n\temptyclipboard()\n\n\tif s<>\"\" then\n\t\th:=globalalloc(ghnd,s.len+1)\n\t\tp:=globallock(h)\n\n\t\tmemcpy(p,&s,s.len+1)\n\tglobalunlock(h)\n\t\tsetclipboarddata(cf_text,h)\n\tfi\n\n\tcloseclipboard()\n\n\treturn 1\nend\n\nexport func getclipboard=\n!copy text from Windows clipboard\n!return clipboard text, or \"\" when error or not text data available\n\n\tif openclipboard(nil)=0 then\n\t\treturn \"\"\n\tfi\n\n\thtext:=getclipboarddata(cf_text)\n\n\tif not htext then\n\t\treturn \"\"\n\tfi\n\n\tsize:=globalsize(htext)\t\t!should include zero terminator\n\n\tp:=globallock(htext)\n\ts:=makestr(p,size-1)\t\t!assignment should copy the string data\n\n\tglobalunlock(htext)\n\n\tcloseclipboard()\n\treturn s\nend\n\nexport func makewin(pos, dims, fgnd=con_black,bgnd=con_grey,name=\"Anon\")=\n!export func makewin(pos, dims, ?colour)=\n\n\tw:=new(winrec)\n\tw.posx:=pos[1]\n\tw.posy:=pos[2]\n\tw.cols:=dims[1]\n\tw.rows:=dims[2]\n\tw.columns:=1\n\tif dims.len>=3 then\n\t\tw.columns:=dims[3]\n\tfi\n\n!CPL =POS,=DIMS,=W.COLUMNS\n\n\tw.itemcols:=w.cols%w.columns\n\tw.pagesize:=w.rows*w.columns\n\tw.hdata:=nil\n\n\tw.fgnd:=fgnd\n\tw.bgnd:=bgnd\n\tw.name:=name\n\n\treturn w\nend\n\nexport proc clearwin(w)=\n!clear region used by listbox\n!can clear multi-columns at once\n\tspaces:=\" \"*w.cols\n\n\tsetcolour(w.fgnd,w.bgnd)\n\tfor i:=1 to w.rows do\n\t\tshowtext(spaces,w.posx,w.posy+i-1)\n\tod\n\tsetpos(w.posx,w.posy)\nend\n\nexport proc wsetpos(w,col,row)=\n\tsetpos(w.posx+col-1,w.posy+row-1)\nend\n\nexport proc wshowtext(w,s,?col,?row)=\n\tif col.defined then\n\t\tshowtext(s,w.posx+col-1,w.posy+row-1)\n\telse\n\t\tshowtext(s)\n\tfi\nend\n\nexport proc wshowtext_b(w,s, colrow, fgnd,bgnd)=\n!version of wshowtext that dumps into char/attr buffer.\n!w is used for absolute column number\n\n\tif colrow.islist then\n\t\tcol:=colrow[1]\n\telse\n\t\tcol:=colrow\n\tfi\n\n\n\tlength:=s.len\n\toffset:=w.posx-1\t!hoz offset\n\n\tchardata.[(col+offset)..(col-1+length+offset)]:=s\n\n!\tattr:=consolesw.colourmap[bgnd]<<4+consolesw.colourmap[fgnd]\n\tattr:=bgnd<<4+fgnd\n\n\tattrdata.[(col+offset)..(col-1+length+offset)]:=chr(attr)*length\nend\n\nexport proc updateconsolerow(w, row)=\n!write out latest contents to chardata/attrdata to console\n!this represents an entire composite wlineno+wvgap+wedit row, for given row within wedit\n!etc\n\tw_writeconsolerow(chardata,attrdata,screencols,w.posy+row-1)\nend\n\nexport func getkeyname(key)=\n\tcase key.keycode\n\twhen vkleft then name:=\"left\"\n\twhen vkright then name:=\"right\"\n\twhen vkup then name:=\"up\"\n\twhen vkdown then name:=\"down\"\n\twhen vkpageup then name:=\"pageup\"\n\twhen vkpagedown then name:=\"pagedown\"\n\twhen vkhome then name:=\"home\"\n\twhen vkend then name:=\"end\"\n\twhen vkinsert then name:=\"insert\"\n\twhen vkdelete then name:=\"delete\"\n\twhen vktab then name:=\"tab\"\n\twhen vkescape then name:=\"escape\"\n\twhen vkbackspace then name:=\"backspace\"\n\twhen vkenter then name:=\"enter\"\n\twhen vkf1..vkf12 then name:=\"f\"+tostr(key.keycode-vkf1+1)\n\twhen vkspace then name:=\"space\"\n\telse\n\t\tif key.charcode in [1..26] then\t!ctrl code\n\t\t\tname:=chr(key.charcode+'a'-1)\n\t\telsif key.charcode in ['!','\"','\xA3','$','%','^','&','*','(',')','-','_','+','=','[',']',\n\t\t'{','}',':',';','\\'','@','~','#','<','>',',','.','/','\xAC','\xA6','|','\\\\','?'] then\n\t\t\tname:=chr(key.charcode)\n\t\t\tkey.shift iand:=inot shiftmask\t\t!ignore any shift press needed to get char\n\n\t\telsif key.keycode in ['A'..'Z','0'..'9'] then\n\t\t\tif (key.shift iand (ctrlmask ior altmask))=0 then\n\t\t\t\tname:=chr(key.charcode)\n\t\t\t\tkey.shift iand:=inot shiftmask\n\t\t\telse\n\t\t\t\tname:=convlc(chr(key.keycode))\n\t\t\tfi\n\t\telsif key.keycode in (186..223) then\n\t\t\tcase key.keycode\n\t\t\twhen vkminus then name:=\"-\"\n\t\t\twhen vkequals then name:=\"=\"\n\t\t\twhen vklsq then name:=\"[\"\n\t\t\twhen vkrsq then name:=\"]\"\n\t\t\twhen vksemi then name:=\";\"\n\t\t\twhen vkquote then name:=\"'\"\n\t\t\twhen vkhash then name:=\"#\"\n\t\t\twhen vkcomma then name:=\",\"\n\t\t\twhen vkperiod then name:=\".\"\n\t\t\twhen vkslash then name:=\"/\"\n\t\t\twhen vkbackslash then name:=\"\\\\\"\n\t\t\twhen vkbackquote then name:=\"`\"\n\t\t\telse\n\t\t\t\treturn \"?\"\n\t\t\tesac\n\t\telse\n\t\t\treturn \"?\"\n\t\tfi\n\tesac\n\n\tprefix::=\"*\"\n\tif key.shift iand shiftmask then prefix+:=\"s\" fi\n\tif key.shift iand ctrlmask then prefix+:=\"c\" fi\n\tif key.shift iand altmask then prefix+:=\"a\" fi\n\treturn prefix+name\n\nend\n\nexport func keynametokey(name)=\n!given a key name in the format \"*...\", reconstruct an rkey record, and return that\n\tcharcode:=shift:=keycode:=0\n\n\tname:=rightstr(name,-1)\t\t!get rid of \"*\"\n\n\tif name.len=1 then\t\t!simple printable key, no shifts\n\t\tcharcode:=asc(name)\n\t\tgoto simplekey\n\n\telse\t\t\t\t!any letters s,c,a on left indicate a modifier\n\t\twhile name.len>1 do\n\t\t\tcase leftstr(name)\n\t\t\twhen \"s\" then\n\t\t\t\tshift ior:=shiftmask\n\t\t\t\tname:=rightstr(name,-1)\n\t\t\twhen \"c\" then\n\t\t\t\tshift ior:=ctrlmask\n\t\t\t\tname:=rightstr(name,-1)\n\t\t\twhen \"a\" then\n\t\t\t\tshift ior:=altmask\n\t\t\t\tname:=rightstr(name,-1)\n\t\t\telse\n\t\t\t\texit\n\t\t\tesac\n\t\tod\n\n\t\tcase name\n\t\twhen \"left\" then keycode:=vkleft\n\t\twhen \"right\" then keycode:=vkright\n\t\twhen \"up\" then keycode:=vkup\n\t\twhen \"down\" then keycode:=vkdown\n\t\twhen \"pageup\" then keycode:=vkpageup\n\t\twhen \"pagedown\" then keycode:=vkpagedown\n\t\twhen \"home\" then keycode:=vkhome\n\t\twhen \"end\" then keycode:=vkend\n\t\twhen \"insert\" then keycode:=vkinsert\n\t\twhen \"delete\" then keycode:=vkdelete\n\t\twhen \"tab\" then keycode:=charcode:=vktab\n\t\twhen \"escape\" then keycode:=vkescape\n\t\twhen \"backspace\" then keycode:=charcode:=vkbackspace\n\t\twhen \"enter\" then keycode:=charcode:=vkenter\n\t\twhen \"space\" then keycode:=charcode:=vkspace\n\t\telse\n\t\t\tif name.len>=2 and leftstr(name)=\"f\" then\t!function key\n\t\t\t\tkeycode:=vkf1+strtoval(rightstr(name,-1))-1\n\t\t\telsif name.len=1 then\t\t\t\t!ordinary key, but with shifts\n\tsimplekey:\n\t\t\t\tc:=asc(name)\n\t\t\t\tcase c\n\t\t\t\twhen ['A'..'Z'] then\n\t\t\t\t\tkeycode:=c\n\t\t\t\twhen ['a'..'z'] then\n\t\t\t\t\tkeycode:=c-' '\n\t\t\t\twhen ['0'..'9'] then\n\t\t\t\t\tkeycode:=c\n\t\t\t\twhen '-','_' then keycode:=vkminus\n\t\t\t\twhen '=','+' then keycode:=vkequals\n\t\t\t\twhen '[','{' then keycode:=vklsq\n\t\t\t\twhen ']','}' then keycode:=vkrsq\n\t\t\t\twhen ';',':' then keycode:=vksemi\n\t\t\t\twhen '\\'','@' then keycode:=vkquote\n\t\t\t\twhen ',','<' then keycode:=vkcomma\n\t\t\t\twhen '.','>' then keycode:=vkperiod\n\t\t\t\twhen '/','?' then keycode:=vkslash\n\t\t\t\twhen '\\\\','|' then keycode:=vkbackslash\n\t\t\t\twhen '`','\xAC' then keycode:=vkbackquote\n\t\t\t\twhen '#','~' then keycode:=vkhash\n\t\t\t\twhen '!' then keycode:='1'\n\t\t\t\twhen '\"' then keycode:='2'\n\t\t\t\twhen '\xA3' then keycode:='3'\n\t\t\t\twhen '$' then keycode:='4'\n\t\t\t\twhen '%' then keycode:='5'\n\t\t\t\twhen '^' then keycode:='6'\n\t\t\t\twhen '&' then keycode:='7'\n\t\t\t\twhen '*' then keycode:='8'\n\t\t\t\twhen '(' then keycode:='9'\n\t\t\t\twhen ')' then keycode:='0'\n\t\t\t\telse\n\t\t\t\t\tpcerror(\"keynametokey\")\n\t\t\t\tend\n\t\t\tfi\n\t\tesac\n\tfi\n\n\tif shift iand (altmask ior ctrlmask) then\n\t\tcharcode:=0\n\t\tif keycode in 'A'..'Z' then\n\t\t\tcharcode:=keycode-'@'\n\t\tfi\n\tfi\n\n\tkey:=new(rkey)\t\t\t!convert to proper keyrec\n\tkey.charcode:=charcode\n\tkey.shift:=shift\n\tkey.keycode:=keycode\n\treturn key\nend\n\nexport proc clearscreen(?bgnd,?fgnd)=\n\nif bgnd.isvoid then bgnd:=defscreenbgnd fi\nif fgnd.isvoid then fgnd:=defscreenfgnd fi\nsetcolour(fgnd,bgnd)\n\nfor i:=1 to screenrows do\n\tsetpos(1,i)\n\tshowtext(\" \"*screencols)\n!\tshowtext(\"*\"*screencols)\nod\nsetpos(1,1)\nend\n\nexport func readline(?cmdline,donewline=1)=\n!this func doesn't handle tabs properly\n!would need to maintain 2 buffers, one with tabs translated to spaces\n!or convert tabs to another char which is translated back to tabs on exit\n!return with input buffer set to the line, but also returns the complete line\n!newline=1 to end with a newline, 0 to leave it\n\n!readln\n!return\n\n\tbuffer:=\"\"\n\tnchars:=0\n!congetpos()\n\n!NOTE: getpos is dodgy using TERMCON; MAY NEED CALLER TO SPECIFY START POINT\n\t(startx,starty):=(getpos())\n\n\tpos:=0\t\t!with nchars shown, pos can be 0 to nchars\n\n\treenter:\n\tif cmdline.defined and cmdline<>\"\" then\n\t\tbuffer:=cmdline\n\treenter2:\n\t\tpos:=nchars:=buffer.len\n\tfi\n\n\tdo\n! print \"_\"\n\t\trlkey:=0\t\t\t!normal input starts with \"*\" will expect rlkey to be a keyrec\n\t\tsetpos(startx,starty)\n\t\tprint buffer\n\t\tsetpos(startx+pos,starty)\n\n\t\tkey:=getkey()\n\t\tkeycode:=key.keycode\n\t\tkeyshift:=key.shift\n\n\t\tcase keycode\n\t\twhen vkpageup,vkpagedown,vkup,vkdown,vkinsert,vkf1..vkf12 then\n\n\tdospecial:\n\t\trlbuffer:=buffer\n\t\t\toldbufferlen:=buffer.len\t\t!to help erase old buffer\n\t\t\tbuffer:=getkeyname(key)\n\t\t\trlkey:=key\t\t\t\t!allow caller to use key code rather than name\n\t\t\texit\n\n\t\twhen vkleft then\n\t\t\tif buffer=\"\" then goto dospecial fi\n\t\t\tif (keyshift iand 7) then goto dospecial fi\n\n\t\t\tif pos>0 then\n\t\t\t\t--pos\n\t\t\tfi\n\n\t\twhen vkhome then\n\t\t\tif buffer=\"\" then goto dospecial fi\n\t\t\tif (keyshift iand 7) then goto dospecial fi\n\t\t\tpos:=0\n\n\t\twhen vkend then\n\t\t\tif buffer=\"\" then goto dospecial fi\n\t\t\tif (keyshift iand 7) then goto dospecial fi\n\t\t\tpos:=nchars\n\n\t\twhen vkright then\n\t\t\tif buffer=\"\" then goto dospecial fi\n\t\t\tif (keyshift iand 7) then goto dospecial fi\n\t\t\tif pos<nchars then\n\t\t\t\t++pos\n\t\t\tfi\n\n\t\twhen vkenter then\n\n!  println\n\t\t\texit\n\n\t\twhen vkbackspace then\n\n\t\t\tif (keyshift iand 7) then goto dospecial fi\n\t\t\tif nchars then\n\t\t\t\tsetpos(startx,starty)\n\t\t\t\tprint \" \"*buffer.len\n\n\t\t\t\tcase pos\n\t\t\t\twhen 0 then\t\t\t!not allowed\n\t\t\t\twhen nchars then\t\t!at end\n\t\t\t\t\tbuffer:=leftstr(buffer,-1)\n\t\t\t\t\t--nchars\n\t\t\t\t\t--pos\n\t\t\t\telse\t\t\t\t!in middle\n\t\t\t\t\tbuffer:=leftstr(buffer,pos-1)+rightstr(buffer,-(pos))\n\t\t\t\t\t--nchars\n\t\t\t\t\t--pos\n\t\t\t\tesac\n\n\t\t\tfi\n\n\t\twhen vkdelete then\n\t\t\tif (keyshift iand 7) then goto dospecial fi\n\t\t\tif nchars and nchars=pos then\n\t\t\t\tgoto delline\n\t\t\tfi\n\t\t\tif nchars=0 then\n\t\t\t\tgoto dospecial\n\t\t\tfi\n\t\t\tif nchars then\n!CPL \"\\NNCHARS\",=NCHARS,++CCC,=POS,\"\\N\"\n\t\t\t\tsetpos(startx,starty)\n\t\t\t\tprint \" \"*buffer.len\n\n\t\t\t\tcase pos\n\t\t\t\twhen nchars then\t\t!not allowed\n!\t\t\twhen 0 then\t\t\t!at start\n!\t\t\t\tbuffer:=leftstr(buffer,-1)\n!\t\t\t\t--nchars\n\t\t\t\telse\t\t\t\t!in middle\n\t\t\t\t\tbuffer:=leftstr(buffer,pos)+rightstr(buffer,-(pos+1))\n\t\t\t\t\t--nchars\n!    --pos\n\t\t\t\tesac\n\n\t\t\tfi\n\n\t\twhen vkescape then\n\t\t\tif nchars=0 then\n\t\t\t\tgoto dospecial\n!   oldbufferlen:=buffer.len\n!   buffer:=\"*esc\"\n!   exit\n\t\t\tfi\n\tdelline:\n\t\t\tsetpos(startx,starty)\n\t\t\tprint \" \"*buffer.len\n\n\t\t\tbuffer:=\"\"\n\t\t\tnchars:=pos:=0\n\n\t\twhen vktab then\n\t\t\tgoto normalkey\n\n\t\telse\n\tnormalkey:\n\t\t\tif (key.charcode>=' ' or key.charcode=9) then\n\t\t\t\tif pos=0 then\n\t\t\t\t\tbuffer:=chr(key.charcode)+buffer\n\t\t\t\telsif pos=nchars then\n\t\t\t\t\tbuffer:=buffer+chr(key.charcode)\n\t\t\t\telse\n\t\t\t\t\tbuffer:=leftstr(buffer,pos)+chr(key.charcode)+rightstr(buffer,-(pos))\n\t\t\t\tfi\n\t\t\t\t++nchars\n\t\t\t\t++pos\n\t\t\telse\n\t\t\t\tGOTO DOSPECIAL\n\t\t\t\tprint \"<\",keycode,key.charcode,\">\"\n\t\t\tfi\n\n\t\tesac\n\tod\n\n\tcase buffer\n\twhen \"*cup\",\"*cdown\" then\n\t\tif ncmds then\n\t\t\tsetpos(startx,starty)\n\t\t\tprint \" \"*oldbufferlen\n\n\t\t\tif cmdindex=0 then\t\t!get started on last\n\t\t\t\tcmdline:=cmdhistory[ncmds]\n\t\t\t\tcmdindex:=ncmds\n\t\t\t\tgoto reenter\n\t\t\tfi\n\n\t\t\tif buffer=\"*cup\" and cmdindex>1 then\n\t\t\t\t--cmdindex\n\t\t\telsif buffer=\"*cdown\" and cmdindex<ncmds then\n\t\t\t\t++cmdindex\n\t\t\tfi\n\t\t\tcmdline:=cmdhistory[cmdindex]\n\t\t\tgoto reenter\n\t\tfi\n\t\tbuffer:=\"\"\n\t\tgoto reenter2\n\tesac\n\n\tif buffer.len>1 and leftstr(buffer)<>\"*\" then\n\t\tif ncmds=0 or cmdhistory[ncmds]<>buffer then\n\t\t\tcmdhistory[++ncmds]:=buffer\n\t\tfi\n\t\tcmdindex:=0\n\tfi\n\n\tif donewline then println fi\n\n\treturn sreadln(buffer)\nend\n\nexport proc wsetcolumns(w,columns)=\n\tw.columns:=columns\n\tw.itemcols:=w.cols%w.columns\n\tw.pagesize:=w.rows*w.columns\nend\n\n"
    data     i64       "!!Virtual keycodes\nexport const vklbutton=1\t\t!note these are physical not logical buttons\nexport const vkrbutton=2\nexport const vkmbutton=4\t\t!middle button is correct\nexport const vkbackspace=8\nexport const vktab=9\nexport const vkclear=12\nexport const vkenter=13\nexport const vkshift=16\nexport const vkctrl=17\nexport const vkalt=18\nexport const vkbreak=19\nexport const vkcapslock=20\n!export const vkrshift=21\nexport const vkrctrl=22\n!export const vkralt=23\nexport const vkinslock=24\nexport const vkescape=27\nexport const vkspace=32\nexport const vkpageup=33\nexport const vkpagedown=34\nexport const vkend=35\nexport const vkhome=36\nexport const vkleft=37\nexport const vkup=38\nexport const vkright=39\nexport const vkdown=40\nexport const vkinsert=45\nexport const vkdelete=46\nexport const vkhelp=47\nexport const vk0='0'\nexport const vka='A'\nexport const vkwindows=91\nexport const vkrightbutton=93\nexport const vknumpad0=96\t\t!96..105 = '0'..'9'\nexport const vkmul=106\nexport const vkadd=107\nexport const vksub=109\nexport const vkdecimal=110\nexport const vkdiv=111\nexport const vkf1=112\nexport const vkf2=113\nexport const vkf3=114\nexport const vkf4=115\nexport const vkf5=116\nexport const vkf6=117\nexport const vkf7=118\nexport const vkf8=119\nexport const vkf9=120\nexport const vkf10=121\nexport const vkf11=122\nexport const vkf12=123\n!export const vklsq=128\n!export const vkrsq=129\n!export const vksemi=130\n!export const vkquote=131\n!export const vkstroke=132\n!export const vkdot=133\n!export const vkcomma=134\n!export const vkbackslash=135\n!export const vkquote2=136\n!export const vkequals=137\n!export const vkminus=138\n!export const vkhash=139\nexport const vklshift=160\nexport const vkrshift=161\nexport const vklcontrol=162\nexport const vkrcontrol=163\nexport const vklalt=164\nexport const vkralt=165\n\n!oem codes\nexport const vkminus=189\nexport const vkequals=187\nexport const vklsq=219\nexport const vkrsq=221\nexport const vksemi=186\nexport const vkquote=192\nexport const vkhash=222\nexport const vkcomma=188\nexport const vkperiod=190\nexport const vkslash=191\nexport const vkbackslash=220\nexport const vkbackquote=223\n\n\nexport enumdata\t\trr,     gg,     bb =\n\t(con_black=0,\t0,\t\t0,\t\t0),\n\t(con_dkblue,\t0,\t\t0,\t\t128),\n\t(con_dkred,\t\t128,\t0,\t\t0),\n\t(con_dkmagenta,\t128,\t0,\t\t128),\n\t(con_dkgreen,\t0,\t\t128,\t0),\n\t(con_dkcyan,\t0,\t\t128,\t128),\n\t(con_dkyellow,\t128,\t128,\t0),\n\t(con_dkgrey,\t128,\t128,\t128),\n\t(con_grey,\t\t192,\t192,\t192),\n\t(con_blue,\t\t0,\t\t0,\t\t255),\n\t(con_red,\t\t255,\t0,\t\t0),\n\t(con_magenta,\t255,\t0,\t\t255),\n\t(con_green,\t\t0,\t\t255,\t0),\n\t(con_cyan,\t\t0,\t\t255,\t255),\n\t(con_yellow,\t255,\t255,\t0),\n\t(con_white,\t\t255,\t255,\t255),\nend\n\n\nvar digits=['0'..'9']\nvar navkeys=['A':vkup, 'B':vkdown, 'C': vkright, 'D':vkleft, 'H':vkhome, 'F':vkend,\n\t\t\t\t'P':vkf1, 'Q':vkf2, 'R': vkf3, 'S':vkf4]\n\nvar fnkeys= [15:vkf5, 17:vkf6, 18:vkf7, 19:vkf8, 20:vkf9, 21:vkf10, 23:vkf11, 24:vkf12]\n\nconst capsmask  = 0x8\t\t!shift states as they are in .keyshift\nconst altmask   = 0x4\nconst ctrlmask  = 0x2\nconst shiftmask = 0x1\n\nconst capsbit=3\nconst altbit=2\nconst ctrlbit=1\nconst shiftbit=0\n\nvar shiftcodes = [5:ctrlmask, 2:shiftmask, 3:altmask, 4:shiftmask+altmask, 7:ctrlmask+altmask]\n\nexport var wconscreen\nexport var screencols,screenrows\nexport var currbgnd=-1,currfgnd=-1\n\nexport var chardata\t\t\t!string these two represent row of the console\nexport var attrdata\t\t\t!string\n\nexport var rlkey=0\t\t!set by readline, when special key has been input\nexport var rlbuffer\t\t\t!contents of readline buffer when special key pressed\n\nvar cmdindex,ncmds\nvar cmdhistory\n\n!export var screencolour=con_dkred..con_grey\n\nexport record winrec =\n\tvar posx,posy\n\tvar cols,rows\n\tvar fgnd,bgnd\t\t\t!default text/background colour\n\n\tvar columns\t\t\t!used when divided into columns\n\tvar itemcols\t\t\t!width of each column\n\tvar pagesize\t\t\t!columns*rows\n\n\tvar name\n\n\tvar hdata\t\t\t!pointer to data record, or is nil\nend\n\nexport proc init(cols=100)=\n\tgetdims()\n\n\tcmdhistory::=()\t!\"one\",\"two\",\"three\",\"four\")\n\tncmds:=cmdhistory.upb\n\tcmdindex:=0\n\n\twconscreen:=makewin((1,1),(screencols,screenrows),defscreencolour)\n\nend\n\nproc getdims=\n\t(screencols,screenrows):=getscreensize()\nend\n\nexport proc setpos(column,row)=\n\tfprint \"\\e[#;#H\",row,column\nend\n\nproc setfgndcol(c)=\n\tfprint \"\\e[38;2;#;#;#m\", rr[c], gg[c], bb[c]\nend\n\nproc setbgndcol(c)=\n\tfprint \"\\e[48;2;#;#;#m\", rr[c], gg[c], bb[c]\nend\n\nexport proc setbgndrgb(r,g,b)=\n\tfprint \"\\e[48;2;#;#;#m\", r,g,b\nend\n\nexport proc setbold(bold)=\n\tfprint \"\\e[#m\",(bold|1|21)\nend\n\nexport proc setitalic(italic)=\n\tfprint \"\\e[#m\",(italic|3|23)\nend\n\nexport func getpos=\n\tprint \"\\e[6n\"\n\treadkey()\t\t!escape\n\treadkey()\t\t![\n\n\t(row,column,c):=readkbdsequence()\n\treturn (column,row)\nend\n\nexport func setcursor(?visible)=\n\treturn 1\nend\n\nexport proc setcolour(fgnd, ?bgnd)=\n!call with as (fgnd,bgnd) or as (fgnd..bgnd)\n\n\tif bgnd.isvoid then bgnd:=currbgnd fi\n\n\tif fgnd<>currfgnd then\n\t\tsetfgndcol(fgnd)\n\t\tcurrfgnd:=fgnd\n\tfi\n\n\tif bgnd<>currbgnd then\n\t\tsetbgndcol(bgnd)\n\t\tcurrbgnd:=bgnd\n\tfi\nend\n\nexport proc settitle(caption)=\nend\n\nexport func keyready=\n\treturn pcerror(\"Linux/keyready\")\nend\n\n!export proc showtext(s)=\n!\tif s then\n!\t\tprint s\n!\tfi\n!end\n\nexport proc showtext(s,?x,?y)=\n\n\tif x.defined then\n\t\tsetpos(x,y)\n\tfi\n\n\tcount:=0\n\tif s then\n!\t\tif not suppress then\n\t\t\tprint s\n!\t\t\twriteconsole(hconsole,s,s.len,&count,nil)\n!\t\tfi\n\tfi\nend\n\nexport proc setdims(cols,rows)=\n\tpcerror(\"linux/setdims\")\nend\n\nexport proc setpalette(index,colour)=\n\tpcerror(\"linux/setpallete\")\nend\n\nfunc getscreensize=\n\tsavepos()\n\tsetpos(999,999)\n\t(cols,rows):=getpos()\n\trestorepos()\n\treturn (cols,rows)\nend\n\nproc savepos=\n\tprint \"\\e[s\"\nend\n\nproc restorepos=\n\tprint \"\\e[u\"\nend\n\nfunc readkey=\n\treturn waitkey()\nend\n\nfunc readintseq(c)=\n!c is '0' to '9'\n!read integer sequence up to first non-digit\n!return (number, terminator character)\n\tx:=c-'0'\n\tdo\n\t\tc:=readkey()\n\t\tif c in digits then\n\t\t\tx:=x*10+c-'0'\n\t\telse\n\t\t\texit\n\t\tfi\n\tod\n\treturn (x,c)\nend\n\nfunc readkbdsequence=\n!Some key escape sequences for control chars in Linux look like this:\n! <esc> \"[\" [x[\";\"y] c/\"~\"\n!Parts in \"...\" are actual characters\n!x and y are optional integers, c is a capital letter\n!The sequence may have 0, 1 or 2 numbers (separated with ;) and end with\n!a capital letter, or \"~\"\n!the \"[\" has already been read\n!return (X, Y, C)\n!X or Y will be zero if not present. C will 'A' etc, or 0 if it ends with \"~\"\n!-1 is returned on error\n\n\tx:=y:=0\n\n\tc:=readkey()\n\n\tif c in digits then\n\t\t(x,c):=readintseq(c)\n\t\tif c=';' then\n\t\t\tc:=readkey()\n\t\t\tif c not in digits then return -1 fi\n\t\t\t(y,c):=readintseq(c)\n\t\tfi\n\tfi\n\n\tif c='~' then\n\t\treturn (x,y,0)\n\tfi\n\treturn (x,y,c)\t\t\t\t!assume A-Z\nend\n\n!function keyname(k,shift=0)=\n!return getkeyname(rkey(0,k,shift))\n!end\n\nexport func getkey=\n!read key events via readkey()\n!convert escape sequences to Windows virtual keys\n\n\tk:=readkey()\t\t\t\t!LINUX ONLY\n\n!CPL \"<<<<<\",K,\">>>>>\"\n\n\tcase k\n\twhen 10 then\n\t\treturn rkey(13,vkenter,0)\n\twhen 8 then\n\t\treturn rkey(127, vkbackspace, ctrlmask)\n\twhen 127 then\n\t\treturn rkey(127, vkbackspace, 0)\n\twhen 9 then\n!\tCPL \"TAB1\"\n\t\treturn rkey(vktab,vktab,0)\n\twhen 'A'..'Z', '0'..'9', ' ' then\n\t\treturn rkey(k,k,0)\n\twhen 'a'..'z' then\n\t\treturn rkey(k,k-' ',0)\n\twhen 27 then\n\twhen 1..31 then\n\t\treturn rkey(k,0,ctrlmask)\n\telse\n\t\tc:=k\n\t\tcase k\n\t\twhen '[','{' then k:=vklsq\n\t\twhen ']','}' then k:=vkrsq\n\t\telse\n\t\t\tk:=0\n\t\tesac\n\n\t\treturn rkey(c,k,0)\n\tesac\n\n!CPL \"ESC SEEN\"\n\n!escape seen; look at next key\n\tk:=readkey()\n\n\tcase k\n\twhen 27 then\t\t\t!esc/esc => single escape\n\t\treturn rkey(0,k,0)\n\n\twhen 10 then\t\t\t!esc/10 => alt enter\n\t\treturn rkey(0,vkenter,altmask)\n\n\twhen 8,127 then\t\t\t!esc/bs => alt bs\n\t\treturn rkey(0,vkbackspace,altmask)\n\n\twhen 'O' then\t\t\t!short set of function keys\n\t\t(x,y,c):=readkbdsequence()\n\n!\tCPL \"O\",x,y,chr(c)\n\t\treturn rkey(0,navkeys{c},shiftcodes{y,0})\n\n\twhen '[' then\n\t\t(x,y,c):=readkbdsequence()\n\n\t\tcase c\n\t\twhen 'Z' then\t\t\t\t\t\t!shift+tab\n\t\t\treturn rkey(9,9,shiftmask)\n!\t\treturn rkey(0,9,shiftmask)\n\t\twhen 'A','B','C','D','H','F','P','Q','R','S' then\t\t!cursor keys, fn1..4; assume x=1\n\t\t\treturn rkey(0,navkeys{c},shiftcodes{y,0})\n\t\tesac\n\n\t\tcase x\n\t\twhen 2,3,5,6 then\n\t\t\tshift:=0\n\t\t\tcase y\n\t\t\twhen 5 then shift:=ctrlmask\n\t\t\twhen 3 then shift:=altmask\n\t\t\twhen 7 then shift:=altmask+ctrlmask\n\t\t\tesac\n\t\t\treturn rkey(0,(x|0,vkinsert,vkdelete,0,vkpageup|vkpagedown),shift)\n\t\twhen 15..24 then\n\t\t\treturn rkey(0,fnkeys{x},shiftcodes{y,0})\n\t\tesac\n\n\twhen 'A'..'Z' then\t\t\t!must have been alt version (some esc letter codes above)\n\t\treturn rkey(k-64,0,altmask) \n\n\twhen 'a'..'z' then\t\t\t!must have been alt version (some esc letter codes above)\n\t\treturn rkey(k-96,0,altmask) \n\n\twhen '0'..'9' then\n\t\treturn rkey(0,k,altmask) \n\n\tesac\n!\tCPL \"ESC 91\"\n\n!Code 91 SEEN\n\treturn rkey(0,'?',0)\nend\n\nproc screentest=\n\n\tsavepos()\n\tsetpos(10,10)\n\tsetfgndcol(5)\n\tsetbgndcol(3)\n\tsetbold(1)\n\tsetitalic(1)\n\tprintln \"\tHELLO\t\"\n\tsetbold(0)\n\tsetitalic(0)\n\trestorepos()\n\tprintln \"\tGoodbye\t\"\n\n\t(cols,rows):=getscreensize()\n\tcpl =rows,=cols\n\twaitkey()\nend\n\n!proc keytest=\n!\n!lastkey:=0\n!\n!!do\n!!\tk:=readkey()\n!!\tif k=27 and lastkey=27 then exit fi\n!!\tif k=27 then\n!!\t\tcpl\n!!\t\tcp \"ESC \"\n!!\telsif k in 32..126 then\n!!\t\tcp chr(k)\n!!\telse\n!!\t\tcp \"<\"+tostr(k)+\">\"\n!!\tfi\n!!\tlastkey:=k\n!!od\n!\n!do\n!\tk:=getkey()\n!\tcpl getkeyname(k),k\n!\tif k.keycode=27 then exit fi\n!od\n!\n!end\n\nproc keyscreentest=\n\t(cols,rows):=getscreensize()\n\tCPL =COLS,=ROWS\n\n\trow:=rows%2\n\tcol:=cols%2\n\tch:=\"X\"\n\n\tsetfgndcol(6)\n\tsetbgndcol(1)\n\n\tdo\n\t\tsetpos(col,row)\n\t\tcp ch\n\t\tsetpos(col,row)\n\t\tk:=getkey().keycode\n\t\tcase k\n\t\twhen 27 then\n\t\t\texit\n\t\twhen vkleft then col:=max(1,col-1)\n\t\twhen vkright then col:=min(cols,col+1)\n\t\twhen vkup then row:=max(1,row-1)\n\t\twhen vkdown then row:=min(rows,row+1)\n\t\tesac\n\tod\n\n!\twaitkey()\n\nend\n\nproc main=\n\n!\tkeytest()\n!\tscreentest()\n\tkeyscreentest()\nend\n\nproc start=\n!CPL \"LINCON START\"\n\tif not iswindows() then\n\t\tinit()\n\tfi\nend\n\nexport proc w_writeconsolerow(text, attributes, length, row)=\n!pcerror(\"lincon/writeconsolerow\")\n!buffersize:=1<<16+length\n!coord:=0\n\n!setpos(1,row)\n!print leftstr(text,length)\n\n\tsetpos(1,row)\n\tfor i:=1 to length-1 do\n\t\tattrs:=attributes.[i]\n\t\tc:=text.[i]\n\t!\tsetcolour(attrs>>4, attrs iand 15)\n\t\tsetcolour(attrs iand 15, attrs>>4)\n\t\tprint chr(c)\n\tod\nend\n\nexport proc flushkeyboard=\n\ttcflush(0, 0)\nend\n\nexport func setclipboard(s)=\n\tabort(\"linux/setclipboard\")\n\treturn 0\nend\n\nexport func getclipboard=\n\tabort(\"linux/getclipboard\")\n\treturn \"\"\nend\n\nexport proc clearscreen(?bgnd,?fgnd)=\n\n\tsystem(\"clear\")\nend\n\nexport func makewin(pos, dims, fgnd=con_black,bgnd=con_grey,name=\"Anon\")=\n!export func makewin(pos, dims, ?colour)=\n\n\tw:=new(winrec)\n\tw.posx:=pos[1]\n\tw.posy:=pos[2]\n\tw.cols:=dims[1]\n\tw.rows:=dims[2]\n\tw.columns:=1\n\tif dims.len>=3 then\n\t\tw.columns:=dims[3]\n\tfi\n\n!CPL =POS,=DIMS,=W.COLUMNS\n\n\tw.itemcols:=w.cols%w.columns\n\tw.pagesize:=w.rows*w.columns\n\tw.hdata:=nil\n\n\tw.fgnd:=fgnd\n\tw.bgnd:=bgnd\n\tw.name:=name\n\n\treturn w\nend\n\nexport proc clearwin(w)=\n!clear region used by listbox\n!can clear multi-columns at once\n\tspaces:=\" \"*w.cols\n\n\tsetcolour(w.fgnd,w.bgnd)\n\tfor i:=1 to w.rows do\n\t\tshowtext(spaces,w.posx,w.posy+i-1)\n\tod\n\tsetpos(w.posx,w.posy)\nend\n\nexport proc wshowtext(w,s,?col,?row)=\n\tif col.defined then\n\t\tshowtext(s,w.posx+col-1,w.posy+row-1)\n\telse\n\t\tshowtext(s)\n\tfi\nend\n\nexport proc wsetpos(w,col,row)=\n\tsetpos(w.posx+col-1,w.posy+row-1)\nend\n\nexport proc wshowtext_b(w,s,colrow,fgnd,bgnd)=\n!version of wshowtext that dumps into char/attr buffer.\n!w is used for absolute column number\n\n\tif colrow.islist then\n\t\t(col, row):=colrow\n\telse\n\t\tcol:=colrow\n\t\tROW:=1\n\tfi\n\n\tsetcolour(fgnd, bgnd)\n\n\twshowtext(w,s, col, row)\n!\tshowtext(s, col, row)\n\n\n!\tlength:=s.len\n!\toffset:=w.posx-1\t!hoz offset\n!\n!!CPL =CHARDATA\n!\n!\tchardata.[(col+offset)..(col-1+length+offset)]:=s\n!\n!!\tattr:=consolesw.colourmap[bgnd]<<4+consolesw.colourmap[fgnd]\n!\tattr:=bgnd<<4+fgnd\n!\n!\tattrdata.[(col+offset)..(col-1+length+offset)]:=chr(attr)*length\nend\n\nexport proc updateconsolerow(w,row)=\n!write out latest contents to chardata/attrdata to console\n!this represents an entire composite wlineno+wvgap+wedit row, for given row within wedit\n!etc\n!\tw_writeconsolerow(chardata,attrdata,screencols,row)\nend\n\nexport func getkeyname(key)=\n\tcase key.keycode\n\twhen vkleft then name:=\"left\"\n\twhen vkright then name:=\"right\"\n\twhen vkup then name:=\"up\"\n\twhen vkdown then name:=\"down\"\n\twhen vkpageup then name:=\"pageup\"\n\twhen vkpagedown then name:=\"pagedown\"\n\twhen vkhome then name:=\"home\"\n\twhen vkend then name:=\"end\"\n\twhen vkinsert then name:=\"insert\"\n\twhen vkdelete then name:=\"delete\"\n\twhen vktab then name:=\"tab\"\n\twhen vkescape then name:=\"escape\"\n\twhen vkbackspace then name:=\"backspace\"\n\twhen vkenter then name:=\"enter\"\n\twhen vkf1..vkf12 then name:=\"f\"+tostr(key.keycode-vkf1+1)\n\twhen vkspace then name:=\"space\"\n\telse\n\t\tif key.charcode in [1..26] then\t!ctrl code\n\t\t\tname:=chr(key.charcode+'a'-1)\n\t\telsif key.charcode in ['!','\"','\xA3','$','%','^','&','*','(',')','-','_','+','=','[',']',\n\t\t'{','}',':',';','\\'','@','~','#','<','>',',','.','/','\xAC','\xA6','|','\\\\','?'] then\n\t\t\tname:=chr(key.charcode)\n\t\t\tkey.shift iand:=inot shiftmask\t\t!ignore any shift press needed to get char\n\n\t\telsif key.keycode in ['A'..'Z','0'..'9'] then\n\t\t\tif (key.shift iand (ctrlmask ior altmask))=0 then\n\t\t\t\tname:=chr(key.charcode)\n\t\t\t\tkey.shift iand:=inot shiftmask\n\t\t\telse\n\t\t\t\tname:=convlc(chr(key.keycode))\n\t\t\tfi\n\t\telsif key.keycode in (186..223) then\n\t\t\tcase key.keycode\n\t\t\twhen vkminus then name:=\"-\"\n\t\t\twhen vkequals then name:=\"=\"\n\t\t\twhen vklsq then name:=\"[\"\n\t\t\twhen vkrsq then name:=\"]\"\n\t\t\twhen vksemi then name:=\";\"\n\t\t\twhen vkquote then name:=\"'\"\n\t\t\twhen vkhash then name:=\"#\"\n\t\t\twhen vkcomma then name:=\",\"\n\t\t\twhen vkperiod then name:=\".\"\n\t\t\twhen vkslash then name:=\"/\"\n\t\t\twhen vkbackslash then name:=\"\\\\\"\n\t\t\twhen vkbackquote then name:=\"`\"\n\t\t\telse\n\t\t\t\treturn \"?\"\n\t\t\tesac\n\t\telse\n\t\t\treturn \"?\"\n\t\tfi\n\tesac\n\n\tprefix::=\"*\"\n\tif key.shift iand shiftmask then prefix+:=\"s\" fi\n\tif key.shift iand ctrlmask then prefix+:=\"c\" fi\n\tif key.shift iand altmask then prefix+:=\"a\" fi\n\treturn prefix+name\n\nend\n\nexport func readline(?cmdline,donewline=1)=\n!this func doesn't handle tabs properly\n!would need to maintain 2 buffers, one with tabs translated to spaces\n!or convert tabs to another char which is translated back to tabs on exit\n!return with input buffer set to the line, but also returns the complete line\n!newline=1 to end with a newline, 0 to leave it\n\n!readln\n!return\n\n\tbuffer:=\"\"\n\tnchars:=0\n!congetpos()\n\n!NOTE: getpos is dodgy using TERMCON; MAY NEED CALLER TO SPECIFY START POINT\n\t(startx,starty):=(getpos())\n\n\tpos:=0\t\t!with nchars shown, pos can be 0 to nchars\n\n\treenter:\n\tif cmdline.defined and cmdline<>\"\" then\n\t\tbuffer:=cmdline\n\treenter2:\n\t\tpos:=nchars:=buffer.len\n\tfi\n\n\tdo\n! print \"_\"\n\t\trlkey:=0\t\t\t!normal input starts with \"*\" will expect rlkey to be a keyrec\n\t\tsetpos(startx,starty)\n\t\tprint buffer\n\t\tsetpos(startx+pos,starty)\n\n\t\tkey:=getkey()\n\t\tkeycode:=key.keycode\n\t\tkeyshift:=key.shift\n\n\t\tcase keycode\n\t\twhen vkpageup,vkpagedown,vkup,vkdown,vkinsert,vkf1..vkf12 then\n\n\tdospecial:\n\t\trlbuffer:=buffer\n\t\t\toldbufferlen:=buffer.len\t\t!to help erase old buffer\n\t\t\tbuffer:=getkeyname(key)\n\t\t\trlkey:=key\t\t\t\t!allow caller to use key code rather than name\n\t\t\texit\n\n\t\twhen vkleft then\n\t\t\tif buffer=\"\" then goto dospecial fi\n\t\t\tif (keyshift iand 7) then goto dospecial fi\n\n\t\t\tif pos>0 then\n\t\t\t\t--pos\n\t\t\tfi\n\n\t\twhen vkhome then\n\t\t\tif buffer=\"\" then goto dospecial fi\n\t\t\tif (keyshift iand 7) then goto dospecial fi\n\t\t\tpos:=0\n\n\t\twhen vkend then\n\t\t\tif buffer=\"\" then goto dospecial fi\n\t\t\tif (keyshift iand 7) then goto dospecial fi\n\t\t\tpos:=nchars\n\n\t\twhen vkright then\n\t\t\tif buffer=\"\" then goto dospecial fi\n\t\t\tif (keyshift iand 7) then goto dospecial fi\n\t\t\tif pos<nchars then\n\t\t\t\t++pos\n\t\t\tfi\n\n\t\twhen vkenter then\n\n!  println\n\t\t\texit\n\n\t\twhen vkbackspace then\n\n\t\t\tif (keyshift iand 7) then goto dospecial fi\n\t\t\tif nchars then\n\t\t\t\tsetpos(startx,starty)\n\t\t\t\tprint \" \"*buffer.len\n\n\t\t\t\tcase pos\n\t\t\t\twhen 0 then\t\t\t!not allowed\n\t\t\t\twhen nchars then\t\t!at end\n\t\t\t\t\tbuffer:=leftstr(buffer,-1)\n\t\t\t\t\t--nchars\n\t\t\t\t\t--pos\n\t\t\t\telse\t\t\t\t!in middle\n\t\t\t\t\tbuffer:=leftstr(buffer,pos-1)+rightstr(buffer,-(pos))\n\t\t\t\t\t--nchars\n\t\t\t\t\t--pos\n\t\t\t\tesac\n\n\t\t\tfi\n\n\t\twhen vkdelete then\n\t\t\tif (keyshift iand 7) then goto dospecial fi\n\t\t\tif nchars and nchars=pos then\n\t\t\t\tgoto delline\n\t\t\tfi\n\t\t\tif nchars=0 then\n\t\t\t\tgoto dospecial\n\t\t\tfi\n\t\t\tif nchars then\n!CPL \"\\NNCHARS\",=NCHARS,++CCC,=POS,\"\\N\"\n\t\t\t\tsetpos(startx,starty)\n\t\t\t\tprint \" \"*buffer.len\n\n\t\t\t\tcase pos\n\t\t\t\twhen nchars then\t\t!not allowed\n!\t\t\twhen 0 then\t\t\t!at start\n!\t\t\t\tbuffer:=leftstr(buffer,-1)\n!\t\t\t\t--nchars\n\t\t\t\telse\t\t\t\t!in middle\n\t\t\t\t\tbuffer:=leftstr(buffer,pos)+rightstr(buffer,-(pos+1))\n\t\t\t\t\t--nchars\n!    --pos\n\t\t\t\tesac\n\n\t\t\tfi\n\n\t\twhen vkescape then\n\t\t\tif nchars=0 then\n\t\t\t\tgoto dospecial\n!   oldbufferlen:=buffer.len\n!   buffer:=\"*esc\"\n!   exit\n\t\t\tfi\n\tdelline:\n\t\t\tsetpos(startx,starty)\n\t\t\tprint \" \"*buffer.len\n\n\t\t\tbuffer:=\"\"\n\t\t\tnchars:=pos:=0\n\n\t\twhen vktab then\n\t\t\tgoto normalkey\n\n\t\telse\n\tnormalkey:\n\t\t\tif (key.charcode>=' ' or key.charcode=9) then\n\t\t\t\tif pos=0 then\n\t\t\t\t\tbuffer:=chr(key.charcode)+buffer\n\t\t\t\telsif pos=nchars then\n\t\t\t\t\tbuffer:=buffer+chr(key.charcode)\n\t\t\t\telse\n\t\t\t\t\tbuffer:=leftstr(buffer,pos)+chr(key.charcode)+rightstr(buffer,-(pos))\n\t\t\t\tfi\n\t\t\t\t++nchars\n\t\t\t\t++pos\n\t\t\telse\n\t\t\t\tGOTO DOSPECIAL\n\t\t\t\tprint \"<\",keycode,key.charcode,\">\"\n\t\t\tfi\n\n\t\tesac\n\tod\n\n\tcase buffer\n\twhen \"*cup\",\"*cdown\" then\n\t\tif ncmds then\n\t\t\tsetpos(startx,starty)\n\t\t\tprint \" \"*oldbufferlen\n\n\t\t\tif cmdindex=0 then\t\t!get started on last\n\t\t\t\tcmdline:=cmdhistory[ncmds]\n\t\t\t\tcmdindex:=ncmds\n\t\t\t\tgoto reenter\n\t\t\tfi\n\n\t\t\tif buffer=\"*cup\" and cmdindex>1 then\n\t\t\t\t--cmdindex\n\t\t\telsif buffer=\"*cdown\" and cmdindex<ncmds then\n\t\t\t\t++cmdindex\n\t\t\tfi\n\t\t\tcmdline:=cmdhistory[cmdindex]\n\t\t\tgoto reenter\n\t\tfi\n\t\tbuffer:=\"\"\n\t\tgoto reenter2\n\tesac\n\n\tif buffer.len>1 and leftstr(buffer)<>\"*\" then\n\t\tif ncmds=0 or cmdhistory[ncmds]<>buffer then\n\t\t\tcmdhistory[++ncmds]:=buffer\n\t\tfi\n\t\tcmdindex:=0\n\tfi\n\n\tif donewline then println fi\n\n\treturn sreadln(buffer)\nend\n\nexport proc wsetcolumns(w,columns)=\n\tw.columns:=columns\n\tw.itemcols:=w.cols%w.columns\n\tw.pagesize:=w.rows*w.columns\nend\n\n"
    data     i64       "!Windows win32 constants\n\nglobal const driverversion =  0\nglobal const technology =  2\nglobal const horzsize =  4\nglobal const vertsize =  6\nglobal const horzres =  8\nglobal const vertres =  10\nglobal const bitspixel =  12\nglobal const bitplanes =  14\nglobal const numbrushes =  16\nglobal const numpens =  18\nglobal const nummarkers =  20\nglobal const numfonts =  22\nglobal const numcolours =  24\nglobal const pdevicesize =  26\nglobal const curvecaps =  28\nglobal const linecaps =  30\nglobal const polygonalcaps =  32\nglobal const textcaps =  34\nglobal const clipcaps =  36\nglobal const rastercaps =  38\nglobal const aspectx =  40\nglobal const aspecty =  42\nglobal const aspectxy =  44\nglobal const logpixelsx =  88\nglobal const logpixelsy =  90\nglobal const sizepalette =  104\nglobal const numreserved =  106\nglobal const colourres =  108\nglobal const physicalwidth =  110\nglobal const physicalheight =  111\nglobal const physicaloffsetx =  112\nglobal const physicaloffsety =  113\nglobal const scalingfactorx =  114\nglobal const scalingfactory =  115\nglobal const fw_dontcare =  0\nglobal const fw_thin =  100\nglobal const fw_extralight =  200\nglobal const fw_ultralight =  200\nglobal const fw_light =  300\nglobal const fw_normal =  400\nglobal const fw_regular =  400\nglobal const fw_medium =  500\nglobal const fw_semibold =  600\nglobal const fw_demibold =  600\nglobal const fw_bold =  700\nglobal const fw_extrabold =  800\nglobal const fw_ultrabold =  800\nglobal const fw_heavy =  900\nglobal const fw_black =  900\nglobal const cs_vredraw =  1\nglobal const cs_hredraw =  2\nglobal const cs_keycvtwindow =  4\nglobal const cs_dblclks =  8\nglobal const cs_owndc =  32\nglobal const cs_classdc =  64\nglobal const cs_parentdc =  128\nglobal const cs_nokeycvt =  256\nglobal const cs_noclose =  512\nglobal const cs_savebits =  2048\nglobal const cs_bytealignclient =  4096\nglobal const cs_bytealignwindow =  8192\nglobal const cs_publicclass =  16384\nglobal const sw_hide =  0\nglobal const sw_shownormal =  1\nglobal const sw_normal =  1\nglobal const sw_showminimized =  2\nglobal const sw_showmaximized =  3\nglobal const sw_maximize =  3\nglobal const sw_shownoactivate =  4\nglobal const sw_show =  5\nglobal const sw_minimize =  6\nglobal const sw_showminnoactive =  7\nglobal const sw_showna =  8\nglobal const sw_restore =  9\nglobal const sw_showdefault =  10\nglobal const sw_max =  10\nglobal const pm_noremove =  0\nglobal const pm_remove =  1\nglobal const pm_noyield =  2\nglobal const wm_null =  0\nglobal const wm_create =  1\nglobal const wm_destroy =  2\nglobal const wm_move =  3\nglobal const wm_size =  5\nglobal const wm_activate =  6\nglobal const wa_inactive =  0\nglobal const wa_active =  1\nglobal const wa_clickactive =  2\nglobal const wm_setfocus =  7\nglobal const wm_killfocus =  8\nglobal const wm_enable =  10\nglobal const wm_setredraw =  11\nglobal const wm_settext =  12\nglobal const wm_gettext =  13\nglobal const wm_gettextlength =  14\nglobal const wm_paint =  15\nglobal const wm_close =  16\nglobal const wm_queryendsession =  17\nglobal const wm_quit =  18\nglobal const wm_queryopen =  19\nglobal const wm_erasebkgnd =  20\nglobal const wm_syscolourchange =  21\nglobal const wm_endsession =  22\nglobal const wm_showwindow =  24\nglobal const wm_wininichange =  26\nglobal const wm_devmodechange =  27\nglobal const wm_activateapp =  28\nglobal const wm_fontchange =  29\nglobal const wm_timechange =  30\nglobal const wm_cancelmode =  31\nglobal const wm_setcursor =  32\nglobal const wm_mouseactivate =  33\nglobal const wm_childactivate =  34\nglobal const wm_queuesync =  35\nglobal const wm_getminmaxinfo =  36\nglobal const wm_drawitem =  43\nglobal const wm_notify =  78\nglobal const wm_contextmenu =  123\nglobal const wm_geticon =  127\nglobal const wm_seticon =  128\nglobal const wm_nchittest =  132\n\nglobal const wm_nclbuttondown\t= 161\nglobal const wm_nclbuttonup\t= 162\nglobal const wm_nclbuttondblclick\t= 163\n\nglobal const wm_menurbuttonup\t= 290\n\nglobal const wm_parentnotify =  528\nglobal const wm_dropfiles =  563\nglobal const wm_enteridle =  289\nglobal const wm_user =  1024\nglobal const wm_mdicreate =  544\nglobal const wm_mdidestroy =  545\nglobal const wm_mdiactivate =  546\nglobal const wm_mdirestore =  547\nglobal const wm_mdinext =  548\nglobal const wm_mdimaximize =  549\nglobal const wm_mditile =  550\nglobal const wm_mdicascade =  551\nglobal const wm_mdiiconarange =  552\nglobal const wm_mdigetactive =  553\nglobal const wm_mdisetmenu =  560\nglobal const wm_entersizemove =  561\nglobal const wm_exitsizemove =  562\nglobal const wm_mdirefrshmenu =  564\nglobal const wm_lbuttondblclk =  515\nglobal const wm_rbuttondblclk =  518\nglobal const wm_lbuttondown =  513\nglobal const wm_rbuttondown =  516\nglobal const wm_mbuttondown =  519\nglobal const wm_mousemove =  512\nglobal const wm_lbuttonup =  514\nglobal const wm_rbuttonup =  517\nglobal const wm_mbuttonup =  520\nglobal const wm_mbuttondblclk =  521\nglobal const wm_mousewheel =  522\nglobal const snd_filename =  131072\nglobal const snd_async =  1\nglobal const dt_singleline =  32\nglobal const dt_centre =  1\nglobal const dt_vcentre =  4\nglobal const ws_overlapped =  0\nglobal const ws_popup =  2147483648\nglobal const ws_child =  1073741824\nglobal const ws_minimize =  536870912\nglobal const ws_visible =  268435456\nglobal const ws_disabled =  134217728\nglobal const ws_clipsiblings =  67108864\nglobal const ws_clipchildren =  33554432\nglobal const ws_maximize =  16777216\nglobal const ws_caption =  12582912\nglobal const ws_border =  8388608\nglobal const ws_dlgframe =  4194304\nglobal const ws_hscroll =  1048576\nglobal const ws_vscroll =  2097152\nglobal const ws_sysmenu =  524288\nglobal const ws_thickframe =  262144\nglobal const ws_group =  131072\nglobal const ws_tabstop =  0\nglobal const ws_scrollbars =  3145728\nglobal const ws_minimizebox =  131072\nglobal const ws_maximizebox =  65536\nglobal const ws_tiled =  0\nglobal const ws_iconic =  536870912\nglobal const ws_sizebox =  262144\nglobal const ws_overlappedwindow =  13565952\nglobal const ws_tiledwindow =  13565952\nglobal const ws_popupwindow =  -2138570752\nglobal const ws_childwindow =  1073741824\nglobal const ws_ex_acceptfiles =  16\nglobal const ws_ex_appwindow =  262144\nglobal const ws_ex_clientedge =  512\nglobal const ws_ex_contexthelp =  1024\nglobal const ws_ex_controlparent =  65536\nglobal const ws_ex_dlgmodalframe =  1\nglobal const ws_ex_left =  0\nglobal const ws_ex_leftscrollbar =  16384\nglobal const ws_ex_ltrreading =  0\nglobal const ws_ex_mdichild =  64\nglobal const ws_ex_noparentnotify =  4\nglobal const ws_ex_overlappedwindow =  768\nglobal const ws_ex_palettewindow =  392\nglobal const ws_ex_right =  4096\nglobal const ws_ex_rightscrollbar =  0\nglobal const ws_ex_rtlreading =  8192\nglobal const ws_ex_staticedge =  131072\nglobal const ws_ex_toolwindow =  128\nglobal const ws_ex_topmost =  8\nglobal const ws_ex_transparent =  32\nglobal const ws_ex_windowedge =  256\n\nglobal const gw_hwndfirst =  0\nglobal const gw_hwndlast =  1\nglobal const gw_hwndnext =  2\nglobal const gw_hwndprev =  3\nglobal const gw_owner =  4\nglobal const gw_child =  5\nglobal const gw_enabledpopup =  6\nglobal const cb_geteditsel =  320\nglobal const cb_limittext =  321\nglobal const cb_seteditsel =  322\nglobal const cb_addstring =  323\nglobal const cb_deletestring =  324\nglobal const cb_dir =  325\nglobal const cb_getcount =  326\nglobal const cb_getcursel =  327\nglobal const cb_getlbtext =  328\nglobal const cb_getlbtextlen =  329\nglobal const cb_insertstring =  330\nglobal const cb_resetcontent =  331\nglobal const cb_findstring =  332\nglobal const cb_findstringexact =  344\nglobal const cb_selectstring =  333\nglobal const cb_setcursel =  334\nglobal const cb_showdropdown =  335\nglobal const cb_getitemdata =  336\nglobal const cb_setitemdata =  337\nglobal const cb_getdroppedcontrolrect =  338\nglobal const cb_setitemheight =  339\nglobal const cb_getitemheight =  340\nglobal const cb_setextendedui =  341\nglobal const cb_getextendedui =  342\nglobal const cb_getdroppedstate =  343\nglobal const cb_setlocale =  345\nglobal const cb_getlocale =  346\nglobal const cb_gettopindex =  347\nglobal const cb_settopindex =  348\nglobal const cb_gethorizontalextent =  349\nglobal const cb_sethorizontalextent =  350\nglobal const cb_getdroppedwidth =  351\nglobal const cb_setdroppedwidth =  352\nglobal const cb_initstorage =  353\nglobal const cb_multipleaddstring =  355\nglobal const bm_click =  245\nglobal const bm_getcheck =  240\nglobal const bm_getimage =  246\nglobal const bm_getstate =  242\nglobal const bm_setcheck =  241\nglobal const bm_setimage =  247\nglobal const bm_setstate =  243\nglobal const bm_setstyle =  244\nglobal const cf_bitmap =  2\nglobal const cf_dib =  8\nglobal const cf_palette =  9\nglobal const cf_enhmetafile =  14\nglobal const cf_metafilepict =  3\nglobal const cf_oemtext =  7\nglobal const cf_text =  1\t\t\t!used in sys\nglobal const cf_unicodetext =  13\nglobal const cf_dif =  5\nglobal const cf_dspbitmap =  130\nglobal const cf_dspenhmetafile =  142\nglobal const cf_dspmetafilepict =  131\nglobal const cf_dsptext =  129\nglobal const cf_gdiobjfirst =  768\nglobal const cf_gdiobjlast =  1023\nglobal const cf_hdrop =  15\nglobal const cf_locale =  16\nglobal const cf_ownerdisplay =  128\nglobal const cf_pendata =  10\nglobal const cf_privatefirst =  512\nglobal const cf_privatelast =  767\nglobal const cf_riff =  11\nglobal const cf_sylk =  4\nglobal const cf_wave =  12\nglobal const cf_tiff =  6\n\nglobal const tcif_text =  1\nglobal const tcif_image =  2\nglobal const tcif_param =  8\nglobal const tcif_rtlreading =  4\n\nglobal const wm_keydown =  256\nglobal const wm_keyup =  257\nglobal const wm_char =  258\nglobal const wm_syschar =  262\nglobal const wm_sysdeadchar =  263\nglobal const wm_syskeydown =  260\nglobal const wm_syskeyup =  261\nglobal const mf_insert =  0\nglobal const mf_change =  128\nglobal const mf_append =  256\nglobal const mf_delete =  512\nglobal const mf_remove =  4096\nglobal const mf_bycommand =  0\nglobal const mf_byposition =  1024\nglobal const mf_separator =  2048\nglobal const mf_enabled =  0\nglobal const mf_grayed =  1\nglobal const mf_greyed =  1\nglobal const mf_disabled =  2\nglobal const mf_unchecked =  0\nglobal const mf_checked =  8\nglobal const mf_usecheckbitmaps =  512\nglobal const mf_string =  0\nglobal const mf_bitmap =  4\nglobal const mf_ownerdraw =  256\nglobal const mf_popup =  16\nglobal const mf_menubarbreak =  32\nglobal const mf_menubreak =  64\nglobal const mf_unhilite =  0\nglobal const mf_hilite =  128\nglobal const mf_sysmenu =  8192\nglobal const mf_help =  16384\nglobal const mf_mouseselect =  32768\n\n!global const bn_clicked =  0\n!global const bn_dblclk =  5\n!global const bn_disable =  4\n!global const bn_doubleclicked =  5\n!global const bn_hilite =  2\n!global const bn_killfocus =  7\n!global const bn_paint =  1\n!global const bn_pushed =  2\n!global const bn_setfocus =  6\n!global const bn_unhilite =  3\n!global const bn_unpushed =  3\n!global const en_setfocus =  256\n!global const en_killfocus =  512\n!global const en_change =  768\n!global const en_update =  1024\n!global const en_errspace =  1280\n!global const en_maxtext =  1281\n!global const en_hscroll =  1537\n!global const en_vscroll =  1538\n!global const lbn_errspace =  -2\n!global const lbn_selchange =  1\n!global const lbn_dblclk =  2\n!global const lbn_selcancel =  3\n!global const lbn_setfocus =  4\n!global const lbn_killfocus =  5\n!global const cbn_errspace =  -1\n!global const cbn_selchange =  1\n!global const cbn_dblclk =  2\n!global const cbn_setfocus =  3\n!global const cbn_killfocus =  4\n!global const cbn_editchange =  5\n!global const cbn_editupdate =  6\n!global const cbn_dropdown =  7\n!global const cbn_closeup =  8\n!global const cbn_selendok =  9\n!global const cbn_selendcancel =  10\n!\n!global const cbs_autohscroll =  64\n!global const cbs_disablenoscroll =  2048\n!global const cbs_dropdown =  2\n!global const cbs_dropdownlist =  3\n!global const cbs_hasstrings =  512\n!global const cbs_lowercase =  16384\n!global const cbs_nointegralheight =  1024\n!global const cbs_oemconvert =  128\n!global const cbs_ownerdrawfixed =  16\n!global const cbs_ownerdrawvariable =  32\n!global const cbs_simple =  1\n!global const cbs_sort =  256\n!global const cbs_uppercase =  8192\n\nglobal const wm_command =  273\nglobal const wm_menuselect =  287\nglobal const wm_cut =  768\nglobal const wm_copy =  769\nglobal const wm_paste =  770\nglobal const wm_clear =  771\nglobal const wm_undo =  772\nglobal const em_getsel =  176\nglobal const em_setsel =  177\nglobal const em_scroll =  181\nglobal const em_linescroll =  182\nglobal const em_scrollcaret =  183\nglobal const em_getmodify =  184\nglobal const em_setmodify =  185\nglobal const em_getlinecount =  186\nglobal const em_lineindex =  187\nglobal const em_sethandle =  188\nglobal const em_gethandle =  189\nglobal const em_getthumb =  190\nglobal const em_linelength =  193\nglobal const em_replacesel =  194\nglobal const em_getline =  196\nglobal const em_limittext =  197\nglobal const em_canundo =  198\nglobal const em_undo =  199\nglobal const em_fmtlines =  200\nglobal const em_linefromchar =  201\nglobal const em_settabstops =  203\nglobal const em_setpasswordchar =  204\nglobal const em_emptyundobuffer =  205\nglobal const em_getfirstvisibleline =  206\nglobal const em_setreadonly =  207\nglobal const em_setwordbreakproc =  208\nglobal const em_getwordbreakproc =  209\nglobal const em_getpasswordchar =  210\nglobal const em_setlimittext =  197\nglobal const em_getseltext =  1086\nglobal const em_setcharformat =  1092\nglobal const em_getcharformat =  1082\nglobal const em_settextmode =  1113\nglobal const em_gettextmode =  1114\nglobal const em_gettextex =  1118\nglobal const em_gettextlengthex =  1119\nglobal const tm_plaintext =  1\nglobal const tm_richtext =  2\nglobal const tm_singlelevelundo =  4\nglobal const tm_multilevelundo =  8\nglobal const tm_singlecodepage =  16\nglobal const tm_multicodepage =  32\nglobal const scf_word =  2\nglobal const scf_selection =  1\nglobal const sb_getborders =  1031\nglobal const sb_getparts =  1030\nglobal const sb_getrect =  1034\nglobal const sb_gettextw =  1037\nglobal const sb_gettextlengthw =  1036\nglobal const sb_settextw =  1035\nglobal const sb_gettexta =  1026\nglobal const sb_gettextlengtha =  1027\nglobal const sb_settexta =  1025\nglobal const sb_gettext =  1026\nglobal const sb_gettextlength =  1027\nglobal const sb_settext =  1025\nglobal const sb_setminheight =  1032\nglobal const sb_setparts =  1028\nglobal const sb_simple =  1033\nglobal const wm_setfont =  48\nglobal const wm_getfont =  49\nglobal const gm_advanced =  2\nglobal const transparent =  1\nglobal const opaque =  2\nglobal const mwt_identity =  1\nglobal const cw_usedefault =  0x8000'0000\nglobal const idc_arrow =  32512\nglobal const idc_ibeam =  32513\nglobal const idc_wait =  32514\nglobal const idc_cross =  32515\nglobal const idc_uparrow =  32516\nglobal const idc_sizenwse =  32642\nglobal const idc_sizenesw =  32643\nglobal const idc_sizewe =  32644\nglobal const idc_sizens =  32645\nglobal const idc_sizeall =  32646\nglobal const idc_no =  32648\nglobal const idc_appstarting =  32650\nglobal const idc_help =  32651\nglobal const idi_application =  32512\nglobal const idi_hand =  32513\nglobal const idi_question =  32514\nglobal const idi_exclamation =  32515\nglobal const idi_asterisk =  32516\nglobal const idi_winlogo =  32517\nglobal const idc_size =  32640\nglobal const idc_icon =  32641\nglobal const arrowpointer =  32512\nglobal const ibeampointer =  32513\nglobal const waitpointer =  32514\nglobal const crosspointer =  32515\nglobal const uparrowpointer =  32516\nglobal const sizenwsepointer =  32642\nglobal const sizeneswpointer =  32643\nglobal const sizewepointer =  32644\nglobal const sizenspointer =  32645\nglobal const sizeallpointer =  32646\nglobal const nopointer =  32648\nglobal const appstartingpointer =  32650\nglobal const helpicon =  32651\nglobal const applicationicon =  32512\nglobal const handicon =  32513\nglobal const questionicon =  32514\nglobal const exclamationicon =  32515\nglobal const asteriskicon =  32516\nglobal const winlogoicon =  32517\nglobal const sizepointer =  32640\nglobal const iconicon =  32641\nglobal const sm_cymin =  29\nglobal const sm_cxmin =  28\nglobal const sm_arrange =  56\nglobal const sm_cleanboot =  67\nglobal const sm_cmetrics =  76\nglobal const sm_cmousebuttons =  43\nglobal const sm_cxborder =  5\nglobal const sm_cyborder =  6\nglobal const sm_cxcursor =  13\nglobal const sm_cycursor =  14\nglobal const sm_cxdlgframe =  7\nglobal const sm_cydlgframe =  8\nglobal const sm_cxdoubleclk =  36\nglobal const sm_cydoubleclk =  37\nglobal const sm_cxdrag =  68\nglobal const sm_cydrag =  69\nglobal const sm_cxedge =  45\nglobal const sm_cyedge =  46\nglobal const sm_cxfixedframe =  7\nglobal const sm_cyfixedframe =  8\nglobal const sm_cxframe =  32\nglobal const sm_cyframe =  33\nglobal const sm_cxfullscreen =  16\nglobal const sm_cyfullscreen =  17\nglobal const sm_cxhscroll =  21\nglobal const sm_cyhscroll =  3\nglobal const sm_cxhthumb =  10\nglobal const sm_cxicon =  11\nglobal const sm_cyicon =  12\nglobal const sm_cxiconspacing =  38\nglobal const sm_cyiconspacing =  39\nglobal const sm_cxmaximized =  61\nglobal const sm_cymaximized =  62\nglobal const sm_cxmaxtrack =  59\nglobal const sm_cymaxtrack =  60\nglobal const sm_cxmenucheck =  71\nglobal const sm_cymenucheck =  72\nglobal const sm_cxmenusize =  54\nglobal const sm_cymenusize =  55\nglobal const sm_cxminimized =  57\nglobal const sm_cyminimized =  58\nglobal const sm_cxminspacing =  47\nglobal const sm_cyminspacing =  48\nglobal const sm_cxmintrack =  34\nglobal const sm_cymintrack =  35\nglobal const sm_cxscreen =  0\nglobal const sm_cyscreen =  1\nglobal const sm_cxsize =  30\nglobal const sm_cysize =  31\nglobal const sm_cxsizeframe =  32\nglobal const sm_cysizeframe =  33\nglobal const sm_cxsmicon =  49\nglobal const sm_cysmicon =  50\nglobal const sm_cxsmsize =  52\nglobal const sm_cysmsize =  53\nglobal const sm_cxvscroll =  2\nglobal const sm_cyvscroll =  20\nglobal const sm_cyvthumb =  9\nglobal const sm_cycaption =  4\nglobal const sm_cykanjiwindow =  18\nglobal const sm_cymenu =  15\nglobal const sm_cysmcaption =  51\nglobal const sm_dbcsenabled =  42\nglobal const sm_debug =  22\nglobal const sm_menudropalignment =  40\nglobal const sm_mideastenabled =  74\nglobal const sm_mousepresent =  19\nglobal const sm_mousewheelpresent =  75\nglobal const sm_network =  63\nglobal const sm_penwindows =  41\nglobal const sm_reserved1 =  24\nglobal const sm_reserved2 =  25\nglobal const sm_reserved3 =  26\nglobal const sm_reserved4 =  27\nglobal const sm_secure =  44\nglobal const sm_showsounds =  70\nglobal const sm_slowmachine =  73\nglobal const sm_swapbutton =  23\nglobal const arw_bottomleft =  0\nglobal const arw_bottomright =  1\nglobal const arw_hide =  8\nglobal const arw_topleft =  2\nglobal const arw_topright =  3\nglobal const arw_down =  4\nglobal const arw_left =  0\nglobal const arw_right =  0\nglobal const arw_up =  4\nglobal const white_brush =  0\nglobal const ltgray_brush =  1\nglobal const gray_brush =  2\nglobal const dkgray_brush =  3\nglobal const black_brush =  4\nglobal const null_brush =  5\nglobal const hollow_brush =  5\nglobal const white_pen =  6\nglobal const black_pen =  7\nglobal const null_pen =  8\nglobal const oem_fixed_font =  10\nglobal const ansi_fixed_font =  11\nglobal const ansi_var_font =  12\nglobal const system_font =  13\nglobal const device_default_font =  14\nglobal const default_palette =  15\nglobal const system_fixed_font =  16\nglobal const stock_last =  16\n\n!global const sbm_setpos =  224\n!global const sbm_getpos =  225\n!global const sbm_setrange =  226\n!global const sbm_setrangeredraw =  230\n!global const sbm_getrange =  227\n!global const sbm_enable_arrows =  228\n!global const sbs_horz =  0\n!global const sbs_vert =  1\n!global const sbs_topalign =  2\n!global const sbs_leftalign =  2\n!global const sbs_bottomalign =  4\n!global const sbs_rightalign =  4\n!global const sbs_sizeboxtopleftalign =  2\n!global const sbs_sizeboxbottomrightalign =  4\n!global const sbs_sizebox =  8\n\nglobal const wm_hscroll =  276\nglobal const wm_vscroll =  277\n\n!global const sb_horz =  0\n!global const sb_hoz =  0\n!global const sb_vert =  1\n!global const sb_ctl =  2\n!global const sb_both =  3\n!global const sb_lineup =  0\n!global const sb_lineleft =  0\n!global const sb_linedown =  1\n!global const sb_lineright =  1\n!global const sb_pageup =  2\n!global const sb_pageleft =  2\n!global const sb_pagedown =  3\n!global const sb_pageright =  3\n!global const sb_thumbposition =  4\n!global const sb_thumbtrack =  5\n!global const sb_top =  6\n!global const sb_left =  6\n!global const sb_bottom =  7\n!global const sb_right =  7\n!global const sb_endscroll =  8\n!global const sif_disablenoscroll =  8\n!global const sif_page =  2\n!global const sif_pos =  4\n!global const sif_range =  1\n!global const sif_trackpos =  16\n!global const sif_all =  23\n\nglobal const wm_ctlcolourmsgbox =  306\nglobal const wm_ctlcolouredit =  307\nglobal const wm_ctlcolourlistbox =  308\nglobal const wm_ctlcolourbtn =  309\nglobal const wm_ctlcolourdlg =  310\nglobal const wm_ctlcolourscrollbar =  311\nglobal const wm_ctlcolourstatic =  312\nglobal const wm_timer =  275\n\nglobal const srccopy =  13369376\nglobal const srcpaint =  15597702\nglobal const srcand =  8913094\nglobal const srcinvert =  6684742\nglobal const srcerase =  4457256\n\nglobal const notsrccopy =  3342344\nglobal const notsrcerase =  1114278\nglobal const mergecopy =  12583114\nglobal const mergepaint =  12255782\nglobal const patcopy =  15728673\nglobal const patpaint =  16452105\nglobal const patinvert =  5898313\nglobal const dstinvert =  5570569\nglobal const blackness =  66\nglobal const whiteness =  16711778\n\nglobal const r2_black =  1\nglobal const r2_notmergepen =  2\nglobal const r2_masknotpen =  3\nglobal const r2_notcopypen =  4\nglobal const r2_maskpennot =  5\nglobal const r2_not =  6\nglobal const r2_xorpen =  7\nglobal const r2_notmaskpen =  8\nglobal const r2_maskpen =  9\nglobal const r2_notxorpen =  10\nglobal const r2_nop =  11\nglobal const r2_mergenotpen =  12\nglobal const r2_copypen =  13\nglobal const r2_mergepennot =  14\nglobal const r2_mergepen =  15\nglobal const r2_white =  16\nglobal const r2_last =  16\n\nglobal const gdi_error =  4294967295\nglobal const hgdi_error =  4294967295\nglobal const clr_invalid =  4278190080\nglobal const clr_default =  4278190080\nglobal const clr_none =  4294967295\nglobal const ofn_readonly =  1\nglobal const ofn_overwriteprompt =  2\nglobal const ofn_hidereadonly =  4\nglobal const ofn_nochangedir =  8\nglobal const ofn_showhelp =  16\nglobal const ofn_enablehook =  32\nglobal const ofn_enabletemplate =  64\nglobal const ofn_enabletemplatehandle =  128\nglobal const ofn_novalidate =  256\nglobal const ofn_allowmultiselect =  512\nglobal const ofn_extensiondifferent =  1024\nglobal const ofn_pathmustexist =  2048\nglobal const ofn_filemustexist =  4096\nglobal const ofn_createprompt =  8192\nglobal const ofn_shareaware =  16384\nglobal const ofn_noreadonlyreturn =  32768\nglobal const ofn_notestfilecreate =  65536\nglobal const ofn_nonetworkbutton =  131072\nglobal const ofn_nolongnames =  262144\nglobal const ofn_explorer =  524288\nglobal const ofn_nodereferencelinks =  1048576\nglobal const ofn_longnames =  2097152\nglobal const ofn_sharefallthrough =  2\nglobal const ofn_sharenowarn =  1\nglobal const ofn_sharewarn =  0\n!global const gmem_fixed =  0\n!global const gmem_moveable =  2\n!global const gmem_nocompact =  16\n!global const gmem_nodiscard =  32\n!global const gmem_zeroinit =  64\n!global const gmem_modify =  128\n!global const gmem_discardable =  256\n!global const gmem_not_banked =  4096\n!global const gmem_share =  8192\n!global const gmem_ddeshare =  8192\n!global const gmem_notify =  16384\n!global const gmem_lower =  4096\n!global const gmem_valid_flags =  32626\n!global const gmem_invalid_handle =  32768\n!global const gmem_clipboard =  8194\n!global const ghnd =  66\n!global const gptr =  64\n!global const pd_allpages =  0\n!global const pd_collate =  16\n!global const pd_disableprinttofile =  524288\n!global const pd_enableprinthook =  4096\n!global const pd_enableprinttemplate =  16384\n!global const pd_enableprinttemplatehandle =  65536\n!global const pd_enablesetuphook =  8192\n!global const pd_enablesetuptemplate =  32768\n!global const pd_enablesetuptemplatehandle =  131072\n!global const pd_hideprinttofile =  1048576\n!global const pd_nopagenums =  8\n!global const pd_noselection =  4\n!global const pd_nowarning =  128\n!global const pd_pagenums =  2\n!global const pd_printsetup =  64\n!global const pd_printtofile =  32\n!global const pd_returndc =  256\n!global const pd_returndefault =  1024\n!global const pd_returnic =  512\n!global const pd_selection =  1\n!global const pd_showhelp =  2048\n!global const pd_usedevmodecopies =  262144\n!global const pd_usedevmodecopiesandcollate =  262144\nglobal const dib_rgb_colours =  0\nglobal const dib_pal_colours =  1\nglobal const dib_pal_indices =  2\nglobal const dib_pal_physindices =  2\nglobal const dib_pal_logindices =  4\nglobal const stm_seticon =  368\nglobal const stm_setimage =  370\nglobal const lr_loadfromfile =  16\nglobal const image_bitmap =  0\nglobal const image_icon =  1\nglobal const lr_copydeleteorg =  8\nglobal const lr_copyreturnorg =  4\nglobal const lr_monochrome =  1\nglobal const lr_createdibsection =  8192\nglobal const lr_defaultsize =  64\nglobal const ss_icon =  3\nglobal const ss_bitmap =  14\nglobal const gcl_menuname =  -8\nglobal const gcl_hbrbackground =  -10\nglobal const gcl_hcursor =  -12\nglobal const gcl_hicon =  -14\nglobal const gcl_hmodule =  -16\nglobal const gcl_cbwndextra =  -18\nglobal const gcl_cbclsextra =  -20\nglobal const gcl_wndproc =  -24\nglobal const gcl_style =  -26\nglobal const gcw_atom =  -32\nglobal const colour_scrollbar =  0\nglobal const colour_background =  1\nglobal const colour_desktop =  1\nglobal const colour_activecaption =  2\nglobal const colour_inactivecaption =  3\nglobal const colour_menu =  4\nglobal const colour_window =  5\nglobal const colour_windowframe =  6\nglobal const colour_menutext =  7\nglobal const colour_windowtext =  8\nglobal const colour_captiontext =  9\nglobal const colour_activeborder =  10\nglobal const colour_inactiveborder =  11\nglobal const colour_appworkspace =  12\nglobal const colour_highlight =  13\nglobal const colour_highlighttext =  14\nglobal const colour_btnface =  15\nglobal const colour_3dface =  15\nglobal const colour_btnshadow =  16\nglobal const colour_3dshadow =  16\nglobal const colour_graytext =  17\nglobal const colour_btntext =  18\nglobal const colour_inactivecaptiontext =  19\nglobal const colour_btnhighlight =  20\nglobal const colour_3dhilight =  20\nglobal const colour_3ddkshadow =  21\nglobal const colour_3dlight =  22\nglobal const colour_infotext =  23\nglobal const colour_infobk =  24\nglobal const colour_tooltipbk =  24\nglobal const mk_lbutton =  1\nglobal const mk_rbutton =  2\nglobal const mk_shift =  4\nglobal const mk_control =  8\nglobal const mk_mbutton =  16\nglobal const cbm_createdib =  2\nglobal const cbm_init =  4\nglobal const cc_enablehook =  16\nglobal const cc_enabletemplate =  32\nglobal const cc_enabletemplatehandle =  64\nglobal const cc_fullopen =  2\nglobal const cc_preventfullopen =  4\nglobal const cc_rgbinit =  1\nglobal const cc_showhelp =  8\nglobal const cc_solidcolour =  128\nglobal const cf_screenfonts =  1\nglobal const cf_printerfonts =  2\nglobal const cf_effects =  256\nglobal const size_restored =  0\nglobal const size_minimized =  1\nglobal const size_maximized =  2\nglobal const size_maxshow =  3\nglobal const size_maxhide =  4\n!global const gwl_wndproc =  -4\n!global const gwl_hinstance =  -6\n!global const gwl_hwndparent =  -8\n!global const gwl_style =  -16\n!global const gwl_exstyle =  -20\nglobal const gwl_userdata =  -21\nglobal const gwl_id =  -12\nglobal const ta_top =  0\nglobal const ta_left =  0\nglobal const ta_noupdatecp =  0\nglobal const ta_updatecp =  1\nglobal const ta_right =  2\nglobal const ta_centre =  6\nglobal const vta_centre =  6\nglobal const ta_bottom =  8\nglobal const ta_baseline =  24\nglobal const vta_baseline =  24\nglobal const ta_rtlreading =  256\nglobal const aligntop =  0\nglobal const alignbottom =  8\nglobal const alignbaseline =  24\nglobal const aligncentre =  6\nglobal const alignleft =  0\nglobal const alignright =  2\n\nglobal const em_exgetsel =  1076\nglobal const em_exlimittext =  1077\nglobal const em_exlinefromchar =  1078\nglobal const em_exsetsel =  1079\nglobal const em_getparaformat =  1085\nglobal const em_setparaformat =  1095\nglobal const em_streamin =  1097\nglobal const em_streamout =  1098\nglobal const em_gettextrange =  1099\nglobal const em_findtext =  1080\nglobal const em_findtextex =  1103\n\n!global const ttf_idishwnd =  1\n!global const ttf_centretip =  2\n!global const ttf_rtlreading =  4\n!global const ttf_subclass =  16\n!global const ttf_track =  32\n!global const ttf_absolute =  128\n!global const ttf_transparent =  256\n!global const ttf_di_setitem =  32768\n\nglobal const hwnd_top =  0\nglobal const hwnd_bottom =  1\nglobal const hwnd_topmost =  -1\nglobal const hwnd_notopmost =  -2\n\nglobal const normalwind =  0\nglobal const modalwind =  -1\nglobal const dialogwind =  -2\nglobal const minimize =  2\nglobal const maximize =  3\nglobal const shiftmask =  1\nglobal const controlmask =  2\nglobal const altmask =  4\nglobal const windowcolour =  15\nglobal const ps_geometric =  65536\nglobal const ps_cosmetic =  0\nglobal const ps_alternate =  8\nglobal const ps_solid =  0\nglobal const ps_dash =  1\nglobal const ps_dot =  2\nglobal const ps_dashdot =  3\nglobal const ps_dashdotdot =  4\nglobal const ps_null =  5\nglobal const ps_insideframe =  6\nglobal const ps_userstyle =  7\nglobal const ps_endcap_round =  0\nglobal const ps_endcap_square =  256\nglobal const ps_endcap_flat =  512\nglobal const ps_join_bevel =  4096\nglobal const ps_join_miter =  8192\nglobal const ps_join_round =  0\nglobal const ps_style_mask =  15\nglobal const ps_endcap_mask =  3840\nglobal const ps_type_mask =  983040\nglobal const bs_solid =  0\nglobal const bs_hollow =  1\nglobal const bs_null =  1\nglobal const bs_hatched =  2\nglobal const bs_pattern =  3\nglobal const bs_dibpattern =  5\nglobal const bs_dibpatternpt =  6\nglobal const bs_pattern8x8 =  7\nglobal const bs_dibpattern8x8 =  8\nglobal const hs_horizontal =  0\nglobal const hs_vertical =  1\nglobal const hs_fdiagonal =  2\nglobal const hs_bdiagonal =  3\nglobal const hs_cross =  4\nglobal const hs_diagcross =  5\n\n!global const gl_points =  0\n!global const gl_lines =  1\n!global const gl_line_loop =  2\n!global const gl_line_strip =  3\n!global const gl_triangles =  4\n!global const gl_triangle_strip =  5\n!global const gl_triangle_fan =  6\n!global const gl_quads =  7\n!global const gl_quad_strip =  8\n!global const gl_polygon =  9\n\nglobal const spi_getworkarea =  48\n\nproc start=\nend\n\n"
    data     i64       "!import winmessages\n!import winconsts\n!import gxmisc\n!import winapi\n\n!module winapi\n\nexport var hwapplic=nil\nexport var hwchild=nil\nexport var iswin32\nexport var screendc\n\nexport var nglobalfonts=0\nexport var fonttable::=()\t\t\t![]font handles\nexport var fontdimtable::=()\t\t![]rpoint (width,total line height)\nexport var fontvdimtable::=()\t\t![]rpoint (ascenders, descenders) \n\nproc start\t=\n\tinitdata()\nend\n\nproc initdata=\n!CPL \"---------WINGXLIB\"\n\tiswin32:=(getos()=\"W32\")\n\tscreendc:=getdc(nil)\n\n\tfonttable:=(0,)*20\n\tfontdimtable:=(0,)*20\n\tfontvdimtable:=(0,)*20\n\n\tfonttable[1]:=getstockobject(17)\t!default gui\n\tfonttable[2]:=getstockobject(13)\t!system font\n\tfonttable[3]:=getstockobject(16)\t!system fixed\n\tfonttable[4]:=getstockobject(10)\t!oem fixed\n\tfor i:=1 to 4 do\n\t\tfontdimtable[i]::=ws_point(0,0)\n\t\tfontvdimtable[i]::=ws_point(0,0)\n\tod\n\tnglobalfonts:=4\nend\n\nfunc checkoption(optionnames,optionvalues,name,default=-1)=\n!search for option with given name\n!return value of option, or -1 if not present\n!options (which can be void) will be a list of (name,value) list pairs\n\n\tn:=name in optionnames\n\tif not n then return default fi\n\treturn optionvalues[n]\nend\n\nglobal proc wx_waitmess=\n\twindmsg:=new((iswin32|ws_msg32|ws_msg64))\n\n\tdo\n\t\tif getmessage(&windmsg,nil,0,0)<>0 then\n\t\t\tw:=windmsg.hwnd\n\t\t\tif windmsg.message=wm_keydown and windmsg.wparam=27 then exit fi\n\t\t\tif windmsg.message=wm_timer then CPL \"TIMER!!\" fi\n\t\t\ttranslatemessage(&windmsg)\n\t\t\tdispatchmessage(&windmsg)\n\t\t\tif windmsg.message=wm_close then exit fi\n\t\telse\n\t\t\texit\n\t\tfi\n\tod\nend\n\nglobal func wx_getw(hwnd)=\n!return allwindow-index of window that has been stored into it\n\tn:=getwindowlongptr(hwnd, gwl_userdata)\n\treturn n\nend\n\nglobal proc wx_setw(hwnd,index)=\n!store mm window handle into win32 window\n!index is .gindex (index into allwindows)\n\tsetwindowlongptr(hwnd, gwl_userdata, index)\nend\n\nglobal func wx_gettextwidth(hdc,s)=\n\tsize:=new(ws_point)\n\tgettextextentpoint32(hdc,s,s.len,&size)\n\treturn size.x\nend\n\nglobal func wx_createpopup(?caption,?pos,?dim,?options,owner=nil)=\n!wrapper around win32 createwindow\n!return win32 handle to newly created window\n\tconst gap=40\n\tconst smallestwidth=150\n\n\tif options.isvoid then\n options:=[wf_caption:1,wf_border:wbs_resize]\n\tfi\n\n\tposx:=posy:=-1\n\tdimx:=640\n\tdimy:=480\n\tfcentre:=0\n\tfautopos:=0\n\tfmax:=fdesktop:=0\n!\tfconsole:=0\n\n\tif caption.isvoid then caption:=\"<No Caption>\" fi\n\n\tif dim.defined then\n\t\tif dim.isstring and dim=\"max\" then\n\t\t\tfmax:=1\n\t\telsif dim.isstring and dim=\"desktop\" then\n\t\t\tfdesktop:=1\n!\t\telsif dim.isstring and dim=\"console\" then\n!\t\t\tfconsole:=1\n\t\telse\n\t\t\tdimx:=dim[1]\n\t\t\tdimy:=dim[2]\n\t\tfi\n\tfi\n\n\tif pos.isvoid or pos=\"cent\" then\n\t\tfcentre:=1\n\telsif pos=\"auto\" then\n\t\tfautopos:=1\n\telsif pos.defined and not pos.isstring then\n\t\tposx:=pos[1]\n\t\tposy:=pos[2]\n\telse\t\t\t\t!check options?\n\t\tabort(\"gxcw bad pos\")\n\tfi\n\n\tbstyle:=bxstyle:=0\n\tnocap:=0\t\t\t!whether to suppress caption\n\n\tframex:=framey:=0\n\n\tcase options{wf_border,wbs_resize}\n\twhen wbs_none then\t\t!no border\n\t\tnocap:=1\n\t\tframex:=0\n\t\tframey:=0\n\twhen wbs_simple then\t\t!single line\n\t\tnocap:=1\n\t\tbstyle:=ws_border\n\t\tframex:=1\n\t\tframey:=1\n\twhen wbs_thick then\t\t!thick line\n\t\tbstyle:=ws_dlgframe\n\t\tfixedframe:=0\n\t\tframex:=getsystemmetrics(sm_cxfixedframe)\n\t\tframey:=getsystemmetrics(sm_cyfixedframe)\n\twhen wbs_resize then\n\t\tbstyle:=ws_sizebox\n\t\tframex:=getsystemmetrics(sm_cxsizeframe)\n\t\tframey:=getsystemmetrics(sm_cysizeframe)\n\twhen wbs_sunken,wbs_sunken2 then\t\t!sunken\n\t\tbstyle:=ws_dlgframe\n\t\tbxstyle:=ws_ex_clientedge\n\t\tframex:=5\n\t\tframey:=5\n\twhen wbs_sunkenrs then\n\t\tbstyle:=ws_sizebox\n\t\tbxstyle:=ws_ex_clientedge\n\t\tframex:=6\n\t\tframey:=6\n\tesac\n\n\tcapheight:=getsystemmetrics(sm_cycaption)\n\tmbheight:=getsystemmetrics(sm_cymenu)\n\n\tstyle:=0\n\texstyle:=0\n\n\tif options{wf_show,1} then\n\t\tstyle ior:=ws_visible\n\tfi\n\n\tmxleft:=framex\n\tmxright:=framey\n\tmytop:=framey+capheight\n\tmybottom:=framey\n\tshowstyle:=sw_shownormal\n\n\thcwmenu:=nil\n\tif options{wf_menu,0}=1 then\n\t\tmytop+:=mbheight\n\t\thcwmenu:=createmenu()\n\t\tappendmenu(hcwmenu,0,998,\"fred\")\n\tfi\n\n\tstyle ior:=ws_clipchildren\n\n\tif nocap or options{wf_caption,1}=0 then\n\t\tmytop-:=capheight\n\t\tstyle ior:=ws_popup\n\tfi\n\n\tif options{wf_iframe,0}=0 then\n\t\tif not fautopos then\n\t\t\tposx-:=mxleft\n\t\t\tposy-:=mytop\n\t\tfi\n\t\tdimx+:=mxleft+mxright\n\t\tdimy+:=mytop+mybottom\n\tfi\n\n\tif fcentre or options{wf_cent,0}=1 then\n\t\tfautopos:=0\n\t\tbox:=new(ws_rect)\n\t\tsystemparametersinfoa(spi_getworkarea,0,&box,0)\n\t\tposx:=box.rightx%2-dimx%2\n\t\tposy:=(box.bottom-box.top)%2-dimy%2+box.top\n\tfi\n\n\tif fmax or options{wf_max,0} then\n\t\tshowstyle:=sw_maximize\n\t\tstyle ior:=ws_maximize\n\tfi\n\n\n\tif options{wf_minmax,1}=1 then\n\t\tstyle ior:=(ws_maximizebox ior ws_minimizebox)\n\n\tfi\n\n\tif options{wf_sysmenu,1}=1 then\n\t\tstyle ior:=ws_sysmenu\n\tfi\n\n\tif fautopos=0 and options{wf_clip,0}=1 then\n\t\tbox:=new(ws_rect)\n\t\tsystemparametersinfoa(spi_getworkarea,0,&box,0)\n\n\t\tif posx<box.leftx+gap then posx:=box.leftx+gap fi\n\n\t\tif posy<box.top+gap then posy:=box.top+gap fi\n\t\tdimxmin:=dimx max smallestwidth\n\t\tif posx+dimxmin>=box.rightx+gap then posx:=box.rightx-gap-dimxmin fi\n\t\tif posy+dimy>=box.bottom+gap then posy:=box.bottom-gap-dimy fi\n\telsif fautopos then\n\t\tposx:=posy:=cw_usedefault\n\tfi\n\n\tif fdesktop or options{wf_desktop,0}=1 then\n\t\tbox:=new(ws_rect)\n\t\tsystemparametersinfoa(spi_getworkarea,0,&box,0)\n\t\tposx:=box.leftx\n\t\tposy:=box.top\n\t\tdimx:=box.rightx-box.leftx\n\t\tdimy:=box.bottom-box.top\n\tfi\n\n\tif options{wf_toolwind,0}=1 then\n\t\texstyle ior:=ws_ex_toolwindow\n\tfi\n\n\tclassname:=\"pcc001\"\n\n\tSTYLE IOR:=WS_VISIBLE\n\n\tstyle ior:=bstyle\n\texstyle ior:=bxstyle\n\n!\tif fconsole then\n!\t\thwnd:=getconsolewindow()\n!CPL \"CONSOLE\", =HWND\n!STOP\n!\n!\telse\n\n\t\thwnd:=createwindowex(\n\t\t\texstyle,\n\t\t\tclassname,\n\t\t\tcaption,\n\t\t\tstyle,\n\t\t\tposx,posy,\t\t\t!initial position and size\n\t\t\tdimx,dimy,\n\t\t\towner,\t\t\t!will be 0 for 1st window, other popups use hwapplic as owner\n\t\t\thcwmenu,\t\t\t!menu handle\n\t\t\tnil,\t!proginstance,\t\t!instance handle\n\t\t\tnil)\t\t\t!creation params\n!\tfi\n\n\tif hwnd=nil then\n\t\te:=getlasterror()\n\t\tabort(\"wx:Can't create popup window \"+tostr(e))\n\tfi\n\treturn hwnd\nend\n\nglobal func wx_createcontrol(?pos,?dim,border=wbs_simple,owner)=\n!wrapper around win32 createwindow\n!return win32 handle to newly created window\n\tconst gap=40\n\tconst smallestwidth=150\n\n\tposx:=posy:=0\n\tdimx:=160\n\tdimy:=120\n\n\tif dim.defined then\n\t\tdimx:=dim[1]\n\t\tdimy:=dim[2]\n\tfi\n\n\tif pos.defined then\n\t\tposx:=pos[1]\n\t\tposy:=pos[2]\n\tfi\n\n\tbstyle:=bxstyle:=0\n\n\tcase border\n\twhen wbs_none then\t\t\t!no border\n\twhen wbs_simple then\t\t!single line\n\t\tbstyle:=ws_border\n\telse\n\t\tpcerror(\"createcontrol/bad border \"+wbsnames[border])\n\tesac\n\n\tstyle:=0\n\texstyle:=0\n\n\tstyle ior:=ws_clipchildren\n\n\tclassname:=\"pcc001\"\n\n\tstyle ior:=ws_child\n\tstyle ior:=ws_visible\n\n\tstyle ior:=bstyle\n\texstyle ior:=bxstyle\n\n\thwnd:=createwindowex(\n\t\texstyle,\n\t\tclassname,\n\t\tnil,\n\t\tstyle,\n\t\tposx,posy,\t\t\t!initial position and size\n\t\tdimx,dimy,\n\t\towner,\t\t\t\t!will be 0 for 1st window, other popups use hwapplic as owner\n\t\tnil,\t\t\t\t!menu handle\n\t\tnil,\n\t\tnil)\t\t\t\t!creation params\n\n\tif hwnd=0 then\n\t\te:=getlasterror()\n\t\tabort(\"wx:Can't create child window \"+tostr(e))\n\tfi\n\n\treturn hwnd\nend\n\n"
    data     i64       "export var winmessagenames=[\n\t(0:\"wm_null\"),\n\t(1:\"wm_create\"),\n\t(2:\"wm_destroy\"),\n\t(3:\"wm_move\"),\n\t(4:\"pgk_menu\"),\n\t(5:\"wm_size\"),\n\t(6:\"wm_activate\"),\n\t(7:\"wm_setfocus\"),\n\t(8:\"wm_killfocus\"),\n\t(9:\"cbn_selendok\"),\n\t(10:\"wm_enable\"),\n\t(11:\"wm_setredraw\"),\n\t(12:\"wm_settext\"),\n\t(13:\"wm_gettext\"),\n\t(14:\"wm_gettextlength\"),\n\t(15:\"wm_paint\"),\n\t(16:\"wm_close\"),\n\t(17:\"wm_queryendsession\"),\n\t(18:\"wm_quit\"),\n\t(19:\"wm_queryopen\"),\n\t(20:\"wm_erasebkgnd\"),\n\t(21:\"wm_syscolorchange\"),\n\t(22:\"wm_endsession\"),\n\t(24:\"wm_showwindow\"),\n\t(26:\"wm_wininichange\"),\n\t(27:\"wm_devmodechange\"),\n\t(28:\"wm_activateapp\"),\n\t(29:\"wm_fontchange\"),\n\t(30:\"wm_timechange\"),\n\t(31:\"wm_cancelmode\"),\n\t(32:\"wm_setcursor\"),\n\t(33:\"wm_mouseactivate\"),\n\t(34:\"wm_childactivate\"),\n\t(35:\"wm_queuesync\"),\n\t(36:\"wm_getminmaxinfo\"),\n\t(38:\"wm_painticon\"),\n\t(39:\"wm_iconerasebkgnd\"),\n\t(40:\"wm_nextdlgctl\"),\n\t(42:\"wm_spoolerstatus\"),\n\t(43:\"wm_drawitem\"),\n\t(44:\"wm_measureitem\"),\n\t(45:\"wm_deleteitem\"),\n\t(46:\"wm_vkeytoitem\"),\n\t(47:\"wm_chartoitem\"),\n\t(48:\"wm_setfont\"),\n\t(49:\"wm_getfont\"),\n\t(50:\"wm_sethotkey\"),\n\t(51:\"wm_gethotkey\"),\n\t(55:\"wm_querydragicon\"),\n\t(57:\"wm_compareitem\"),\n\t(64:\"tbif_size\"),\n\t(65:\"wm_compacting\"),\n\t(70:\"wm_windowposchanging\"),\n\t(71:\"wm_windowposchanged\"),\n\t(72:\"wm_power\"),\n\t(74:\"wm_copydata\"),\n\t(75:\"wm_canceljournal\"),\n\t(78:\"wm_notify\"),\n\t(80:\"wm_inputlangchangerequest\"),\n\t(81:\"wm_inputlangchange\"),\n\t(82:\"wm_tcard\"),\n\t(83:\"wm_help\"),\n\t(84:\"wm_userchanged\"),\n\t(85:\"wm_notifyformat\"),\n\t(123:\"wm_contextmenu\"),\n\t(124:\"wm_stylechanging\"),\n\t(125:\"wm_stylechanged\"),\n\t(126:\"wm_displaychange\"),\n\t(127:\"wm_geticon\"),\n\t(128:\"wm_seticon\"),\n\t(129:\"wm_nccreate\"),\n\t(130:\"wm_ncdestroy\"),\n\t(131:\"wm_nccalcsize\"),\n\t(132:\"wm_nchittest\"),\n\t(133:\"wm_ncpaint\"),\n\t(134:\"wm_ncactivate\"),\n\t(135:\"wm_getdlgcode\"),\n\t(160:\"wm_ncmousemove\"),\n\t(161:\"wm_nclbuttondown\"),\n\t(162:\"wm_nclbuttonup\"),\n\t(163:\"wm_nclbuttondblclk\"),\n\t(164:\"wm_ncrbuttondown\"),\n\t(165:\"wm_ncrbuttonup\"),\n\t(166:\"wm_ncrbuttondblclk\"),\n\t(167:\"wm_ncmbuttondown\"),\n\t(168:\"wm_ncmbuttonup\"),\n\t(169:\"wm_ncmbuttondblclk\"),\n\t(176:\"em_getsel\"),\n\t(177:\"em_setsel\"),\n\t(178:\"em_getrect\"),\n\t(179:\"em_setrect\"),\n\t(180:\"em_setrectnp\"),\n\t(181:\"em_scroll\"),\n\t(182:\"em_linescroll\"),\n\t(183:\"em_scrollcaret\"),\n\t(184:\"em_getmodify\"),\n\t(185:\"em_setmodify\"),\n\t(186:\"em_getlinecount\"),\n\t(187:\"em_lineindex\"),\n\t(188:\"em_sethandle\"),\n\t(189:\"em_gethandle\"),\n\t(190:\"em_getthumb\"),\n\t(193:\"em_linelength\"),\n\t(194:\"em_replacesel\"),\n\t(196:\"em_getline\"),\n\t(197:\"em_setlimittext\"),\n\t(198:\"em_canundo\"),\n\t(199:\"em_undo\"),\n\t(200:\"em_fmtlines\"),\n\t(201:\"em_linefromchar\"),\n\t(203:\"em_settabstops\"),\n\t(204:\"em_setpasswordchar\"),\n\t(205:\"em_emptyundobuffer\"),\n\t(206:\"em_getfirstvisibleline\"),\n\t(207:\"em_setreadonly\"),\n\t(208:\"em_setwordbreakproc\"),\n\t(209:\"em_getwordbreakproc\"),\n\t(210:\"em_getpasswordchar\"),\n\t(211:\"em_setmargins\"),\n\t(212:\"em_getmargins\"),\n\t(213:\"em_getlimittext\"),\n\t(214:\"em_posfromchar\"),\n\t(215:\"em_charfrompos\"),\n\t(224:\"sbm_setpos\"),\n\t(225:\"sbm_getpos\"),\n\t(226:\"sbm_setrange\"),\n\t(227:\"sbm_getrange\"),\n\t(228:\"sbm_enable_arrows\"),\n\t(230:\"sbm_setrangeredraw\"),\n\t(233:\"sbm_setscrollinfo\"),\n\t(234:\"sbm_getscrollinfo\"),\n\t(240:\"bm_getcheck\"),\n\t(241:\"bm_setcheck\"),\n\t(242:\"bm_getstate\"),\n\t(243:\"bm_setstate\"),\n\t(244:\"bm_setstyle\"),\n\t(245:\"bm_click\"),\n\t(246:\"bm_getimage\"),\n\t(247:\"bm_setimage\"),\n\t(255:\"wm_input\"),\n\t(256:\"wm_keydown\"),\n\t(257:\"wm_keyup\"),\n\t(258:\"wm_char\"),\n\t(259:\"wm_deadchar\"),\n\t(260:\"wm_syskeydown\"),\n\t(261:\"wm_syskeyup\"),\n\t(262:\"wm_syschar\"),\n\t(263:\"wm_sysdeadchar\"),\n\t(269:\"wm_ime_startcomposition\"),\n\t(270:\"wm_ime_endcomposition\"),\n\t(271:\"wm_ime_composition\"),\n\t(272:\"wm_initdialog\"),\n\t(273:\"wm_command\"),\n\t(274:\"wm_syscommand\"),\n\t(275:\"wm_timer\"),\n\t(276:\"wm_hscroll\"),\n\t(277:\"wm_vscroll\"),\n\t(278:\"wm_initmenu\"),\n\t(279:\"wm_initmenupopup\"),\n\t(287:\"wm_menuselect\"),\n\t(288:\"wm_menuchar\"),\n\t(289:\"wm_enteridle\"),\n\t(290:\"wm_menurbuttonup\"),\n\t(295:\"wm_changeuistate\"),\n\t(296:\"wm_updateuistate\"),\n\t(297:\"wm_queryuistate\"),\n\t(306:\"wm_ctlcolormsgbox\"),\n\t(307:\"wm_ctlcoloredit\"),\n\t(308:\"wm_ctlcolorlistbox\"),\n\t(309:\"wm_ctlcolorbtn\"),\n\t(310:\"wm_ctlcolordlg\"),\n\t(311:\"wm_ctlcolorscrollbar\"),\n\t(312:\"wm_ctlcolorstatic\"),\n\t(320:\"cb_geteditsel\"),\n\t(321:\"cb_limittext\"),\n\t(322:\"cb_seteditsel\"),\n\t(323:\"cb_addstring\"),\n\t(324:\"cbem_deleteitem\"),\n\t(325:\"cb_dir\"),\n\t(326:\"cb_getcount\"),\n\t(327:\"cb_getcursel\"),\n\t(328:\"cb_getlbtext\"),\n\t(329:\"cb_getlbtextlen\"),\n\t(330:\"cb_insertstring\"),\n\t(331:\"cb_resetcontent\"),\n\t(332:\"cb_findstring\"),\n\t(333:\"cb_selectstring\"),\n\t(334:\"cb_setcursel\"),\n\t(335:\"cb_showdropdown\"),\n\t(336:\"cb_getitemdata\"),\n\t(337:\"cb_setitemdata\"),\n\t(338:\"cb_getdroppedcontrolrect\"),\n\t(339:\"cb_setitemheight\"),\n\t(340:\"cb_getitemheight\"),\n\t(341:\"cb_setextendedui\"),\n\t(342:\"cb_getextendedui\"),\n\t(343:\"cb_getdroppedstate\"),\n\t(344:\"cb_findstringexact\"),\n\t(345:\"cb_setlocale\"),\n\t(346:\"cb_getlocale\"),\n\t(347:\"cb_gettopindex\"),\n\t(348:\"cb_settopindex\"),\n\t(349:\"cb_gethorizontalextent\"),\n\t(350:\"cb_sethorizontalextent\"),\n\t(351:\"cb_getdroppedwidth\"),\n\t(352:\"cb_setdroppedwidth\"),\n\t(353:\"cb_initstorage\"),\n\t(368:\"stm_seticon\"),\n\t(369:\"stm_geticon\"),\n\t(370:\"stm_setimage\"),\n\t(371:\"stm_getimage\"),\n\t(384:\"lb_addstring\"),\n\t(385:\"lb_insertstring\"),\n\t(386:\"lb_deletestring\"),\n\t(387:\"lb_selitemrangeex\"),\n\t(388:\"lb_resetcontent\"),\n\t(389:\"lb_setsel\"),\n\t(390:\"lb_setcursel\"),\n\t(391:\"lb_getsel\"),\n\t(392:\"lb_getcursel\"),\n\t(393:\"lb_gettext\"),\n\t(394:\"lb_gettextlen\"),\n\t(395:\"lb_getcount\"),\n\t(396:\"lb_selectstring\"),\n\t(397:\"lb_dir\"),\n\t(398:\"lb_gettopindex\"),\n\t(399:\"lb_findstring\"),\n\t(400:\"lb_getselcount\"),\n\t(401:\"lb_getselitems\"),\n\t(402:\"lb_settabstops\"),\n\t(403:\"lb_gethorizontalextent\"),\n\t(404:\"lb_sethorizontalextent\"),\n\t(405:\"lb_setcolumnwidth\"),\n\t(406:\"lb_addfile\"),\n\t(407:\"lb_settopindex\"),\n\t(408:\"lb_getitemrect\"),\n\t(409:\"lb_getitemdata\"),\n\t(410:\"lb_setitemdata\"),\n\t(411:\"lb_selitemrange\"),\n\t(412:\"lb_setanchorindex\"),\n\t(413:\"lb_getanchorindex\"),\n\t(414:\"lb_setcaretindex\"),\n\t(415:\"lb_getcaretindex\"),\n\t(416:\"lb_setitemheight\"),\n\t(417:\"lb_getitemheight\"),\n\t(418:\"lb_findstringexact\"),\n\t(421:\"lb_setlocale\"),\n\t(422:\"lb_getlocale\"),\n\t(423:\"lb_setcount\"),\n\t(424:\"lb_initstorage\"),\n\t(425:\"lb_itemfrompoint\"),\n\t(512:\"wm_mousemove\"),\n\t(513:\"wm_lbuttondown\"),\n\t(514:\"wm_lbuttonup\"),\n\t(515:\"wm_lbuttondblclk\"),\n\t(516:\"wm_rbuttondown\"),\n\t(517:\"wm_rbuttonup\"),\n\t(518:\"wm_rbuttondblclk\"),\n\t(519:\"wm_mbuttondown\"),\n\t(520:\"wm_mbuttonup\"),\n\t(521:\"wm_mbuttondblclk\"),\n\t(522:\"wm_mousewheel\"),\n\t(523:\"wm_xbuttondown\"),\n\t(524:\"wm_xbuttonup\"),\n\t(525:\"wm_xbuttondblclk\"),\n\t(528:\"wm_parentnotify\"),\n\t(529:\"wm_entermenuloop\"),\n\t(530:\"wm_exitmenuloop\"),\n\t(531:\"wm_nextmenu\"),\n\t(532:\"wm_sizing\"),\n\t(533:\"wm_capturechanged\"),\n\t(534:\"wm_moving\"),\n\t(536:\"wm_powerbroadcast\"),\n\t(537:\"wm_devicechange\"),\n\t(544:\"wm_mdicreate\"),\n\t(545:\"wm_mdidestroy\"),\n\t(546:\"wm_mdiactivate\"),\n\t(547:\"wm_mdirestore\"),\n\t(548:\"wm_mdinext\"),\n\t(549:\"wm_mdimaximize\"),\n\t(550:\"wm_mditile\"),\n\t(551:\"wm_mdicascade\"),\n\t(552:\"wm_mdiiconarrange\"),\n\t(553:\"wm_mdigetactive\"),\n\t(560:\"wm_mdisetmenu\"),\n\t(561:\"wm_entersizemove\"),\n\t(562:\"wm_exitsizemove\"),\n\t(563:\"wm_dropfiles\"),\n\t(564:\"wm_mdirefreshmenu\"),\n\t(641:\"wm_ime_setcontext\"),\n\t(642:\"wm_ime_notify\"),\n\t(643:\"wm_ime_control\"),\n\t(644:\"wm_ime_compositionfull\"),\n\t(645:\"wm_ime_select\"),\n\t(646:\"wm_ime_char\"),\n\t(656:\"wm_ime_keydown\"),\n\t(657:\"wm_ime_keyup\"),\n\t(673:\"wm_mousehover\"),\n\t(675:\"wm_mouseleave\"),\n\t(689:\"wm_wtssession_change\"),\n\t(768:\"wm_cut\"),\n\t(769:\"wm_copy\"),\n\t(770:\"wm_paste\"),\n\t(771:\"wm_clear\"),\n\t(772:\"wm_undo\"),\n\t(773:\"wm_renderformat\"),\n\t(774:\"wm_renderallformats\"),\n\t(775:\"wm_destroyclipboard\"),\n\t(776:\"wm_drawclipboard\"),\n\t(777:\"wm_paintclipboard\"),\n\t(778:\"wm_vscrollclipboard\"),\n\t(779:\"wm_sizeclipboard\"),\n\t(780:\"wm_askcbformatname\"),\n\t(781:\"wm_changecbchain\"),\n\t(782:\"wm_hscrollclipboard\"),\n\t(783:\"wm_querynewpalette\"),\n\t(784:\"wm_paletteischanging\"),\n\t(785:\"wm_palettechanged\"),\n\t(786:\"wm_hotkey\"),\n\t(791:\"wm_print\"),\n\t(792:\"wm_printclient\"),\n\t(896:\"wm_penwinirst\"),\n\t(911:\"wm_penwinlast\"),\n\t(1024:\"infotipsize\"),\n\t(1025:\"cbem_insertitema\"),\n\t(1026:\"cbem_setimagelist\"),\n\t(1027:\"cbem_getimagelist\"),\n\t(1028:\"cbem_getitema\"),\n\t(1029:\"cbem_setitema\"),\n\t(1030:\"cbem_getcombocontrol\"),\n\t(1031:\"cbem_geteditcontrol\"),\n\t(1032:\"cbem_setexstyle\"),\n\t(1033:\"cbem_getextendedstyle\"),\n\t(1034:\"cbem_haseditchanged\"),\n\t(1035:\"cbem_insertitemw\"),\n\t(1036:\"cbem_setitemw\"),\n\t(1037:\"cbem_getitemw\"),\n\t(1038:\"cbem_setextendedstyle\"),\n\t(1039:\"ttm_getcurrenttoola\"),\n\t(1040:\"ttm_windowfrompoint\"),\n\t(1041:\"ttm_trackactivate\"),\n\t(1042:\"ttm_trackposition\"),\n\t(1043:\"ttm_settipbkcolor\"),\n\t(1044:\"ttm_settiptextcolor\"),\n\t(1045:\"ttm_getdelaytime\"),\n\t(1046:\"ttm_gettipbkcolor\"),\n\t(1047:\"ttm_gettiptextcolor\"),\n\t(1048:\"ttm_setmaxtipwidth\"),\n\t(1049:\"ttm_getmaxtipwidth\"),\n\t(1050:\"ttm_setmargin\"),\n\t(1051:\"ttm_getmargin\"),\n\t(1052:\"ttm_pop\"),\n\t(1053:\"tb_getitemrect\"),\n\t(1054:\"tb_buttonstructsize\"),\n\t(1055:\"tb_setbuttonsize\"),\n\t(1056:\"tb_setbitmapsize\"),\n\t(1057:\"tb_autosize\"),\n\t(1059:\"tb_gettooltips\"),\n\t(1060:\"tb_settooltips\"),\n\t(1061:\"tb_setparent\"),\n\t(1063:\"tb_setrows\"),\n\t(1064:\"tb_getrows\"),\n\t(1065:\"tb_getbitmapflags\"),\n\t(1066:\"tb_setcmdid\"),\n\t(1067:\"tb_changebitmap\"),\n\t(1068:\"tb_getbitmap\"),\n\t(1069:\"tb_getbuttontexta\"),\n\t(1070:\"tb_replacebitmap\"),\n\t(1071:\"tb_setindent\"),\n\t(1072:\"tb_setimagelist\"),\n\t(1073:\"tb_getimagelist\"),\n\t(1074:\"ttm_addtoolw\"),\n\t(1075:\"ttm_deltoolw\"),\n\t(1076:\"ttm_newtoolrectw\"),\n\t(1077:\"ttm_gettoolinfow\"),\n\t(1078:\"ttm_settoolinfow\"),\n\t(1079:\"ttm_hittestw\"),\n\t(1080:\"ttm_gettextw\"),\n\t(1081:\"ttm_updatetiptextw\"),\n\t(1082:\"ttm_enumtoolsw\"),\n\t(1083:\"ttm_getcurrenttoolw\"),\n\t(1084:\"tb_setmaxtextrows\"),\n\t(1085:\"tb_gettextrows\"),\n\t(1086:\"em_getseltext\"),\n\t(1087:\"em_hideselection\"),\n\t(1088:\"em_pastespecial\"),\n\t(1089:\"em_requestresize\"),\n\t(1090:\"em_selectiontype\"),\n\t(1091:\"tb_insertbuttonw\"),\n\t(1092:\"tb_addbuttonsw\"),\n\t(1093:\"tb_hittest\"),\n\t(1094:\"em_setolecallback\"),\n\t(1095:\"em_setparaformat\"),\n\t(1096:\"em_settargetdevice\"),\n\t(1097:\"em_streamin\"),\n\t(1098:\"em_streamout\"),\n\t(1099:\"tb_getbuttontextw\"),\n\t(1100:\"tb_saverestorew\"),\n\t(1101:\"tb_addstringw\"),\n\t(1102:\"em_getoptions\"),\n\t(1103:\"tb_getinsertmark\"),\n\t(1104:\"tb_setinsertmark\"),\n\t(1105:\"tb_insertmarkhittest\"),\n\t(1106:\"tb_movebutton\"),\n\t(1107:\"tb_getmaxsize\"),\n\t(1108:\"tb_setextendedstyle\"),\n\t(1109:\"tb_getextendedstyle\"),\n\t(1110:\"tb_getpadding\"),\n\t(1111:\"tb_setpadding\"),\n\t(1112:\"tb_setinsertmarkcolor\"),\n\t(1113:\"tb_getinsertmarkcolor\"),\n\t(1114:\"tb_mapacceleratorw\"),\n\t(1124:\"em_setpunctuation\"),\n\t(1125:\"wm_choosefont_setlogfont\"),\n\t(1126:\"wm_choosefont_setflags\"),\n\t(1127:\"udm_setpos\"),\n\t(1128:\"udm_getpos\"),\n\t(1129:\"udm_setbuddy\"),\n\t(1130:\"udm_getbuddy\"),\n\t(1131:\"udm_setaccel\"),\n\t(1132:\"udm_getaccel\"),\n\t(1133:\"udm_setbase\"),\n\t(1134:\"udm_getbase\"),\n\t(1135:\"psm_settitlea\"),\n\t(1136:\"psm_setwizbuttons\"),\n\t(1137:\"psm_pressbutton\"),\n\t(1138:\"psm_setcurselid\"),\n\t(1139:\"psm_setfinishtexta\"),\n\t(1140:\"psm_gettabcontrol\"),\n\t(1141:\"psm_isdialogmessage\"),\n\t(1142:\"psm_getcurrentpagehwnd\"),\n\t(1144:\"psm_settitlew\"),\n\t(1145:\"psm_setfinishtextw\"),\n\t(1157:\"dl_begindrag\"),\n\t(1158:\"dl_dragging\"),\n\t(1159:\"dl_dropped\"),\n\t(1160:\"dl_canceldrag\"),\n\t(1280:\"en_errspace\"),\n\t(1281:\"en_maxtext\"),\n\t(1537:\"en_hscroll\"),\n\t(1538:\"en_vscroll\"),\n\t(1792:\"en_msgfilter\"),\n\t(1793:\"en_requestresize\"),\n\t(1794:\"en_selchange\"),\n\t(1795:\"en_dropfiles\"),\n\t(1796:\"en_protected\"),\n\t(1797:\"en_correcttext\"),\n\t(1798:\"en_stopnoundo\"),\n\t(1799:\"en_imechange\"),\n\t(1800:\"en_saveclipboard\"),\n\t(1801:\"en_oleopfailed\"),\n\t(4096:\"lvm_getbkcolor\"),\n\t(4097:\"lvm_setbkcolor\"),\n\t(4098:\"lvm_getimagelist\"),\n\t(4099:\"lvm_setimagelist\"),\n\t(4100:\"lvm_getitemcount\"),\n\t(4101:\"lvm_getitema\"),\n\t(4102:\"lvm_setitema\"),\n\t(4103:\"lvm_insertitema\"),\n\t(4104:\"lvm_deleteitem\"),\n\t(4105:\"lvm_deleteallitems\"),\n\t(4106:\"lvm_getcallbackmask\"),\n\t(4107:\"lvm_setcallbackmask\"),\n\t(4108:\"lvm_getnextitem\"),\n\t(4109:\"lvm_finditema\"),\n\t(4110:\"lvm_getitemrect\"),\n\t(4111:\"lvm_setitemposition\"),\n\t(4112:\"lvm_getitemposition\"),\n\t(4113:\"lvm_getstringwidtha\"),\n\t(4114:\"lvm_hittest\"),\n\t(4115:\"lvm_ensurevisible\"),\n\t(4116:\"lvm_scroll\"),\n\t(4117:\"lvm_redrawitems\"),\n\t(4118:\"lvm_arrange\"),\n\t(4119:\"lvm_editlabela\"),\n\t(4120:\"lvm_geteditcontrol\"),\n\t(4121:\"lvm_getcolumna\"),\n\t(4122:\"lvm_setcolumna\"),\n\t(4123:\"lvm_insertcolumna\"),\n\t(4124:\"lvm_deletecolumn\"),\n\t(4125:\"lvm_getcolumnwidth\"),\n\t(4126:\"lvm_setcolumnwidth\"),\n\t(4129:\"lvm_createdragimage\"),\n\t(4130:\"lvm_getviewrect\"),\n\t(4131:\"lvm_gettextcolor\"),\n\t(4132:\"lvm_settextcolor\"),\n\t(4133:\"lvm_gettextbkcolor\"),\n\t(4134:\"lvm_settextbkcolor\"),\n\t(4135:\"lvm_gettopindex\"),\n\t(4136:\"lvm_getcountperpage\"),\n\t(4137:\"lvm_getorigin\"),\n\t(4138:\"lvm_update\"),\n\t(4139:\"lvm_setitemstate\"),\n\t(4140:\"lvm_getitemstate\"),\n\t(4141:\"lvm_getitemtexta\"),\n\t(4142:\"lvm_setitemtexta\"),\n\t(4143:\"lvm_setitemcount\"),\n\t(4144:\"lvm_sortitems\"),\n\t(4145:\"lvm_setitemposition32\"),\n\t(4146:\"lvm_getselectedcount\"),\n\t(4147:\"lvm_getitemspacing\"),\n\t(4148:\"lvm_getisearchstringa\"),\n\t(4171:\"lvm_getitemw\"),\n\t(4172:\"lvm_setitemw\"),\n\t(4173:\"lvm_insertitemw\"),\n\t(4179:\"lvm_finditemw\"),\n\t(4183:\"lvm_getstringwidthw\"),\n\t(4191:\"lvm_getcolumnw\"),\n\t(4192:\"lvm_setcolumnw\"),\n\t(4193:\"lvm_insertcolumnw\"),\n\t(4211:\"lvm_getitemtextw\"),\n\t(4212:\"lvm_setitemtextw\"),\n\t(4213:\"lvm_getisearchstringw\"),\n\t(4214:\"lvm_editlabelw\"),\n\t(4352:\"tvm_insertitema\"),\n\t(4353:\"tvm_deleteitem\"),\n\t(4354:\"tvm_expand\"),\n\t(4356:\"tvm_getitemrect\"),\n\t(4357:\"tvm_getcount\"),\n\t(4358:\"tvm_getindent\"),\n\t(4359:\"tvm_setindent\"),\n\t(4360:\"tvm_getimagelist\"),\n\t(4361:\"tvm_setimagelist\"),\n\t(4362:\"tvm_getnextitem\"),\n\t(4363:\"tvm_selectitem\"),\n\t(4364:\"tvm_getitema\"),\n\t(4365:\"tvm_setitema\"),\n\t(4366:\"tvm_editlabela\"),\n\t(4367:\"tvm_geteditcontrol\"),\n\t(4368:\"tvm_getvisiblecount\"),\n\t(4369:\"tvm_hittest\"),\n\t(4370:\"tvm_createdragimage\"),\n\t(4371:\"tvm_sortchildren\"),\n\t(4372:\"tvm_ensurevisible\"),\n\t(4373:\"tvm_sortchildrencb\"),\n\t(4374:\"tvm_endeditlabelnow\"),\n\t(4375:\"tvm_getisearchstringa\"),\n\t(4402:\"tvm_insertitemw\"),\n\t(4414:\"tvm_getitemw\"),\n\t(4415:\"tvm_setitemw\"),\n\t(4416:\"tvm_getisearchstringw\"),\n\t(4417:\"tvm_editlabelw\"),\n\t(4608:\"hdm_getitemcount\"),\n\t(4609:\"hdm_insertitema\"),\n\t(4610:\"hdm_deleteitem\"),\n\t(4611:\"hdm_getitema\"),\n\t(4612:\"hdm_setitema\"),\n\t(4613:\"hdm_layout\"),\n\t(4614:\"hdm_hittest\"),\n\t(4618:\"hdm_insertitemw\"),\n\t(4619:\"hdm_getitemw\"),\n\t(4620:\"hdm_setitemw\"),\n\t(4864:\"tcm_first\"),\n\t(4866:\"tcm_getimagelist\"),\n\t(4867:\"tcm_setimagelist\"),\n\t(4868:\"tcm_getitemcount\"),\n\t(4869:\"tcm_getitema\"),\n\t(4870:\"tcm_setitema\"),\n\t(4871:\"tcm_insertitema\"),\n\t(4872:\"tcm_deleteitem\"),\n\t(4873:\"tcm_deleteallitems\"),\n\t(4874:\"tcm_getitemrect\"),\n\t(4875:\"tcm_getcursel\"),\n\t(4876:\"tcm_setcursel\"),\n\t(4877:\"tcm_hittest\"),\n\t(4878:\"tcm_setitemextra\"),\n\t(4904:\"tcm_adjustrect\"),\n\t(4905:\"tcm_setitemsize\"),\n\t(4906:\"tcm_removeimage\"),\n\t(4907:\"tcm_setpadding\"),\n\t(4908:\"tcm_getrowcount\"),\n\t(4909:\"tcm_gettooltips\"),\n\t(4910:\"tcm_settooltips\"),\n\t(4911:\"tcm_getcurfocus\"),\n\t(4912:\"tcm_setcurfocus\"),\n\t(4924:\"tcm_getitemw\"),\n\t(4925:\"tcm_setitemw\"),\n\t(4926:\"tcm_insertitemw\"),\n\t(5120:\"pgm_first\"),\n\t(8192:\"ccm_first\")]\n\nproc start=\nend\n"
    data     i64       "export enumdata optionnames =\n\t(wf_border,\t\t$),\t\t! wbs_simple\n\t(wf_resize,\t\t$),\t\t! 0\n\t(wf_hscroll,\t$),\t\t! 0\n\t(wf_vscroll,\t$),\t\t! 0\n\t(wf_menu,\t\t$),\t\t! 0\n\t(wf_caption,\t$),\t\t! 1\n\t(wf_max,\t\t$),\t\t! 0\n\t(wf_minmax,\t\t$),\t\t! 1\n\t(wf_sysmenu,\t$),\t\t! 1\n\t(wf_desktop,\t$),\t\t! 0\n\t(wf_clip,\t\t$),\t\t! 0\n\t(wf_show,\t\t$),\t\t!\n\t(wf_iframe,\t\t$),\t\t! 1\n\t(wf_cent,\t\t$),\t\t!\n\t(wf_toolwind,\t$)\t\t!\nend\n\n!Windows border styles, used for pop-up windows. Could also be used for\n!some child windows\nexport enumdata wbsnames=\n\t(wbs_none=0,$),\n\t(wbs_simple,$),\n\t(wbs_thick,$),\n\t(wbs_resize,$),\n\t(wbs_sunken,$),\n\t(wbs_sunken2,$),\n\t(wbs_sunkenrs,$),\n\t(wbs_dummy,$)\nend\n"
    data     i64       "\nexport var daynames=(\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\")\n\nexport var Monthnames=(\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\n\t\t\"August\",\"September\",\"October\",\"November\",\"December\")\n\nexport var days=(31,28,31, 30,31,30, 31,31,30, 31,30,31)\n\nexport record rdate=\n\tvar day,month,year\nend\n\nexport record rdatetime = \n\tvar\tday\n\tvar\tmonth\n\tvar\tyear\n\tvar\thour\n\tvar\tminute\n\tvar\tsecond\n\tvar\tmilliseconds\n\tvar\tdayofweek\nend\n\n!proc start=\n!end\n!\n!proc main=\n!end\n\nexport func makedatetime(d,m,y, h=0, minute=0, s=0)=\n\n\td:=rdatetime(d,m,y, h,minute,s,0,0)\n\td.dayofweek:=getdow(d)\n\treturn d\nend\n\nexport proc setdow(&d)=\n\td.dayofweek:=getdow(d)\nend\n\nexport func strdate(d,sep=\"-\")=\n!return leftstr(daynames[d.dayofweek],3)+\" \"+tostr(d.day)+sep+leftstr(monthnames[d.month],3)+sep+tostr(d.year)\n\treturn tostr(d.day)+sep+leftstr(monthnames[d.month],3)+sep+tostr(d.year)\nend\n\nexport func strtime(d,sep=\":\")=\n\treturn tostr(d.hour)+sep+tostr(d.minute,\"z2\")+sep+tostr(d.second,\"z2\")\nend\n\nexport func strdow(d,n=0)=\n\tif n then\n\t\treturn leftstr(daynames[d.dayofweek],n)\n\telse\n\t\treturn daynames[d.dayofweek]\n\tfi\nend\n\nexport func strdatetime(d,dsep=\"-\",tsep=\":\")=\n\treturn strdate(d,dsep)+\" \"+strtime(d,tsep)\nend\n\nexport func parsedate(s,defdate)=\n!parse string s into a new date record\n!def = default date to work from, eg. for missing year\n!return date record obtained, or 0 if error\n\n\tday:=defdate.day\n\tmonth:=defdate.month\n\tyear:=defdate.year\n\tif s.[1]=\" \" then s:=rightstr(s,-1) fi\n\n\tsepset:=[' ', '-', '/', '.']\n\n\tseppos:=0\n\tfor i:=1 to s.len do if s.[i] in sepset then seppos:=i; exit fi od\n\n\tif not seppos then\t\t!day only\n\t\tday:=strtoval(s)\n\t\tgoto gotday\n\tfi\n\tday:=strtoval(leftstr(s,seppos-1))\n\n\ts:=rightstr(s,-seppos)\t\t!month and possible year\n\tseppos:=0\n\tfor i:=1 to s.len do if s.[i] in sepset then seppos:=i; exit fi od\n\n\tif seppos then\n\t\tmonthstr:=leftstr(s,seppos-1)\n\t\tyearstr:=rightstr(s,s.len-seppos)\n\telse\n\t\tmonthstr:=s\n\t\tyearstr:=\"\"\n\tfi\n\n\tif asc(leftstr(monthstr)) in ['0'..'9'] then\t!numeric month\n\t\tmonth:=strtoval(monthstr)\n\t\tif month<1 or month>12 then\n\t\t\treturn 0\n\t\tfi\n\telse\n\t\tmonth:=0\n\t\tfor i:=1 to 12 do\n\t\t\tif convlc(leftstr(monthnames[i],3))=convlc(leftstr(monthstr,3)) then\n\t\t\t\tmonth:=i\n\t\t\t\texit\n\t\t\tfi\n\t\tod\n\t\tif not month then\n\t\t\treturn 0\n\t\tfi\n\tfi\n\n\tif yearstr<>\"\" then\n\t\tyear:=strtoval(yearstr)\n\t\tif year<200 then\n\t\t\tif year in [00..89] then\n\t\t\t\tyear+:=2000\n\t\t\telse\n\t\t\t\tyear+:=1900\n\t\t\tfi\n\t\tfi\n\tfi\n\ngotday:\n!check the date, rather than correct using addday(d,0)\n\tdd:=days[month] \n\tif leapyear(year) and month=2 then dd+:=1 fi\n\tif day<1 or day>dd then return 0 fi\n\tif year<1990 or year>2089 then return 0 fi\n\treturn makedatetime(day,month,year)\nend\n\nexport func leapyear(y)=\n!return true if y (eg. 1994) is a leap year\n\treturn (y-1900) rem 4=0\nend\n\nexport func getdow(d)=\n!return day of week for given date, returning 1..7 (monday..sunday)\n\treturn ((getday(d)-1) rem 7)+1\nend\n\nexport func getday(d)=\n!return day number for date d, measured from 1.1.90\n\tday:=0\n\tfor i:=1990 to d.year-1 do\n\t\tday+:=(leapyear(i)|366|365)\n\tod\n\n\tfor i:=1 to d.month-1 do\n\t\tday+:=(i=2|(leapyear(d.year)|29|28)|days[i])\n\tod\n\tday+:=d.day\n\treturn day\nend\n\nexport func getdays(m,y)=\n!return no. of days in month m, for year y\n\tif leapyear(y) and m=2 then return 29 fi\n\treturn days[m]\nend\n\nexport func getmonthname(m,?n)=\n\tif not m.isint then\n\t\tm:=m.month\n\tfi\n\tm:=monthnames[m]\n\tif n.defined then m:=leftstr(m,n) fi\n\treturn m\nend\n\nexport func getdayname(d,?n)=\n\tif not d.isint then\n\t\td:=getdow(d)\n\tfi\n\td:=daynames[d]\n\tif n.defined then d:=leftstr(d,n) fi\n\treturn d\nend\n\nexport func addday(d0,i)=\n\td:=d0\n\tif i>0 then\n\t\tto i do\n\t\t\t++d.day\n\t\t\tif d.day>getdays(d.month,d.year) then\n\t\t\t\td.day:=1\n\t\t\t\t++d.month\n\t\t\t\tif d.month>12 then\n\t\t\t\t\td.month:=1\n\t\t\t\t\t++d.year\n\t\t\t\tfi\n\t\t\tfi\n\t\tod\n\telse\n\t\tto -i do\n\t\t\t--d.day\n\t\t\tif d.day<1 then\n\t\t\t\t--d.month\n\t\t\t\tif d.month<1 then\n\t\t\t\t\td.month:=12\n\t\t\t\t\t--d.year\n\t\t\t\tfi\n\t\t\t\td.day:=getdays(d.month,d.year)\n\t\t\tfi\n\t\tod\n\tfi\n\n!do checking\n\tif d.year<1990 then d:=makedatetime(1,1,1990) fi\n\tif d.year>2089 then d:=makedatetime(31,12,2089) fi\n\n\tdd:=getdays(d.month,d.year)\n\tif leapyear(d.year) and d.month=2 then dd+:=1 fi\n\tif d.day<1 then d.day:=1 fi\n\tif d.day>dd then d.day:=dd fi\n\tsetdow(d)\n\treturn d\nend\n\nexport func getdatetime=\n\ttm:=getsystime()\n\n\treturn rdatetime(tm.day,tm.month,tm.year,\n\t\t\ttm.hour, tm.minute, tm.second, tm.milliseconds,tm.dayofweek)\nend\n\nexport func getsystime=\n\ttm:=new(ws_systemtime)\n\tgetsystemtime(&tm)\n\n\tif tm.dayofweek=0 then\n\t\ttm.dayofweek:=7\n\tfi\n\n\treturn tm\nend\n"
istatic  mem:328       qq_tables.stdtypenames:
    data     i64       "void"           
    data     i64       "int"            
    data     i64       "real"           
    data     i64       "decimal"        
    data     i64       "range"          
    data     i64       "set"            
    data     i64       "dict"           
    data     i64       "vector"         
    data     i64       "bits"           
    data     i64       "string"         
    data     i64       "list"           
    data     i64       "array"          
    data     i64       "record"         
    data     i64       "struct"         
    data     i64       "refvar"         
    data     i64       "refbit"         
    data     i64       "refpack"        
    data     i64       "symbol"         
    data     i64       "type"           
    data     i64       "operator"       
    data     i64       "retaddr"        
    data     i64       "except"         
    data     i64       "number"         
    data     i64       "i8"             
    data     i64       "i16"            
    data     i64       "i32"            
    data     i64       "i64"            
    data     i64       "u8"             
    data     i64       "u16"            
    data     i64       "u32"            
    data     i64       "u64"            
    data     i64       "r32"            
    data     i64       "r64"            
    data     i64       "u1"             
    data     i64       "u2"             
    data     i64       "u4"             
    data     i64       "packstrc"       
    data     i64       "packstrz"       
    data     i64       "stringz"        
    data     i64       "refproc"        
    data     i64       "slice"          
istatic  mem:41       qq_tables.stdtypewidths:
    data mem:20  0 64 64 0 64 0 0 0 0 0 0 0 0 0 64 128 64 64 64 64 
    data mem:20  0 0 0 8 16 32 64 8 16 32 64 32 64 1 2 4 0 0 64 64 
    data mem:1   0 
istatic  mem:736       qq_tables.jtagnames:
    data     i64       "jnone"          
    data     i64       "jlabeldef"      
    data     i64       "jassign"        
    data     i64       "jkeyword"       
    data     i64       "jkeyvalue"      
    data     i64       "joperator"      
    data     i64       "jblock"         
    data     i64       "jif"            
    data     i64       "jselect"        
    data     i64       "jwhenthen"      
    data     i64       "jcase"          
    data     i64       "jdocase"        
    data     i64       "jswitch"        
    data     i64       "jdoswitch"      
    data     i64       "jrecase"        
    data     i64       "jfor"           
    data     i64       "jforx"          
    data     i64       "jforall"        
    data     i64       "jforeach"       
    data     i64       "jdo"            
    data     i64       "jto"            
    data     i64       "jwhile"         
    data     i64       "jrepeat"        
    data     i64       "jtry"           
    data     i64       "jexcept"        
    data     i64       "jraise"         
    data     i64       "jcall"          
    data     i64       "jcallhost"      
    data     i64       "jnil"           
    data     i64       "jswap"          
    data     i64       "jgoto"          
    data     i64       "jstop"          
    data     i64       "jreturn"        
    data     i64       "jeval"          
    data     i64       "jtypeconst"     
    data     i64       "jconvert"       
    data     i64       "jtypepun"       
    data     i64       "jmap"           
    data     i64       "jcmpchain"      
    data     i64       "jname"          
    data     i64       "jsymbol"        
    data     i64       "jintconst"      
    data     i64       "jrealconst"     
    data     i64       "jstringconst"   
    data     i64       "jdecimal"       
    data     i64       "jstrinclude"    
    data     i64       "jdot"           
    data     i64       "jindex"         
    data     i64       "jdotindex"      
    data     i64       "jkeyindex"      
    data     i64       "jloop"          
    data     i64       "jptr"           
    data     i64       "jaddrof"        
    data     i64       "jvoid"          
    data     i64       "jprint"         
    data     i64       "jfprint"        
    data     i64       "jnogap"         
    data     i64       "jspace"         
    data     i64       "jfmtitem"       
    data     i64       "jread"          
    data     i64       "jincrload"      
    data     i64       "jloadincr"      
    data     i64       "junary"         
    data     i64       "jbin"           
    data     i64       "jmaths"         
    data     i64       "jmaths2"        
    data     i64       "jproperty"      
    data     i64       "jbounds"        
    data     i64       "jgettype"       
    data     i64       "jistype"        
    data     i64       "jisvoid"        
    data     i64       "jcmp"           
    data     i64       "jandl"          
    data     i64       "jorl"           
    data     i64       "jnotl"          
    data     i64       "jistruel"       
    data     i64       "jin"            
    data     i64       "jinx"           
    data     i64       "junaryto"       
    data     i64       "jbinto"         
    data     i64       "jandlto"        
    data     i64       "jorlto"         
    data     i64       "jnotlto"        
    data     i64       "jistruelto"     
    data     i64       "jappendto"      
    data     i64       "jconcatto"      
    data     i64       "jidivrem"       
    data     i64       "jmakerange"     
    data     i64       "jmakelist"      
    data     i64       "jmakeset"       
    data     i64       "jmakedict"      
    data     i64       "jcvattr"        
istatic  mem:92       qq_tables.jflags: 
    data mem:20  0 1 2 2 2 0 1 2 2 2 2 2 2 2 1 2 2 2 2 1 
    data mem:20  2 2 2 2 2 1 2 1 0 2 1 1 1 1 0 1 1 2 1 0 
    data mem:20  1 0 0 0 0 1 2 2 2 2 2 1 1 0 2 2 0 0 2 2 
    data mem:20  1 1 1 2 1 2 1 1 1 1 1 2 2 2 1 1 2 2 1 2 
    data mem:12  2 2 1 1 2 2 0 2 1 1 1 0 
istatic  mem:92       qq_tables.jhasvalue:
    data mem:20  0 0 2 1 1 1 2 2 2 0 2 0 2 0 0 0 0 0 0 0 
    data mem:20  0 0 0 0 0 0 1 1 1 0 0 0 2 0 1 1 1 1 1 1 
    data mem:20  1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 0 0 0 0 0 
    data mem:20  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 
    data mem:12  0 0 0 0 0 0 2 1 1 1 1 1 
istatic  mem:1056       qq_tables.symbolnames:
    data     u64       491496043109     
    data     u64       7630692          
    data     u64       418447716195     
    data     u64       1768777075       
    data     u64       474315779939     
    data     u64       121390429860705  
    data     u64       122545691846003  
    data     u64       1701865840       
    data     u64       118074580820588  
    data     u64       118074580820594  
    data     u64       7435116          
    data     u64       7435122          
    data     u64       133506683724652  
    data     u64       133506683724658  
    data     u64       7500912          
    data     u64       7496034          
    data     u64       29793            
    data     u64       7957695015460107633
    data     u64       1919181921       
    data     u64       435526984050     
    data     u64       8316305113558576229
    data     u64       6579297          
    data     u64       6452595          
    data     u64       7107949          
    data     u64       7760228          
    data     u64       1986618473       
    data     u64       1835364969       
    data     u64       30792314748757097
    data     u64       1818521185       
    data     u64       7107183          
    data     u64       1684955497       
    data     u64       7499625          
    data     u64       1919907945       
    data     u64       7104627          
    data     u64       7497843          
    data     u64       132359843113325  
    data     u64       110425311047777  
    data     u64       127961628831587  
    data     u64       28265            
    data     u64       7892585          
    data     u64       491328597872     
    data     u64       1701667187       
    data     u64       29029            
    data     u64       25966            
    data     u64       29804            
    data     u64       25964            
    data     u64       25959            
    data     u64       29799            
    data     u64       1819570030       
    data     u64       1953459817       
    data     u64       30510852590564201
    data     u64       7561825          
    data     u64       6517601          
    data     u64       7497827          
    data     u64       495673696621     
    data     u64       55471255085421   
    data     u64       1886351984       
    data     u64       111533748417385  
    data     u64       110404004377449  
    data     u64       1919118953       
    data     u64       7106405          
    data     u64       6713189          
    data     u64       8391171955410366057
    data     u64       8391171955409249636
    data     u64       32778015450820710
    data     u64       8391171955410233443
    data     u64       8391171955410236531
    data     u64       7308604897319546485
    data     u64       1701667182       
    data     u64       28552639593870451
    data     u64       491260502889     
    data     u64       26217            
    data     u64       1852139636       
    data     u64       439855836261     
    data     u64       1702063205       
    data     u64       7310293699684166757
    data     u64       131337507007589  
    data     u64       30510843782458469
    data     u64       6581861          
    data     u64       126939460038261  
    data     u64       1702060387       
    data     u64       111546229548402  
    data     u64       1852139639       
    data     u64       7499622          
    data     u64       28532            
    data     u64       31074            
    data     u64       28516            
    data     u64       435610544247     
    data     u64       127961662514546  
    data     u64       465625706101     
    data     u64       121437875889522  
    data     u64       1886352499       
    data     u64       1886351212       
    data     u64       1869901671       
    data     u64       114776364119923  
    data     u64       500068610672     
    data     u64       128017564332147  
    data     u64       1684104562       
    data     u64       1668248176       
    data     u64       1668183398       
    data     u64       465557414252     
    data     u64       110442657834354  
    data     u64       127970521019507  
    data     u64       474315583093     
    data     u64       111516500389741  
    data     u64       128034844732777  
    data     u64       28275532515798377
    data     u64       1701869940       
    data     u64       6710642          
    data     u64       7496054          
    data     u64       478660485485     
    data     u64       28783            
    data     u64       500152823651     
    data     u64       119165519096935  
    data     u64       109304575259763  
    data     u64       121390429397347  
    data     u64       7959156          
    data     u64       128026086176869  
    data     u64       435727982962     
    data     u64       1953718627       
    data     u64       32195308665270115
    data     u64       125762756439908  
    data     u64       1818326629       
    data     u64       27431034385752436
    data     u64       7364973          
    data     u64       482871438435     
    data     u64       1885435763       
    data     u64       8391171955410303347
    data     u64       121386319441768  
    data     u64       7104878          
    data     u64       30508623351411827
    data     u64       123623711273075  
istatic  mem:216       qq_tables.namenames:
    data     i64       "genericid"      
    data     i64       "programid"      
    data     i64       "subprogid"      
    data     i64       "moduleid"       
    data     i64       "dllmoduleid"    
    data     i64       "procid"         
    data     i64       "anonprocid"     
    data     i64       "dllprocid"      
    data     i64       "dllvarid"       
    data     i64       "recordid"       
    data     i64       "typeid"         
    data     i64       "fieldid"        
    data     i64       "structfieldid"  
    data     i64       "staticid"       
    data     i64       "frameid"        
    data     i64       "paramid"        
    data     i64       "dllparamid"     
    data     i64       "labelid"        
    data     i64       "constid"        
    data     i64       "enumid"         
    data     i64       "aliasid"        
    data     i64       "linkid"         
    data     i64       "macroid"        
    data     i64       "macroparamid"   
    data     i64       "structblockid"  
    data     i64       "unionblockid"   
    data     i64       "endblockid"     
istatic  mem:24       qq_tables.objtypenames:
    data     i64       "normal_obj"     
    data     i64       "slice_obj"      
    data     i64       "extslice_obj"   
istatic  mem:24       qq_tables.scopenames:
    data     i64       "local_scope"    
    data     i64       "global_scope"   
    data     i64       "export_scope"   
istatic  mem:1504       qq_tables.stnames:
    data     i64       "if"             
    data     i64       "then"           
    data     i64       "elsif"          
    data     i64       "else"           
    data     i64       "elsecase"       
    data     i64       "elseswitch"     
    data     i64       "case"           
    data     i64       "docase"         
    data     i64       "recase"         
    data     i64       "when"           
    data     i64       "for"            
    data     i64       "foreach"        
    data     i64       "to"             
    data     i64       "downto"         
    data     i64       "by"             
    data     i64       "do"             
    data     i64       "end"            
    data     i64       "while"          
    data     i64       "repeat"         
    data     i64       "until"          
    data     i64       "always"         
    data     i64       "return"         
    data     i64       "stop"           
    data     i64       "redoloop"       
    data     i64       "nextloop"       
    data     i64       "exit"           
    data     i64       "goto"           
    data     i64       "switch"         
    data     i64       "doswitch"       
    data     i64       "tabledata"      
    data     i64       "enumdata"       
    data     i64       "clamp"          
    data     i64       "maps"           
    data     i64       "mapss"          
    data     i64       "eval"           
    data     i64       "print"          
    data     i64       "println"        
    data     i64       "fprint"         
    data     i64       "fprintln"       
    data     i64       "sprint"         
    data     i64       "sfprint"        
    data     i64       "cp"             
    data     i64       "cpl"            
    data     i64       "read"           
    data     i64       "readln"         
    data     i64       "cast"           
    data     i64       "proc"           
    data     i64       "sub"            
    data     i64       "function"       
    data     i64       "func"           
    data     i64       "fun"            
    data     i64       "method"         
    data     i64       "type"           
    data     i64       "record"         
    data     i64       "struct"         
    data     i64       "union"          
    data     i64       "ref"            
    data     i64       "var"            
    data     i64       "macro"          
    data     i64       "static"         
    data     i64       "$caligned"      
    data     i64       "const"          
    data     i64       "module"         
    data     i64       "import"         
    data     i64       "importdll"      
    data     i64       "strinclude"     
    data     i64       "unless"         
    data     i64       "try"            
    data     i64       "except"         
    data     i64       "raise"          
    data     i64       "global"         
    data     i64       "export"         
    data     i64       "swap"           
    data     i64       "void"           
    data     i64       "int"            
    data     i64       "real"           
    data     i64       "string"         
    data     i64       "list"           
    data     i64       "array"          
    data     i64       "vector"         
    data     i64       "bits"           
    data     i64       "set"            
    data     i64       "dict"           
    data     i64       "decimal"        
    data     i64       "longint"        
    data     i64       "typetype"       
    data     i64       "range"          
    data     i64       "recordtype"     
    data     i64       "cvoid"          
    data     i64       "i8"             
    data     i64       "i16"            
    data     i64       "i32"            
    data     i64       "i64"            
    data     i64       "bit"            
    data     i64       "u1"             
    data     i64       "u2"             
    data     i64       "u4"             
    data     i64       "byte"           
    data     i64       "u8"             
    data     i64       "u16"            
    data     i64       "u32"            
    data     i64       "u64"            
    data     i64       "r32"            
    data     i64       "r64"            
    data     i64       "stringc"        
    data     i64       "stringz"        
    data     i64       "cstring"        
    data     i64       "ichar"          
    data     i64       "million"        
    data     i64       "billion"        
    data     i64       "as"             
    data     i64       "$lineno"        
    data     i64       "$strlineno"     
    data     i64       "$filename"      
    data     i64       "$modulename"    
    data     i64       "$function"      
    data     i64       "$date"          
    data     i64       "$time"          
    data     i64       "$"              
    data     i64       "and"            
    data     i64       "or"             
    data     i64       "iand"           
    data     i64       "ior"            
    data     i64       "ixor"           
    data     i64       "in"             
    data     i64       "inx"            
    data     i64       "rem"            
    data     i64       "divrem"         
    data     i64       "min"            
    data     i64       "max"            
    data     i64       "not"            
    data     i64       "istrue"         
    data     i64       "inot"           
    data     i64       "abs"            
    data     i64       "asc"            
    data     i64       "chr"            
    data     i64       "sqrt"           
    data     i64       "sqr"            
    data     i64       "cos"            
    data     i64       "sin"            
    data     i64       "tan"            
    data     i64       "asin"           
    data     i64       "acos"           
    data     i64       "atan"           
    data     i64       "atan2"          
    data     i64       "sign"           
    data     i64       "log"            
    data     i64       "log10"          
    data     i64       "exp"            
    data     i64       "round"          
    data     i64       "floor"          
    data     i64       "ceil"           
    data     i64       "fract"          
    data     i64       "fmod"           
    data     i64       "append"         
    data     i64       "concat"         
    data     i64       "len"            
    data     i64       "lwb"            
    data     i64       "upb"            
    data     i64       "bounds"         
    data     i64       "bytes"          
    data     i64       "isfound"        
    data     i64       "dictitems"      
    data     i64       "basetype"       
    data     i64       "elemtype"       
    data     i64       "isvoid"         
    data     i64       "isdef"          
    data     i64       "defined"        
    data     i64       "isint"          
    data     i64       "isreal"         
    data     i64       "islist"         
    data     i64       "isstring"       
    data     i64       "isrange"        
    data     i64       "ispointer"      
    data     i64       "isarray"        
    data     i64       "isrecord"       
    data     i64       "isset"          
    data     i64       "isnumber"       
    data     i64       "fi"             
    data     i64       "esac"           
    data     i64       "od"             
    data     i64       "nil"            
    data     i64       "con"            
    data     i64       "pi"             
    data     i64       "true"           
    data     i64       "false"          
    data     i64       "$neg"           
    data     i64       "$$dummy"        
istatic  mem:188       qq_tables.stsymbols:
    data mem:20  72 73 74 75 76 77 81 81 82 83 84 84 85 85 86 87 79 88 89 90 
    data mem:20  90 91 92 93 93 93 94 95 95 124 124 126 125 125 123 96 96 96 96 97 
    data mem:20  97 96 96 98 98 120 99 99 100 100 100 100 108 102 103 104 109 110 111 115 
    data mem:20  116 113 105 106 107 131 80 117 118 119 114 114 127 70 70 70 70 70 70 70 
    data mem:20  70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 
    data mem:20  70 70 70 70 70 70 70 70 68 68 68 121 121 121 121 121 121 121 122 29 
    data mem:20  30 31 32 33 39 40 27 28 36 36 49 51 50 52 53 54 55 55 55 55 
    data mem:20  55 55 55 55 56 55 55 55 55 55 55 55 55 56 37 38 57 57 57 57 
    data mem:20  57 57 57 59 59 59 59 59 58 58 58 58 58 58 58 58 58 58 79 79 
    data mem:8   79 130 128 128 128 128 132 0 
istatic  mem:188       qq_tables.stsubcodes:
    data     u8        0                
    data     u8        0                
    data     u8        7                
    data     u8        0                
    data     u8        10               
    data     u8        12               
    data     u8        10               
    data     u8        11               
    data     u8        14               
    data     u8        0                
    data     u8        0                
    data     u8        1                
    data     u8        0                
    data     u8        1                
    data     u8        0                
    data     u8        0                
    data     u8        0                
    data     u8        0                
    data     u8        0                
    data     u8        0                
    data     u8        0                
    data     u8        0                
    data     u8        0                
    data     u8        1                
    data     u8        2                
    data     u8        3                
    data     u8        0                
    data     u8        12               
    data     u8        13               
    data     u8        0                
    data     u8        1                
    data     u8        0                
    data     u8        0                
    data     u8        0                
    data     u8        0                
    data     u8        0                
    data     u8        1                
    data     u8        2                
    data     u8        3                
    data     u8        4                
    data     u8        6                
    data     u8        0                
    data     u8        1                
    data     u8        0                
    data     u8        1                
    data     u8        13               
    data     u8        0                
    data     u8        1                
    data     u8        0                
    data     u8        0                
    data     u8        1                
    data     u8        0                
    data     u8        0                
    data     u8        0                
    data     u8        0                
    data     u8        0                
    data     u8        0                
    data     u8        0                
    data     u8        0                
    data     u8        0                
    data     u8        0                
    data     u8        0                
    data     u8        0                
    data     u8        0                
    data     u8        68               
    data     u8        0                
    data     u8        0                
    data     u8        0                
    data     u8        0                
    data     u8        0                
    data     u8        1                
    data     u8        2                
    data     u8        0                
    data     u8        0                
    data     u8        1                
    data     u8        2                
    data     u8        9                
    data     u8        10               
    data     u8        11               
    data     u8        7                
    data     u8        8                
    data     u8        5                
    data     u8        6                
    data     u8        3                
    data     u8        3                
    data     u8        18               
    data     u8        4                
    data     u8        12               
    data     u8        0                
    data     u8        23               
    data     u8        24               
    data     u8        25               
    data     u8        26               
    data     u8        33               
    data     u8        33               
    data     u8        34               
    data     u8        35               
    data     u8        27               
    data     u8        27               
    data     u8        28               
    data     u8        29               
    data     u8        30               
    data     u8        31               
    data     u8        32               
    data     u8        36               
    data     u8        37               
    data     u8        37               
    data     u8        38               
    data     u8        2                
    data     u8        3                
    data     u8        0                
    data     u8        1                
    data     u8        2                
    data     u8        3                
    data     u8        4                
    data     u8        5                
    data     u8        6                
    data     u8        7                
    data     u8        0                
    data     u8        72               
    data     u8        73               
    data     u8        108              
    data     u8        109              
    data     u8        110              
    data     u8        0                
    data     u8        0                
    data     u8        106              
    data     u8        107              
    data     u8        116              
    data     u8        117              
    data     u8        74               
    data     u8        75               
    data     u8        78               
    data     u8        76               
    data     u8        80               
    data     u8        81               
    data     u8        1                
    data     u8        2                
    data     u8        4                
    data     u8        3                
    data     u8        5                
    data     u8        6                
    data     u8        7                
    data     u8        8                
    data     u8        18               
    data     u8        9                
    data     u8        10               
    data     u8        11               
    data     u8        12               
    data     u8        13               
    data     u8        14               
    data     u8        15               
    data     u8        16               
    data     u8        17               
    data     u8        119              
    data     u8        118              
    data     u8        87               
    data     u8        88               
    data     u8        89               
    data     u8        90               
    data     u8        91               
    data     u8        94               
    data     u8        93               
    data     u8        98               
    data     u8        101              
    data     u8        118              
    data     u8        100              
    data     u8        100              
    data     u8        1                
    data     u8        2                
    data     u8        10               
    data     u8        9                
    data     u8        4                
    data     u8        14               
    data     u8        11               
    data     u8        12               
    data     u8        5                
    data     u8        22               
    data     u8        72               
    data     u8        81               
    data     u8        87               
    data     u8        0                
    data     u8        3                
    data     u8        1                
    data     u8        4                
    data     u8        5                
    data     u8        45               
    data     u8        0                
istatic  mem:488       qq_tables.hostfnnames:
    data     i64       "h_dummy"        
    data     i64       "h_startprint"   
    data     i64       "h_startprintcon"
    data     i64       "h_strstartprint"
    data     i64       "h_setformat"    
    data     i64       "h_endprint"     
    data     i64       "h_strendprint"  
    data     i64       "h_print"        
    data     i64       "h_print_nf"     
    data     i64       "h_println"      
    data     i64       "h_printnogap"   
    data     i64       "h_printspace"   
    data     i64       "h_readln"       
    data     i64       "h_sreadln"      
    data     i64       "h_sread"        
    data     i64       "h_rereadln"     
    data     i64       "h_reread"       
    data     i64       "h_strtoval"     
    data     i64       "h_tostr"        
    data     i64       "h_leftstr"      
    data     i64       "h_rightstr"     
    data     i64       "h_convlc"       
    data     i64       "h_convuc"       
    data     i64       "h_waitkey"      
    data     i64       "h_testkey"      
    data     i64       "h_execwait"     
    data     i64       "h_execcmd"      
    data     i64       "h_system"       
    data     i64       "h_makestr"      
    data     i64       "h_makeref"      
    data     i64       "h_new"          
    data     i64       "h_getcmdparam"  
    data     i64       "h_gethostname"  
    data     i64       "h_getprogname"  
    data     i64       "h_$setdebug"    
    data     i64       "h_$test2"       
    data     i64       "h_$test"        
    data     i64       "h_$refcount"    
    data     i64       "h_ticks"        
    data     i64       "h_clock"        
    data     i64       "h_sleep"        
    data     i64       "h_random"       
    data     i64       "h_gethash"      
    data     i64       "h_getos"        
    data     i64       "h_iswindows"    
    data     i64       "h_setmesshandler"
    data     i64       "h_$getstdinout" 
    data     i64       "h_$getparam"    
    data     i64       "h_makeempty"    
    data     i64       "h_$smallmemtotal"
    data     i64       "h_$id"          
    data     i64       "h_copy"         
    data     i64       "h_$nan"         
    data     i64       "h_$infinity"    
    data     i64       "h_$nprocs"      
    data     i64       "h_$procname"    
    data     i64       "h_$procref"     
    data     i64       "h_allocexec"    
    data     i64       "h_runnative"    
    data     i64       "h_setlwb"       
    data     i64       "h_last"         
istatic  mem:61       qq_tables.hostnparams:
    data mem:20  0 1 0 0 1 0 0 2 1 0 0 0 1 1 1 0 0 2 2 3 
    data mem:20  3 2 2 0 0 3 3 1 2 2 4 1 0 0 1 2 3 1 0 0 
    data mem:20  1 1 1 0 0 1 1 1 1 0 1 1 0 0 0 1 1 1 2 2 
    data mem:1   0 
istatic  mem:61       qq_tables.hostisfn:
    data mem:20  0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 1 1 1 
    data mem:20  1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 
    data mem:20  0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 
    data mem:1   0 
istatic  mem:61       qq_tables.hostinternal:
    data mem:20  1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 
    data mem:20  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
    data mem:20  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
    data mem:1   1 
istatic  mem:488       qq_tables.hosthandlers:
    data     i64       0                
    data     u64       &qq_print.pch_startprint
    data     u64       &qq_print.pch_startprintcon
    data     u64       &qq_print.pch_strstartprint
    data     u64       &qq_print.pch_setformat
    data     u64       &qq_print.pch_endprint
    data     u64       &qq_print.pch_strendprint
    data     u64       &qq_print.pch_print
    data     u64       &qq_print.pch_print_nf
    data     u64       &qq_print.pch_println
    data     u64       &qq_print.pch_printnogap
    data     u64       &qq_print.pch_printspace
    data     u64       &qq_print.pch_readln
    data     u64       &qq_print.pch_sreadln
    data     u64       &qq_print.pch_sread
    data     u64       &qq_print.pch_rereadln
    data     u64       &qq_print.pch_reread
    data     u64       &qq_print.pch_strtoval
    data     u64       &qq_print.pch_tostr
    data     u64       &qq_host.pch_leftstr
    data     u64       &qq_host.pch_rightstr
    data     u64       &qq_host.pch_convlc
    data     u64       &qq_host.pch_convuc
    data     u64       &qq_host.pch_waitkey
    data     u64       &qq_host.pch_testkey
    data     u64       &qq_host.pch_execwait
    data     u64       &qq_host.pch_execcmd
    data     u64       &qq_host.pch_system
    data     u64       &qq_host.pch_makestr
    data     u64       &qq_host.pch_makeref
    data     u64       &qq_host.pch_new 
    data     u64       &qq_host.pch_getcmdparam
    data     u64       &qq_host.pch_gethostname
    data     u64       &qq_host.pch_getprogname
    data     u64       &qq_host.pch_$setdebug
    data     u64       &qq_host.pch_$test2
    data     u64       &qq_host.pch_$test
    data     u64       &qq_host.pch_$refcount
    data     u64       &qq_host.pch_ticks
    data     u64       &qq_host.pch_clock
    data     u64       &qq_host.pch_sleep
    data     u64       &qq_host.pch_random
    data     u64       &qq_host.pch_gethash
    data     u64       &qq_host.pch_getos
    data     u64       &qq_host.pch_iswindows
    data     u64       &qq_host.pch_setmesshandler
    data     u64       &qq_host.pch_$getstdinout
    data     u64       &qq_host.pch_$getparam
    data     u64       &qq_host.pch_makeempty
    data     u64       &qq_host.pch_$smallmemtotal
    data     u64       &qq_host.pch_$id 
    data     u64       &qq_host.pch_copy
    data     u64       &qq_host.pch_$nan
    data     u64       &qq_host.pch_$infinity
    data     u64       &qq_host.pch_$nprocs
    data     u64       &qq_host.pch_$procname
    data     u64       &qq_host.pch_$procref
    data     u64       &qq_host.pch_allocexec
    data     u64       &qq_host.pch_runnative
    data     u64       &qq_host.pch_setlwb
    data     i64       0                
istatic  mem:27       qq_tables.d_binopset:
    data mem:20  29 30 43 44 45 46 48 47 22 23 24 25 26 27 31 32 33 34 35 36 
    data mem:7   38 41 28 56 37 19 42 
zstatic  mem:133       qq_tables.binopset:
istatic  mem:7       qq_tables.d_unaryopset:
    data mem:7   49 50 52 51 53 54 55 
zstatic  mem:133       qq_tables.unaryopset:
istatic  mem:10       qq_tables.d_addopset:
    data mem:10  22 23 31 32 33 38 37 36 19 42 
istatic  mem:6       qq_tables.d_cmpopset:
    data mem:6   43 44 45 46 47 48 
istatic  mem:7       qq_tables.d_mulopset:
    data mem:7   24 25 26 27 34 35 28 
zstatic  mem:133       qq_tables.addopset:
zstatic  mem:133       qq_tables.cmpopset:
zstatic  mem:133       qq_tables.mulopset:
zstatic  mem:133       qq_tables.exprendset:
istatic  mem:208       qq_tables.d_exprstarterset:
    data     i64       9                
    data     i64       11               
    data     i64       15               
    data     i64       19               
    data     i64       69               
    data     i64       60               
    data     i64       63               
    data     i64       64               
    data     i64       65               
    data     i64       66               
    data     i64       67               
    data     i64       70               
    data     i64       125              
    data     i64       13               
    data     i64       97               
    data     i64       122              
    data     i64       121              
    data     i64       126              
    data     i64       109              
    data     i64       120              
    data     i64       21               
    data     i64       130              
    data     i64       129              
    data     i64       72               
    data     i64       102              
    data     i64       103              
zstatic  mem:132       qq_tables.exprstarterset:
zstatic  mem:2008       qq_tables.ttname:
zstatic  mem:2008       qq_tables.ttnamedef:
zstatic  mem:502       qq_tables.ttbasetype:
zstatic  mem:502       qq_tables.tttarget:
zstatic  mem:2008       qq_tables.ttlower:
zstatic  mem:2008       qq_tables.ttlength:
zstatic  mem:2008       qq_tables.ttlowerexpr:
zstatic  mem:2008       qq_tables.ttlengthexpr:
zstatic  mem:2008       qq_tables.ttsize:
zstatic  mem:251       qq_tables.ttbitwidth:
zstatic  mem:2008       qq_tables.ttfields:
zstatic  mem:251       qq_tables.ttcaligned:
zstatic  mem:2008       qq_tables.ttowner:
zstatic  i64       qq_tables.ntypes:    
zstatic  i64       qq_tables.firstusertype:
zstatic  i64       qq_tables.nuserxtypes:
zstatic  i64       qq_tables.userxtypebase:
zstatic  u64       qq_tables.userxmodelist:
zstatic  mem:40000       qq_tables.ttnamedefx:
zstatic  mem:40000       qq_tables.ttxmap:
zstatic  mem:5000       qq_tables.ttxmoduleno:
zstatic  mem:61       qq_tables.hostlvset:
istatic  mem:56       qq_tables.cvnames:
    data     i64       "cv_lineno"      
    data     i64       "cv_strlineno"   
    data     i64       "cv_filename"    
    data     i64       "cv_modulename"  
    data     i64       "cv_function"    
    data     i64       "cv_date"        
    data     i64       "cv_time"        
istatic  mem:24       qq_tables.loopnames:
    data     i64       "loop_redo"      
    data     i64       "loop_next"      
    data     i64       "loop_exit"      
istatic  mem:144       qq_tables.mathsnames:
    data     i64       "mm_sqrt"        
    data     i64       "mm_sqr"         
    data     i64       "mm_sin"         
    data     i64       "mm_cos"         
    data     i64       "mm_tan"         
    data     i64       "mm_asin"        
    data     i64       "mm_acos"        
    data     i64       "mm_atan"        
    data     i64       "mm_sign"        
    data     i64       "mm_log"         
    data     i64       "mm_log10"       
    data     i64       "mm_exp"         
    data     i64       "mm_round"       
    data     i64       "mm_floor"       
    data     i64       "mm_ceil"        
    data     i64       "mm_fract"       
    data     i64       "mm_fmod"        
    data     i64       "mm_atan2"       
istatic  mem:48       qq_tables.condnames:
    data     i64       "eq"             
    data     i64       "ne"             
    data     i64       "lt"             
    data     i64       "le"             
    data     i64       "ge"             
    data     i64       "gt"             
istatic  mem:6       qq_tables.revconds:
    data mem:6   1 0 4 5 2 3 
zstatic  u64       qq_show.labelmap:    
zstatic  i64       qq_show.currlineno:  
zstatic  u64       qq_show.currpclproc: 
zstatic  mem:16       qq_show.pclv:     
istatic  u64       qq_show.pcldest:     
    data     u64       &qq_show.pclv    
zstatic  mem:1024       qq_show.getprefix.str:
zstatic  mem:40       qq_show.getlineinfok.str:
istatic  u64       qq_show.showmoduleinfo.tab:
    data     i64       "    "           
zstatic  mem:2048       qq_show.strmode.str:
zstatic  mem:2048       qq_show.istrmode.str:
zstatic  i64       qq_showpcl.currlineno:
zstatic  u64       qq_showpcl.currpclproc:
zstatic  mem:512       qq_showpcl.writepclopnd.str:
zstatic  mem:512       qq_showpcl.writepclopnd.str2:
zstatic  mem:32       qq_vars.zeroobj:  
proc msysc.$getcommands:
    param    i64       ncmd
    param    u64       cmds
    param    i64       cmdskipl
    load     i64       ncmd             
    load     i64       1                
    sub      i64                        
    store    i64       msysc.ncmdparams 
    load     u64       cmds             
    store    u64       msysc.cmdparams  
    retproc                             
endproc

proc msysc.pushio:
    load     i64       msysc.niostack   
    load     i64       10               
    jumplt   i64       #4               
    setcall  i32 /1/1                   
    load     u64       "Too many io levels\n"
    setarg   u64 /1                     
    callf    i32 /1/1  &printf          
    unload   i32                        
    load     i64       53               
    stop                                
#4: 
    load     u64 /1    &msysc.niostack  
    incrto   i64 /1                     
    load     u64       msysc.outchan    
    load     u64       &msysc.outchan_stack
    load     i64       msysc.niostack   
    istorex  u64 /8/-8                  
    load     i64       msysc.outdev     
    load     u64       &msysc.outdev_stack
    load     i64       msysc.niostack   
    istorex  i64 /8/-8                  
    load     u64       msysc.fmtstr     
    load     u64       &msysc.fmtstr_stack
    load     i64       msysc.niostack   
    istorex  u64 /8/-8                  
    load     i64       msysc.needgap    
    load     u64       &msysc.needgap_stack
    load     i64       msysc.niostack   
    istorex  u8  /1/-1                  
    load     i64       0                
    store    i64       msysc.needgap    
    load     u64       0                
    store    u64       msysc.fmtstr     
    load     u64       0                
    store    u64       msysc.outchan    
    retproc                             
endproc

proc msysc.m$print_startfile:
    param    u64       dev
    setcall      /0/1                   
    callp        /0    &msysc.pushio    
    load     u64       dev              
    store    u64       msysc.outchan    
    load     u64       dev              
    jumpf    u64       #7               
    load     i64       2                
    store    i64       msysc.outdev     
    jump               #6               
#7: 
    load     i64       1                
    store    i64       msysc.outdev     
#6: 
    setcall      /0/1                   
    callp        /0    &msysc.resetprintbuffer
    retproc                             
endproc

proc msysc.m$print_startstr:
    param    u64       s
    local    u64       p
    setcall      /0/1                   
    callp        /0    &msysc.pushio    
    load     u64       s                
    load     u64       &msysc.ptr_stack 
    load     i64       msysc.niostack   
    istorex  u64 /8/-8                  
    load     u64       &msysc.ptr_stack 
    load     i64       msysc.niostack   
    addpx    u64 /8/-8                  
    store    u64       p                
    load     u64       p                
    store    u64       msysc.outchan    
    load     i64       3                
    store    i64       msysc.outdev     
    retproc                             
endproc

proc msysc.m$print_startptr:
    param    u64       p
    setcall      /0/1                   
    callp        /0    &msysc.pushio    
    load     u64       p                
    store    u64       msysc.outchan    
    load     i64       3                
    store    i64       msysc.outdev     
    retproc                             
endproc

proc msysc.m$print_startcon:
    setcall      /0/1                   
    callp        /0    &msysc.pushio    
    load     i64       1                
    store    i64       msysc.outdev     
    setcall      /0/1                   
    callp        /0    &msysc.resetprintbuffer
    retproc                             
endproc

proc msysc.m$print_setfmt:
    param    u64       format
    load     u64       format           
    store    u64       msysc.fmtstr     
    retproc                             
endproc

proc msysc.m$print_end:
    load     i64       0                
    store    i64       msysc.needgap    
    setcall      /1/1                   
    load     i64       1                
    setarg   i64 /1                     
    callp        /1    &msysc.nextfmtchars
    load     i64       msysc.niostack   
    load     i64       1                
    jumpne   i64       #14              
    load     i64       msysc.outdev     
    load     i64       1                
    jumpeq   i64 /1    #15              
    load     i64       2                
    jumpne   i64       #14              
#15: 
    setcall      /0/1                   
    callp        /0    &msysc.dumpprintbuffer
#14: 
    load     i64       msysc.niostack   
    load     i64       0                
    jumpne   i64       #17              
    jump               #12              
#17: 
    load     u64       &msysc.outchan_stack
    load     i64       msysc.niostack   
    iloadx   u64 /8/-8                  
    store    u64       msysc.outchan    
    load     u64       &msysc.outdev_stack
    load     i64       msysc.niostack   
    iloadx   i64 /8/-8                  
    store    i64       msysc.outdev     
    load     u64       &msysc.fmtstr_stack
    load     i64       msysc.niostack   
    iloadx   u64 /8/-8                  
    store    u64       msysc.fmtstr     
    load     u64       &msysc.needgap_stack
    load     i64       msysc.niostack   
    iloadx   u8  /1/-1                  
    widen    i64/u8                     
    store    i64       msysc.needgap    
    load     u64 /1    &msysc.niostack  
    decrto   i64 /1                     
#12: 
    retproc                             
endproc

proc msysc.m$print_ptr:
    param    u64       a
    param    u64       fmtstyle
    load     u64       fmtstyle         
    load     u64       0                
    jumpne   u64       #20              
    load     u64       "z8H"            
    store    u64       fmtstyle         
#20: 
    setcall      /2/1                   
    load     u64       fmtstyle         
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &msysc.m$print_u64
    retproc                             
endproc

proc msysc.m$print_ptr_nf:
    param    u64       a
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &msysc.m$print_ptr
    retproc                             
endproc

proc msysc.m$print_i64:
    param    i64       a
    param    u64       fmtstyle
    local    mem:40       s
    local    mem:16       fmt
    local    i64       n
    setcall      /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callp        /1    &msysc.nextfmtchars
    load     u64       fmtstyle         
    load     u64       0                
    jumpne   u64       #24              
    load     i64       a                
    load     i64       0                
    jumplt   i64       #26              
    setcall  i64 /4/1                   
    load     i64       0                
    setarg   i64 /4                     
    load     u64       10               
    setarg   u64 /3                     
    load     u64       &s               
    setarg   u64 /2                     
    load     i64       a                
    setarg   u64 /1                     
    callf    i64 /4    &msysc.u64tostr  
    store    i64       n                
    jump               #25              
#26: 
    load     i64       a                
    load     i64       -9223372036854775808
    jumpne   i64       #27              
    load     mem:16       msysc.defaultfmt
    store    mem:16       fmt           
    jump               #28              
    jump               #25              
#27: 
    load     u64       45               
    load     u64       &s               
    load     i64       1                
    istorex  u8  /1/-1                  
    setcall  i64 /4/1                   
    load     i64       0                
    setarg   i64 /4                     
    load     u64       10               
    setarg   u64 /3                     
    load     u64       &s               
    load     i64       1                
    addpx    u8  /1                     
    setarg   u64 /2                     
    load     i64       a                
    neg      i64                        
    setarg   u64 /1                     
    callf    i64 /4    &msysc.u64tostr  
    load     i64       1                
    add      i64                        
    store    i64       n                
#25: 
    setcall      /2/1                   
    load     i64       n                
    setarg   i64 /2                     
    load     u64       &s               
    setarg   u64 /1                     
    callp        /2    &msysc.printstr_n
    jump               #23              
#24: 
    setcall      /3/1                   
    load     u64       &fmt             
    setarg   u64 /3                     
    load     i64       -1               
    setarg   i64 /2                     
    load     u64       fmtstyle         
    setarg   u64 /1                     
    callp        /3    &msysc.strtofmt  
    load     u64       &fmt             
    load     i64       14               
    iloadx   u8  /1                     
    widen    u64/u8                     
    load     u64       86               
    jumpne   u64       #30              
    load     i64       a                
    store    i64       msysc.fmtparam   
    load     i64       0                
    store    i64       msysc.needgap    
    jump               #29              
#30: 
! msysc.m$print_i64.dofmt:
#28: 
    setcall      /2/1                   
    load     u64       &fmt             
    setarg   u64 /2                     
    load     i64       a                
    setarg   i64 /1                     
    callp        /2    &msysc.tostr_i64 
#29: 
#23: 
    load     i64       1                
    store    i64       msysc.needgap    
    retproc                             
endproc

proc msysc.m$print_i64_nf:
    param    i64       a
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     i64       a                
    setarg   i64 /1                     
    callp        /2    &msysc.m$print_i64
    retproc                             
endproc

proc msysc.m$print_bool:
    param    i64       a
    param    u64       fmtstyle
    load     i64       a                
    jumpf    i64       #34              
    setcall      /2/1                   
    load     u64       fmtstyle         
    setarg   u64 /2                     
    load     u64       "True"           
    setarg   u64 /1                     
    callp        /2    &msysc.m$print_str
    jump               #33              
#34: 
    setcall      /2/1                   
    load     u64       fmtstyle         
    setarg   u64 /2                     
    load     u64       "False"          
    setarg   u64 /1                     
    callp        /2    &msysc.m$print_str
#33: 
    retproc                             
endproc

proc msysc.m$print_u64:
    param    u64       a
    param    u64       fmtstyle
    local    mem:40       s
    local    mem:16       fmt
    setcall      /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callp        /1    &msysc.nextfmtchars
    load     u64       fmtstyle         
    load     u64       0                
    jumpne   u64       #37              
    setcall  i32 /3/1                   
    load     u64       a                
    setarg   u64 /3                     
    load     u64       "%llu"           
    setarg   u64 /2                     
    load     u64       &s               
    setarg   u64 /1                     
    callf    i32 /3/2  &sprintf         
    unload   i32                        
    setcall      /1/1                   
    load     u64       &s               
    setarg   u64 /1                     
    callp        /1    &msysc.printstr  
    jump               #36              
#37: 
    setcall      /3/1                   
    load     u64       &fmt             
    setarg   u64 /3                     
    load     i64       -1               
    setarg   i64 /2                     
    load     u64       fmtstyle         
    setarg   u64 /1                     
    callp        /3    &msysc.strtofmt  
    setcall      /2/1                   
    load     u64       &fmt             
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &msysc.tostr_u64 
#36: 
    load     i64       1                
    store    i64       msysc.needgap    
    retproc                             
endproc

proc msysc.m$print_r64:
    param    r64       x
    param    u64       fmtstyle
    local    mem:360       s
    local    mem:16       fmt
    setcall      /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callp        /1    &msysc.nextfmtchars
    load     u64       fmtstyle         
    load     u64       0                
    jumpne   u64       #40              
    setcall  i32 /3/1                   
    load     r64       x                
    setarg   r64 /3                     
    load     u64       "%f"             
    setarg   u64 /2                     
    load     u64       &s               
    setarg   u64 /1                     
    callf    i32 /3/2  &sprintf         
    unload   i32                        
    setcall      /1/1                   
    load     u64       &s               
    setarg   u64 /1                     
    callp        /1    &msysc.printstr  
    jump               #39              
#40: 
    setcall      /3/1                   
    load     u64       &fmt             
    setarg   u64 /3                     
    load     i64       -1               
    setarg   i64 /2                     
    load     u64       fmtstyle         
    setarg   u64 /1                     
    callp        /3    &msysc.strtofmt  
    setcall      /2/1                   
    load     u64       &fmt             
    setarg   u64 /2                     
    load     r64       x                
    setarg   r64 /1                     
    callp        /2    &msysc.tostr_r64 
#39: 
    load     i64       1                
    store    i64       msysc.needgap    
    retproc                             
endproc

proc msysc.m$print_r32:
    param    r32       x
    param    u64       fmtstyle
    setcall      /2/1                   
    load     u64       fmtstyle         
    setarg   u64 /2                     
    load     r32       x                
    fwiden   r64/r32                    
    setarg   r64 /1                     
    callp        /2    &msysc.m$print_r64
    retproc                             
endproc

proc msysc.m$print_c8:
    param    i64       a
    param    u64       fmtstyle
    local    mem:32       s
    local    mem:16       fmt
    local    i64       n
    local    u8       charmode
    load     i64       0                
    store    u8        charmode         
    setcall      /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callp        /1    &msysc.nextfmtchars
    load     u64       fmtstyle         
    jumpf    u64       #44              
    setcall      /3/1                   
    load     u64       &fmt             
    setarg   u64 /3                     
    load     i64       -1               
    setarg   i64 /2                     
    load     u64       fmtstyle         
    setarg   u64 /1                     
    callp        /3    &msysc.strtofmt  
    load     u64       &fmt             
    load     i64       12               
    iloadx   u8  /1                     
    store    u8        charmode         
#44: 
    load     u8        charmode         
    widen    i64/u8                     
    load     i64       77               
    jumpne   i64       #46              
    setcall  i64 /4/1                   
    load     u64       &fmt             
    setarg   u64 /4                     
    load     u64       &s               
    setarg   u64 /3                     
    load     i64       8                
    setarg   i64 /2                     
    load     u64       &a               
    setarg   u64 /1                     
    callf    i64 /4    &msysc.domultichar
    store    i64       n                
    jump               #45              
#46: 
    load     i64       a                
    load     u64       &s               
    istore   i64                        
    load     u64       0                
    load     u64       &s               
    load     i64       9                
    istorex  u8  /1/-1                  
    setcall  i64 /1/1                   
    load     u64       &s               
    setarg   u64 /1                     
    callf    i64 /1    &msysc.getutfsize
    store    i64       n                
#45: 
    setcall      /2/1                   
    load     i64       n                
    setarg   i64 /2                     
    load     u64       &s               
    setarg   u64 /1                     
    callp        /2    &msysc.printstr_n
    load     i64       1                
    store    i64       msysc.needgap    
    retproc                             
endproc

proc msysc.m$print_str:
    param    u64       s
    param    u64       fmtstyle
    local    mem:16       fmt
    setcall      /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callp        /1    &msysc.nextfmtchars
    load     u64       s                
    load     u64       0                
    jumpne   u64       #49              
    setcall      /1/1                   
    load     u64       "<null>"         
    setarg   u64 /1                     
    callp        /1    &msysc.printstr  
    jump               #47              
#49: 
    load     u64       fmtstyle         
    load     u64       0                
    jumpne   u64       #51              
    setcall      /1/1                   
    load     u64       s                
    setarg   u64 /1                     
    callp        /1    &msysc.printstr  
    jump               #50              
#51: 
    setcall      /3/1                   
    load     u64       &fmt             
    setarg   u64 /3                     
    load     i64       -1               
    setarg   i64 /2                     
    load     u64       fmtstyle         
    setarg   u64 /1                     
    callp        /3    &msysc.strtofmt  
    setcall      /3/1                   
    load     u64       &fmt             
    setarg   u64 /3                     
    load     i64       -1               
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callp        /3    &msysc.tostr_str 
#50: 
    load     i64       1                
    store    i64       msysc.needgap    
#47: 
    retproc                             
endproc

proc msysc.m$print_strn:
    param    u64       s
    param    i64       length
    param    u64       fmtstyle
    local    mem:16       fmt
    setcall      /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callp        /1    &msysc.nextfmtchars
    load     u64       s                
    load     u64       0                
    jumpne   u64       #54              
    setcall      /1/1                   
    load     u64       "<null>"         
    setarg   u64 /1                     
    callp        /1    &msysc.printstr  
    jump               #52              
#54: 
    load     u64       fmtstyle         
    load     u64       0                
    jumpne   u64       #56              
    setcall      /2/1                   
    load     i64       length           
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callp        /2    &msysc.printstr_n
    jump               #55              
#56: 
    setcall      /3/1                   
    load     u64       &fmt             
    setarg   u64 /3                     
    load     i64       -1               
    setarg   i64 /2                     
    load     u64       fmtstyle         
    setarg   u64 /1                     
    callp        /3    &msysc.strtofmt  
    setcall      /3/1                   
    load     u64       &fmt             
    setarg   u64 /3                     
    load     i64       length           
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callp        /3    &msysc.tostr_str 
#55: 
    load     i64       1                
    store    i64       msysc.needgap    
#52: 
    retproc                             
endproc

proc msysc.m$print_str_nf:
    param    u64       s
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callp        /2    &msysc.m$print_str
    retproc                             
endproc

proc msysc.m$print_strsl:
    param    mem:16       s
    param    u64       fmtstyle
    setcall      /1/1                   
    load     u64       "PRTSL"          
    setarg   u64 /1                     
    callp        /1    &mlib.abortprogram
    retproc                             
endproc

proc msysc.m$print_newline:
    load     i64       0                
    store    i64       msysc.needgap    
    setcall      /1/1                   
    load     i64       1                
    setarg   i64 /1                     
    callp        /1    &msysc.nextfmtchars
    setcall      /1/1                   
    load     u64       "\r\n"           
    setarg   u64 /1                     
    callp        /1    &msysc.printstr  
    retproc                             
endproc

proc msysc.m$print_nogap:
    load     i64       0                
    store    i64       msysc.needgap    
    retproc                             
endproc

proc msysc.m$print_space:
    load     i64       0                
    store    i64       msysc.needgap    
    setcall      /1/1                   
    load     u64       " "              
    setarg   u64 /1                     
    callp        /1    &msysc.printstr  
    retproc                             
endproc

proc msysc.printstr:
    param    u64       s
    setcall      /2                     
    setcall  i64 /1                     
    load     u64       s                
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callp        /2    &msysc.printstr_n
    retproc                             
endproc

proc msysc.printstr_n:
    param    u64       s
    param    i64       n
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     i64       n                
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callp        /3    &msysc.dumpstr   
    retproc                             
endproc

proc msysc.printstrn_app:
    param    u64       s
    param    i64       length
    param    u64       f
    load     i64       length           
    jumpf    i64       #66              
    load     u64       f                
    load     u64       0                
    jumpne   u64       #68              
    setcall  i32 /3/1                   
    load     u64       s                
    setarg   u64 /3                     
    load     i64       length           
    setarg   i64 /2                     
    load     u64       "%.*s"           
    setarg   u64 /1                     
    callf    i32 /3/1  &printf          
    unload   i32                        
    jump               #67              
#68: 
    setcall  i32 /4/1                   
    load     u64       s                
    setarg   u64 /4                     
    load     i64       length           
    setarg   i64 /3                     
    load     u64       "%.*s"           
    setarg   u64 /2                     
    load     u64       f                
    setarg   u64 /1                     
    callf    i32 /4/2  &fprintf         
    unload   i32                        
#67: 
#66: 
    retproc                             
endproc

proc msysc.printchar:
    param    i64       ch
    local    u32       str
    load     i64       ch               
    load     u64       &str             
    load     i64       1                
    istorex  u8  /1/-1                  
    load     u64       0                
    load     u64       &str             
    load     i64       2                
    istorex  u8  /1/-1                  
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callp        /2    &msysc.printstr_n
    retproc                             
endproc

proc msysc.nextfmtchars:
    param    i64       lastx
    local    u8       c
    local    u64       pstart
    local    i64       n
    load     u64       msysc.fmtstr     
    jumpt    u64       #72              
    load     i64       msysc.needgap    
    jumpf    i64       #74              
    setcall      /1/1                   
    load     i64       32               
    setarg   i64 /1                     
    callp        /1    &msysc.printchar 
#74: 
    load     i64       0                
    store    i64       msysc.needgap    
    jump               #70              
#72: 
    load     u64       msysc.fmtstr     
    store    u64       pstart           
    load     i64       0                
    store    i64       n                
#75: 
    load     u64       msysc.fmtstr     
    iload    u8                         
    store    u8        c                
    load     u8        c                
    widen    u64/u8                     
    load     u64       35               
    jumpeq   u64 /1    #78              
    load     u64       0                
    jumpeq   u64 /1    #79              
    load     u64       126              
    jumpeq   u64       #80              
    jump               #81              
#78: 
    load     i64       lastx            
    jumpf    i64       #83              
    jump               #84              
#83: 
    load     u64 /1    &msysc.fmtstr    
    incrto   u64 /1                     
    load     i64       n                
    jumpf    i64       #86              
    setcall      /2/1                   
    load     i64       n                
    setarg   i64 /2                     
    load     u64       pstart           
    setarg   u64 /1                     
    callp        /2    &msysc.printstr_n
#86: 
    jump               #70              
    jump               #77              
#79: 
    load     i64       n                
    jumpf    i64       #88              
    setcall      /2/1                   
    load     i64       n                
    setarg   i64 /2                     
    load     u64       pstart           
    setarg   u64 /1                     
    callp        /2    &msysc.printstr_n
    jump               #87              
#88: 
    load     i64       lastx            
    jumpt    i64       #89              
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       "|"              
    setarg   u64 /1                     
    callp        /2    &msysc.printstr_n
#89: 
#87: 
    jump               #70              
    jump               #77              
#80: 
    load     i64       n                
    jumpf    i64       #91              
    setcall      /2/1                   
    load     i64       n                
    setarg   i64 /2                     
    load     u64       pstart           
    setarg   u64 /1                     
    callp        /2    &msysc.printstr_n
    load     i64       0                
    store    i64       n                
#91: 
    load     u64 /1    &msysc.fmtstr    
    incrto   u64 /1                     
    load     u64       msysc.fmtstr     
    iload    u8                         
    store    u8        c                
    load     u8        c                
    jumpf    u8        #93              
    load     u64 /1    &msysc.fmtstr    
    incrto   u64 /1                     
    setcall      /1/1                   
    load     u8        c                
    widen    i64/u8                     
    setarg   i64 /1                     
    callp        /1    &msysc.printchar 
#93: 
    load     u64       msysc.fmtstr     
    store    u64       pstart           
    jump               #77              
#81: 
! msysc.nextfmtchars.skip:
#84: 
    load     u64 /1    &n               
    incrto   i64 /1                     
    load     u64 /1    &msysc.fmtstr    
    incrto   u64 /1                     
#77: 
    jump               #75              
#70: 
    retproc                             
endproc

proc msysc.strtofmt:
    param    u64       s
    param    i64       slen
    param    u64       fmt
    local    i64       c
    local    i64       base
    local    u8       wset
    local    i64       n
    local    mem:100       str
    load     mem:16       msysc.defaultfmt
    load     u64       fmt              
    istore   mem:16                     
    load     u64       s                
    load     u64       0                
    jumpne   u64       #96              
    jump               #94              
#96: 
    load     i64       slen             
    load     i64       -1               
    jumpne   i64       #98              
    setcall  i64 /1/1                   
    load     u64       s                
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    store    i64       slen             
#98: 
    setcall      /3/1                   
    load     i64       slen             
    setarg   u64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     u64       0                
    load     u64       &str             
    load     i64       slen             
    istorex  u8  /1                     
    load     u64       &str             
    store    u64       s                
    load     i64       0                
    store    u8        wset             
    jump               #100             
#99: 
    load     u64       s                
    iload    u8                         
    widen    i64/u8                     
    store    i64       c                
    load     u64 /1    &s               
    incrto   u64 /1                     
    load     i64       c                
    load     i64       65               
    jumpne   i64       #103             
    load     u64       65               
    load     u64       fmt              
    load     i64       8                
    istorex  u8  /1                     
    jump               #102             
#103: 
    load     i64       c                
    load     i64       97               
    jumpne   i64       #104             
    load     u64       97               
    load     u64       fmt              
    load     i64       8                
    istorex  u8  /1                     
    jump               #102             
#104: 
    setcall  i32 /1/1                   
    load     i64       c                
    setarg   i32 /1                     
    callf    i32 /1    &toupper         
    widen    i64/i32                    
    switch   i64 /66/90  #106           
    opnd     i64       #107             
#106: 
    swlabel            #108             
    swlabel            #137             
    swlabel            #136             
    swlabel            #133             
    swlabel            #134             
    swlabel            #135             
    swlabel            #109             
    swlabel            #107             
    swlabel            #119             
    swlabel            #107             
    swlabel            #107             
    swlabel            #138             
    swlabel            #141             
    swlabel            #110             
    swlabel            #126             
    swlabel            #118             
    swlabel            #107             
    swlabel            #123             
    swlabel            #129             
    swlabel            #132             
    swlabel            #139             
    swlabel            #107             
    swlabel            #111             
    swlabel            #140             
    swlabel            #122             
    endsw                               
#108: 
    load     i64       2                
    load     u64       fmt              
    load     i64       2                
    istorex  u8  /1                     
    jump               #105             
#109: 
    load     i64       16               
    load     u64       fmt              
    load     i64       2                
    istorex  u8  /1                     
    jump               #105             
#110: 
    load     i64       8                
    load     u64       fmt              
    load     i64       2                
    istorex  u8  /1                     
    jump               #105             
#111: 
    load     i64       0                
    store    i64       base             
#112: 
    load     u64       s                
    iload    u8                         
    widen    i64/u8                     
    store    i64       c                
    load     i64       c                
    load     i64       48               
    jumplt   i64 /1    #115             
    load     i64       57               
    jumpgt   i64       #115             
    load     i64       base             
    load     i64       10               
    mul      i64                        
    load     i64       c                
    add      i64                        
    load     i64       48               
    sub      i64                        
    store    i64       base             
    load     u64 /1    &s               
    incrto   u64 /1                     
    jump               #114             
#115: 
    jump               #113             
#114: 
    jump               #112             
#113: 
    load     i64       base             
    load     i64       2                
    jumplt   i64 /1    #117             
    load     i64       16               
    jumpgt   i64       #117             
    load     i64       base             
    load     u64       fmt              
    load     i64       2                
    istorex  u8  /1                     
#117: 
    jump               #105             
#118: 
    load     u64       34               
    load     u64       fmt              
    load     i64       3                
    istorex  u8  /1                     
    jump               #105             
#119: 
    setcall  i32 /1/1                   
    load     u64       s                
    iload    u8                         
    widen    u64/u8                     
    setarg   i32 /1                     
    callf    i32 /1    &toupper         
    load     u64       fmt              
    load     i64       9                
    istorex  u8  /1                     
    load     u64       s                
    iload    u8                         
    jumpf    u8        #121             
    load     u64 /1    &s               
    incrto   u64 /1                     
#121: 
    jump               #105             
#122: 
    load     u64       48               
    load     u64       fmt              
    load     i64       4                
    istorex  u8  /1                     
    jump               #105             
#123: 
    load     u64       s                
    iload    u8                         
    load     u64       fmt              
    load     i64       7                
    istorex  u8  /1                     
    load     u64       s                
    iload    u8                         
    jumpf    u8        #125             
    load     u64 /1    &s               
    incrto   u64 /1                     
#125: 
    jump               #105             
#126: 
    load     u64       s                
    iload    u8                         
    load     u64       fmt              
    load     i64       4                
    istorex  u8  /1                     
    load     u64       s                
    iload    u8                         
    jumpf    u8        #128             
    load     u64 /1    &s               
    incrto   u64 /1                     
#128: 
    jump               #105             
#129: 
    load     u64       s                
    iload    u8                         
    load     u64       fmt              
    load     i64       10               
    istorex  u8  /1                     
    load     u64       s                
    iload    u8                         
    jumpf    u8        #131             
    load     u64 /1    &s               
    incrto   u64 /1                     
#131: 
    jump               #105             
#132: 
    load     u64       87               
    load     u64       fmt              
    load     i64       11               
    istorex  u8  /1                     
    jump               #105             
#133: 
    load     u64       101              
    load     u64       fmt              
    load     i64       5                
    istorex  u8  /1                     
    jump               #105             
#134: 
    load     u64       102              
    load     u64       fmt              
    load     i64       5                
    istorex  u8  /1                     
    jump               #105             
#135: 
    load     u64       103              
    load     u64       fmt              
    load     i64       5                
    istorex  u8  /1                     
    jump               #105             
#136: 
    load     u64       68               
    load     u64       fmt              
    load     i64       13               
    istorex  u8  /1                     
    jump               #105             
#137: 
    load     u64       67               
    load     u64       fmt              
    load     i64       12               
    istorex  u8  /1                     
    jump               #105             
#138: 
    load     u64       77               
    load     u64       fmt              
    load     i64       12               
    istorex  u8  /1                     
    jump               #105             
#139: 
    load     u64       86               
    load     u64       fmt              
    load     i64       14               
    istorex  u8  /1                     
    jump               #105             
#140: 
    load     u64       1                
    load     u64       fmt              
    load     i64       15               
    addpx    u64 /1                     
    load     i64       0                
    storebit u8                         
    jump               #105             
#141: 
    load     u64       1                
    load     u64       fmt              
    load     i64       15               
    addpx    u64 /1                     
    load     i64       1                
    storebit u8                         
    jump               #105             
#107: 
    load     i64       c                
    load     i64       46               
    jumpeq   i64 /1    #143             
    load     i64       44               
    jumpeq   i64 /1    #144             
    load     i64       95               
    jumpeq   i64 /1    #144             
    load     i64       43               
    jumpeq   i64 /1    #145             
    load     i64       126              
    jumpeq   i64 /1    #146             
    load     i64       42               
    jumpeq   i64       #147             
    jump               #148             
#143: 
    load     i64       1                
    store    u8        wset             
    jump               #142             
#144: 
    load     i64       c                
    load     u64       fmt              
    load     i64       7                
    istorex  u8  /1                     
    jump               #142             
#145: 
    load     u64       43               
    load     u64       fmt              
    load     i64       6                
    istorex  u8  /1                     
    jump               #142             
#146: 
    load     u64       126              
    load     u64       fmt              
    load     i64       3                
    istorex  u8  /1                     
    jump               #142             
#147: 
    load     i64       msysc.fmtparam   
    store    i64       n                
    jump               #149             
    jump               #142             
#148: 
    load     i64       c                
    load     i64       48               
    jumplt   i64       #151             
    load     i64       c                
    load     i64       57               
    jumpgt   i64       #151             
    load     i64       c                
    load     i64       48               
    sub      i64                        
    store    i64       n                
#152: 
    load     u64       s                
    iload    u8                         
    widen    i64/u8                     
    store    i64       c                
    load     u64       s                
    iload    u8                         
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #155             
    jump               #153             
#155: 
    load     i64       c                
    load     i64       48               
    jumplt   i64       #157             
    load     i64       c                
    load     i64       57               
    jumpgt   i64       #157             
    load     u64 /1    &s               
    incrto   u64 /1                     
    load     i64       n                
    load     i64       10               
    mul      i64                        
    load     i64       c                
    add      i64                        
    load     i64       48               
    sub      i64                        
    store    i64       n                
    jump               #156             
#157: 
    jump               #153             
#156: 
    jump               #152             
#153: 
! msysc.strtofmt.gotwidth:
#149: 
    load     u8        wset             
    jumpt    u8        #159             
    load     i64       n                
    load     u64       fmt              
    load     i64       0                
    istorex  u8  /1                     
    load     i64       1                
    store    u8        wset             
    jump               #158             
#159: 
    load     i64       n                
    load     u64       fmt              
    load     i64       1                
    istorex  i8  /1                     
#158: 
#151: 
#142: 
#105: 
#102: 
#100: 
    load     u64       s                
    iload    u8                         
    jumpt    u8        #99              
#94: 
    retproc                             
endproc

proc msysc.domultichar:
    param    u64       p
    param    i64       n
    param    u64       dest
    param    u64       fmt
    local    mem:20       str
    local    u64       q
    local    i64       nchars
    local    i64       av_1
    rettype  i64
    load     u64       &str             
    store    u64       q                
    load     i64       n                
    store    i64       nchars           
    load     i64       n                
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #163             
#161: 
    load     u64       p                
    iload    u8                         
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #165             
    jump               #163             
#165: 
    load     u64       p                
    iload    u8                         
    load     u64       q                
    istore   u8                         
    load     u64 /1    &q               
    incrto   u64 /1                     
    load     u64 /1    &p               
    incrto   u64 /1                     
    to       i64       #161             
    opnd     i64       av_1             
#163: 
    load     u64       0                
    load     u64       q                
    istore   u8                         
    setcall  i64 /4                     
    load     u64       fmt              
    setarg   u64 /4                     
    setcall  i64 /1                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    setarg   i64 /3                     
    load     u64       dest             
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    i64 /4    &msysc.expandstr 
    jumpret  i64       #160             
#160: 
    retfn    i64                        
endproc

proc msysc.expandstr:
    param    u64       s
    param    u64       t
    param    i64       n
    param    u64       fmt
    local    i64       i
    local    i64       w
    local    i64       m
    local    i64       av_1
    local    i64       av_2
    local    i64       av_3
    local    i64       av_4
    local    i64       av_5
    rettype  i64
    load     u64       fmt              
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       w                
    load     i64       w                
    load     i64       0                
    jumpeq   i64       #169             
    load     i64       w                
    load     i64       n                
    jumpgt   i64       #168             
#169: 
    setcall  u64 /3/1                   
    load     i64       n                
    setarg   u64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       t                
    setarg   u64 /1                     
    callf    u64 /3    &strncpy         
    unload   u64                        
    load     u64       0                
    load     u64       t                
    load     i64       n                
    istorex  u8  /1                     
    load     i64       n                
    jumpret  i64       #166             
#168: 
    load     u64       fmt              
    load     i64       9                
    iloadx   u8  /1                     
    widen    u64/u8                     
    load     u64       76               
    jumpne   u64       #171             
    setcall  u64 /3/1                   
    load     i64       n                
    setarg   u64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       t                
    setarg   u64 /1                     
    callf    u64 /3    &strncpy         
    unload   u64                        
    load     i64       n                
    load     u64 /1    &t               
    addpxto  u64 /1                     
    load     i64       1                
    store    i64       i                
    load     i64       w                
    load     i64       n                
    sub      i64                        
    store    i64       av_1             
    load     i64       av_1             
    load     i64       1                
    jumplt   i64       #174             
#172: 
    load     u64       fmt              
    load     i64       4                
    iloadx   u8  /1                     
    load     u64       t                
    istore   u8                         
    load     u64 /1    &t               
    incrto   u64 /1                     
    forup    i64 /1    #172             
    opnd     i64       i                
    opnd     i64       av_1             
#174: 
    load     u64       0                
    load     u64       t                
    istore   u8                         
    jump               #170             
#171: 
    load     u64       fmt              
    load     i64       9                
    iloadx   u8  /1                     
    widen    u64/u8                     
    load     u64       82               
    jumpne   u64       #175             
    load     u64       fmt              
    load     i64       4                
    iloadx   u8  /1                     
    widen    u64/u8                     
    load     u64       48               
    jumpne   u64       #177             
    load     u64       fmt              
    load     i64       2                
    iloadx   u8  /1                     
    jumpf    u8        #177             
    load     u64       s                
    iload    u8                         
    widen    u64/u8                     
    load     u64       45               
    jumpeq   u64       #178             
    load     u64       s                
    iload    u8                         
    widen    u64/u8                     
    load     u64       43               
    jumpne   u64       #177             
#178: 
    load     u64       s                
    iload    u8                         
    load     u64       t                
    istore   u8                         
    load     u64 /1    &t               
    incrto   u64 /1                     
    load     i64       w                
    load     i64       n                
    sub      i64                        
    store    i64       av_2             
    load     i64       av_2             
    load     i64       0                
    jumple   i64       #181             
#179: 
    load     u64       fmt              
    load     i64       4                
    iloadx   u8  /1                     
    load     u64       t                
    istore   u8                         
    load     u64 /1    &t               
    incrto   u64 /1                     
    to       i64       #179             
    opnd     i64       av_2             
#181: 
    setcall  u64 /3/1                   
    load     i64       n                
    load     i64       1                
    sub      u64                        
    setarg   u64 /3                     
    load     u64       s                
    load     i64       1                
    addpx    u64 /1                     
    setarg   u64 /2                     
    load     u64       t                
    setarg   u64 /1                     
    callf    u64 /3    &strncpy         
    unload   u64                        
    load     u64       0                
    load     u64       t                
    load     i64       n                
    addpx    u64 /1                     
    load     i64       1                
    subpx    u64 /1                     
    istore   u8                         
    jump               #176             
#177: 
    load     i64       w                
    load     i64       n                
    sub      i64                        
    store    i64       av_3             
    load     i64       av_3             
    load     i64       0                
    jumple   i64       #184             
#182: 
    load     u64       fmt              
    load     i64       4                
    iloadx   u8  /1                     
    load     u64       t                
    istore   u8                         
    load     u64 /1    &t               
    incrto   u64 /1                     
    to       i64       #182             
    opnd     i64       av_3             
#184: 
    setcall  u64 /3/1                   
    load     i64       n                
    setarg   u64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       t                
    setarg   u64 /1                     
    callf    u64 /3    &strncpy         
    unload   u64                        
    load     u64       0                
    load     u64       t                
    load     i64       n                
    istorex  u8  /1                     
#176: 
    jump               #170             
#175: 
    load     i64       w                
    load     i64       n                
    sub      i64                        
    load     i64       1                
    add      i64                        
    load     i64       2                
    idiv     i64                        
    store    i64       m                
    load     i64       m                
    store    i64       av_4             
    load     i64       av_4             
    load     i64       0                
    jumple   i64       #187             
#185: 
    load     u64       fmt              
    load     i64       4                
    iloadx   u8  /1                     
    load     u64       t                
    istore   u8                         
    load     u64 /1    &t               
    incrto   u64 /1                     
    to       i64       #185             
    opnd     i64       av_4             
#187: 
    setcall  u64 /3/1                   
    load     i64       n                
    setarg   u64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       t                
    setarg   u64 /1                     
    callf    u64 /3    &strncpy         
    unload   u64                        
    load     i64       n                
    load     u64 /1    &t               
    addpxto  u64 /1                     
    load     i64       w                
    load     i64       n                
    sub      i64                        
    load     i64       m                
    sub      i64                        
    store    i64       av_5             
    load     i64       av_5             
    load     i64       0                
    jumple   i64       #190             
#188: 
    load     u64       fmt              
    load     i64       4                
    iloadx   u8  /1                     
    load     u64       t                
    istore   u8                         
    load     u64 /1    &t               
    incrto   u64 /1                     
    to       i64       #188             
    opnd     i64       av_5             
#190: 
    load     u64       0                
    load     u64       t                
    istore   u8                         
#170: 
    load     i64       w                
    jumpret  i64       #166             
#166: 
    retfn    i64                        
endproc

proc msysc.u64tostr:
    param    u64       aa
    param    u64       s
    param    u64       base
    param    i64       sep
    local    mem:360       t
    local    u64       dd
    local    i64       i
    local    i64       j
    local    i64       k
    local    i64       g
    local    u64       s0
    rettype  i64
    load     i64       0                
    store    i64       i                
    load     i64       0                
    store    i64       k                
    startmx                             
    load     u64       base             
    load     i64       10               
    jumpne   i64       #193             
    load     i64       3                
    resetmx  i64                        
    jump               #192             
#193: 
    load     i64       4                
    endmx    i64                        
#192: 
    store    i64       g                
#194: 
    load     u64       aa               
    load     u64       base             
    irem     u64                        
    store    u64       dd               
    load     u64       aa               
    load     u64       base             
    idiv     u64                        
    store    u64       aa               
    load     u64       &msysc.digits    
    load     u64       dd               
    iloadx   u8  /1                     
    load     u64       &t               
    load     u64 /1    &i               
    incrload i64 /1                     
    istorex  u8  /1                     
    load     u64 /1    &k               
    incrto   i64 /1                     
    load     i64       sep              
    jumpf    i64       #198             
    load     u64       aa               
    load     i64       0                
    jumpeq   i64       #198             
    load     i64       k                
    load     i64       g                
    jumpne   i64       #198             
    load     i64       sep              
    load     u64       &t               
    load     u64 /1    &i               
    incrload i64 /1                     
    istorex  u8  /1                     
    load     i64       0                
    store    i64       k                
#198: 
    load     u64       aa               
    load     i64       0                
    jumpne   i64       #194             
    load     i64       i                
    store    i64       j                
    load     u64       s                
    store    u64       s0               
    jump               #200             
#199: 
    load     u64       &t               
    load     u64 /1    &i               
    loaddecr i64 /1                     
    iloadx   u8  /1                     
    load     u64       s                
    istore   u8                         
    load     u64 /1    &s               
    incrto   u64 /1                     
#200: 
    load     i64       i                
    jumpt    i64       #199             
    load     u64       0                
    load     u64       s                
    istore   u8                         
    load     i64       j                
    jumpret  i64       #191             
#191: 
    retfn    i64                        
endproc

proc msysc.i64tostrfmt:
    param    i64       aa
    param    u64       s
    param    u64       fmt
    local    mem:360       str
    local    i64       n
    local    i64       usigned
    rettype  i64
    load     i64       0                
    store    i64       usigned          
    load     u64       fmt              
    load     i64       11               
    iloadx   u8  /1                     
    jumpf    u8        #204             
    load     i64       1                
    store    i64       usigned          
#204: 
    load     i64       aa               
    load     i64       -9223372036854775808
    jumpne   i64       #206             
    load     i64       usigned          
    jumpt    i64       #206             
    load     u64       45               
    load     u64       &str             
    load     i64       0                
    istorex  u8  /1                     
    setcall  i64 /3/1                   
    load     u64       fmt              
    load     i64       7                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /3                     
    load     u64       fmt              
    load     i64       2                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       &str             
    load     i64       1                
    addpx    u8  /1                     
    setarg   u64 /1                     
    callf    i64 /3    &msysc.i64mintostr
    load     i64       1                
    add      i64                        
    store    i64       n                
    jump               #205             
#206: 
    load     i64       usigned          
    jumpt    i64       #210             
    load     i64       aa               
    load     i64       0                
    jumplt   i64       #209             
#210: 
    load     u64       fmt              
    load     i64       6                
    iloadx   u8  /1                     
    jumpf    u8        #208             
#209: 
    load     i64       aa               
    load     i64       0                
    jumpge   i64       #212             
    load     i64       aa               
    neg      i64                        
    store    i64       aa               
    load     u64       45               
    load     u64       &str             
    load     i64       0                
    istorex  u8  /1                     
    jump               #211             
#212: 
    load     u64       43               
    load     u64       &str             
    load     i64       0                
    istorex  u8  /1                     
#211: 
    setcall  i64 /4/1                   
    load     u64       fmt              
    load     i64       7                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /4                     
    load     u64       fmt              
    load     i64       2                
    iloadx   u8  /1                     
    widen    u64/u8                     
    setarg   u64 /3                     
    load     u64       &str             
    load     i64       1                
    addpx    u8  /1                     
    setarg   u64 /2                     
    load     i64       aa               
    setarg   u64 /1                     
    callf    i64 /4    &msysc.u64tostr  
    load     i64       1                
    add      i64                        
    store    i64       n                
    jump               #207             
#208: 
    setcall  i64 /4/1                   
    load     u64       fmt              
    load     i64       7                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /4                     
    load     u64       fmt              
    load     i64       2                
    iloadx   u8  /1                     
    widen    u64/u8                     
    setarg   u64 /3                     
    load     u64       &str             
    setarg   u64 /2                     
    load     i64       aa               
    setarg   u64 /1                     
    callf    i64 /4    &msysc.u64tostr  
    store    i64       n                
#207: 
#205: 
    load     u64       fmt              
    load     i64       10               
    iloadx   u8  /1                     
    jumpf    u8        #214             
    load     u64       fmt              
    load     i64       10               
    iloadx   u8  /1                     
    load     u64       &str             
    load     i64       n                
    istorex  u8  /1                     
    load     u64       0                
    load     u64       &str             
    load     u64 /1    &n               
    incrload i64 /1                     
    istorex  u8  /1                     
#214: 
    load     u64       fmt              
    load     i64       2                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       10               
    jumpgt   i64       #217             
    load     u64       fmt              
    load     i64       10               
    iloadx   u8  /1                     
    jumpf    u8        #216             
#217: 
    load     u64       fmt              
    load     i64       8                
    iloadx   u8  /1                     
    widen    u64/u8                     
    load     u64       97               
    jumpne   u64       #216             
    setcall  u64 /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /1    &mlib.convlcstring
    unload   u64                        
#216: 
    setcall  i64 /4/1                   
    load     u64       fmt              
    setarg   u64 /4                     
    load     i64       n                
    setarg   i64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    i64 /4    &msysc.expandstr 
    jumpret  i64       #202             
#202: 
    retfn    i64                        
endproc

proc msysc.u64tostrfmt:
    param    i64       aa
    param    u64       s
    param    u64       fmt
    local    mem:360       str
    local    i64       n
    rettype  i64
    setcall  i64 /4/1                   
    load     u64       fmt              
    load     i64       7                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /4                     
    load     u64       fmt              
    load     i64       2                
    iloadx   u8  /1                     
    widen    u64/u8                     
    setarg   u64 /3                     
    load     u64       &str             
    setarg   u64 /2                     
    load     i64       aa               
    setarg   u64 /1                     
    callf    i64 /4    &msysc.u64tostr  
    store    i64       n                
    load     u64       fmt              
    load     i64       10               
    iloadx   u8  /1                     
    jumpf    u8        #220             
    load     u64       fmt              
    load     i64       10               
    iloadx   u8  /1                     
    load     u64       &str             
    load     i64       n                
    istorex  u8  /1                     
    load     u64       0                
    load     u64       &str             
    load     u64 /1    &n               
    incrload i64 /1                     
    istorex  u8  /1                     
#220: 
    load     u64       fmt              
    load     i64       2                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       10               
    jumpgt   i64       #223             
    load     u64       fmt              
    load     i64       10               
    iloadx   u8  /1                     
    jumpf    u8        #222             
    load     u64       fmt              
    load     i64       8                
    iloadx   u8  /1                     
    widen    u64/u8                     
    load     u64       97               
    jumpne   u64       #222             
#223: 
#222: 
    setcall  i64 /4/1                   
    load     u64       fmt              
    setarg   u64 /4                     
    load     i64       n                
    setarg   i64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    i64 /4    &msysc.expandstr 
    jumpret  i64       #218             
#218: 
    retfn    i64                        
endproc

proc msysc.i64mintostr:
    param    u64       s
    param    i64       base
    param    i64       sep
    local    mem:360       t
    local    i64       i
    local    i64       j
    local    i64       k
    local    i64       g
    rettype  i64
    load     i64       base             
    load     i64       10               
    jumpeq   i64 /1    #226             
    load     i64       16               
    jumpeq   i64 /1    #227             
    load     i64       2                
    jumpeq   i64       #228             
    jump               #229             
#226: 
    setcall  u64 /2/1                   
    load     u64       "9223372036854775808"
    setarg   u64 /2                     
    load     u64       &t               
    load     i64       0                
    addpx    u8  /1                     
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    load     i64       3                
    store    i64       j                
    jump               #225             
#227: 
    setcall  u64 /2/1                   
    load     u64       "8000000000000000"
    setarg   u64 /2                     
    load     u64       &t               
    load     i64       0                
    addpx    u8  /1                     
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    load     i64       1                
    store    i64       j                
    jump               #225             
#228: 
    setcall  u64 /2/1                   
    load     u64       "1000000000000000000000000000000000000000000000000000000000000000"
    setarg   u64 /2                     
    load     u64       &t               
    load     i64       0                
    addpx    u8  /1                     
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    load     i64       7                
    store    i64       j                
    jump               #225             
#229: 
    setcall  u64 /2/1                   
    load     u64       "<mindint>"      
    setarg   u64 /2                     
    load     u64       &t               
    load     i64       0                
    addpx    u8  /1                     
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
#225: 
    setcall  i64 /1/1                   
    load     u64       &t               
    load     i64       0                
    addpx    u8  /1                     
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    store    i64       i                
    load     i64       i                
    load     u64 /1    &s               
    addpxto  u64 /1                     
    load     i64       sep              
    jumpf    i64       #231             
    load     i64       j                
    load     u64 /1    &s               
    addpxto  u64 /1                     
#231: 
    load     u64       0                
    load     u64       s                
    istore   u8                         
    load     i64       0                
    store    i64       k                
    startmx                             
    load     i64       base             
    load     i64       10               
    jumpne   i64       #233             
    load     i64       3                
    resetmx  i64                        
    jump               #232             
#233: 
    load     i64       4                
    endmx    i64                        
#232: 
    store    i64       g                
    jump               #235             
#234: 
    load     u64 /1    &s               
    decrto   u64 /1                     
    load     u64       &t               
    load     u64 /1    &i               
    loaddecr i64 /1                     
    iloadx   u8  /1/-1                  
    load     u64       s                
    istore   u8                         
    load     i64       sep              
    jumpf    i64       #238             
    load     i64       i                
    jumpf    i64       #238             
    load     u64 /1    &k               
    incrload i64 /1                     
    load     i64       g                
    jumpne   i64       #238             
    load     u64 /1    &s               
    decrto   u64 /1                     
    load     i64       sep              
    load     u64       s                
    istore   u8                         
    load     i64       0                
    store    i64       k                
#238: 
#235: 
    load     i64       i                
    jumpt    i64       #234             
    setcall  i64 /1/1                   
    load     u64       s                
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    jumpret  i64       #224             
#224: 
    retfn    i64                        
endproc

proc msysc.strtostrfmt:
    param    u64       s
    param    u64       t
    param    i64       n
    param    u64       fmt
    local    u64       u
    local    u64       v
    local    mem:256       str
    local    i64       w
    local    i64       nheap
    rettype  i64
    load     i64       0                
    store    i64       nheap            
    load     u64       fmt              
    load     i64       3                
    iloadx   u8  /1                     
    jumpt    u8        #242             
    load     u64       fmt              
    load     i64       8                
    iloadx   u8  /1                     
    jumpf    u8        #241             
#242: 
    load     i64       n                
    load     i64       256              
    jumpge   i64       #244             
    load     u64       &str             
    store    u64       u                
    jump               #243             
#244: 
    load     i64       n                
    load     i64       3                
    add      i64                        
    store    i64       nheap            
    setcall  u64 /1/1                   
    load     i64       nheap            
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    store    u64       u                
#243: 
    load     u64       fmt              
    load     i64       3                
    iloadx   u8  /1                     
    jumpf    u8        #246             
    load     u64       u                
    store    u64       v                
    load     u64       fmt              
    load     i64       3                
    iloadx   u8  /1                     
    load     u64       v                
    istore   u8                         
    load     u64 /1    &v               
    incrto   u64 /1                     
    load     i64       n                
    jumpf    i64       #248             
    setcall  u64 /2/1                   
    load     u64       s                
    setarg   u64 /2                     
    load     u64       v                
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    load     i64       n                
    load     u64 /1    &v               
    addpxto  u64 /1                     
#248: 
    load     u64       fmt              
    load     i64       3                
    iloadx   u8  /1                     
    load     u64       v                
    istore   u8                         
    load     u64 /1    &v               
    incrto   u64 /1                     
    load     u64       0                
    load     u64       v                
    istore   u8                         
    load     i64       2                
    load     u64 /1    &n               
    addto    i64                        
    jump               #245             
#246: 
    setcall      /3/1                   
    load     i64       n                
    setarg   u64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       u                
    setarg   u64 /1                     
    callp        /3    &memcpy          
#245: 
    load     u64       fmt              
    load     i64       8                
    iloadx   u8  /1                     
    widen    u64/u8                     
    load     u64       97               
    jumpeq   u64 /1    #250             
    load     u64       65               
    jumpeq   u64       #251             
    jump               #252             
#250: 
    setcall  u64 /1/1                   
    load     u64       u                
    setarg   u64 /1                     
    callf    u64 /1    &mlib.convlcstring
    unload   u64                        
    jump               #249             
#251: 
    setcall  u64 /1/1                   
    load     u64       u                
    setarg   u64 /1                     
    callf    u64 /1    &mlib.convucstring
    unload   u64                        
    jump               #249             
#252: 
#249: 
    load     u64       u                
    store    u64       s                
#241: 
    load     u64       fmt              
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       w                
    load     i64       w                
    load     i64       n                
    jumple   i64       #254             
    setcall  i64 /4/1                   
    load     u64       fmt              
    setarg   u64 /4                     
    load     i64       n                
    setarg   i64 /3                     
    load     u64       t                
    setarg   u64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    i64 /4    &msysc.expandstr 
    store    i64       n                
    jump               #253             
#254: 
    setcall      /3/1                   
    load     i64       n                
    setarg   u64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       t                
    setarg   u64 /1                     
    callp        /3    &memcpy          
#253: 
    load     i64       nheap            
    jumpf    i64       #256             
    setcall      /2/1                   
    load     i64       nheap            
    setarg   i64 /2                     
    load     u64       u                
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_free   
#256: 
    load     i64       n                
    jumpret  i64       #239             
#239: 
    retfn    i64                        
endproc

proc msysc.tostr_i64:
    param    i64       a
    param    u64       fmt
    local    mem:360       str
    local    i64       n
    load     u64       fmt              
    load     i64       12               
    iloadx   u8  /1                     
    widen    u64/u8                     
    load     u64       0                
    jumpeq   u64 /1    #259             
    load     u64       77               
    jumpeq   u64       #260             
    jump               #261             
#259: 
    setcall  i64 /3/1                   
    load     u64       fmt              
    setarg   u64 /3                     
    load     u64       &str             
    setarg   u64 /2                     
    load     i64       a                
    setarg   i64 /1                     
    callf    i64 /3    &msysc.i64tostrfmt
    store    i64       n                
    jump               #258             
#260: 
    setcall  i64 /4/1                   
    load     u64       fmt              
    setarg   u64 /4                     
    load     u64       &str             
    setarg   u64 /3                     
    load     i64       8                
    setarg   i64 /2                     
    load     u64       &a               
    setarg   u64 /1                     
    callf    i64 /4    &msysc.domultichar
    store    i64       n                
    jump               #258             
#261: 
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     i64       a                
    setarg   i64 /1                     
    callp        /2    &msysc.m$print_c8
    jump               #257             
#258: 
    setcall      /2/1                   
    load     i64       n                
    setarg   i64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callp        /2    &msysc.printstr_n
#257: 
    retproc                             
endproc

proc msysc.tostr_u64:
    param    u64       a
    param    u64       fmt
    local    mem:360       str
    local    i64       n
    load     u64       fmt              
    load     i64       12               
    iloadx   u8  /1                     
    widen    u64/u8                     
    load     u64       77               
    jumpeq   u64 /1    #264             
    load     u64       67               
    jumpeq   u64       #265             
    jump               #266             
#264: 
    setcall  i64 /4/1                   
    load     u64       fmt              
    setarg   u64 /4                     
    load     u64       &str             
    setarg   u64 /3                     
    load     i64       8                
    setarg   i64 /2                     
    load     u64       &a               
    setarg   u64 /1                     
    callf    i64 /4    &msysc.domultichar
    store    i64       n                
    jump               #263             
#265: 
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       a                
    setarg   i64 /1                     
    callp        /2    &msysc.m$print_c8
    jump               #262             
    jump               #263             
#266: 
    setcall  i64 /3/1                   
    load     u64       fmt              
    setarg   u64 /3                     
    load     u64       &str             
    setarg   u64 /2                     
    load     u64       a                
    setarg   i64 /1                     
    callf    i64 /3    &msysc.u64tostrfmt
    store    i64       n                
#263: 
    setcall      /2/1                   
    load     i64       n                
    setarg   i64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callp        /2    &msysc.printstr_n
#262: 
    retproc                             
endproc

proc msysc.tostr_r64:
    param    r64       x
    param    u64       fmt
    local    mem:360       str
    local    mem:360       str2
    local    mem:10       cfmt
    local    i64       n
    load     u64       37               
    load     u64       &cfmt            
    load     i64       0                
    istorex  u8  /1                     
    load     u64       fmt              
    load     i64       1                
    iloadx   i8  /1                     
    jumpf    i8        #269             
    load     u64       46               
    load     u64       &cfmt            
    load     i64       1                
    istorex  u8  /1                     
    load     u64       42               
    load     u64       &cfmt            
    load     i64       2                
    istorex  u8  /1                     
    load     u64       fmt              
    load     i64       5                
    iloadx   u8  /1                     
    load     u64       &cfmt            
    load     i64       3                
    istorex  u8  /1                     
    load     u64       0                
    load     u64       &cfmt            
    load     i64       4                
    istorex  u8  /1                     
    setcall  i32 /4/1                   
    load     r64       x                
    setarg   r64 /4                     
    load     u64       fmt              
    load     i64       1                
    iloadx   i8  /1                     
    widen    i64/i8                     
    setarg   i64 /3                     
    load     u64       &cfmt            
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    i32 /4/2  &sprintf         
    unload   i32                        
    jump               #268             
#269: 
    load     u64       fmt              
    load     i64       5                
    iloadx   u8  /1                     
    load     u64       &cfmt            
    load     i64       1                
    istorex  u8  /1                     
    load     u64       0                
    load     u64       &cfmt            
    load     i64       2                
    istorex  u8  /1                     
    setcall  i32 /3/1                   
    load     r64       x                
    setarg   r64 /3                     
    load     u64       &cfmt            
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    i32 /3/2  &sprintf         
    unload   i32                        
#268: 
    setcall  i64 /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    store    i64       n                
    load     i64       n                
    load     u64       fmt              
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    jumpge   i64       #271             
    setcall  i64 /4/1                   
    load     u64       fmt              
    setarg   u64 /4                     
    load     i64       n                
    setarg   i64 /3                     
    load     u64       &str2            
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    i64 /4    &msysc.expandstr 
    store    i64       n                
    setcall  u64 /2/1                   
    load     u64       &str2            
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
#271: 
    setcall      /2/1                   
    load     i64       n                
    setarg   i64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callp        /2    &msysc.printstr_n
    retproc                             
endproc

proc msysc.tostr_str:
    param    u64       s
    param    i64       oldlen
    param    u64       fmt
    local    i64       newlen
    local    i64       n
    local    u64       t
    load     i64       oldlen           
    load     i64       -1               
    jumpne   i64       #274             
    setcall  i64 /1/1                   
    load     u64       s                
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    store    i64       oldlen           
#274: 
    load     i64       oldlen           
    store    i64       newlen           
    load     u64       fmt              
    load     i64       3                
    iloadx   u8  /1                     
    jumpt    u8        #277             
    load     u64       fmt              
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       newlen           
    jumpgt   i64       #277             
    load     u64       fmt              
    load     i64       8                
    iloadx   u8  /1                     
    jumpt    u8        #277             
    load     u64       fmt              
    load     i64       1                
    iloadx   i8  /1                     
    jumpf    i8        #276             
#277: 
    load     u64       fmt              
    load     i64       3                
    iloadx   u8  /1                     
    jumpf    u8        #279             
    load     i64       2                
    load     u64 /1    &newlen          
    addto    i64                        
#279: 
    load     u64       fmt              
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       newlen           
    jumple   i64       #281             
    load     u64       fmt              
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       newlen           
#281: 
    setcall  u64 /1/1                   
    load     i64       newlen           
    load     i64       1                
    add      i64                        
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    store    u64       t                
    setcall  i64 /4/1                   
    load     u64       fmt              
    setarg   u64 /4                     
    load     i64       oldlen           
    setarg   i64 /3                     
    load     u64       t                
    setarg   u64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    i64 /4    &msysc.strtostrfmt
    store    i64       n                
    load     u64       fmt              
    load     i64       1                
    iloadx   i8  /1                     
    jumpf    i8        #283             
    load     u64       fmt              
    load     i64       1                
    iloadx   i8  /1                     
    widen    i64/i8                     
    load     u64 /1    &n               
    minto    i64                        
#283: 
    setcall      /2/1                   
    load     i64       n                
    setarg   i64 /2                     
    load     u64       t                
    setarg   u64 /1                     
    callp        /2    &msysc.printstr_n
    setcall      /2/1                   
    load     i64       newlen           
    load     i64       1                
    add      i64                        
    setarg   i64 /2                     
    load     u64       t                
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_free   
    jump               #275             
#276: 
    setcall      /2/1                   
    load     i64       oldlen           
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callp        /2    &msysc.printstr_n
#275: 
    retproc                             
endproc

proc msysc.getfmt:
    param    u64       fmtstyle
    rettype  u64
    startmx                             
    load     u64       fmtstyle         
    jumpf    u64       #286             
    setcall      /3/1                   
    load     u64       &msysc.getfmt.fmt
    setarg   u64 /3                     
    load     i64       -1               
    setarg   i64 /2                     
    load     u64       fmtstyle         
    setarg   u64 /1                     
    callp        /3    &msysc.strtofmt  
    load     u64       &msysc.getfmt.fmt
    resetmx  u64                        
    jump               #285             
#286: 
    load     u64       &msysc.defaultfmt
    endmx    u64                        
#285: 
    jumpret  u64       #284             
#284: 
    retfn    u64                        
endproc

proc msysc.strint:
    param    i64       a
    param    u64       fmtstyle
    local    u64       fmt
    rettype  u64
    setcall      /1/1                   
    load     u64       &msysc.strint.str
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /2                     
    setcall  u64 /1                     
    load     u64       fmtstyle         
    setarg   u64 /1                     
    callf    u64 /1    &msysc.getfmt    
    double                              
    store    u64       fmt              
    setarg   u64 /2                     
    load     i64       a                
    setarg   i64 /1                     
    callp        /2    &msysc.tostr_i64 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall  u64 /2/1                   
    load     u64       fmt              
    setarg   u64 /2                     
    load     u64       &msysc.strint.str
    setarg   u64 /1                     
    callf    u64 /2    &msysc.getstr    
    jumpret  u64       #287             
#287: 
    retfn    u64                        
endproc

proc msysc.getstrint:
    param    i64       a
    param    u64       dest
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /2                     
    setcall  u64 /1                     
    load     u64       0                
    setarg   u64 /1                     
    callf    u64 /1    &msysc.getfmt    
    setarg   u64 /2                     
    load     i64       a                
    setarg   i64 /1                     
    callp        /2    &msysc.tostr_i64 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    retproc                             
endproc

proc msysc.strword:
    param    u64       a
    param    u64       fmtstyle
    local    u64       fmt
    rettype  u64
    setcall      /1/1                   
    load     u64       &msysc.strword.str
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /2                     
    setcall  u64 /1                     
    load     u64       fmtstyle         
    setarg   u64 /1                     
    callf    u64 /1    &msysc.getfmt    
    double                              
    store    u64       fmt              
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &msysc.tostr_u64 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall  u64 /2/1                   
    load     u64       fmt              
    setarg   u64 /2                     
    load     u64       &msysc.strword.str
    setarg   u64 /1                     
    callf    u64 /2    &msysc.getstr    
    jumpret  u64       #289             
#289: 
    retfn    u64                        
endproc

proc msysc.strreal:
    param    r64       a
    param    u64       fmtstyle
    local    u64       fmt
    rettype  u64
    setcall      /1/1                   
    load     u64       &msysc.strreal.str
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /2                     
    setcall  u64 /1                     
    load     u64       fmtstyle         
    setarg   u64 /1                     
    callf    u64 /1    &msysc.getfmt    
    double                              
    store    u64       fmt              
    setarg   u64 /2                     
    load     r64       a                
    setarg   r64 /1                     
    callp        /2    &msysc.tostr_r64 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall  u64 /2/1                   
    load     u64       fmt              
    setarg   u64 /2                     
    load     u64       &msysc.strreal.str
    setarg   u64 /1                     
    callf    u64 /2    &msysc.getstr    
    jumpret  u64       #290             
#290: 
    retfn    u64                        
endproc

proc msysc.getstr:
    param    u64       s
    param    u64       fmt
    rettype  u64
    startmx                             
    load     u64       fmt              
    load     i64       13               
    iloadx   u8  /1                     
    jumpf    u8        #293             
    setcall  u64 /1/1                   
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /1    &mlib.pcm_copyheapstring
    resetmx  u64                        
    jump               #292             
#293: 
    load     u64       s                
    endmx    u64                        
#292: 
    jumpret  u64       #291             
#291: 
    retfn    u64                        
endproc

proc msysc.initreadbuffer:
    load     u64       msysc.rd_buffer  
    jumpf    u64       #296             
    jump               #294             
#296: 
    setcall  u64 /1/1                   
    load     i64       16384            
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    store    u64       msysc.rd_buffer  
    load     u64       0                
    load     u64       msysc.rd_buffer  
    istore   u8                         
    load     u64       msysc.rd_buffer  
    double                              
    store    u64       msysc.rd_lastpos 
    store    u64       msysc.rd_pos     
#294: 
    retproc                             
endproc

proc msysc.m$read_conline:
    setcall      /0/1                   
    callp        /0    &msysc.initreadbuffer
    setcall      /3/1                   
    load     i64       16384            
    setarg   i64 /3                     
    load     u64       msysc.rd_buffer  
    setarg   u64 /2                     
    load     u64       0                
    setarg   u64 /1                     
    callp        /3    &mlib.readlinen  
    setcall  i64 /1/1                   
    load     u64       msysc.rd_buffer  
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    store    i64       msysc.rd_length  
    load     u64       msysc.rd_buffer  
    store    u64       msysc.rd_pos     
    load     u64       0                
    store    u64       msysc.rd_lastpos 
    retproc                             
endproc

proc msysc.m$read_fileline:
    param    u64       f
    setcall      /0/1                   
    callp        /0    &msysc.initreadbuffer
    load     u64       f                
    load     u64       1                
    jumpne   u64       #300             
    setcall      /1/1                   
    load     u64       "READ CMDLINE"   
    setarg   u64 /1                     
    callp        /1    &mlib.abortprogram
    jump               #298             
#300: 
    setcall      /3/1                   
    load     i64       16384            
    setarg   i64 /3                     
    load     u64       msysc.rd_buffer  
    setarg   u64 /2                     
    load     u64       f                
    setarg   u64 /1                     
    callp        /3    &mlib.readlinen  
    setcall  i64 /1/1                   
    load     u64       msysc.rd_buffer  
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    store    i64       msysc.rd_length  
    load     u64       msysc.rd_buffer  
    store    u64       msysc.rd_pos     
    load     u64       0                
    store    u64       msysc.rd_lastpos 
#298: 
    retproc                             
endproc

proc msysc.m$read_strline:
    param    u64       s
    local    i64       n
    setcall      /0/1                   
    callp        /0    &msysc.initreadbuffer
    setcall  i64 /1/1                   
    load     u64       s                
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    store    i64       n                
    load     i64       n                
    load     i64       16384            
    jumpge   i64       #303             
    setcall  u64 /2/1                   
    load     u64       s                
    setarg   u64 /2                     
    load     u64       msysc.rd_buffer  
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    jump               #302             
#303: 
    setcall      /3/1                   
    load     u64       16383            
    setarg   u64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       msysc.rd_buffer  
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     u64       0                
    load     u64       msysc.rd_buffer  
    load     i64       16384            
    addpx    u64 /1                     
    load     i64       1                
    subpx    u64 /1                     
    istore   u8                         
#302: 
    load     i64       n                
    store    i64       msysc.rd_length  
    load     u64       msysc.rd_buffer  
    store    u64       msysc.rd_pos     
    load     u64       0                
    store    u64       msysc.rd_lastpos 
    retproc                             
endproc

proc msysc.readitem:
    param    u64       itemlength
    local    u64       p
    local    u64       s
    local    u64       itemstr
    local    u8       quotechar
    local    u8       c
    rettype  u64
    load     u64       msysc.rd_buffer  
    jumpt    u64       #306             
    setcall      /0/1                   
    callp        /0    &msysc.initreadbuffer
#306: 
    load     u64       msysc.rd_pos     
    store    u64       s                
    jump               #308             
#307: 
    load     u64 /1    &s               
    incrto   u64 /1                     
#308: 
    load     u64       s                
    iload    u8                         
    widen    u64/u8                     
    load     u64       32               
    jumpeq   u64       #307             
    load     u64       s                
    iload    u8                         
    widen    i64/u8                     
    load     i64       9                
    jumpeq   i64       #307             
    load     u64       s                
    store    u64       itemstr          
    load     u64       s                
    double                              
    store    u64       msysc.rd_pos     
    store    u64       msysc.rd_lastpos 
    load     u64       s                
    iload    u8                         
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #311             
    load     i64       0                
    store    i64       msysc.termchar   
    load     i64       0                
    load     u64       itemlength       
    istore   i64                        
    load     u64       s                
    jumpret  u64       #304             
#311: 
    load     u64       0                
    store    u8        quotechar        
    load     u64       s                
    iload    u8                         
    widen    u64/u8                     
    load     u64       34               
    jumpne   u64       #313             
    load     u64       34               
    store    u8        quotechar        
    load     u64 /1    &s               
    incrto   u64 /1                     
    jump               #312             
#313: 
    load     u64       s                
    iload    u8                         
    widen    u64/u8                     
    load     u64       39               
    jumpne   u64       #314             
    load     u64       39               
    store    u8        quotechar        
    load     u64 /1    &s               
    incrto   u64 /1                     
#314: 
#312: 
    load     u64       s                
    double                              
    store    u64       itemstr          
    store    u64       p                
    jump               #316             
#315: 
    load     u64 /1    &s               
    loadincr u64 /1                     
    iload    u8                         
    store    u8        c                
    load     u8        c                
    widen    u64/u8                     
    load     u64       32               
    jumpeq   u64 /1    #319             
    load     u64       9                
    jumpeq   u64 /1    #319             
    load     u64       44               
    jumpeq   u64 /1    #319             
    load     u64       61               
    jumpeq   u64       #319             
    jump               #320             
#319: 
    load     u8        quotechar        
    jumpt    u8        #323             
    load     u64       p                
    load     u64       s                
    jumpne   u64       #322             
#323: 
    jump               #324             
#322: 
    load     u8        c                
    widen    i64/u8                     
    store    i64       msysc.termchar   
    jump               #317             
    jump               #318             
#320: 
! msysc.readitem.normalchar:
#324: 
    load     u8        c                
    widen    u64/u8                     
    load     u8        quotechar        
    widen    u64/u8                     
    jumpne   u64       #326             
    load     u64       s                
    iload    u8                         
    widen    u64/u8                     
    load     u8        quotechar        
    widen    u64/u8                     
    jumpne   u64       #328             
    load     u8        c                
    load     u64       p                
    istore   u8                         
    load     u64 /1    &s               
    incrto   u64 /1                     
    load     u64 /1    &p               
    incrto   u64 /1                     
    jump               #327             
#328: 
    load     u64       s                
    iload    u8                         
    widen    i64/u8                     
    store    i64       msysc.termchar   
    load     i64       msysc.termchar   
    load     u64       44               
    jumpeq   i64 /1    #331             
    load     u64       61               
    jumpne   i64       #330             
#331: 
    load     u64 /1    &s               
    incrto   u64 /1                     
    load     u64       s                
    iload    u8                         
    widen    i64/u8                     
    store    i64       msysc.termchar   
#330: 
    jump               #317             
#327: 
    jump               #325             
#326: 
    load     u8        c                
    load     u64       p                
    istore   u8                         
    load     u64 /1    &p               
    incrto   u64 /1                     
#325: 
#318: 
#316: 
    load     u64       s                
    iload    u8                         
    jumpt    u8        #315             
#317: 
    load     u64       s                
    iload    u8                         
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #333             
    load     i64       0                
    store    i64       msysc.termchar   
#333: 
    load     u64       p                
    load     u64       itemstr          
    subp     i64 /1                     
    load     u64       itemlength       
    istore   i64                        
    load     u64       s                
    store    u64       msysc.rd_pos     
    load     u64       itemstr          
    jumpret  u64       #304             
#304: 
    retfn    u64                        
endproc

proc msysc.strtoint:
    param    u64       s
    param    i64       length
    param    u64       base
    local    u8       signd
    local    u64       aa
    local    u64       c
    local    u64       d
    rettype  i64
    load     i64       0                
    store    i64       msysc.itemerror  
    load     i64       length           
    load     i64       -1               
    jumpne   i64       #336             
    setcall  i64 /1/1                   
    load     u64       s                
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    store    i64       length           
#336: 
    load     i64       0                
    store    u8        signd            
    load     i64       length           
    jumpf    i64       #338             
    load     u64       s                
    iload    u8                         
    widen    u64/u8                     
    load     u64       45               
    jumpne   u64       #338             
    load     i64       1                
    store    u8        signd            
    load     u64 /1    &s               
    incrto   u64 /1                     
    load     u64 /1    &length          
    decrto   i64 /1                     
    jump               #337             
#338: 
    load     i64       length           
    jumpf    i64       #339             
    load     u64       s                
    iload    u8                         
    widen    u64/u8                     
    load     u64       43               
    jumpne   u64       #339             
    load     u64 /1    &s               
    incrto   u64 /1                     
    load     u64 /1    &length          
    decrto   i64 /1                     
#339: 
#337: 
    load     u64       0                
    store    u64       aa               
    jump               #341             
#340: 
    load     u64 /1    &s               
    loadincr u64 /1                     
    iload    u8                         
    widen    u64/u8                     
    store    u64       c                
    load     u64 /1    &length          
    decrto   i64 /1                     
    load     u64       c                
    load     i64       65               
    jumplt   i64 /1    #344             
    load     i64       70               
    jumpgt   i64       #344             
    load     u64       c                
    load     u64       65               
    sub      i64                        
    load     i64       10               
    add      u64                        
    store    u64       d                
    jump               #343             
#344: 
    load     u64       c                
    load     i64       97               
    jumplt   i64 /1    #345             
    load     i64       102              
    jumpgt   i64       #345             
    load     u64       c                
    load     u64       97               
    sub      i64                        
    load     i64       10               
    add      u64                        
    store    u64       d                
    jump               #343             
#345: 
    load     u64       c                
    load     i64       48               
    jumplt   i64 /1    #346             
    load     i64       57               
    jumpgt   i64       #346             
    load     u64       c                
    load     u64       48               
    sub      u64                        
    store    u64       d                
    jump               #343             
#346: 
    load     u64       c                
    load     u64       95               
    jumpeq   i64 /1    #348             
    load     u64       39               
    jumpne   i64       #347             
#348: 
    jump               #341             
    jump               #343             
#347: 
    load     i64       1                
    store    i64       msysc.itemerror  
    jump               #342             
#343: 
    load     u64       d                
    load     u64       base             
    jumplt   u64       #350             
    load     i64       1                
    store    i64       msysc.itemerror  
    jump               #342             
#350: 
    load     u64       aa               
    load     u64       base             
    mul      u64                        
    load     u64       d                
    add      u64                        
    store    u64       aa               
#341: 
    load     i64       length           
    jumpt    i64       #340             
#342: 
    startmx                             
    load     u8        signd            
    jumpf    u8        #352             
    load     u64       aa               
    neg      u64                        
    resetmx  i64                        
    jump               #351             
#352: 
    load     u64       aa               
    endmx    i64                        
#351: 
    jumpret  i64       #334             
#334: 
    retfn    i64                        
endproc

proc msysc.m$read_i64:
    param    i64       fmt
    local    u64       s
    local    i64       length
    rettype  i64
    setcall  i32 /1/1                   
    load     i64       fmt              
    setarg   i32 /1                     
    callf    i32 /1    &toupper         
    widen    i64/i32                    
    store    i64       fmt              
    load     i64       fmt              
    load     i64       67               
    jumpeq   i64 /1    #355             
    load     i64       84               
    jumpeq   i64 /1    #356             
    load     i64       69               
    jumpeq   i64       #357             
    jump               #358             
#355: 
    load     u64       msysc.rd_pos     
    store    u64       msysc.rd_lastpos 
    load     u64       msysc.rd_pos     
    iload    u8                         
    jumpf    u8        #360             
    load     u64 /1    &msysc.rd_pos    
    loadincr u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    jumpret  i64       #353             
    jump               #359             
#360: 
    load     i64       0                
    jumpret  i64       #353             
#359: 
    jump               #354             
#356: 
    load     i64       msysc.termchar   
    jumpret  i64       #353             
    jump               #354             
#357: 
    load     i64       msysc.itemerror  
    jumpret  i64       #353             
    jump               #354             
#358: 
#354: 
    setcall  u64 /1/1                   
    load     u64       &length          
    setarg   u64 /1                     
    callf    u64 /1    &msysc.readitem  
    store    u64       s                
    load     i64       fmt              
    load     i64       0                
    jumpeq   i64 /1    #362             
    load     i64       73               
    jumpeq   i64 /1    #362             
    load     i64       66               
    jumpeq   i64 /1    #363             
    load     i64       72               
    jumpeq   i64       #364             
    jump               #365             
#362: 
    setcall  i64 /3/1                   
    load     u64       10               
    setarg   u64 /3                     
    load     i64       length           
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    i64 /3    &msysc.strtoint  
    jumpret  i64       #353             
    jump               #361             
#363: 
    setcall  i64 /3/1                   
    load     u64       2                
    setarg   u64 /3                     
    load     i64       length           
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    i64 /3    &msysc.strtoint  
    jumpret  i64       #353             
    jump               #361             
#364: 
    setcall  i64 /3/1                   
    load     u64       16               
    setarg   u64 /3                     
    load     i64       length           
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    i64 /3    &msysc.strtoint  
    jumpret  i64       #353             
    jump               #361             
#365: 
#361: 
    load     i64       0                
    jumpret  i64       #353             
#353: 
    retfn    i64                        
endproc

proc msysc.m$read_r64:
    param    i64       fmt
    local    mem:512       str
    local    u64       s
    local    i64       length
    local    i32       numlength
    local    r64       x
    rettype  r64
    setcall  u64 /1/1                   
    load     u64       &length          
    setarg   u64 /1                     
    callf    u64 /1    &msysc.readitem  
    store    u64       s                
    load     i64       length           
    load     i64       0                
    jumpeq   i64       #369             
    load     i64       length           
    load     i64       512              
    jumplt   i64       #368             
#369: 
    load     r64       0.0000000000000000e+000
    jumpret  r64       #366             
#368: 
    setcall      /3/1                   
    load     i64       length           
    setarg   u64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     u64       0                
    load     u64       &str             
    load     i64       length           
    istorex  u8  /1                     
    load     i64       0                
    store    i64       msysc.itemerror  
    setcall  i32 /4/1                   
    load     u64       &numlength       
    setarg   u64 /4                     
    load     u64       &x               
    setarg   u64 /3                     
    load     u64       "%lf%n"          
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    i32 /4/2  &sscanf          
    widen    i64/i32                    
    load     i64       0                
    jumpeq   i64       #372             
    load     i32       numlength        
    widen    i64/i32                    
    load     i64       length           
    jumpeq   i64       #371             
#372: 
    load     r64       0.0000000000000000e+000
    store    r64       x                
    load     i64       1                
    store    i64       msysc.itemerror  
#371: 
    load     r64       x                
    jumpret  r64       #366             
#366: 
    retfn    r64                        
endproc

proc msysc.m$read_str:
    param    u64       dest
    param    i64       destlen
    param    i64       fmt
    local    u64       s
    local    i64       length
    load     i64       0                
    store    i64       msysc.itemerror  
    load     i64       fmt              
    load     u64       76               
    jumpeq   i64 /1    #376             
    load     u64       108              
    jumpne   i64       #375             
#376: 
    load     u64       msysc.rd_pos     
    store    u64       s                
    load     u64       msysc.rd_buffer  
    load     i64       msysc.rd_length  
    addpx    u64 /1                     
    load     u64       msysc.rd_pos     
    subp     i64 /1                     
    store    i64       length           
    jump               #374             
#375: 
    setcall  u64 /1/1                   
    load     u64       &length          
    setarg   u64 /1                     
    callf    u64 /1    &msysc.readitem  
    store    u64       s                
    load     i64       fmt              
    load     u64       78               
    jumpeq   i64 /1    #379             
    load     u64       110              
    jumpne   i64       #378             
#379: 
    setcall      /2/1                   
    load     i64       length           
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callp        /2    &mlib.iconvlcn   
#378: 
#374: 
    load     i64       destlen          
    load     i64       0                
    jumple   i64       #381             
    load     i64       length           
    load     i64       destlen          
    jumplt   i64       #383             
    load     i64       destlen          
    load     i64       1                
    sub      i64                        
    store    i64       length           
    load     i64       1                
    store    i64       msysc.itemerror  
#383: 
#381: 
    setcall      /3/1                   
    load     i64       length           
    setarg   u64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     u64       0                
    load     u64       dest             
    load     i64       length           
    istorex  u8  /1                     
    retproc                             
endproc

proc msysc.readstr:
    param    u64       dest
    param    i64       fmt
    param    i64       destlen
    setcall      /3/1                   
    load     i64       fmt              
    setarg   i64 /3                     
    load     i64       destlen          
    setarg   i64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &msysc.m$read_str
    retproc                             
endproc

proc msysc.rereadln:
    load     u64       msysc.rd_buffer  
    store    u64       msysc.rd_pos     
    load     u64       msysc.rd_pos     
    store    u64       msysc.rd_lastpos 
    retproc                             
endproc

proc msysc.reread:
    load     u64       msysc.rd_lastpos 
    store    u64       msysc.rd_pos     
    retproc                             
endproc

proc msysc.valint:
    param    u64       s
    param    i64       fmt
    local    u64       old_pos
    local    u64       old_lastpos
    local    i64       aa
    rettype  i64
    setcall      /0/1                   
    callp        /0    &msysc.initreadbuffer
    load     u64       msysc.rd_pos     
    store    u64       old_pos          
    load     u64       msysc.rd_lastpos 
    store    u64       old_lastpos      
    load     u64       s                
    store    u64       msysc.rd_pos     
    setcall  i64 /1/1                   
    load     i64       fmt              
    setarg   i64 /1                     
    callf    i64 /1    &msysc.m$read_i64
    store    i64       aa               
    load     u64       old_pos          
    store    u64       msysc.rd_pos     
    load     u64       old_lastpos      
    store    u64       msysc.rd_lastpos 
    load     i64       aa               
    jumpret  i64       #387             
#387: 
    retfn    i64                        
endproc

proc msysc.valreal:
    param    u64       s
    local    u64       old_pos
    local    u64       old_lastpos
    local    r64       x
    rettype  r64
    setcall      /0/1                   
    callp        /0    &msysc.initreadbuffer
    load     u64       msysc.rd_pos     
    store    u64       old_pos          
    load     u64       msysc.rd_lastpos 
    store    u64       old_lastpos      
    load     u64       s                
    store    u64       msysc.rd_pos     
    setcall  r64 /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    r64 /1    &msysc.m$read_r64
    store    r64       x                
    load     u64       old_pos          
    store    u64       msysc.rd_pos     
    load     u64       old_lastpos      
    store    u64       msysc.rd_lastpos 
    load     r64       x                
    jumpret  r64       #388             
#388: 
    retfn    r64                        
endproc

proc msysc.mclunimpl:
    param    u64       mess
    setcall  i32 /2/1                   
    load     u64       mess             
    setarg   u64 /2                     
    load     u64       "MCL-UNIMPL: %s\n"
    setarg   u64 /1                     
    callf    i32 /2/1  &printf          
    unload   i32                        
    load     i64       1                
    stop                                
    retproc                             
endproc

proc msysc.dumpstr:
    param    u64       s
    param    i64       n
    param    i64       fbuffer
    local    u64       p
    load     i64       msysc.outdev     
    load     i64       3                
    jumpne   i64       #392             
    load     u64       msysc.outchan    
    store    u64       p                
    load     i64       n                
    jumpf    i64       #394             
    setcall      /3/1                   
    load     i64       n                
    setarg   u64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       p                
    iload    u64                        
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     i64       n                
    load     u64       p                
    addpxto  u64 /1                     
#394: 
    load     u64       0                
    load     u64       p                
    iload    u64                        
    istore   u8                         
    jump               #390             
#392: 
    load     i64       n                
    load     i64       0                
    jumpne   i64       #396             
    jump               #390             
#396: 
    load     i64       fbuffer          
    jumpf    i64       #398             
    load     i64       n                
    load     i64       2                
    jumplt   i64       #398             
    load     i64       msysc.outdev     
    load     i64       1                
    jumpne   i64       #398             
    load     u64 /1    &msysc.printptr  
    decrto   u64 /1                     
    load     u64       msysc.printptr   
    iload    u8                         
    widen    i64/u8                     
    load     i64       10               
    jumpne   i64       #400             
    load     u64       msysc.printptr   
    load     i64       1                
    subpx    u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    load     i64       13               
    jumpne   i64       #402             
    load     u64       0                
    load     u64       msysc.printptr   
    load     i64       1                
    subpx    u64 /1                     
    istore   u8                         
    jump               #401             
#402: 
    load     u64       0                
    load     u64       msysc.printptr   
    istore   u8                         
#401: 
    setcall  i32 /1/1                   
    load     u64       &msysc.printbuffer
    setarg   u64 /1                     
    callf    i32 /1    &puts            
    unload   i32                        
    jump               #390             
#400: 
#398: 
    load     i64       msysc.outdev     
    load     i64       1                
    jumpeq   i64 /1    #404             
    load     i64       2                
    jumpeq   i64       #405             
    jump               #406             
#404: 
    setcall  i32 /3/1                   
    load     u64       s                
    setarg   u64 /3                     
    load     i64       n                
    setarg   i64 /2                     
    load     u64       "%.*s"           
    setarg   u64 /1                     
    callf    i32 /3/1  &printf          
    unload   i32                        
    jump               #403             
#405: 
    setcall  i32 /4/1                   
    load     u64       s                
    setarg   u64 /4                     
    load     i64       n                
    setarg   i64 /3                     
    load     u64       "%.*s"           
    setarg   u64 /2                     
    load     u64       msysc.outchan    
    setarg   u64 /1                     
    callf    i32 /4/2  &fprintf         
    unload   i32                        
    jump               #403             
#406: 
#403: 
#390: 
    retproc                             
endproc

proc msysc.dumpprintbuffer:
    load     i64       msysc.printlen   
    jumpf    i64       #409             
    setcall      /3/1                   
    load     i64       1                
    setarg   i64 /3                     
    load     i64       msysc.printlen   
    setarg   i64 /2                     
    load     u64       &msysc.printbuffer
    setarg   u64 /1                     
    callp        /3    &msysc.dumpstr   
#409: 
    setcall      /0/1                   
    callp        /0    &msysc.resetprintbuffer
    retproc                             
endproc

proc msysc.resetprintbuffer:
    load     u64       &msysc.printbuffer
    store    u64       msysc.printptr   
    load     i64       0                
    store    i64       msysc.printlen   
    retproc                             
endproc

proc msysc.addtobuffer:
    param    u64       s
    param    i64       n
    load     i64       msysc.printlen   
    load     i64       n                
    add      i64                        
    load     i64       4088             
    jumplt   i64       #413             
    setcall      /0/1                   
    callp        /0    &msysc.dumpprintbuffer
#413: 
    load     i64       n                
    load     i64       4096             
    jumpge   i64       #415             
    setcall      /3/1                   
    load     i64       n                
    setarg   u64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       msysc.printptr   
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     i64       n                
    load     u64 /1    &msysc.printptr  
    addpxto  u64 /1                     
    load     i64       n                
    load     u64 /1    &msysc.printlen  
    addto    i64                        
    jump               #411             
#415: 
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     i64       n                
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callp        /3    &msysc.dumpstr   
#411: 
    retproc                             
endproc

proc msysc.getutfsize:
    param    u64       s
    local    i64       a
    rettype  i64
    load     u64 /1    &s               
    loadincr u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    store    i64       a                
    startmx                             
    load     i64       a                
    load     i64       0                
    jumpne   i64       #418             
    load     i64       0                
    resetmx  i64                        
    jump               #417             
#418: 
    load     i64       a                
    load     i64       7                
    loadbit  i64                        
    load     i64       0                
    jumpne   i64       #419             
    load     i64       1                
    resetmx  i64                        
    jump               #417             
#419: 
    load     i64       a                
    load     i64       5                
    load     i64       7                
    loadbf   i64                        
    load     i64       6                
    jumpne   i64       #420             
    load     i64       2                
    resetmx  i64                        
    jump               #417             
#420: 
    load     i64       a                
    load     i64       4                
    load     i64       7                
    loadbf   i64                        
    load     i64       14               
    jumpne   i64       #421             
    load     i64       3                
    resetmx  i64                        
    jump               #417             
#421: 
    load     i64       a                
    load     i64       3                
    load     i64       7                
    loadbf   i64                        
    load     i64       30               
    jumpne   i64       #422             
    load     i64       4                
    resetmx  i64                        
    jump               #417             
#422: 
    load     i64       1                
    endmx    i64                        
#417: 
    jumpret  i64       #416             
#416: 
    retfn    i64                        
endproc

proc msysc.m$sign_i64:
    param    i64       a
    rettype  i64
    startmx                             
    load     i64       a                
    load     i64       0                
    jumpge   i64       #425             
    load     i64       -1               
    resetmx  i64                        
    jump               #424             
#425: 
    startmx                             
    load     i64       a                
    load     i64       0                
    jumple   i64       #427             
    load     i64       1                
    resetmx  i64                        
    jump               #426             
#427: 
    load     i64       0                
    endmx    i64                        
#426: 
    endmx    i64                        
#424: 
    jumpret  i64       #423             
#423: 
    retfn    i64                        
endproc

proc msysc.m$sign_r64:
    param    r64       x
    rettype  r64
    load     r64       x                
    load     r64       0.0000000000000000e+000
    jumpge   r64       #430             
    load     r64       -1.0000000000000000e+000
    jumpret  r64       #428             
#430: 
    load     r64       x                
    load     r64       0.0000000000000000e+000
    jumple   r64       #432             
    load     r64       1.0000000000000000e+000
    jumpret  r64       #428             
#432: 
    load     r64       0.0000000000000000e+000
    jumpret  r64       #428             
#428: 
    retfn    r64                        
endproc

proc mlib.pcm_alloc:
    param    i64       n
    local    u64       p
    rettype  u64
    load     u8        mlib.pcm_setup   
    jumpt    u8        #435             
    setcall      /0/1                   
    callp        /0    &mlib.pcm_init   
#435: 
    load     i64       n                
    load     i64       2048             
    jumple   i64       #437             
    setcall  i64 /1/1                   
    load     i64       n                
    setarg   i64 /1                     
    callf    i64 /1    &mlib.pcm_getac  
    store    i64       mlib.alloccode   
    load     u64       &mlib.allocupper 
    load     i64       mlib.alloccode   
    iloadx   i64 /8                     
    store    i64       mlib.allocbytes  
    setcall  u64 /1/1                   
    load     i64       mlib.allocbytes  
    setarg   i64 /1                     
    callf    u64 /1    &mlib.allocmem   
    store    u64       p                
    load     u64       p                
    jumpt    u64       #439             
    setcall      /1/1                   
    load     u64       "pcm_alloc failure"
    setarg   u64 /1                     
    callp        /1    &mlib.abortprogram
#439: 
    load     u64       p                
    jumpret  u64       #433             
#437: 
    load     u64       &mlib.sizeindextable
    load     i64       n                
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       mlib.alloccode   
    load     u64       &mlib.allocupper 
    load     i64       mlib.alloccode   
    iloadx   i64 /8                     
    store    i64       mlib.allocbytes  
    load     u64       &mlib.freelist   
    load     i64       mlib.alloccode   
    iloadx   u64 /8                     
    double                              
    store    u64       p                
    jumpf    u64       #441             
    load     u64       &mlib.freelist   
    load     i64       mlib.alloccode   
    iloadx   u64 /8                     
    iload    u64                        
    load     u64       &mlib.freelist   
    load     i64       mlib.alloccode   
    istorex  u64 /8                     
    load     u64       p                
    jumpret  u64       #433             
#441: 
    load     u64       mlib.pcheapptr   
    store    u64       p                
    load     i64       mlib.allocbytes  
    load     u64 /1    &mlib.pcheapptr  
    addpxto  u64 /1                     
    load     u64       mlib.pcheapptr   
    load     u64       mlib.pcheapend   
    jumplt   u64       #443             
    setcall  u64 /1/1                   
    load     i64       mlib.allocbytes  
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_newblock
    store    u64       p                
    load     u64       p                
    jumpret  u64       #433             
#443: 
    load     u64       p                
    jumpret  u64       #433             
#433: 
    retfn    u64                        
endproc

proc mlib.pcm_free:
    param    u64       p
    param    i64       n
    local    i64       acode
    load     i64       n                
    load     i64       0                
    jumpeq   i64       #447             
    load     u64       p                
    load     u64       0                
    jumpne   u64       #446             
#447: 
    jump               #444             
#446: 
    load     i64       n                
    load     i64       2048             
    jumple   i64       #449             
    setcall      /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callp        /1    &free            
    jump               #448             
#449: 
    load     u64       &mlib.sizeindextable
    load     i64       n                
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       acode            
    load     u64       &mlib.freelist   
    load     i64       acode            
    iloadx   u64 /8                     
    load     u64       p                
    istore   u64                        
    load     u64       p                
    load     u64       &mlib.freelist   
    load     i64       acode            
    istorex  u64 /8                     
#448: 
#444: 
    retproc                             
endproc

proc mlib.pcm_freeac:
    param    u64       p
    param    i64       alloc
    setcall      /2/1                   
    load     u64       &mlib.allocupper 
    load     i64       alloc            
    iloadx   i64 /8                     
    setarg   i64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_free   
    retproc                             
endproc

proc mlib.pcm_clearmem:
    param    u64       p
    param    i64       n
    setcall      /3/1                   
    load     i64       n                
    setarg   u64 /3                     
    load     i64       0                
    setarg   i32 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &memset          
    retproc                             
endproc

proc mlib.pcm_init:
    local    i64       j
    local    i64       k
    local    i64       size
    local    i64       av_1
    local    i64       i
    load     i64       0                
    store    i64       mlib.alloccode   
    load     u8        mlib.pcm_setup   
    jumpf    u8        #454             
    jump               #452             
#454: 
    setcall  u64 /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_newblock
    unload   u64                        
    load     i64       1                
    store    i64       i                
#455: 
    load     i64       1                
    store    i64       j                
    load     i64       16               
    store    i64       k                
    jump               #459             
#458: 
    load     i64       k                
    load     i64       1                
    shl      i64                        
    store    i64       k                
    load     u64 /1    &j               
    incrto   i64 /1                     
#459: 
    load     i64       i                
    load     i64       k                
    jumpgt   i64       #458             
    load     i64       j                
    load     u64       &mlib.sizeindextable
    load     i64       i                
    istorex  u8  /1                     
    forup    i64 /1    #455             
    opnd     i64       i                
    opnd     i64       2048             
    load     u64       16               
    load     u64       &mlib.allocupper 
    load     i64       1                
    istorex  u64 /8                     
    load     i64       16               
    store    i64       size             
    load     i64       2                
    store    i64       i                
#461: 
    load     i64       2                
    load     u64 /1    &size            
    multo    i64                        
    load     i64       size             
    load     u64       &mlib.allocupper 
    load     i64       i                
    istorex  u64 /8                     
    load     i64       size             
    load     i64       33554432         
    jumplt   i64       #465             
    load     i64       i                
    store    i64       k                
    jump               #463             
#465: 
    forup    i64 /1    #461             
    opnd     i64       i                
    opnd     i64       27               
#463: 
    load     i64       k                
    load     i64       1                
    add      i64                        
    store    i64       i                
    load     i64       300              
    store    i64       av_1             
    load     i64       i                
    load     i64       av_1             
    jumpgt   i64       #468             
#466: 
    load     i64       33554432         
    load     u64 /1    &size            
    addto    i64                        
    load     i64       size             
    load     i64       8589934592       
    jumpge   i64       #470             
    load     i64       size             
    load     u64       &mlib.allocupper 
    load     i64       i                
    istorex  u64 /8                     
    load     i64       size             
    store    u64       mlib.maxmemory   
    jump               #469             
#470: 
    load     i64       i                
    load     i64       1                
    sub      i64                        
    store    i64       mlib.maxalloccode
    jump               #468             
#469: 
    forup    i64 /1    #466             
    opnd     i64       i                
    opnd     i64       av_1             
#468: 
    load     i64       1                
    store    u8        mlib.pcm_setup   
#452: 
    retproc                             
endproc

proc mlib.pcm_getac:
    param    i64       size
    rettype  i64
    load     i64       size             
    load     i64       2048             
    jumpgt   i64       #473             
    load     u64       &mlib.sizeindextable
    load     i64       size             
    iloadx   u8  /1                     
    widen    i64/u8                     
    jumpret  i64       #471             
#473: 
    load     i64       size             
    load     i64       255              
    add      i64                        
    load     i64       8                
    shr      i64                        
    store    i64       size             
    load     i64       size             
    load     i64       2048             
    jumpgt   i64       #475             
    load     u64       &mlib.sizeindextable
    load     i64       size             
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       8                
    add      i64                        
    jumpret  i64       #471             
#475: 
    load     i64       size             
    load     i64       63               
    add      i64                        
    load     i64       6                
    shr      i64                        
    store    i64       size             
    load     i64       size             
    load     i64       2048             
    jumpgt   i64       #477             
    load     u64       &mlib.sizeindextable
    load     i64       size             
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       14               
    add      i64                        
    jumpret  i64       #471             
#477: 
    load     i64       size             
    load     i64       2048             
    sub      i64                        
    load     i64       2047             
    add      i64                        
    load     i64       2048             
    idiv     i64                        
    load     i64       22               
    add      i64                        
    store    i64       size             
    load     i64       size             
    jumpret  i64       #471             
#471: 
    retfn    i64                        
endproc

proc mlib.pcm_newblock:
    param    i64       itemsize
    local    u64       p
    rettype  u64
    load     i64       2097152          
    load     u64 /1    &mlib.pcm_newblock.totalheapsize
    addto    i64                        
    load     i64       0                
    store    i64       mlib.alloccode   
    setcall  u64 /1/1                   
    load     i64       2097152          
    setarg   i64 /1                     
    callf    u64 /1    &mlib.allocmem   
    store    u64       p                
    load     u64       p                
    load     u64       0                
    jumpne   u64       #480             
    setcall      /1/1                   
    load     u64       "Can't alloc pc heap"
    setarg   u64 /1                     
    callp        /1    &mlib.abortprogram
#480: 
    setcall      /3/1                   
    load     u64       2097152          
    setarg   u64 /3                     
    load     i64       0                
    setarg   i32 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &memset          
    load     u64       p                
    store    u64       mlib.pcheapptr   
    load     u64       p                
    load     i64       2097152          
    addpx    u64 /1                     
    store    u64       mlib.pcheapend   
    load     u64       mlib.pcheapstart 
    load     u64       0                
    jumpne   u64       #482             
    load     u64       p                
    store    u64       mlib.pcheapstart 
#482: 
    load     i64       itemsize         
    load     u64 /1    &mlib.pcheapptr  
    addpxto  u64 /1                     
    load     u64       p                
    jumpret  u64       #478             
#478: 
    retfn    u64                        
endproc

proc mlib.pcm_round:
    param    i64       n
    rettype  i64
    startmx                             
    load     i64       n                
    load     i64       2048             
    jumple   i64       #485             
    load     i64       n                
    resetmx  i64                        
    jump               #484             
#485: 
    load     u64       &mlib.pcm_round.allocbytes
    load     u64       &mlib.sizeindextable
    load     i64       n                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   i32 /4                     
    widen    i64/i32                    
    endmx    i64                        
#484: 
    jumpret  i64       #483             
#483: 
    retfn    i64                        
endproc

proc mlib.pcm_allocz:
    param    i64       n
    local    u64       p
    rettype  u64
    setcall  u64 /1/1                   
    load     i64       n                
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    store    u64       p                
    setcall      /3/1                   
    load     i64       n                
    setarg   u64 /3                     
    load     i64       0                
    setarg   i32 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &memset          
    load     u64       p                
    jumpret  u64       #486             
#486: 
    retfn    u64                        
endproc

proc mlib.pcm_copyheapstring:
    param    u64       s
    local    u64       q
    local    i64       n
    rettype  u64
    load     u64       s                
    load     u64       0                
    jumpne   u64       #489             
    load     u64       0                
    jumpret  u64       #487             
#489: 
    setcall  i64 /1/1                   
    load     u64       s                
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    load     i64       1                
    add      i64                        
    store    i64       n                
    setcall  u64 /1/1                   
    load     i64       n                
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    store    u64       q                
    setcall      /3/1                   
    load     i64       n                
    setarg   u64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       q                
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     u64       q                
    jumpret  u64       #487             
#487: 
    retfn    u64                        
endproc

proc mlib.pcm_copyheapstringn:
    param    u64       s
    param    i64       n
    local    u64       q
    rettype  u64
    load     u64       s                
    load     u64       0                
    jumpne   u64       #492             
    load     u64       0                
    jumpret  u64       #490             
#492: 
    setcall  u64 /1/1                   
    load     i64       n                
    load     i64       1                
    add      i64                        
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    store    u64       q                
    setcall      /3/1                   
    load     i64       n                
    setarg   u64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       q                
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     u64       0                
    load     u64       q                
    load     i64       n                
    istorex  u8  /1                     
    load     u64       q                
    jumpret  u64       #490             
#490: 
    retfn    u64                        
endproc

proc mlib.pcm_copyheapblock:
    param    u64       s
    param    i64       length
    local    u64       q
    rettype  u64
    load     i64       length           
    load     i64       0                
    jumpne   i64       #495             
    load     u64       0                
    jumpret  u64       #493             
#495: 
    setcall  u64 /1/1                   
    load     i64       length           
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    store    u64       q                
    setcall      /3/1                   
    load     i64       length           
    setarg   u64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       q                
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     u64       q                
    jumpret  u64       #493             
#493: 
    retfn    u64                        
endproc

proc mlib.allocmem:
    param    i64       n
    local    u64       p
    rettype  u64
    setcall  u64 /1/1                   
    load     i64       n                
    setarg   u64 /1                     
    callf    u64 /1    &malloc          
    store    u64       p                
    load     u64       p                
    jumpf    u64       #498             
    load     u64       p                
    jumpret  u64       #496             
#498: 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     i64       n                
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     i64       mlib.memtotal    
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       "Alloc mem failure"
    setarg   u64 /1                     
    callp        /1    &mlib.abortprogram
    load     u64       0                
    jumpret  u64       #496             
#496: 
    retfn    u64                        
endproc

proc mlib.reallocmem:
    param    u64       p
    param    i64       n
    rettype  u64
    setcall  u64 /2/1                   
    load     i64       n                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callf    u64 /2    &realloc         
    store    u64       p                
    load     u64       p                
    jumpf    u64       #501             
    load     u64       p                
    jumpret  u64       #499             
#501: 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     i64       n                
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       "Realloc mem failure"
    setarg   u64 /1                     
    callp        /1    &mlib.abortprogram
    load     u64       0                
    jumpret  u64       #499             
#499: 
    retfn    u64                        
endproc

proc mlib.abortprogram:
    param    u64       s
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       s                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "ABORTING: Press key..."
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     i64       5                
    stop                                
    retproc                             
endproc

proc mlib.getfilesize:
    param    u64       handlex
    local    u32       p
    local    u32       size
    rettype  i64
    setcall  i32 /1/1                   
    load     u64       handlex          
    setarg   u64 /1                     
    callf    i32 /1    &ftell           
    store    u32       p                
    setcall  i32 /3/1                   
    load     i64       2                
    setarg   i32 /3                     
    load     i64       0                
    setarg   i32 /2                     
    load     u64       handlex          
    setarg   u64 /1                     
    callf    i32 /3    &fseek           
    unload   i32                        
    setcall  i32 /1/1                   
    load     u64       handlex          
    setarg   u64 /1                     
    callf    i32 /1    &ftell           
    store    u32       size             
    setcall  i32 /3/1                   
    load     i64       0                
    setarg   i32 /3                     
    load     u32       p                
    widen    i64/u32                    
    setarg   i32 /2                     
    load     u64       handlex          
    setarg   u64 /1                     
    callf    i32 /3    &fseek           
    unload   i32                        
    load     u32       size             
    widen    i64/u32                    
    jumpret  i64       #503             
#503: 
    retfn    i64                        
endproc

proc mlib.readrandom:
    param    u64       handlex
    param    u64       memx
    param    i64       offset
    param    i64       size
    local    i64       a
    setcall  i32 /3/1                   
    load     i64       0                
    setarg   i32 /3                     
    load     i64       offset           
    setarg   i32 /2                     
    load     u64       handlex          
    setarg   u64 /1                     
    callf    i32 /3    &fseek           
    unload   i32                        
    setcall  i64 /4/1                   
    load     u64       handlex          
    setarg   u64 /4                     
    load     i64       size             
    setarg   u64 /3                     
    load     u64       1                
    setarg   u64 /2                     
    load     u64       memx             
    setarg   u64 /1                     
    callf    i64 /4    &fread           
    store    i64       a                
    retproc                             
endproc

proc mlib.writerandom:
    param    u64       handlex
    param    u64       memx
    param    i64       offset
    param    i64       size
    rettype  i64
    setcall  i32 /3/1                   
    load     i64       0                
    setarg   i32 /3                     
    load     i64       offset           
    setarg   i32 /2                     
    load     u64       handlex          
    setarg   u64 /1                     
    callf    i32 /3    &fseek           
    unload   i32                        
    setcall  i64 /4/1                   
    load     u64       handlex          
    setarg   u64 /4                     
    load     i64       size             
    setarg   u64 /3                     
    load     u64       1                
    setarg   u64 /2                     
    load     u64       memx             
    setarg   u64 /1                     
    callf    i64 /4    &fwrite          
    jumpret  i64       #505             
#505: 
    retfn    i64                        
endproc

proc mlib.setfilepos:
    param    u64       file
    param    i64       offset
    rettype  i64
    setcall  i32 /3/1                   
    load     i64       0                
    setarg   i32 /3                     
    load     i64       offset           
    setarg   i32 /2                     
    load     u64       file             
    setarg   u64 /1                     
    callf    i32 /3    &fseek           
    widen    i64/i32                    
    jumpret  i64       #506             
#506: 
    retfn    i64                        
endproc

proc mlib.getfilepos:
    param    u64       file
    rettype  i64
    setcall  i32 /1/1                   
    load     u64       file             
    setarg   u64 /1                     
    callf    i32 /1    &ftell           
    widen    i64/i32                    
    jumpret  i64       #507             
#507: 
    retfn    i64                        
endproc

proc mlib.readfile:
    param    u64       filename
    local    u64       f
    local    i64       size
    local    u64       m
    local    u64       p
    rettype  u64
    setcall  u64 /2/1                   
    load     u64       "rb"             
    setarg   u64 /2                     
    load     u64       filename         
    setarg   u64 /1                     
    callf    u64 /2    &fopen           
    store    u64       f                
    load     u64       f                
    load     u64       0                
    jumpne   u64       #510             
    load     u64       0                
    jumpret  u64       #508             
#510: 
    setcall  i64 /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callf    i64 /1    &mlib.getfilesize
    double                              
    store    i64       size             
    store    i64       mlib.rfsize      
    setcall  u64 /1/1                   
    load     i64       size             
    load     i64       2                
    add      u64                        
    setarg   u64 /1                     
    callf    u64 /1    &malloc          
    store    u64       m                
    load     u64       m                
    load     u64       0                
    jumpne   u64       #512             
    load     u64       0                
    jumpret  u64       #508             
#512: 
    setcall      /4/1                   
    load     i64       size             
    setarg   i64 /4                     
    load     i64       0                
    setarg   i64 /3                     
    load     u64       m                
    setarg   u64 /2                     
    load     u64       f                
    setarg   u64 /1                     
    callp        /4    &mlib.readrandom 
    load     u64       m                
    load     i64       size             
    addpx    u64 /1                     
    store    u64       p                
    load     i64       0                
    load     u64       p                
    istore   u16                        
    setcall  i32 /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callf    i32 /1    &fclose          
    unload   i32                        
    load     u64       m                
    jumpret  u64       #508             
#508: 
    retfn    u64                        
endproc

proc mlib.writefile:
    param    u64       filename
    param    u64       data
    param    i64       size
    local    u64       f
    local    i64       n
    rettype  i64
    setcall  u64 /2/1                   
    load     u64       "wb"             
    setarg   u64 /2                     
    load     u64       filename         
    setarg   u64 /1                     
    callf    u64 /2    &fopen           
    store    u64       f                
    load     u64       f                
    load     u64       0                
    jumpne   u64       #515             
    load     i64       0                
    jumpret  i64       #513             
#515: 
    setcall  i64 /4/1                   
    load     i64       size             
    setarg   i64 /4                     
    load     i64       0                
    setarg   i64 /3                     
    load     u64       data             
    setarg   u64 /2                     
    load     u64       f                
    setarg   u64 /1                     
    callf    i64 /4    &mlib.writerandom
    store    i64       n                
    setcall  i32 /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callf    i32 /1    &fclose          
    unload   i32                        
    load     i64       n                
    jumpret  i64       #513             
#513: 
    retfn    i64                        
endproc

proc mlib.checkfile:
    param    u64       file
    local    u64       f
    rettype  i64
    setcall  u64 /2/1                   
    load     u64       "rb"             
    setarg   u64 /2                     
    load     u64       file             
    setarg   u64 /1                     
    callf    u64 /2    &fopen           
    double                              
    store    u64       f                
    jumpf    u64       #518             
    setcall  i32 /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callf    i32 /1    &fclose          
    unload   i32                        
    load     i64       1                
    jumpret  i64       #516             
#518: 
    load     i64       0                
    jumpret  i64       #516             
#516: 
    retfn    i64                        
endproc

proc mlib.readlinen:
    param    u64       handlex
    param    u64       buffer
    param    i64       size
    local    i64       ch
    local    u64       p
    local    i64       n
    local    u8       crseen
    load     u64       handlex          
    load     u64       0                
    jumpne   u64       #521             
    setcall  u64 /0/1                   
    callf    u64 /0    &mlinux.os_getstdin
    store    u64       handlex          
#521: 
    load     u64       handlex          
    load     u64       0                
    jumpne   u64       #523             
    load     i64       0                
    store    i64       n                
    load     u64       buffer           
    store    u64       p                
#524: 
    setcall  i32 /0/1                   
    callf    i32 /0    &getchar         
    widen    i64/i32                    
    store    i64       ch               
    load     i64       ch               
    load     i64       13               
    jumpeq   i64       #528             
    load     i64       ch               
    load     i64       10               
    jumpeq   i64       #528             
    load     i64       ch               
    load     i64       -1               
    jumpne   i64       #527             
#528: 
    load     u64       0                
    load     u64       p                
    istore   u8                         
    jump               #519             
#527: 
    load     i64       ch               
    load     u64 /1    &p               
    loadincr u64 /1                     
    istore   u8                         
    load     u64 /1    &n               
    incrto   i64 /1                     
    load     i64       n                
    load     i64       size             
    load     i64       2                
    sub      i64                        
    jumplt   i64       #530             
    load     u64       0                
    load     u64       p                
    istore   u8                         
    jump               #519             
#530: 
    jump               #524             
#523: 
    load     u64       0                
    load     u64       buffer           
    istore   u8                         
    setcall  u64 /3/1                   
    load     u64       handlex          
    setarg   u64 /3                     
    load     i64       size             
    load     i64       2                
    sub      i64                        
    setarg   i64 /2                     
    load     u64       buffer           
    setarg   u64 /1                     
    callf    u64 /3    &fgets           
    load     u64       0                
    jumpne   u64       #532             
    jump               #519             
#532: 
    setcall  i64 /1/1                   
    load     u64       buffer           
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    store    i64       n                
    load     i64       n                
    load     i64       0                
    jumpne   i64       #534             
    jump               #519             
#534: 
    load     u64       buffer           
    load     i64       n                
    addpx    u64 /1                     
    load     i64       1                
    subpx    u64 /1                     
    store    u64       p                
    load     i64       0                
    store    u8        crseen           
    jump               #536             
#535: 
    load     u64       p                
    iload    u8                         
    widen    i64/u8                     
    load     i64       13               
    jumpeq   i64       #540             
    load     u64       p                
    iload    u8                         
    widen    i64/u8                     
    load     i64       10               
    jumpne   i64       #539             
#540: 
    load     i64       1                
    store    u8        crseen           
#539: 
    load     u64       0                
    load     u64 /1    &p               
    loaddecr u64 /1                     
    istore   u8                         
#536: 
    load     u64       p                
    load     u64       buffer           
    jumplt   u64       #541             
    load     u64       p                
    iload    u8                         
    widen    i64/u8                     
    load     i64       13               
    jumpeq   i64       #535             
    load     u64       p                
    iload    u8                         
    widen    i64/u8                     
    load     i64       10               
    jumpeq   i64       #535             
#541: 
    load     u8        crseen           
    jumpt    u8        #543             
    load     i64       n                
    load     i64       4                
    add      i64                        
    load     i64       size             
    jumple   i64       #543             
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     i64       size             
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     i64       n                
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       "line too long"  
    setarg   u64 /1                     
    callp        /1    &mlib.abortprogram
#543: 
#519: 
    retproc                             
endproc

proc mlib.iconvlcn:
    param    u64       s
    param    i64       n
    local    i64       av_1
    load     i64       n                
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #547             
#545: 
    setcall  i32 /1/1                   
    load     u64       s                
    iload    u8                         
    widen    u64/u8                     
    setarg   i32 /1                     
    callf    i32 /1    &tolower         
    load     u64       s                
    istore   u8                         
    load     u64 /1    &s               
    incrto   u64 /1                     
    to       i64       #545             
    opnd     i64       av_1             
#547: 
    retproc                             
endproc

proc mlib.iconvucn:
    param    u64       s
    param    i64       n
    local    i64       av_1
    load     i64       n                
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #551             
#549: 
    setcall  i32 /1/1                   
    load     u64       s                
    iload    u8                         
    widen    u64/u8                     
    setarg   i32 /1                     
    callf    i32 /1    &toupper         
    load     u64       s                
    istore   u8                         
    load     u64 /1    &s               
    incrto   u64 /1                     
    to       i64       #549             
    opnd     i64       av_1             
#551: 
    retproc                             
endproc

proc mlib.convlcstring:
    param    u64       s
    local    u64       s0
    rettype  u64
    load     u64       s                
    store    u64       s0               
    jump               #554             
#553: 
    setcall  i32 /1/1                   
    load     u64       s                
    iload    u8                         
    widen    u64/u8                     
    setarg   i32 /1                     
    callf    i32 /1    &tolower         
    load     u64       s                
    istore   u8                         
    load     u64 /1    &s               
    incrto   u64 /1                     
#554: 
    load     u64       s                
    iload    u8                         
    jumpt    u8        #553             
    load     u64       s0               
    jumpret  u64       #552             
#552: 
    retfn    u64                        
endproc

proc mlib.convucstring:
    param    u64       s
    local    u64       s0
    rettype  u64
    load     u64       s                
    store    u64       s0               
    jump               #558             
#557: 
    setcall  i32 /1/1                   
    load     u64       s                
    iload    u8                         
    widen    u64/u8                     
    setarg   i32 /1                     
    callf    i32 /1    &toupper         
    load     u64       s                
    istore   u8                         
    load     u64 /1    &s               
    incrto   u64 /1                     
#558: 
    load     u64       s                
    iload    u8                         
    jumpt    u8        #557             
    load     u64       s0               
    jumpret  u64       #556             
#556: 
    retfn    u64                        
endproc

proc mlib.changeext:
    param    u64       s
    param    u64       newext
    local    mem:32       newext2
    local    u64       sext
    local    i64       n
    rettype  u64
    setcall  u64 /2/1                   
    load     u64       s                
    setarg   u64 /2                     
    load     u64       &mlib.changeext.newfile
    load     i64       0                
    addpx    u8  /1                     
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    load     u64       newext           
    iload    u8                         
    widen    u64/u8                     
    load     u64       0                
    jumpeq   u64 /1    #562             
    load     u64       46               
    jumpeq   u64       #563             
    jump               #564             
#562: 
    load     u64       0                
    load     u64       &newext2         
    load     i64       1                
    istorex  u8  /1/-1                  
    load     u64       0                
    load     u64       &newext2         
    load     i64       2                
    istorex  u8  /1/-1                  
    jump               #561             
#563: 
    setcall  u64 /2/1                   
    load     u64       newext           
    setarg   u64 /2                     
    load     u64       &newext2         
    load     i64       0                
    addpx    u8  /1                     
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    jump               #561             
#564: 
    setcall  u64 /2/1                   
    load     u64       "."              
    setarg   u64 /2                     
    load     u64       &newext2         
    load     i64       0                
    addpx    u8  /1                     
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    setcall  u64 /2/1                   
    load     u64       newext           
    setarg   u64 /2                     
    load     u64       &newext2         
    load     i64       0                
    addpx    u8  /1                     
    setarg   u64 /1                     
    callf    u64 /2    &strcat          
    unload   u64                        
#561: 
    setcall  u64 /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /2    &mlib.extractext 
    store    u64       sext             
    load     u64       sext             
    iload    u8                         
    widen    u64/u8                     
    load     u64       0                
    jumpeq   u64 /1    #566             
    load     u64       46               
    jumpeq   u64       #567             
    jump               #568             
#566: 
    setcall  u64 /2/1                   
    load     u64       &newext2         
    load     i64       0                
    addpx    u8  /1                     
    setarg   u64 /2                     
    load     u64       &mlib.changeext.newfile
    load     i64       0                
    addpx    u8  /1                     
    setarg   u64 /1                     
    callf    u64 /2    &strcat          
    unload   u64                        
    jump               #565             
#567: 
    setcall  u64 /2/1                   
    load     u64       &newext2         
    load     i64       1                
    addpx    u8  /1                     
    setarg   u64 /2                     
    load     u64       &mlib.changeext.newfile
    load     i64       0                
    addpx    u8  /1                     
    setarg   u64 /1                     
    callf    u64 /2    &strcat          
    unload   u64                        
    jump               #565             
#568: 
    load     u64       sext             
    load     u64       s                
    subp     i64 /1                     
    load     i64       2                
    sub      i64                        
    store    i64       n                
    setcall  u64 /2/1                   
    load     u64       &newext2         
    load     i64       0                
    addpx    u8  /1                     
    setarg   u64 /2                     
    load     u64       &mlib.changeext.newfile
    load     i64       0                
    addpx    u8  /1                     
    load     i64       n                
    addpx    u64 /1/1                   
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
#565: 
    load     u64       &mlib.changeext.newfile
    load     i64       0                
    addpx    u8  /1                     
    jumpret  u64       #560             
#560: 
    retfn    u64                        
endproc

proc mlib.extractext:
    param    u64       s
    param    i64       period
    local    u64       t
    local    u64       u
    rettype  u64
    setcall  u64 /1/1                   
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /1    &mlib.extractfile
    store    u64       t                
    load     u64       t                
    iload    u8                         
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #571             
    load     u64       ""               
    jumpret  u64       #569             
#571: 
    load     u64       t                
    setcall  i64 /1/1                   
    load     u64       t                
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    addpx    u64 /1                     
    load     i64       1                
    subpx    u64 /1                     
    store    u64       u                
    jump               #573             
#572: 
    load     u64       u                
    iload    u8                         
    widen    u64/u8                     
    load     u64       46               
    jumpne   u64       #576             
    load     u64       u                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #578             
    startmx                             
    load     i64       period           
    jumpf    i64       #580             
    load     u64       "."              
    resetmx  u64                        
    jump               #579             
#580: 
    load     u64       ""               
    endmx    u64                        
#579: 
    jumpret  u64       #569             
#578: 
    load     u64       u                
    load     i64       1                
    addpx    u64 /1                     
    jumpret  u64       #569             
#576: 
    load     u64 /1    &u               
    decrto   u64 /1                     
#573: 
    load     u64       u                
    load     u64       t                
    jumpge   u64       #572             
    load     u64       ""               
    jumpret  u64       #569             
#569: 
    retfn    u64                        
endproc

proc mlib.extractpath:
    param    u64       s
    local    u64       t
    local    i64       n
    rettype  u64
    load     u64       s                
    setcall  i64 /1/1                   
    load     u64       s                
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    addpx    u64 /1                     
    load     i64       1                
    subpx    u64 /1                     
    store    u64       t                
    jump               #583             
#582: 
    load     u64       t                
    iload    u8                         
    widen    u64/u8                     
    load     u64       92               
    jumpeq   u64 /1    #586             
    load     u64       47               
    jumpeq   u64 /1    #586             
    load     u64       58               
    jumpeq   u64       #586             
    jump               #587             
#586: 
    load     u64       t                
    load     u64       s                
    subp     i64 /1                     
    load     i64       1                
    add      i64                        
    store    i64       n                
    setcall      /3/1                   
    load     i64       n                
    setarg   u64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       &mlib.extractpath.str
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     u64       0                
    load     u64       &mlib.extractpath.str
    load     i64       n                
    istorex  u8  /1                     
    load     u64       &mlib.extractpath.str
    jumpret  u64       #581             
    jump               #585             
#587: 
#585: 
    load     u64 /1    &t               
    decrto   u64 /1                     
#583: 
    load     u64       t                
    load     u64       s                
    jumpge   u64       #582             
    load     u64       ""               
    jumpret  u64       #581             
#581: 
    retfn    u64                        
endproc

proc mlib.extractfile:
    param    u64       s
    local    u64       t
    rettype  u64
    setcall  u64 /1/1                   
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /1    &mlib.extractpath
    store    u64       t                
    load     u64       t                
    iload    u8                         
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #590             
    load     u64       s                
    jumpret  u64       #588             
#590: 
    load     u64       s                
    setcall  i64 /1/1                   
    load     u64       t                
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    addpx    u64 /1                     
    jumpret  u64       #588             
#588: 
    retfn    u64                        
endproc

proc mlib.extractbasefile:
    param    u64       s
    local    u64       f
    local    u64       e
    local    i64       n
    local    i64       flen
    rettype  u64
    setcall  u64 /1/1                   
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /1    &mlib.extractfile
    store    u64       f                
    setcall  i64 /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    store    i64       flen             
    load     i64       flen             
    load     i64       0                
    jumpne   i64       #593             
    load     u64       ""               
    jumpret  u64       #591             
#593: 
    setcall  u64 /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       f                
    setarg   u64 /1                     
    callf    u64 /2    &mlib.extractext 
    store    u64       e                
    load     u64       e                
    iload    u8                         
    jumpf    u8        #595             
    load     i64       flen             
    setcall  i64 /1/1                   
    load     u64       e                
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    sub      i64                        
    load     i64       1                
    sub      i64                        
    store    i64       n                
    setcall      /3/1                   
    load     i64       n                
    setarg   u64 /3                     
    load     u64       f                
    setarg   u64 /2                     
    load     u64       &mlib.extractbasefile.str
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     u64       0                
    load     u64       &mlib.extractbasefile.str
    load     i64       n                
    istorex  u8  /1                     
    load     u64       &mlib.extractbasefile.str
    jumpret  u64       #591             
#595: 
    load     u64       f                
    load     i64       flen             
    addpx    u64 /1                     
    load     i64       1                
    subpx    u64 /1                     
    iload    u8                         
    widen    u64/u8                     
    load     u64       46               
    jumpne   u64       #597             
    setcall      /3/1                   
    load     i64       flen             
    load     i64       1                
    sub      u64                        
    setarg   u64 /3                     
    load     u64       f                
    setarg   u64 /2                     
    load     u64       &mlib.extractbasefile.str
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     u64       0                
    load     u64       &mlib.extractbasefile.str
    load     i64       flen             
    istorex  u8  /1/-1                  
    load     u64       &mlib.extractbasefile.str
    jumpret  u64       #591             
#597: 
    load     u64       f                
    jumpret  u64       #591             
#591: 
    retfn    u64                        
endproc

proc mlib.addext:
    param    u64       s
    param    u64       newext
    local    u64       sext
    rettype  u64
    setcall  u64 /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /2    &mlib.extractext 
    store    u64       sext             
    load     u64       sext             
    iload    u8                         
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #600             
    setcall  u64 /2/1                   
    load     u64       newext           
    setarg   u64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /2    &mlib.changeext  
    jumpret  u64       #598             
#600: 
    load     u64       s                
    jumpret  u64       #598             
#598: 
    retfn    u64                        
endproc

proc mlib.pcm_alloc32:
    local    u64       p
    rettype  u64
    load     i64       32               
    store    i64       mlib.allocbytes  
    load     u64       &mlib.freelist   
    load     i64       2                
    iloadx   u64 /8                     
    double                              
    store    u64       p                
    jumpf    u64       #603             
    load     u64       &mlib.freelist   
    load     i64       2                
    iloadx   u64 /8                     
    iload    u64                        
    load     u64       &mlib.freelist   
    load     i64       2                
    istorex  u64 /8                     
    load     u64       p                
    jumpret  u64       #601             
#603: 
    setcall  u64 /1/1                   
    load     i64       32               
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    jumpret  u64       #601             
#601: 
    retfn    u64                        
endproc

proc mlib.pcm_free32:
    param    u64       p
    load     u64       &mlib.freelist   
    load     i64       2                
    iloadx   u64 /8                     
    load     u64       p                
    istore   u64                        
    load     u64       p                
    load     u64       &mlib.freelist   
    load     i64       2                
    istorex  u64 /8                     
    retproc                             
endproc

proc mlib.outbyte:
    param    u64       f
    param    i64       x
    setcall  u64 /4/1                   
    load     u64       f                
    setarg   u64 /4                     
    load     u64       1                
    setarg   u64 /3                     
    load     u64       1                
    setarg   u64 /2                     
    load     u64       &x               
    setarg   u64 /1                     
    callf    u64 /4    &fwrite          
    unload   u64                        
    retproc                             
endproc

proc mlib.outu16:
    param    u64       f
    param    u64       x
    setcall  u64 /4/1                   
    load     u64       f                
    setarg   u64 /4                     
    load     u64       1                
    setarg   u64 /3                     
    load     u64       2                
    setarg   u64 /2                     
    load     u64       &x               
    setarg   u64 /1                     
    callf    u64 /4    &fwrite          
    unload   u64                        
    retproc                             
endproc

proc mlib.outu32:
    param    u64       f
    param    u64       x
    setcall  u64 /4/1                   
    load     u64       f                
    setarg   u64 /4                     
    load     u64       1                
    setarg   u64 /3                     
    load     u64       4                
    setarg   u64 /2                     
    load     u64       &x               
    setarg   u64 /1                     
    callf    u64 /4    &fwrite          
    unload   u64                        
    retproc                             
endproc

proc mlib.outu64:
    param    u64       f
    param    u64       x
    setcall  u64 /4/1                   
    load     u64       f                
    setarg   u64 /4                     
    load     u64       1                
    setarg   u64 /3                     
    load     u64       8                
    setarg   u64 /2                     
    load     u64       &x               
    setarg   u64 /1                     
    callf    u64 /4    &fwrite          
    unload   u64                        
    retproc                             
endproc

proc mlib.outstring:
    param    u64       f
    param    u64       s
    setcall  u64 /4                     
    load     u64       f                
    setarg   u64 /4                     
    load     u64       1                
    setarg   u64 /3                     
    setcall  i64 /1                     
    load     u64       s                
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    load     i64       1                
    add      u64                        
    setarg   u64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /4    &fwrite          
    unload   u64                        
    retproc                             
endproc

proc mlib.outblock:
    param    u64       f
    param    u64       p
    param    i64       n
    setcall  u64 /4/1                   
    load     u64       f                
    setarg   u64 /4                     
    load     u64       1                
    setarg   u64 /3                     
    load     i64       n                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callf    u64 /4    &fwrite          
    unload   u64                        
    retproc                             
endproc

proc mlib.myeof:
    param    u64       f
    local    i64       c
    rettype  i64
    setcall  i32 /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callf    i32 /1    &fgetc           
    widen    i64/i32                    
    store    i64       c                
    load     i64       c                
    load     i64       -1               
    jumpne   i64       #613             
    load     i64       1                
    jumpret  i64       #611             
#613: 
    setcall  i32 /2/1                   
    load     u64       f                
    setarg   u64 /2                     
    load     i64       c                
    setarg   i32 /1                     
    callf    i32 /2    &ungetc          
    unload   i32                        
    load     i64       0                
    jumpret  i64       #611             
#611: 
    retfn    i64                        
endproc

proc mlib.strbuffer_add:
    param    u64       dest
    param    u64       s
    param    i64       n
    local    i64       newlen
    local    i64       oldlen
    local    u64       newptr
    load     i64       n                
    load     i64       -1               
    jumpne   i64       #616             
    setcall  i64 /1/1                   
    load     u64       s                
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    store    i64       n                
#616: 
    load     u64       dest             
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       oldlen           
    load     i64       oldlen           
    load     i64       0                
    jumpne   i64       #618             
    setcall  u64 /1/1                   
    load     i64       n                
    load     i64       1                
    add      i64                        
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    load     u64       dest             
    load     i64       0                
    istorex  u64 /1                     
    load     i64       mlib.allocbytes  
    load     u64       dest             
    load     i64       12               
    istorex  i32 /1                     
    load     i64       n                
    load     u64       dest             
    load     i64       8                
    istorex  i32 /1                     
    setcall      /3/1                   
    load     i64       n                
    setarg   u64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       dest             
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     u64       0                
    load     u64       dest             
    load     i64       0                
    iloadx   u64 /1                     
    load     i64       n                
    istorex  u8  /1                     
    jump               #614             
#618: 
    load     i64       oldlen           
    load     i64       n                
    add      i64                        
    store    i64       newlen           
    load     i64       newlen           
    load     i64       1                
    add      i64                        
    load     u64       dest             
    load     i64       12               
    iloadx   i32 /1                     
    widen    i64/i32                    
    jumple   i64       #620             
    setcall  u64 /1/1                   
    load     i64       newlen           
    load     i64       1                
    add      i64                        
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    store    u64       newptr           
    setcall      /3/1                   
    load     i64       oldlen           
    setarg   u64 /3                     
    load     u64       dest             
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       newptr           
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     u64       newptr           
    load     u64       dest             
    load     i64       0                
    istorex  u64 /1                     
    load     i64       mlib.allocbytes  
    load     u64       dest             
    load     i64       12               
    istorex  i32 /1                     
#620: 
    setcall      /3/1                   
    load     i64       n                
    setarg   u64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       dest             
    load     i64       0                
    iloadx   u64 /1                     
    load     i64       oldlen           
    addpx    u64 /1                     
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     u64       0                
    load     u64       dest             
    load     i64       0                
    iloadx   u64 /1                     
    load     i64       newlen           
    istorex  u8  /1                     
    load     i64       newlen           
    load     u64       dest             
    load     i64       8                
    istorex  i32 /1                     
#614: 
    retproc                             
endproc

proc mlib.gs_init:
    param    u64       dest
    setcall      /2/1                   
    load     i64       16               
    setarg   i64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_clearmem
    retproc                             
endproc

proc mlib.gs_free:
    param    u64       dest
    load     u64       dest             
    load     i64       12               
    iloadx   i32 /1                     
    jumpf    i32       #624             
    setcall      /2/1                   
    load     u64       dest             
    load     i64       12               
    iloadx   i32 /1                     
    widen    i64/i32                    
    setarg   i64 /2                     
    load     u64       dest             
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_free   
#624: 
    retproc                             
endproc

proc mlib.gs_str:
    param    u64       dest
    param    u64       s
    setcall      /3/1                   
    load     i64       -1               
    setarg   i64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &mlib.strbuffer_add
    retproc                             
endproc

proc mlib.gs_char:
    param    u64       dest
    param    i64       c
    local    mem:16       s
    load     i64       c                
    load     u64       &s               
    load     i64       1                
    istorex  u8  /1/-1                  
    load     u64       0                
    load     u64       &s               
    load     i64       2                
    istorex  u8  /1/-1                  
    setcall      /3/1                   
    load     i64       1                
    setarg   i64 /3                     
    load     u64       &s               
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &mlib.strbuffer_add
    retproc                             
endproc

proc mlib.gs_strn:
    param    u64       dest
    param    u64       s
    param    i64       length
    setcall      /3/1                   
    load     i64       length           
    setarg   i64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &mlib.strbuffer_add
    retproc                             
endproc

proc mlib.gs_strvar:
    param    u64       dest
    param    u64       s
    setcall      /3/1                   
    load     i64       -1               
    setarg   i64 /3                     
    load     u64       s                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &mlib.strbuffer_add
    retproc                             
endproc

proc mlib.gs_strint:
    param    u64       dest
    param    i64       a
    setcall      /3                     
    load     i64       -1               
    setarg   i64 /3                     
    setcall  u64 /2                     
    load     u64       0                
    setarg   u64 /2                     
    load     i64       a                
    setarg   i64 /1                     
    callf    u64 /2    &msysc.strint    
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &mlib.strbuffer_add
    retproc                             
endproc

proc mlib.gs_strln:
    param    u64       dest
    param    u64       s
    setcall      /2/1                   
    load     u64       s                
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /2    &mlib.gs_str     
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &mlib.gs_line    
    retproc                             
endproc

proc mlib.gs_strsp:
    param    u64       dest
    param    u64       s
    setcall      /2/1                   
    load     u64       s                
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /2    &mlib.gs_str     
    setcall      /2/1                   
    load     u64       " "              
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /2    &mlib.gs_str     
    retproc                             
endproc

proc mlib.gs_line:
    param    u64       dest
    setcall      /3/1                   
    load     i64       -1               
    setarg   i64 /3                     
    load     u64       "\n"             
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &mlib.strbuffer_add
    retproc                             
endproc

proc mlib.gs_getcol:
    param    u64       dest
    rettype  i64
    load     u64       dest             
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    jumpret  i64       #633             
#633: 
    retfn    i64                        
endproc

proc mlib.gs_leftstr:
    param    u64       dest
    param    u64       s
    param    i64       w
    param    i64       padch
    local    i64       col
    local    i64       i
    local    i64       n
    local    i64       slen
    local    mem:2560       str
    load     u64       dest             
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       col              
    setcall  u64 /2/1                   
    load     u64       s                
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    setcall  i64 /1/1                   
    load     u64       s                
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    store    i64       slen             
    load     i64       w                
    load     i64       slen             
    sub      i64                        
    store    i64       n                
    load     i64       n                
    load     i64       0                
    jumple   i64       #636             
    load     i64       1                
    store    i64       i                
    load     i64       n                
    load     i64       1                
    jumplt   i64       #639             
#637: 
    load     i64       padch            
    load     u64       &str             
    load     i64       slen             
    load     i64       i                
    add      i64                        
    istorex  u8  /1/-1                  
    forup    i64 /1    #637             
    opnd     i64       i                
    opnd     i64       n                
#639: 
    load     u64       0                
    load     u64       &str             
    load     i64       slen             
    load     i64       n                
    add      i64                        
    istorex  u8  /1                     
#636: 
    setcall      /2/1                   
    load     u64       &str             
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /2    &mlib.gs_str     
    retproc                             
endproc

proc mlib.gs_leftint:
    param    u64       dest
    param    i64       a
    param    i64       w
    param    i64       padch
    setcall      /4                     
    load     i64       padch            
    setarg   i64 /4                     
    load     i64       w                
    setarg   i64 /3                     
    setcall  u64 /2                     
    load     u64       0                
    setarg   u64 /2                     
    load     i64       a                
    setarg   i64 /1                     
    callf    u64 /2    &msysc.strint    
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /4    &mlib.gs_leftstr 
    retproc                             
endproc

proc mlib.gs_padto:
    param    u64       dest
    param    i64       col
    param    i64       ch
    local    i64       n
    local    mem:2560       str
    local    i64       i
    load     i64       col              
    load     u64       dest             
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    sub      i64                        
    store    i64       n                
    load     i64       n                
    load     i64       0                
    jumpgt   i64       #643             
    jump               #641             
#643: 
    load     i64       1                
    store    i64       i                
    load     i64       n                
    load     i64       1                
    jumplt   i64       #646             
#644: 
    load     i64       ch               
    load     u64       &str             
    load     i64       i                
    istorex  u8  /1/-1                  
    forup    i64 /1    #644             
    opnd     i64       i                
    opnd     i64       n                
#646: 
    load     u64       0                
    load     u64       &str             
    load     i64       n                
    istorex  u8  /1                     
    setcall      /2/1                   
    load     u64       &str             
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /2    &mlib.gs_str     
#641: 
    retproc                             
endproc

proc mlib.gs_println:
    param    u64       dest
    param    u64       f
    load     u64       dest             
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    load     i64       0                
    jumpne   i64       #649             
    jump               #647             
#649: 
    load     u64       0                
    load     u64       dest             
    load     i64       0                
    iloadx   u64 /1                     
    load     u64       dest             
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    istorex  u8  /1                     
    load     u64       f                
    load     u64       0                
    jumpne   u64       #651             
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       dest             
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64       "\r"             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #650             
#651: 
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       dest             
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64       "\r"             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
#650: 
#647: 
    retproc                             
endproc

proc mlib.nextcmdparamnew:
    param    u64       paramno
    param    u64       name
    param    u64       value
    param    u64       defext
    local    u64       q
    local    u64       item
    local    u64       fileext
    local    i64       length
    rettype  i64
! mlib.nextcmdparamnew.reenter:
#653: 
    load     u64       0                
    load     u64       value            
    istore   u64                        
    load     u64       0                
    load     u64       name             
    istore   u64                        
    load     i64       mlib.nextcmdparamnew.infile
    jumpf    i64       #655             
    setcall  i64 /2/1                   
    load     u64       &item            
    setarg   u64 /2                     
    load     u64       &mlib.nextcmdparamnew.fileptr
    setarg   u64 /1                     
    callf    i64 /2    &mlib.readnextfileitem
    load     i64       0                
    jumpne   i64       #657             
    setcall      /1/1                   
    load     u64       mlib.nextcmdparamnew.filestart
    setarg   u64 /1                     
    callp        /1    &free            
    load     i64       0                
    store    i64       mlib.nextcmdparamnew.infile
    jump               #653             
#657: 
    jump               #654             
#655: 
    load     u64       paramno          
    iload    i64                        
    load     i64       msysc.ncmdparams 
    jumple   i64       #659             
    load     i64       0                
    jumpret  i64       #652             
#659: 
    load     u64       msysc.cmdparams  
    load     u64       paramno          
    iload    i64                        
    iloadx   u64 /8                     
    store    u64       item             
    load     u64       paramno          
    incrto   i64 /1                     
    setcall  i64 /1/1                   
    load     u64       item             
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    store    i64       length           
    load     u64       item             
    iload    u8                         
    widen    u64/u8                     
    load     u64       64               
    jumpne   u64       #661             
    setcall  u64 /1/1                   
    load     u64       item             
    load     i64       1                
    addpx    u64 /1                     
    setarg   u64 /1                     
    callf    u64 /1    &mlib.readfile   
    double                              
    store    u64       mlib.nextcmdparamnew.fileptr
    store    u64       mlib.nextcmdparamnew.filestart
    load     u64       mlib.nextcmdparamnew.filestart
    load     u64       0                
    jumpne   u64       #663             
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "Can't open"     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       item             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     i64       7                
    stop                                
#663: 
    load     i64       1                
    store    i64       mlib.nextcmdparamnew.infile
    jump               #653             
#661: 
    load     u64       item             
    iload    u8                         
    widen    u64/u8                     
    load     u64       58               
    jumpne   u64       #665             
    load     i64       1                
    store    u8        mlib.nextcmdparamnew.colonseen
    load     i64       4                
    jumpret  i64       #652             
#665: 
#654: 
    load     u64       0                
    load     u64       value            
    istore   u64                        
    load     u64       item             
    iload    u8                         
    widen    u64/u8                     
    load     u64       45               
    jumpne   u64       #667             
    load     u64       item             
    startmx                             
    load     u8        mlib.nextcmdparamnew.colonseen
    jumpf    u8        #669             
    load     i64       0                
    resetmx  i64                        
    jump               #668             
#669: 
    load     i64       1                
    endmx    i64                        
#668: 
    addpx    u64 /1                     
    load     u64       name             
    istore   u64                        
    setcall  u64 /2/1                   
    load     u64       58               
    setarg   i32 /2                     
    load     u64       item             
    setarg   u64 /1                     
    callf    u64 /2    &strchr          
    store    u64       q                
    load     u64       q                
    jumpt    u64       #671             
    setcall  u64 /2/1                   
    load     u64       61               
    setarg   i32 /2                     
    load     u64       item             
    setarg   u64 /1                     
    callf    u64 /2    &strchr          
    store    u64       q                
#671: 
    load     u64       q                
    jumpf    u64       #673             
    load     u64       q                
    load     i64       1                
    addpx    u64 /1                     
    load     u64       value            
    istore   u64                        
    load     u64       0                
    load     u64       q                
    istore   u8                         
#673: 
    startmx                             
    load     u8        mlib.nextcmdparamnew.colonseen
    jumpf    u8        #675             
    load     i64       5                
    resetmx  i64                        
    jump               #674             
#675: 
    load     i64       1                
    endmx    i64                        
#674: 
    jumpret  i64       #652             
#667: 
    setcall  u64 /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       item             
    setarg   u64 /1                     
    callf    u64 /2    &mlib.extractext 
    store    u64       fileext          
    load     u64       item             
    load     u64       name             
    istore   u64                        
    load     u64       fileext          
    iload    u8                         
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #677             
    setcall  u64 /2/1                   
    load     u64       name             
    iload    u64                        
    setarg   u64 /2                     
    load     u64       &mlib.nextcmdparamnew.str
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    load     u64       defext           
    jumpf    u64       #679             
    load     u8        mlib.nextcmdparamnew.colonseen
    jumpt    u8        #679             
    setcall  u64 /2/1                   
    load     u64       defext           
    setarg   u64 /2                     
    load     u64       &mlib.nextcmdparamnew.str
    setarg   u64 /1                     
    callf    u64 /2    &mlib.addext     
    load     u64       name             
    istore   u64                        
#679: 
    jump               #676             
#677: 
    setcall  i64 /2/1                   
    load     u64       "dll"            
    setarg   u64 /2                     
    load     u64       fileext          
    setarg   u64 /1                     
    callf    i64 /2    &mlib.eqstring   
    jumpt    i64       #681             
    setcall  i64 /2/1                   
    load     u64       "mcx"            
    setarg   u64 /2                     
    load     u64       fileext          
    setarg   u64 /1                     
    callf    i64 /2    &mlib.eqstring   
    jumpf    i64       #680             
#681: 
    startmx                             
    load     u8        mlib.nextcmdparamnew.colonseen
    jumpf    u8        #683             
    load     i64       5                
    resetmx  i64                        
    jump               #682             
#683: 
    load     i64       3                
    endmx    i64                        
#682: 
    jumpret  i64       #652             
#680: 
#676: 
    startmx                             
    load     u8        mlib.nextcmdparamnew.colonseen
    jumpf    u8        #685             
    load     i64       5                
    resetmx  i64                        
    jump               #684             
#685: 
    load     i64       2                
    endmx    i64                        
#684: 
    jumpret  i64       #652             
#652: 
    retfn    i64                        
endproc

proc mlib.readnextfileitem:
    param    u64       fileptr
    param    u64       item
    local    u64       p
    local    u64       pstart
    local    u64       pend
    local    i64       n
    rettype  i64
    load     u64       fileptr          
    iload    u64                        
    store    u64       p                
! mlib.readnextfileitem.reenter:
#687: 
#688: 
    load     u64       p                
    iload    u8                         
    widen    u64/u8                     
    load     u64       32               
    jumpeq   u64 /1    #691             
    load     u64       9                
    jumpeq   u64 /1    #691             
    load     u64       13               
    jumpeq   u64 /1    #691             
    load     u64       10               
    jumpeq   u64 /1    #691             
    load     u64       26               
    jumpeq   u64 /1    #692             
    load     u64       0                
    jumpeq   u64       #692             
    jump               #693             
#691: 
    load     u64 /1    &p               
    incrto   u64 /1                     
    jump               #690             
#692: 
    load     i64       0                
    jumpret  i64       #686             
    jump               #690             
#693: 
    jump               #689             
#690: 
    jump               #688             
#689: 
    load     u64       p                
    iload    u8                         
    widen    u64/u8                     
    load     u64       33               
    jumpeq   u64 /1    #695             
    load     u64       35               
    jumpeq   u64       #695             
    jump               #696             
#695: 
    load     u64 /1    &p               
    incrto   u64 /1                     
#697: 
    load     u64 /1    &p               
    loadincr u64 /1                     
    iload    u8                         
    widen    u64/u8                     
    load     u64       10               
    jumpeq   u64 /1    #699             
    load     u64       26               
    jumpeq   u64 /1    #700             
    load     u64       0                
    jumpeq   u64       #700             
    jump               #701             
#699: 
    jump               #687             
    jump               #697             
#700: 
    load     u64       p                
    load     i64       1                
    subpx    u64 /1                     
    load     u64       fileptr          
    istore   u64                        
    load     i64       0                
    jumpret  i64       #686             
    jump               #697             
#701: 
    jump               #697             
    jump               #694             
#696: 
#694: 
    load     u64       p                
    iload    u8                         
    widen    u64/u8                     
    load     u64       34               
    jumpeq   u64       #703             
    jump               #704             
#703: 
    load     u64 /1    &p               
    incrload u64 /1                     
    store    u64       pstart           
#705: 
    load     u64       p                
    iload    u8                         
    widen    u64/u8                     
    load     u64       0                
    jumpeq   u64 /1    #708             
    load     u64       26               
    jumpeq   u64 /1    #708             
    load     u64       34               
    jumpeq   u64       #709             
    jump               #710             
#708: 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "Unexpected EOF in @file"
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     i64       8                
    stop                                
    jump               #707             
#709: 
    load     u64 /1    &p               
    loadincr u64 /1                     
    store    u64       pend             
    load     u64       p                
    iload    u8                         
    widen    u64/u8                     
    load     u64       44               
    jumpne   u64       #712             
    load     u64 /1    &p               
    incrto   u64 /1                     
#712: 
    jump               #706             
    jump               #707             
#710: 
#707: 
    load     u64 /1    &p               
    incrto   u64 /1                     
    jump               #705             
#706: 
    jump               #702             
#704: 
    load     u64       p                
    store    u64       pstart           
#713: 
    load     u64       p                
    iload    u8                         
    widen    u64/u8                     
    load     u64       0                
    jumpeq   u64 /1    #716             
    load     u64       26               
    jumpeq   u64 /1    #716             
    load     u64       32               
    jumpeq   u64 /1    #717             
    load     u64       9                
    jumpeq   u64 /1    #717             
    load     u64       44               
    jumpeq   u64 /1    #717             
    load     u64       13               
    jumpeq   u64 /1    #717             
    load     u64       10               
    jumpeq   u64       #717             
    jump               #718             
#716: 
    load     u64       p                
    store    u64       pend             
    jump               #714             
    jump               #715             
#717: 
    load     u64 /1    &p               
    loadincr u64 /1                     
    store    u64       pend             
    jump               #714             
    jump               #715             
#718: 
#715: 
    load     u64 /1    &p               
    incrto   u64 /1                     
    jump               #713             
#714: 
#702: 
    load     u64       pend             
    load     u64       pstart           
    subp     i64 /1                     
    store    i64       n                
    load     i64       n                
    load     i64       256              
    jumplt   i64       #720             
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "@file item too long"
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     i64       9                
    stop                                
#720: 
    setcall      /3/1                   
    load     i64       n                
    setarg   u64 /3                     
    load     u64       pstart           
    setarg   u64 /2                     
    load     u64       &mlib.readnextfileitem.str
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     u64       0                
    load     u64       &mlib.readnextfileitem.str
    load     i64       n                
    istorex  u8  /1                     
    load     u64       &mlib.readnextfileitem.str
    load     u64       item             
    istore   u64                        
    load     u64       p                
    load     u64       fileptr          
    istore   u64                        
    load     i64       1                
    jumpret  i64       #686             
#686: 
    retfn    i64                        
endproc

proc mlib.ipadstr:
    param    u64       s
    param    i64       width
    param    u64       padchar
    local    i64       n
    local    i64       av_1
    setcall  i64 /1/1                   
    load     u64       s                
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    store    i64       n                
    load     i64       width            
    load     i64       n                
    sub      i64                        
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #724             
#722: 
    setcall  u64 /2/1                   
    load     u64       padchar          
    setarg   u64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /2    &strcat          
    unload   u64                        
    to       i64       #722             
    opnd     i64       av_1             
#724: 
    retproc                             
endproc

proc mlib.padstr:
    param    u64       s
    param    i64       width
    param    u64       padchar
    rettype  u64
    setcall  u64 /2/1                   
    load     u64       s                
    setarg   u64 /2                     
    load     u64       &mlib.padstr.str 
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    setcall      /3/1                   
    load     u64       padchar          
    setarg   u64 /3                     
    load     i64       width            
    setarg   i64 /2                     
    load     u64       &mlib.padstr.str 
    setarg   u64 /1                     
    callp        /3    &mlib.ipadstr    
    load     u64       &mlib.padstr.str 
    jumpret  u64       #725             
#725: 
    retfn    u64                        
endproc

proc mlib.chr:
    param    i64       c
    rettype  u64
    load     i64       c                
    load     u64       &mlib.chr.str    
    load     i64       1                
    istorex  u8  /1/-1                  
    load     u64       0                
    load     u64       &mlib.chr.str    
    load     i64       2                
    istorex  u8  /1/-1                  
    load     u64       &mlib.chr.str    
    jumpret  u64       #726             
#726: 
    retfn    u64                        
endproc

proc mlib.cmpstring:
    param    u64       s
    param    u64       t
    local    i64       res
    rettype  i64
    startmx                             
    setcall  i32 /2/1                   
    load     u64       t                
    setarg   u64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    i32 /2    &strcmp          
    widen    i64/i32                    
    double                              
    store    i64       res              
    load     i64       0                
    jumpge   i64       #729             
    load     i64       -1               
    resetmx  i64                        
    jump               #728             
#729: 
    load     i64       res              
    load     i64       0                
    jumple   i64       #730             
    load     i64       1                
    resetmx  i64                        
    jump               #728             
#730: 
    load     i64       0                
    endmx    i64                        
#728: 
    jumpret  i64       #727             
#727: 
    retfn    i64                        
endproc

proc mlib.cmpstringn:
    param    u64       s
    param    u64       t
    param    i64       n
    local    i64       res
    rettype  i64
    startmx                             
    setcall  i32 /3/1                   
    load     i64       n                
    setarg   u64 /3                     
    load     u64       t                
    setarg   u64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    i32 /3    &strncmp         
    widen    i64/i32                    
    double                              
    store    i64       res              
    load     i64       0                
    jumpge   i64       #733             
    load     i64       -1               
    resetmx  i64                        
    jump               #732             
#733: 
    load     i64       res              
    load     i64       0                
    jumple   i64       #734             
    load     i64       1                
    resetmx  i64                        
    jump               #732             
#734: 
    load     i64       0                
    endmx    i64                        
#732: 
    jumpret  i64       #731             
#731: 
    retfn    i64                        
endproc

proc mlib.eqstring:
    param    u64       s
    param    u64       t
    rettype  i64
    setcall  i32 /2/1                   
    load     u64       t                
    setarg   u64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    i32 /2    &strcmp          
    widen    i64/i32                    
    load     i64       0                
    seteq    i64                        
    jumpret  i64       #735             
#735: 
    retfn    i64                        
endproc

proc mlib.cmpbytes:
    param    u64       p
    param    u64       q
    param    i64       n
    local    i64       res
    rettype  i64
    startmx                             
    setcall  i32 /3/1                   
    load     i64       n                
    setarg   u64 /3                     
    load     u64       q                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callf    i32 /3    &memcmp          
    widen    i64/i32                    
    double                              
    store    i64       res              
    load     i64       0                
    jumpge   i64       #738             
    load     i64       -1               
    resetmx  i64                        
    jump               #737             
#738: 
    load     i64       res              
    load     i64       0                
    jumple   i64       #739             
    load     i64       1                
    resetmx  i64                        
    jump               #737             
#739: 
    load     i64       0                
    endmx    i64                        
#737: 
    jumpret  i64       #736             
#736: 
    retfn    i64                        
endproc

proc mlib.eqbytes:
    param    u64       p
    param    u64       q
    param    i64       n
    rettype  i64
    setcall  i32 /3/1                   
    load     i64       n                
    setarg   u64 /3                     
    load     u64       q                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callf    i32 /3    &memcmp          
    widen    i64/i32                    
    load     i64       0                
    seteq    i64                        
    jumpret  i64       #740             
#740: 
    retfn    i64                        
endproc

proc mlib.mseed:
    param    u64       a
    param    u64       b
    load     u64       a                
    load     u64       &mlib.seed       
    load     i64       1                
    istorex  i64 /8/-8                  
    load     u64       b                
    jumpf    u64       #743             
    load     u64       b                
    load     u64       &mlib.seed       
    load     i64       2                
    istorex  i64 /8/-8                  
    jump               #742             
#743: 
    load     u64       a                
    load     u64       &mlib.seed       
    load     i64       2                
    addpx    i64 /8/-8                  
    bitxorto i64                        
#742: 
    retproc                             
endproc

proc mlib.mrandom:
    local    i64       x
    local    i64       y
    rettype  u64
    load     u64       &mlib.seed       
    load     i64       1                
    iloadx   i64 /8/-8                  
    store    i64       x                
    load     u64       &mlib.seed       
    load     i64       2                
    iloadx   i64 /8/-8                  
    store    i64       y                
    load     i64       y                
    load     u64       &mlib.seed       
    load     i64       1                
    istorex  i64 /8/-8                  
    load     i64       x                
    load     i64       23               
    shl      i64                        
    load     u64 /1    &x               
    bitxorto i64                        
    load     i64       x                
    load     i64       y                
    bitxor   i64                        
    load     i64       x                
    load     i64       17               
    shr      i64                        
    bitxor   i64                        
    load     i64       y                
    load     i64       26               
    shr      i64                        
    bitxor   i64                        
    load     u64       &mlib.seed       
    load     i64       2                
    istorex  i64 /8/-8                  
    load     u64       &mlib.seed       
    load     i64       2                
    iloadx   i64 /8/-8                  
    load     i64       y                
    add      u64                        
    jumpret  u64       #744             
#744: 
    retfn    u64                        
endproc

proc mlib.mrandomp:
    rettype  i64
    setcall  i64 /0/1                   
    callf    i64 /0    &mlib.mrandom    
    load     i64       9223372036854775807
    bitand   i64                        
    jumpret  i64       #745             
#745: 
    retfn    i64                        
endproc

proc mlib.mrandomint:
    param    i64       n
    rettype  i64
    setcall  i64 /0/1                   
    callf    i64 /0    &mlib.mrandomp   
    load     i64       n                
    irem     i64                        
    jumpret  i64       #746             
#746: 
    retfn    i64                        
endproc

proc mlib.mrandomrange:
    param    i64       a
    param    i64       b
    local    i64       span
    rettype  i64
    load     i64       b                
    load     i64       a                
    sub      i64                        
    load     i64       1                
    add      i64                        
    store    i64       span             
    load     i64       span             
    load     i64       0                
    jumpgt   i64       #749             
    load     i64       0                
    jumpret  i64       #747             
#749: 
    setcall  i64 /0/1                   
    callf    i64 /0    &mlib.mrandomp   
    load     i64       span             
    irem     i64                        
    load     i64       a                
    add      i64                        
    jumpret  i64       #747             
#747: 
    retfn    i64                        
endproc

proc mlib.mrandomreal:
    local    r64       x
    rettype  r64
#751: 
    setcall  i64 /0/1                   
    callf    i64 /0    &mlib.mrandomp   
    float    r64/i64                    
    load     r64       9.2233720368547758e+018
    div      r64                        
    store    r64       x                
    load     r64       x                
    load     r64       1.0000000000000000e+000
    jumpeq   r64       #751             
    load     r64       x                
    jumpret  r64       #750             
#750: 
    retfn    r64                        
endproc

proc mlib.mrandomreal1:
    rettype  r64
    setcall  i64 /0/1                   
    callf    i64 /0    &mlib.mrandomp   
    float    r64/i64                    
    load     r64       9.2233720368547758e+018
    div      r64                        
    jumpret  r64       #754             
#754: 
    retfn    r64                        
endproc

proc mlib.readline:
    rettype  u64
    setcall      /0/1                   
    callp        /0    &msysc.m$read_conline
    load     u64       msysc.rd_buffer  
    jumpret  u64       #755             
#755: 
    retfn    u64                        
endproc

proc mlib.findfunction:
    param    u64       name
    local    i64       av_1
    local    i64       i
    rettype  u64
    load     i64       1                
    store    i64       i                
    load     i64       $nprocs          
    store    i64       av_1             
    load     i64       av_1             
    load     i64       1                
    jumplt   i64       #759             
#757: 
    setcall  i64 /2/1                   
    load     u64       name             
    setarg   u64 /2                     
    load     u64       &$procname       
    load     i64       i                
    iloadx   i64 /8/-8                  
    setarg   u64 /1                     
    callf    i64 /2    &mlib.eqstring   
    jumpf    i64       #761             
    load     u64       &$procaddr       
    load     i64       i                
    iloadx   i64 /8/-8                  
    jumpret  u64       #756             
#761: 
    forup    i64 /1    #757             
    opnd     i64       i                
    opnd     i64       av_1             
#759: 
    load     u64       0                
    jumpret  u64       #756             
#756: 
    retfn    u64                        
endproc

proc mlib.roundtoblock:
    param    i64       n
    param    i64       align
    rettype  i64
    load     i64       n                
    load     i64       align            
    load     i64       1                
    sub      i64                        
    bitand   i64                        
    load     i64       0                
    jumpne   i64       #764             
    load     i64       n                
    jumpret  i64       #762             
#764: 
    load     i64       n                
    load     i64       align            
    load     i64       n                
    load     i64       align            
    load     i64       1                
    sub      i64                        
    bitand   i64                        
    sub      i64                        
    add      i64                        
    jumpret  i64       #762             
#762: 
    retfn    i64                        
endproc

proc mlib.pcm_allocnfz:
    param    i64       n
    local    u64       p
    rettype  u64
    load     i64       n                
    load     i64       7                
    bitand   i64                        
    jumpf    i64       #767             
    load     i64       n                
    load     i64       8                
    load     i64       n                
    load     i64       7                
    bitand   i64                        
    sub      i64                        
    add      i64                        
    store    i64       n                
#767: 
    load     u64       mlib.pcheapptr   
    store    u64       p                
    load     i64       n                
    load     u64 /1    &mlib.pcheapptr  
    addpxto  u64 /1                     
    load     u64       mlib.pcheapptr   
    load     u64       mlib.pcheapend   
    jumplt   u64       #769             
    setcall  u64 /1/1                   
    load     i64       n                
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_newblock
    store    u64       p                
#769: 
    load     u64       p                
    jumpret  u64       #765             
#765: 
    retfn    u64                        
endproc

proc mlinux.os_init:
    load     i64       1                
    store    i64       mlinux.init_flag 
    retproc                             
endproc

proc mlinux.os_execwait:
    param    u64       cmdline
    param    i64       newconsole
    param    u64       workdir
    rettype  i64
    setcall  i32 /1/1                   
    load     u64       cmdline          
    setarg   u64 /1                     
    callf    i32 /1    &system          
    widen    i64/i32                    
    jumpret  i64       #771             
#771: 
    retfn    i64                        
endproc

proc mlinux.os_execcmd:
    param    u64       cmdline
    param    i64       newconsole
    rettype  i64
    setcall  i32 /1/1                   
    load     u64       cmdline          
    setarg   u64 /1                     
    callf    i32 /1    &system          
    widen    i64/i32                    
    jumpret  i64       #772             
#772: 
    retfn    i64                        
endproc

proc mlinux.os_getch:
    local    mem:60       old
    local    mem:60       new
    local    u8       ch
    rettype  i64
    setcall  i32 /2/1                   
    load     u64       &old             
    setarg   u64 /2                     
    load     i64       0                
    setarg   i32 /1                     
    callf    i32 /2    &tcgetattr       
    unload   i32                        
    load     mem:60       old           
    store    mem:60       new           
    load     i64       -3               
    load     u64       &new             
    load     i64       12               
    addpx    u64 /1                     
    bitandto i32                        
    load     i64       -9               
    load     u64       &new             
    load     i64       12               
    addpx    u64 /1                     
    bitandto i32                        
    load     i64       -2               
    load     u64       &new             
    load     i64       12               
    addpx    u64 /1                     
    bitandto i32                        
    setcall  i32 /3/1                   
    load     u64       &new             
    setarg   u64 /3                     
    load     i64       0                
    setarg   i32 /2                     
    load     i64       0                
    setarg   i32 /1                     
    callf    i32 /3    &tcsetattr       
    unload   i32                        
    setcall  i32 /0/1                   
    callf    i32 /0    &getchar         
    store    u8        ch               
    setcall  i32 /3/1                   
    load     u64       &old             
    setarg   u64 /3                     
    load     i64       0                
    setarg   i32 /2                     
    load     i64       0                
    setarg   i32 /1                     
    callf    i32 /3    &tcsetattr       
    unload   i32                        
    load     u8        ch               
    widen    i64/u8                     
    jumpret  i64       #773             
#773: 
    retfn    i64                        
endproc

proc mlinux.os_kbhit:
    rettype  i64
    setcall      /1/1                   
    load     u64       "kbhit"          
    setarg   u64 /1                     
    callp        /1    &mlib.abortprogram
    load     i64       0                
    jumpret  i64       #774             
#774: 
    retfn    i64                        
endproc

proc mlinux.os_flushkeys:
    setcall      /1/1                   
    load     u64       "flushkeys"      
    setarg   u64 /1                     
    callp        /1    &mlib.abortprogram
    retproc                             
endproc

proc mlinux.os_getconsolein:
    rettype  u64
    load     u64       0                
    jumpret  u64       #776             
#776: 
    retfn    u64                        
endproc

proc mlinux.os_getconsoleout:
    rettype  u64
    load     u64       0                
    jumpret  u64       #777             
#777: 
    retfn    u64                        
endproc

proc mlinux.os_proginstance:
    rettype  u64
    setcall      /1/1                   
    load     u64       "PROGINST"       
    setarg   u64 /1                     
    callp        /1    &mlib.abortprogram
    load     u64       0                
    jumpret  u64       #778             
#778: 
    retfn    u64                        
endproc

proc mlinux.os_getdllinst:
    param    u64       name
    local    u64       h
    rettype  u64
    setcall  u64 /2/1                   
    load     i64       1                
    setarg   i32 /2                     
    load     u64       name             
    setarg   u64 /1                     
    callf    u64 /2    &dlopen          
    store    u64       h                
    load     u64       h                
    load     u64       0                
    jumpne   u64       #781             
    setcall  i32 /2/1                   
    load     u64       "msvcrt"         
    setarg   u64 /2                     
    load     u64       name             
    setarg   u64 /1                     
    callf    i32 /2    &strcmp          
    widen    i64/i32                    
    load     i64       0                
    jumpne   i64       #783             
    setcall  u64 /2/1                   
    load     i64       1                
    setarg   i32 /2                     
    load     u64       "libc.so.6"      
    setarg   u64 /1                     
    callf    u64 /2    &dlopen          
    store    u64       h                
#783: 
#781: 
    load     u64       h                
    jumpret  u64       #779             
#779: 
    retfn    u64                        
endproc

proc mlinux.os_getdllprocaddr:
    param    i64       hlib
    param    u64       name
    local    u64       fnaddr
    rettype  u64
    load     i64       hlib             
    load     i64       0                
    jumpne   i64       #786             
    load     u64       0                
    jumpret  u64       #784             
#786: 
    setcall  u64 /2/1                   
    load     u64       name             
    setarg   u64 /2                     
    load     i64       hlib             
    setarg   u64 /1                     
    callf    u64 /2    &dlsym           
    store    u64       fnaddr           
    load     u64       fnaddr           
    jumpret  u64       #784             
#784: 
    retfn    u64                        
endproc

proc mlinux.os_initwindows:
    retproc                             
endproc

proc mlinux.os_getchx:
    rettype  i64
    setcall      /1/1                   
    load     u64       "getchx"         
    setarg   u64 /1                     
    callp        /1    &mlib.abortprogram
    load     i64       0                
    jumpret  i64       #788             
#788: 
    retfn    i64                        
endproc

proc mlinux.os_getos:
    rettype  u64
    load     u64       "L64"            
    jumpret  u64       #789             
#789: 
    retfn    u64                        
endproc

proc mlinux.os_gethostsize:
    rettype  i64
    load     i64       64               
    jumpret  i64       #790             
#790: 
    retfn    i64                        
endproc

proc mlinux.os_iswindows:
    rettype  i64
    load     i64       0                
    jumpret  i64       #791             
#791: 
    retfn    i64                        
endproc

proc mlinux.os_shellexec:
    param    u64       opc
    param    u64       file
    rettype  i64
    setcall      /1/1                   
    load     u64       "SHELL EXEC"     
    setarg   u64 /1                     
    callp        /1    &mlib.abortprogram
    load     i64       0                
    jumpret  i64       #792             
#792: 
    retfn    i64                        
endproc

proc mlinux.os_sleep:
    param    i64       a
    retproc                             
endproc

proc mlinux.os_getstdin:
    local    u64       pf
    rettype  u64
    load     u64       &stdin           
    store    u64       pf               
    load     u64       pf               
    iload    u64                        
    jumpret  u64       #794             
#794: 
    retfn    u64                        
endproc

proc mlinux.os_getstdout:
    local    u64       pf
    rettype  u64
    load     u64       &stdout          
    store    u64       pf               
    load     u64       pf               
    iload    u64                        
    jumpret  u64       #795             
#795: 
    retfn    u64                        
endproc

proc mlinux.os_gethostname:
    rettype  u64
    load     u64       ""               
    jumpret  u64       #796             
#796: 
    retfn    u64                        
endproc

proc mlinux.os_getmpath:
    rettype  u64
    load     u64       ""               
    jumpret  u64       #797             
#797: 
    retfn    u64                        
endproc

proc mlinux.os_exitprocess:
    param    i64       x
    load     i64       0                
    stop                                
    retproc                             
endproc

proc mlinux.os_clock:
    rettype  i64
    startmx                             
    setcall  i64 /0/1                   
    callf    i64 /0    &mlinux.os_iswindows
    jumpf    i64       #801             
    setcall  i32 /0/1                   
    callf    i32 /0    &clock           
    widen    i64/i32                    
    resetmx  i64                        
    jump               #800             
#801: 
    setcall  i32 /0/1                   
    callf    i32 /0    &clock           
    widen    i64/i32                    
    load     i64       1000             
    idiv     i64                        
    endmx    i64                        
#800: 
    jumpret  i64       #799             
#799: 
    retfn    i64                        
endproc

proc mlinux.os_ticks:
    rettype  i64
    setcall  i32 /0/1                   
    callf    i32 /0    &clock           
    widen    i64/i32                    
    jumpret  i64       #802             
#802: 
    retfn    i64                        
endproc

proc mlinux.os_getclockspersec:
    rettype  i64
    startmx                             
    setcall  i64 /0/1                   
    callf    i64 /0    &mlinux.os_iswindows
    jumpf    i64       #805             
    load     i64       1000             
    resetmx  i64                        
    jump               #804             
#805: 
    load     i64       1000000          
    endmx    i64                        
#804: 
    jumpret  i64       #803             
#803: 
    retfn    i64                        
endproc

proc mlinux.os_setmesshandler:
    param    u64       addr
    setcall      /1/1                   
    load     u64       "SETMESSHANDLER" 
    setarg   u64 /1                     
    callp        /1    &mlib.abortprogram
    retproc                             
endproc

proc mlinux.os_hpcounter:
    rettype  i64
    load     i64       1                
    jumpret  i64       #807             
#807: 
    retfn    i64                        
endproc

proc mlinux.os_hpfrequency:
    rettype  i64
    load     i64       1                
    jumpret  i64       #808             
#808: 
    retfn    i64                        
endproc

proc mlinux.os_filelastwritetime:
    param    u64       filename
    rettype  i64
    load     i64       0                
    jumpret  i64       #809             
#809: 
    retfn    i64                        
endproc

proc mlinux.os_getsystime:
    param    u64       tm
    local    mem:16       tv
    local    mem:56       tmr
    setcall  i32 /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       &tv              
    setarg   u64 /1                     
    callf    i32 /2    &gettimeofday    
    unload   i32                        
    setcall  u64 /2/1                   
    load     u64       &tmr             
    setarg   u64 /2                     
    load     u64       &tv              
    load     i64       0                
    addpx    u8  /1                     
    setarg   u64 /1                     
    callf    u64 /2    &gmtime_r        
    unload   u64                        
    load     u64       &tmr             
    load     i64       20               
    iloadx   i32 /1                     
    widen    i64/i32                    
    load     i64       1900             
    add      i64                        
    load     u64       tm               
    load     i64       0                
    istorex  i32 /1                     
    load     u64       &tmr             
    load     i64       16               
    iloadx   i32 /1                     
    widen    i64/i32                    
    load     i64       1                
    add      i64                        
    load     u64       tm               
    load     i64       4                
    istorex  i32 /1                     
    load     u64       &tmr             
    load     i64       24               
    iloadx   i32 /1                     
    widen    i64/i32                    
    load     i64       1                
    add      i64                        
    load     u64       tm               
    load     i64       8                
    istorex  i32 /1                     
    load     u64       &tmr             
    load     i64       12               
    iloadx   i32 /1                     
    load     u64       tm               
    load     i64       12               
    istorex  i32 /1                     
    load     u64       &tmr             
    load     i64       8                
    iloadx   i32 /1                     
    load     u64       tm               
    load     i64       16               
    istorex  i32 /1                     
    load     u64       &tmr             
    load     i64       4                
    iloadx   i32 /1                     
    load     u64       tm               
    load     i64       20               
    istorex  i32 /1                     
    load     u64       &tmr             
    load     i64       0                
    iloadx   i32 /1                     
    load     u64       tm               
    load     i64       24               
    istorex  i32 /1                     
    load     u64       &tv              
    load     i64       8                
    iloadx   i64 /1                     
    load     i64       1000             
    idiv     i64                        
    load     u64       tm               
    load     i64       28               
    istorex  i64 /1                     
    load     i64       1                
    load     u64       tm               
    load     i64       4                
    istorex  i32 /1                     
    retproc                             
endproc

proc mlinux.os_peek:
    retproc                             
endproc

proc mlinux.os_allocexecmem:
    param    i64       n
    rettype  u64
    setcall      /1/1                   
    load     u64       "No allocexec"   
    setarg   u64 /1                     
    callp        /1    &mlib.abortprogram
    load     u64       0                
    jumpret  u64       #812             
#812: 
    retfn    u64                        
endproc

proc mlinux.dirlist:
    param    u64       filespec
    param    u64       dest
    param    i64       capacity
    param    i64       t
    rettype  i64
    load     i64       0                
    jumpret  i64       #813             
#813: 
    retfn    i64                        
endproc

proc mwindllc.os_calldllfunction:
    param    u64       fnaddr
    param    i64       retcode
    param    i64       nargs
    param    u64       args
    param    u64       argcodes
    local    u64       a
    local    r64       x
    local    i64       oddstack
    local    i64       nextra
    local    i64       pushedbytes
    rettype  u64
    startmx                             
    load     i64       retcode          
    load     i64       73               
    jumpne   i64       #816             
    setcall  u64 /3/1                   
    load     i64       nargs            
    setarg   i64 /3                     
    load     u64       args             
    setarg   u64 /2                     
    load     u64       fnaddr           
    setarg   u64 /1                     
    callf    u64 /3    &mwindllc.calldll_cint
    resetmx  u64                        
    jump               #815             
#816: 
    setcall  u64 /3/1                   
    load     i64       nargs            
    setarg   i64 /3                     
    load     u64       args             
    setarg   u64 /2                     
    load     u64       fnaddr           
    setarg   u64 /1                     
    callf    u64 /3    &mwindllc.calldll_creal
    endmx    u64                        
#815: 
    jumpret  u64       #814             
#814: 
    retfn    u64                        
endproc

proc mwindllc.os_pushargs:
    param    u64       args
    param    i64       nargs
    param    i64       nextra
    param    u64       fnaddr
    param    i64       isfloat
    local    u64       a
    local    r64       x
    rettype  u64
    setcall  u64 /5/1                   
    load     u64       0                
    setarg   u64 /5                     
    load     u64       args             
    setarg   u64 /4                     
    load     i64       nargs            
    setarg   i64 /3                     
    startmx                             
    load     i64       isfloat          
    jumpf    i64       #819             
    load     i64       0                
    resetmx  i64                        
    jump               #818             
#819: 
    load     i64       73               
    endmx    i64                        
#818: 
    setarg   i64 /2                     
    load     u64       fnaddr           
    setarg   u64 /1                     
    callf    u64 /5    &mwindllc.os_calldllfunction
    jumpret  u64       #817             
#817: 
    retfn    u64                        
endproc

proc mwindllc.calldll_cint:
    param    u64       fnaddr
    param    u64       params
    param    i64       nparams
    rettype  i64
    load     i64       nparams          
    switch   i64 /0/12  #822            
    opnd     i64       #823             
#822: 
    swlabel            #824             
    swlabel            #825             
    swlabel            #826             
    swlabel            #827             
    swlabel            #828             
    swlabel            #829             
    swlabel            #830             
    swlabel            #823             
    swlabel            #831             
    swlabel            #832             
    swlabel            #833             
    swlabel            #834             
    swlabel            #835             
    endsw                               
#824: 
    setcall  i64 /0/1                   
    load     u64       fnaddr           
    icallf   i64 /0                     
    jumpret  i64       #820             
    jump               #821             
#825: 
    setcall  i64 /1/1                   
    load     u64       params           
    load     i64       1                
    iloadx   i64 /8/-8                  
    setarg   i64 /1                     
    load     u64       fnaddr           
    icallf   i64 /1                     
    jumpret  i64       #820             
    jump               #821             
#826: 
    setcall  i64 /2/1                   
    load     u64       params           
    load     i64       2                
    iloadx   i64 /8/-8                  
    setarg   i64 /2                     
    load     u64       params           
    load     i64       1                
    iloadx   i64 /8/-8                  
    setarg   i64 /1                     
    load     u64       fnaddr           
    icallf   i64 /2                     
    jumpret  i64       #820             
    jump               #821             
#827: 
    setcall  i64 /3/1                   
    load     u64       params           
    load     i64       3                
    iloadx   i64 /8/-8                  
    setarg   i64 /3                     
    load     u64       params           
    load     i64       2                
    iloadx   i64 /8/-8                  
    setarg   i64 /2                     
    load     u64       params           
    load     i64       1                
    iloadx   i64 /8/-8                  
    setarg   i64 /1                     
    load     u64       fnaddr           
    icallf   i64 /3                     
    jumpret  i64       #820             
    jump               #821             
#828: 
    setcall  i64 /4/1                   
    load     u64       params           
    load     i64       4                
    iloadx   i64 /8/-8                  
    setarg   i64 /4                     
    load     u64       params           
    load     i64       3                
    iloadx   i64 /8/-8                  
    setarg   i64 /3                     
    load     u64       params           
    load     i64       2                
    iloadx   i64 /8/-8                  
    setarg   i64 /2                     
    load     u64       params           
    load     i64       1                
    iloadx   i64 /8/-8                  
    setarg   i64 /1                     
    load     u64       fnaddr           
    icallf   i64 /4                     
    jumpret  i64       #820             
    jump               #821             
#829: 
    setcall  i64 /5/1                   
    load     u64       params           
    load     i64       5                
    iloadx   i64 /8/-8                  
    setarg   i64 /5                     
    load     u64       params           
    load     i64       4                
    iloadx   i64 /8/-8                  
    setarg   i64 /4                     
    load     u64       params           
    load     i64       3                
    iloadx   i64 /8/-8                  
    setarg   i64 /3                     
    load     u64       params           
    load     i64       2                
    iloadx   i64 /8/-8                  
    setarg   i64 /2                     
    load     u64       params           
    load     i64       1                
    iloadx   i64 /8/-8                  
    setarg   i64 /1                     
    load     u64       fnaddr           
    icallf   i64 /5                     
    jumpret  i64       #820             
    jump               #821             
#830: 
    setcall  i64 /6/1                   
    load     u64       params           
    load     i64       6                
    iloadx   i64 /8/-8                  
    setarg   i64 /6                     
    load     u64       params           
    load     i64       5                
    iloadx   i64 /8/-8                  
    setarg   i64 /5                     
    load     u64       params           
    load     i64       4                
    iloadx   i64 /8/-8                  
    setarg   i64 /4                     
    load     u64       params           
    load     i64       3                
    iloadx   i64 /8/-8                  
    setarg   i64 /3                     
    load     u64       params           
    load     i64       2                
    iloadx   i64 /8/-8                  
    setarg   i64 /2                     
    load     u64       params           
    load     i64       1                
    iloadx   i64 /8/-8                  
    setarg   i64 /1                     
    load     u64       fnaddr           
    icallf   i64 /6                     
    jumpret  i64       #820             
    jump               #821             
#831: 
    setcall  i64 /8/1                   
    load     u64       params           
    load     i64       8                
    iloadx   i64 /8/-8                  
    setarg   i64 /8                     
    load     u64       params           
    load     i64       7                
    iloadx   i64 /8/-8                  
    setarg   i64 /7                     
    load     u64       params           
    load     i64       6                
    iloadx   i64 /8/-8                  
    setarg   i64 /6                     
    load     u64       params           
    load     i64       5                
    iloadx   i64 /8/-8                  
    setarg   i64 /5                     
    load     u64       params           
    load     i64       4                
    iloadx   i64 /8/-8                  
    setarg   i64 /4                     
    load     u64       params           
    load     i64       3                
    iloadx   i64 /8/-8                  
    setarg   i64 /3                     
    load     u64       params           
    load     i64       2                
    iloadx   i64 /8/-8                  
    setarg   i64 /2                     
    load     u64       params           
    load     i64       1                
    iloadx   i64 /8/-8                  
    setarg   i64 /1                     
    load     u64       fnaddr           
    icallf   i64 /8                     
    jumpret  i64       #820             
    jump               #821             
#832: 
    setcall  i64 /9/1                   
    load     u64       params           
    load     i64       9                
    iloadx   i64 /8/-8                  
    setarg   i64 /9                     
    load     u64       params           
    load     i64       8                
    iloadx   i64 /8/-8                  
    setarg   i64 /8                     
    load     u64       params           
    load     i64       7                
    iloadx   i64 /8/-8                  
    setarg   i64 /7                     
    load     u64       params           
    load     i64       6                
    iloadx   i64 /8/-8                  
    setarg   i64 /6                     
    load     u64       params           
    load     i64       5                
    iloadx   i64 /8/-8                  
    setarg   i64 /5                     
    load     u64       params           
    load     i64       4                
    iloadx   i64 /8/-8                  
    setarg   i64 /4                     
    load     u64       params           
    load     i64       3                
    iloadx   i64 /8/-8                  
    setarg   i64 /3                     
    load     u64       params           
    load     i64       2                
    iloadx   i64 /8/-8                  
    setarg   i64 /2                     
    load     u64       params           
    load     i64       1                
    iloadx   i64 /8/-8                  
    setarg   i64 /1                     
    load     u64       fnaddr           
    icallf   i64 /9                     
    jumpret  i64       #820             
    jump               #821             
#833: 
    setcall  i64 /10/1                  
    load     u64       params           
    load     i64       10               
    iloadx   i64 /8/-8                  
    setarg   i64 /10                    
    load     u64       params           
    load     i64       9                
    iloadx   i64 /8/-8                  
    setarg   i64 /9                     
    load     u64       params           
    load     i64       8                
    iloadx   i64 /8/-8                  
    setarg   i64 /8                     
    load     u64       params           
    load     i64       7                
    iloadx   i64 /8/-8                  
    setarg   i64 /7                     
    load     u64       params           
    load     i64       6                
    iloadx   i64 /8/-8                  
    setarg   i64 /6                     
    load     u64       params           
    load     i64       5                
    iloadx   i64 /8/-8                  
    setarg   i64 /5                     
    load     u64       params           
    load     i64       4                
    iloadx   i64 /8/-8                  
    setarg   i64 /4                     
    load     u64       params           
    load     i64       3                
    iloadx   i64 /8/-8                  
    setarg   i64 /3                     
    load     u64       params           
    load     i64       2                
    iloadx   i64 /8/-8                  
    setarg   i64 /2                     
    load     u64       params           
    load     i64       1                
    iloadx   i64 /8/-8                  
    setarg   i64 /1                     
    load     u64       fnaddr           
    icallf   i64 /10                    
    jumpret  i64       #820             
    jump               #821             
#834: 
    setcall  i64 /11/1                  
    load     u64       params           
    load     i64       11               
    iloadx   i64 /8/-8                  
    setarg   i64 /11                    
    load     u64       params           
    load     i64       10               
    iloadx   i64 /8/-8                  
    setarg   i64 /10                    
    load     u64       params           
    load     i64       9                
    iloadx   i64 /8/-8                  
    setarg   i64 /9                     
    load     u64       params           
    load     i64       8                
    iloadx   i64 /8/-8                  
    setarg   i64 /8                     
    load     u64       params           
    load     i64       7                
    iloadx   i64 /8/-8                  
    setarg   i64 /7                     
    load     u64       params           
    load     i64       6                
    iloadx   i64 /8/-8                  
    setarg   i64 /6                     
    load     u64       params           
    load     i64       5                
    iloadx   i64 /8/-8                  
    setarg   i64 /5                     
    load     u64       params           
    load     i64       4                
    iloadx   i64 /8/-8                  
    setarg   i64 /4                     
    load     u64       params           
    load     i64       3                
    iloadx   i64 /8/-8                  
    setarg   i64 /3                     
    load     u64       params           
    load     i64       2                
    iloadx   i64 /8/-8                  
    setarg   i64 /2                     
    load     u64       params           
    load     i64       1                
    iloadx   i64 /8/-8                  
    setarg   i64 /1                     
    load     u64       fnaddr           
    icallf   i64 /11                    
    jumpret  i64       #820             
    jump               #821             
#835: 
    setcall  i64 /12/1                  
    load     u64       params           
    load     i64       12               
    iloadx   i64 /8/-8                  
    setarg   i64 /12                    
    load     u64       params           
    load     i64       11               
    iloadx   i64 /8/-8                  
    setarg   i64 /11                    
    load     u64       params           
    load     i64       10               
    iloadx   i64 /8/-8                  
    setarg   i64 /10                    
    load     u64       params           
    load     i64       9                
    iloadx   i64 /8/-8                  
    setarg   i64 /9                     
    load     u64       params           
    load     i64       8                
    iloadx   i64 /8/-8                  
    setarg   i64 /8                     
    load     u64       params           
    load     i64       7                
    iloadx   i64 /8/-8                  
    setarg   i64 /7                     
    load     u64       params           
    load     i64       6                
    iloadx   i64 /8/-8                  
    setarg   i64 /6                     
    load     u64       params           
    load     i64       5                
    iloadx   i64 /8/-8                  
    setarg   i64 /5                     
    load     u64       params           
    load     i64       4                
    iloadx   i64 /8/-8                  
    setarg   i64 /4                     
    load     u64       params           
    load     i64       3                
    iloadx   i64 /8/-8                  
    setarg   i64 /3                     
    load     u64       params           
    load     i64       2                
    iloadx   i64 /8/-8                  
    setarg   i64 /2                     
    load     u64       params           
    load     i64       1                
    iloadx   i64 /8/-8                  
    setarg   i64 /1                     
    load     u64       fnaddr           
    icallf   i64 /12                    
    jumpret  i64       #820             
    jump               #821             
#823: 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     i64       nparams          
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "calldll/c/int unsupported # of params"
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     i64       nparams          
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     i64       1                
    stop                                
#821: 
    load     i64       0                
    jumpret  i64       #820             
#820: 
    retfn    i64                        
endproc

proc mwindllc.calldll_creal:
    param    u64       fnaddr
    param    u64       params
    param    i64       nparams
    local    r64       x
    rettype  i64
    load     i64       nparams          
    load     i64       0                
    jumpeq   i64 /1    #838             
    load     i64       1                
    jumpeq   i64 /1    #839             
    load     i64       2                
    jumpeq   i64       #840             
    jump               #841             
#838: 
    setcall  r64 /0/1                   
    load     u64       fnaddr           
    icallf   r64 /0                     
    fix      i64/r64                    
    jumpret  i64       #836             
    jump               #837             
#839: 
    setcall      /4/1                   
    load     u64       params           
    load     i64       4                
    iloadx   i64 /8/-8                  
    float    r64/i64                    
    setarg   r64 /4                     
    load     u64       params           
    load     i64       3                
    iloadx   i64 /8/-8                  
    float    r64/i64                    
    setarg   r64 /3                     
    load     u64       params           
    load     i64       2                
    iloadx   i64 /8/-8                  
    float    r64/i64                    
    setarg   r64 /2                     
    load     u64       params           
    load     i64       1                
    iloadx   i64 /8/-8                  
    float    r64/i64                    
    setarg   r64 /1                     
    callp        /4    &mwindllc.os_dummycall
    setcall  r64 /1/1                   
    load     u64       params           
    load     i64       1                
    iloadx   i64 /8/-8                  
    setarg   i64 /1                     
    load     u64       fnaddr           
    icallf   r64 /1                     
    store    r64       x                
    jump               #837             
#840: 
    setcall  r64 /2/1                   
    load     u64       params           
    load     i64       2                
    iloadx   i64 /8/-8                  
    setarg   i64 /2                     
    load     u64       params           
    load     i64       1                
    iloadx   i64 /8/-8                  
    setarg   i64 /1                     
    load     u64       fnaddr           
    icallf   r64 /2                     
    store    r64       x                
    jump               #837             
#841: 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "calldll/c/real too many params"
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     i64       1                
    stop                                
#837: 
    load     r64       x                
    typepun  i64/r64                    
    jumpret  i64       #836             
#836: 
    retfn    i64                        
endproc

proc mwindllc.os_dummycall:
    param    r64       a
    param    r64       b
    param    r64       c
    param    r64       d
    retproc                             
endproc

proc qq_cli.main:::
    local    u64       source
    local    i64       i
    local    i64       nnames
    local    i64       t
    local    i64       tstart
    local    i64       stopcode
    local    u64       p
    setcall      /0/1                   
    callp        /0    &qq_cli.start    
    setcall      /0/1                   
    callp        /0    &qq_cli.initdata 
    setcall      /0/1                   
    callp        /0    &qq_cli.getinputoptions
    setcall      /0/1                   
    callp        /0    &qq_modules.readqabundle
    setcall      /0/1                   
    callp        /0    &qq_cli.loadsyslib
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       qq_cli.inputfile 
    setarg   u64 /1                     
    callp        /2    &qq_cli.compile_sp
    load     u8        qq_cli.fallsp    
    jumpf    u8        #845             
    load     u8        qq_cli.fshowast1 
    jumpf    u8        #847             
    load     u8        qq_cli.runcode   
    widen    i64/u8                     
    load     i64       2                
    jumpne   i64       #847             
    setcall      /2/1                   
    load     u64       "AST1"           
    setarg   u64 /2                     
    load     u64       0                
    setarg   u64 /1                     
    callp        /2    &qq_show.showast 
#847: 
    load     u8        qq_cli.fshowast2 
    jumpf    u8        #849             
    load     u8        qq_cli.runcode   
    widen    i64/u8                     
    load     i64       2                
    jumple   i64       #849             
    setcall      /2/1                   
    load     u64       "AST2"           
    setarg   u64 /2                     
    load     u64       0                
    setarg   u64 /1                     
    callp        /2    &qq_show.showast 
#849: 
#845: 
    setcall      /0/1                   
    callp        /0    &qq_cli.writeqafile
    load     i64       1                
    store    i64       i                
    load     i64       qq_decls.nsubprogs
    load     i64       1                
    jumplt   i64       #852             
#850: 
    setcall  i64 /2/1                   
    load     i64       i                
    load     i64       qq_decls.nsubprogs
    seteq    i64                        
    setarg   i64 /2                     
    load     u64       &qq_decls.subprogs
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /1                     
    callf    i64 /2    &qq_runx.runqprogram
    store    i64       stopcode         
    forup    i64 /1    #850             
    opnd     i64       i                
    opnd     i64       qq_decls.nsubprogs
#852: 
    setcall      /0/1                   
    callp        /0    &qq_show.showlogfile
    load     i64       stopcode         
    stop                                
    load     i64       0                
    stop                                
    retproc                             
endproc

proc qq_cli.getinputoptions:
    local    i64       paramno
    local    i64       pmtype
    local    u64       name
    local    u64       value
    local    u64       appstr
    local    u64       appname
    local    u64       fnaddr
    local    i64       av_1
    local    i64       sw
    setcall  u64 /1/1                   
    load     u64       "getbuiltin_app" 
    setarg   u64 /1                     
    callf    u64 /1    &mlib.findfunction
    store    u64       fnaddr           
    load     i64       1                
    store    i64       paramno          
    jump               #855             
#854: 
    load     i64       pmtype           
    load     i64       1                
    jumpeq   i64 /1    #858             
    load     i64       2                
    jumpeq   i64       #859             
    jump               #860             
#858: 
    setcall  u64 /1/1                   
    load     u64       name             
    setarg   u64 /1                     
    callf    u64 /1    &mlib.convlcstring
    unload   u64                        
    load     i64       1                
    store    i64       sw               
    load     i64       23               
    store    i64       av_1             
    load     i64       av_1             
    load     i64       1                
    jumplt   i64       #864             
#861: 
    setcall  i64 /2/1                   
    load     u64       &qq_decls.optionnames
    load     i64       sw               
    iloadx   u64 /8/-8                  
    setarg   u64 /2                     
    load     u64       name             
    setarg   u64 /1                     
    callf    i64 /2    &mlib.eqstring   
    jumpf    i64       #866             
    setcall      /2/1                   
    load     u64       value            
    setarg   u64 /2                     
    load     i64       sw               
    setarg   i64 /1                     
    callp        /2    &qq_cli.do_option
    jump               #863             
#866: 
    forup    i64 /1    #861             
    opnd     i64       sw               
    opnd     i64       av_1             
#864: 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "Unknown option:"
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       name             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     i64       99               
    stop                                
#863: 
    jump               #857             
#859: 
    load     u64       fnaddr           
    jumpf    u64       #868             
    load     u64 /1    &paramno         
    decrto   i64 /1                     
    jump               #856             
#868: 
    setcall  u64 /1/1                   
    load     u64       name             
    setarg   u64 /1                     
    callf    u64 /1    &mlib.pcm_copyheapstring
    store    u64       qq_cli.inputfile 
    jump               #856             
    jump               #857             
#860: 
#857: 
#855: 
    setcall  i64 /4/1                   
    load     u64       "q"              
    setarg   u64 /4                     
    load     u64       &value           
    setarg   u64 /3                     
    load     u64       &name            
    setarg   u64 /2                     
    load     u64       &paramno         
    setarg   u64 /1                     
    callf    i64 /4    &mlib.nextcmdparamnew
    double                              
    store    i64       pmtype           
    jumpt    i64       #854             
#856: 
    load     u64       fnaddr           
    jumpf    u64       #870             
    setcall  u64 /0/1                   
    load     u64       fnaddr           
    icallf   u64 /0                     
    store    u64       appstr           
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "DO BUILT-IN"    
    setarg   u64 /1                     
    callp        /2    &qq_lib.loaderror
    jump               #869             
#870: 
    load     u64       qq_cli.inputfile 
    jumpt    u64       #871             
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "Q7.0 Interpreter"
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "Usage:"         
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "\t"             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64       msysc.cmdparams  
    load     i64       0                
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       "filename[.q]"   
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     i64       0                
    stop                                
#871: 
#869: 
    load     i64       paramno          
    store    i64       qq_cli.cmdstartindex
    setcall      /2/1                   
    load     i64       msysc.ncmdparams 
    load     i64       qq_cli.cmdstartindex
    sub      i64                        
    load     i64       1                
    add      i64                        
    setarg   i64 /2                     
    load     u64       msysc.cmdparams  
    load     i64       qq_cli.cmdstartindex
    addpx    u64 /8                     
    setarg   u64 /1                     
    callp        /2    &qq_cli.setcli   
    retproc                             
endproc

proc qq_cli.do_option:
    param    i64       sw
    param    u64       value
    local    u64       p
    load     u64       &qq_decls.optionvars
    load     i64       sw               
    iloadx   u64 /8/-8                  
    store    u64       p                
    load     u64       p                
    jumpf    u64       #874             
    load     u64       &qq_decls.optionvalues
    load     i64       sw               
    iloadx   u8  /1/-1                  
    load     u64       p                
    istore   u8                         
    jump               #872             
#874: 
#872: 
    retproc                             
endproc

proc qq_cli.compile_sp:
    param    u64       filename
    param    u64       source
    local    u64       qafile
    local    u64       sp
    local    i64       a
    local    i64       b
    local    i64       m
    setcall  u64 /2/1                   
    load     u64       source           
    setarg   u64 /2                     
    load     u64       filename         
    setarg   u64 /1                     
    callf    u64 /2    &qq_modules.loadsp
    store    u64       sp               
    load     u8        qq_cli.runcode   
    widen    i64/u8                     
    load     i64       2                
    jumpge   i64       #877             
    jump               #875             
#877: 
    load     u64       sp               
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       a                
    load     u64       sp               
    load     i64       26               
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       b                
    load     i64       a                
    store    i64       m                
    load     i64       m                
    load     i64       b                
    jumpgt   i64       #880             
#878: 
    setcall      /1/1                   
    load     u64       &qq_decls.modules
    load     i64       m                
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &qq_parse.parsemodule
    forup    i64 /1    #878             
    opnd     i64       m                
    opnd     i64       b                
#880: 
    setcall      /0/1                   
    callp        /0    &qq_resolve.fixusertypes
    load     u8        qq_cli.fshowast1 
    jumpf    u8        #882             
    load     u8        qq_cli.fallsp    
    jumpt    u8        #882             
    setcall      /2/1                   
    load     u64       "AST1"           
    setarg   u64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /2    &qq_show.showast 
#882: 
    load     u8        qq_cli.runcode   
    widen    i64/u8                     
    load     i64       3                
    jumpge   i64       #884             
    jump               #875             
#884: 
    setcall      /0/1                   
    callp        /0    &qq_resolve.tx_typetable
    load     i64       a                
    store    i64       m                
    load     i64       m                
    load     i64       b                
    jumpgt   i64       #887             
#885: 
    setcall      /1/1                   
    load     u64       &qq_decls.modules
    load     i64       m                
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &qq_resolve.rx_module
    forup    i64 /1    #885             
    opnd     i64       m                
    opnd     i64       b                
#887: 
    load     u8        qq_cli.fshowast2 
    jumpf    u8        #889             
    load     u8        qq_cli.fallsp    
    jumpt    u8        #889             
    setcall      /2/1                   
    load     u64       "AST2"           
    setarg   u64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /2    &qq_show.showast 
#889: 
    load     u8        qq_cli.runcode   
    widen    i64/u8                     
    load     i64       4                
    jumpge   i64       #891             
    jump               #875             
#891: 
    load     i64       a                
    store    i64       m                
    load     i64       m                
    load     i64       b                
    jumpgt   i64       #894             
#892: 
    setcall      /2/1                   
    load     i64       m                
    setarg   i64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.gencodemodule
    forup    i64 /1    #892             
    opnd     i64       m                
    opnd     i64       b                
#894: 
    load     u8        qq_cli.fshowpcl1 
    jumpf    u8        #896             
    load     u8        qq_cli.fallsp    
    jumpt    u8        #896             
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /2    &qq_showpcl.showpcl
#896: 
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_cli.fixup_sp 
    load     u8        qq_cli.fshowpcl2 
    jumpf    u8        #898             
    load     u8        qq_cli.runcode   
    widen    i64/u8                     
    load     i64       5                
    jumpne   i64       #898             
    load     u8        qq_cli.fallsp    
    jumpt    u8        #898             
    setcall      /2/1                   
    load     i64       2                
    setarg   i64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /2    &qq_showpcl.showpcl
#898: 
    setcall      /0/1                   
    callp        /0    &qq_cli.resetcompiler
#875: 
    retproc                             
endproc

proc qq_cli.setcli:
    param    u64       cmds
    param    i64       ncmds
    local    i64       i
    load     i64       1                
    store    i64       i                
    load     i64       ncmds            
    load     i64       1                
    jumplt   i64       #902             
#900: 
    setcall      /2/1                   
    load     u64       cmds             
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /2                     
    load     i64       i                
    setarg   i64 /1                     
    callp        /2    &qq_cli.setcmdparam
    forup    i64 /1    #900             
    opnd     i64       i                
    opnd     i64       ncmds            
#902: 
    retproc                             
endproc

proc qq_cli.writeqafile:
    local    mem:300       filename
    local    mem:1600       sflist
    local    u64       f
    local    i64       offset
    local    i64       nfiles
    local    i64       fileno
    local    u64       pm
    local    i64       leadmod
    local    i64       i
    load     u8        qq_cli.fwriteqa  
    jumpt    u8        #905             
    jump               #903             
#905: 
    setcall  u64 /2                     
    setcall  u64 /2                     
    load     u64       "qa"             
    setarg   u64 /2                     
    load     u64       qq_cli.inputfile 
    setarg   u64 /1                     
    callf    u64 /2    &mlib.changeext  
    setarg   u64 /2                     
    load     u64       &filename        
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    load     i64       0                
    store    i64       nfiles           
    load     u64       &qq_decls.subprogs
    load     i64       qq_decls.nsubprogs
    iloadx   u64 /8/-8                  
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       leadmod          
    load     u64       &qq_decls.modules
    load     i64       leadmod          
    iloadx   u64 /8                     
    load     u64       &sflist          
    load     u64 /1    &nfiles          
    incrload i64 /1                     
    istorex  u64 /8/-8                  
    load     i64       1                
    store    i64       i                
    load     i64       qq_decls.nmodules
    load     i64       1                
    jumplt   i64       #908             
#906: 
    load     i64       i                
    load     i64       leadmod          
    jumpeq   i64       #910             
    load     u64       &qq_decls.modules
    load     i64       i                
    iloadx   u64 /8                     
    store    u64       pm               
    load     u64       pm               
    load     i64       41               
    iloadx   u8  /1                     
    jumpf    u8        #912             
    load     u8        qq_cli.fwriteqa  
    widen    i64/u8                     
    load     i64       1                
    jumpne   i64       #912             
    jump               #907             
#912: 
    load     u64       pm               
    load     u64       &sflist          
    load     u64 /1    &nfiles          
    incrload i64 /1                     
    istorex  u64 /8/-8                  
#910: 
#907: 
    forup    i64 /1    #906             
    opnd     i64       i                
    opnd     i64       qq_decls.nmodules
#908: 
    load     i64       nfiles           
    load     i64       0                
    jumpne   i64       #914             
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "QA:no files"    
    setarg   u64 /1                     
    callp        /2    &qq_lib.loaderror
#914: 
    setcall  u64 /2/1                   
    load     u64       "wb"             
    setarg   u64 /2                     
    load     u64       &filename        
    setarg   u64 /1                     
    callf    u64 /2    &fopen           
    store    u64       f                
    load     u64       f                
    jumpt    u64       #916             
    setcall      /2/1                   
    load     u64       &filename        
    setarg   u64 /2                     
    load     u64       "Can't create qa file #"
    setarg   u64 /1                     
    callp        /2    &qq_lib.loaderror
#916: 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "Writing "       
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &filename        
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "=== QA # ==="   
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     i64       nfiles           
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     i64       1                
    store    i64       i                
    load     i64       nfiles           
    load     i64       1                
    jumplt   i64       #919             
#917: 
    load     u64       &sflist          
    load     i64       i                
    iloadx   u64 /8/-8                  
    store    u64       pm               
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "=== #.q # # #/# ==="
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       pm               
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       pm               
    load     i64       41               
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       pm               
    load     i64       42               
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     i64       i                
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     i64       nfiles           
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall  i64 /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callf    i64 /1    &mlib.getfilepos 
    store    i64       offset           
    setcall  i64 /4/1                   
    load     u64       pm               
    load     i64       32               
    iloadx   i64 /1                     
    setarg   i64 /4                     
    load     i64       offset           
    setarg   i64 /3                     
    load     u64       pm               
    load     i64       24               
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       f                
    setarg   u64 /1                     
    callf    i64 /4    &mlib.writerandom
    unload   i64                        
    forup    i64 /1    #917             
    opnd     i64       i                
    opnd     i64       nfiles           
#919: 
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "=== END ==="    
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     i64       1                
    store    i64       i                
    load     i64       nfiles           
    load     i64       1                
    jumplt   i64       #922             
#920: 
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "# #.q"          
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     i64       i                
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       &sflist          
    load     i64       i                
    iloadx   u64 /8/-8                  
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    forup    i64 /1    #920             
    opnd     i64       i                
    opnd     i64       nfiles           
#922: 
    setcall  i32 /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callf    i32 /1    &fclose          
    unload   i32                        
    load     i64       0                
    stop                                
#903: 
    retproc                             
endproc

proc qq_cli.initdata:
    setcall      /0/1                   
    callp        /0    &qq_lex.lexinit  
    setcall  u64 /3                     
    load     i64       1                
    setarg   i64 /3                     
    setcall  u64 /1                     
    load     u64       "$prog"          
    setarg   u64 /1                     
    callf    u64 /1    &qq_lex.addnamestr
    setarg   u64 /2                     
    load     u64       0                
    setarg   u64 /1                     
    callf    u64 /3    &qq_names.createdupldef
    store    u64       qq_decls.stprogram
    setcall      /0/1                   
    callp        /0    &mlinux.os_initwindows
    load     i64       41               
    store    i64       qq_tables.firstusertype
    setcall      /0/1                   
    callp        /0    &qq_show.deletetempfiles
    retproc                             
endproc

proc qq_cli.loadsyslib:
    local    mem:300       str
    load     u8        qq_decls.fnosys  
    jumpf    u8        #926             
    jump               #924             
#926: 
    setcall  i64 /0/1                   
    callf    i64 /0    &mlinux.os_iswindows
    jumpf    i64       #928             
    load     u64       "syswin.q"       
    store    u64       qq_cli.syslibname
    jump               #927             
#928: 
    load     u64       "syslin.q"       
    store    u64       qq_cli.syslibname
#927: 
    load     u8        qq_decls.usebundled
    jumpf    u8        #930             
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       qq_cli.syslibname
    setarg   u64 /1                     
    callp        /2    &qq_cli.compile_sp
    jump               #929             
#930: 
    setcall  i64 /0/1                   
    callf    i64 /0    &mlinux.os_iswindows
    jumpf    i64       #932             
    setcall  u64 /2/1                   
    load     u64       "c:/qx/"         
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    jump               #931             
#932: 
    setcall  u64 /2/1                   
    load     u64       "./"             
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
#931: 
    setcall  u64 /2/1                   
    load     u64       qq_cli.syslibname
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /2    &strcat          
    unload   u64                        
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callp        /2    &qq_cli.compile_sp
#929: 
#924: 
    retproc                             
endproc

proc qq_cli.resetcompiler:
    local    u64       userxmodelist
    load     i64       0                
    store    i64       qq_tables.nuserxtypes
    load     i64       0                
    store    i64       qq_tables.userxtypebase
    load     u64       0                
    store    u64       userxmodelist    
    load     u64       &qq_tables.ttxmap
    clear    mem:40000                  
    load     i64       qq_tables.ntypes 
    load     i64       1                
    add      i64                        
    store    i64       qq_tables.firstusertype
    retproc                             
endproc

proc qq_cli.setcmdparam:
    param    i64       index
    param    u64       s
    load     u64       s                
    load     u64       0                
    jumpne   u64       #936             
    load     i64       index            
    store    i64       qq_decls.nqparams
    jump               #935             
#936: 
    load     i64       index            
    load     i64       32               
    jumpgt   i64       #937             
    setcall  u64 /1/1                   
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /1    &mlib.pcm_copyheapstring
    load     u64       &qq_decls.qparamtable
    load     i64       index            
    istorex  u64 /8/-8                  
    load     i64       index            
    load     u64 /1    &qq_decls.nqparams
    maxto    i64                        
#937: 
#935: 
    retproc                             
endproc

proc qq_cli.fixup_sp:
    param    u64       sp
    local    i64       av_1
    local    i64       i
    load     u8        qq_cli.runcode   
    widen    i64/u8                     
    load     i64       5                
    jumpge   i64       #940             
    jump               #938             
#940: 
    load     u64       sp               
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       i                
    load     u64       sp               
    load     i64       26               
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       av_1             
    load     i64       i                
    load     i64       av_1             
    jumpgt   i64       #943             
#941: 
    setcall      /1/1                   
    load     u64       &qq_decls.modules
    load     i64       i                
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &qq_cli.fixupmodule
    load     u8        qq_cli.foptimise 
    jumpf    u8        #945             
    setcall      /1/1                   
    load     u64       &qq_decls.modules
    load     i64       i                
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &qq_cli.optimise_module
#945: 
    setcall      /1/1                   
    load     u64       &qq_decls.modules
    load     i64       i                
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &qq_runx.fixupcode
    forup    i64 /1    #941             
    opnd     i64       i                
    opnd     i64       av_1             
#943: 
#938: 
    retproc                             
endproc

proc qq_cli.fixproc:
    param    u64       d
    local    u64       p
    load     u64       d                
    load     i64       127              
    iloadx   u8  /1                     
    jumpt    u8        #948             
    load     u64       qq_cli.allprocdefs
    load     u64       d                
    load     i64       72               
    istorex  u64 /1                     
    load     u64       d                
    store    u64       qq_cli.allprocdefs
    load     i64       1                
    load     u64       d                
    load     i64       127              
    istorex  u8  /1                     
#948: 
    retproc                             
endproc

proc qq_cli.fixupmodule:
    param    u64       pm
    local    u64       pc
    local    u64       pcstart
    local    i64       cmd
    local    i64       index
    local    u64       d
    local    u64       p
    load     u64       pm               
    load     i64       56               
    iloadx   u64 /1                     
    double                              
    store    u64       pcstart          
    store    u64       pc               
#950: 
    load     u64       pc               
    load     i64       8                
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       cmd              
    load     i64       cmd              
    load     i64       2                
    jumpeq   i64       #954             
    jump               #955             
#954: 
    setcall      /1/1                   
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_cli.fixproc  
    jump               #953             
#955: 
#953: 
    load     u64       &qq_pcltabs.pclopnd
    load     i64       cmd              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64 /1    #957             
    load     i64       1                
    jumpeq   i64 /1    #958             
    load     i64       5                
    jumpeq   i64 /1    #959             
    load     i64       9                
    jumpeq   i64       #960             
    jump               #961             
#957: 
    setcall      /1/1                   
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    double                              
    store    u64       d                
    setarg   u64 /1                     
    callp        /1    &qq_cli.fixproc  
    load     u64       d                
    load     i64       80               
    iloadx   u64 /1                     
    load     u64       pc               
    load     i64       16               
    istorex  u64 /1                     
    jump               #956             
#958: 
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       d                
    load     u64       d                
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       9                
    loadbit  i64                        
    jumpf    u64       #963             
    load     u64       d                
    load     i64       96               
    iloadx   i32 /1                     
    widen    i64/i32                    
    load     i64       16               
    mul      i64                        
    load     u64       pc               
    load     i64       16               
    istorex  i64 /1                     
    load     u64       pc               
    load     i64       8                
    addpx    u64 /1                     
    incrto   u8  /1                     
    jump               #962             
#963: 
    load     u64       d                
    load     i64       80               
    iloadx   u64 /1                     
    load     u64       0                
    jumpne   u64       #965             
    load     u64       qq_cli.allstaticdefs
    load     u64       d                
    load     i64       64               
    istorex  u64 /1                     
    load     u64       d                
    store    u64       qq_cli.allstaticdefs
    setcall  u64 /1/1                   
    load     i64       16               
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_allocz 
    load     u64       d                
    load     i64       80               
    istorex  u64 /1                     
#965: 
    load     u64       d                
    load     i64       80               
    iloadx   u64 /1                     
    load     u64       pc               
    load     i64       16               
    istorex  u64 /1                     
#962: 
    jump               #956             
#959: 
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    load     i64       104              
    iloadx   i64 /1                     
    store    i64       index            
    load     i64       index            
    load     u64       pc               
    load     i64       16               
    istorex  i64 /1                     
    jump               #956             
#960: 
    setcall  u64 /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /2    &qq_strings.obj_make_string
    load     u64       pc               
    load     i64       16               
    istorex  u64 /1                     
    jump               #956             
#961: 
#956: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     i64       cmd              
    load     i64       5                
    jumpne   i64       #950             
    retproc                             
endproc

proc qq_cli.optimise_module:
    param    u64       pm
    local    u64       pc
    load     u64       pm               
    load     i64       56               
    iloadx   u64 /1                     
    store    u64       pc               
#967: 
    load     u64       pc               
    load     i64       8                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       5                
    jumpne   i64       #970             
    jump               #968             
#970: 
    setcall  u64 /1/1                   
    load     u64       pc               
    setarg   u64 /1                     
    callf    u64 /1    &qq_cli.optim    
    store    u64       pc               
    jump               #967             
#968: 
    load     u64       pm               
    load     i64       56               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #974             
#971: 
    load     u64       &qq_decls.pclcounts
    load     u64       pc               
    load     i64       8                
    iloadx   u8  /1                     
    widen    i64/u8                     
    addpx    i64 /8                     
    incrto   i64 /1                     
    load     u64 /1    &pc              
    incrto   u64 /32                    
#974: 
    load     u64       pc               
    load     i64       8                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       5                
    jumpne   i64       #971             
    retproc                             
endproc

proc qq_cli.optim:
    param    u64       pc
    local    i64       skip
    local    i64       index
    local    u64       g
    local    u64       pcdest
    local    u8       cmd
    local    u8       newcmd
    local    u8       abc
    local    u8       aux
    local    i64       i
    rettype  u64
    load     u64       pc               
    load     i64       8                
    iloadx   u8  /1                     
    widen    i64/u8                     
    double                              
    store    u8        newcmd           
    store    u8        cmd              
    load     i64       0                
    store    i64       skip             
    load     u8        cmd              
    widen    i64/u8                     
    load     i64       30               
    jumpeq   i64       #978             
    load     u8        cmd              
    widen    i64/u8                     
    load     i64       34               
    jumplt   i64 /1    #979             
    load     i64       39               
    jumple   i64       #978             
#979: 
    load     u8        cmd              
    widen    i64/u8                     
    load     i64       32               
    jumpeq   i64 /1    #980             
    load     i64       33               
    jumpne   i64       #977             
#980: 
#978: 
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pcdest           
    load     u64       pcdest           
    load     i64       8                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       30               
    jumpne   i64       #982             
#983: 
    load     u64       pcdest           
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pcdest           
    load     u64       pcdest           
    load     i64       8                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       30               
    jumpeq   i64       #983             
    load     u64       pcdest           
    load     u64       pc               
    load     i64       16               
    istorex  u64 /1                     
#982: 
#977: 
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       11               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    loadbit  i64                        
    jumpf    u64       #987             
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    jumpret  u64       #975             
#987: 
    load     i64       1                
    store    u8        abc              
    load     u64       pc               
    load     i64       2                
    addpx    u64 /32                    
    load     i64       11               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    loadbit  i64                        
    jumpf    u64       #989             
    load     i64       0                
    store    u8        abc              
#989: 
    load     u8        cmd              
    widen    i64/u8                     
    load     i64       8                
    jumpeq   i64 /1    #991             
    load     i64       7                
    jumpeq   i64 /1    #992             
    load     i64       14               
    jumpeq   i64 /1    #993             
    load     i64       15               
    jumpeq   i64 /1    #994             
    load     i64       10               
    jumpeq   i64 /1    #995             
    load     i64       9                
    jumpeq   i64 /1    #996             
    load     i64       13               
    jumpeq   i64       #997             
    jump               #998             
#991: 
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       8                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       8                
    jumpeq   i64 /1    #1000            
    load     i64       7                
    jumpeq   i64 /1    #1001            
    load     i64       14               
    jumpeq   i64 /1    #1002            
    load     i64       12               
    jumpeq   i64 /1    #1003            
    load     i64       13               
    jumpeq   i64 /1    #1004            
    load     i64       25               
    jumpeq   i64 /1    #1005            
    load     i64       43               
    jumpeq   i64 /1    #1006            
    load     i64       87               
    jumpeq   i64 /1    #1007            
    load     i64       89               
    jumpeq   i64 /1    #1008            
    load     i64       22               
    jumpeq   i64       #1009            
    jump               #1010            
#1000: 
    load     u8        abc              
    jumpt    u8        #1012            
    jump               #1013            
#1012: 
    load     u64       pc               
    load     i64       2                
    addpx    u64 /32                    
    load     i64       8                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       8                
    jumpeq   i64 /1    #1015            
    load     i64       101              
    jumpeq   i64 /1    #1016            
    load     i64       102              
    jumpeq   i64 /1    #1017            
    load     i64       34               
    jumpeq   i64 /1    #1018            
    load     i64       35               
    jumpeq   i64 /1    #1019            
    load     i64       36               
    jumpeq   i64 /1    #1020            
    load     i64       37               
    jumpeq   i64 /1    #1021            
    load     i64       38               
    jumpeq   i64 /1    #1022            
    load     i64       39               
    jumpeq   i64 /1    #1023            
    load     i64       130              
    jumpeq   i64       #1024            
    jump               #1025            
#1015: 
    load     i64       143              
    store    u8        newcmd           
    load     i64       2                
    store    i64       skip             
    jump               #1014            
#1016: 
    load     i64       174              
    store    u8        newcmd           
    load     i64       2                
    store    i64       skip             
    jump               #1014            
#1017: 
    load     i64       2                
    store    i64       skip             
    jump               #1014            
#1018: 
    load     i64       166              
    store    u8        newcmd           
    load     i64       2                
    store    i64       skip             
    jump               #1014            
#1019: 
    load     i64       167              
    store    u8        newcmd           
    load     i64       2                
    store    i64       skip             
    jump               #1014            
#1020: 
    load     i64       168              
    store    u8        newcmd           
    load     i64       2                
    store    i64       skip             
    jump               #1014            
#1021: 
    load     i64       169              
    store    u8        newcmd           
    load     i64       2                
    store    i64       skip             
    jump               #1014            
#1022: 
    load     i64       170              
    store    u8        newcmd           
    load     i64       2                
    store    i64       skip             
    jump               #1014            
#1023: 
    load     i64       171              
    store    u8        newcmd           
    load     i64       2                
    store    i64       skip             
    jump               #1014            
#1024: 
    load     i64       188              
    store    u8        newcmd           
    load     i64       2                
    store    i64       skip             
    jump               #1014            
#1025: 
! qq_cli.optim.dopushff:
#1013: 
    load     i64       144              
    store    u8        newcmd           
    load     i64       1                
    store    i64       skip             
#1014: 
    jump               #999             
#1001: 
    jump               #999             
#1002: 
    load     u8        abc              
    jumpt    u8        #1027            
    jump               #1028            
#1027: 
    load     u64       pc               
    load     i64       2                
    addpx    u64 /32                    
    load     i64       8                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       101              
    jumpeq   i64 /1    #1030            
    load     i64       102              
    jumpeq   i64 /1    #1031            
    load     i64       36               
    jumpeq   i64 /1    #1032            
    load     i64       37               
    jumpeq   i64 /1    #1033            
    load     i64       38               
    jumpeq   i64 /1    #1034            
    load     i64       39               
    jumpeq   i64 /1    #1035            
    load     i64       34               
    jumpeq   i64 /1    #1036            
    load     i64       35               
    jumpeq   i64       #1037            
    jump               #1038            
#1030: 
    load     i64       172              
    store    u8        newcmd           
    load     i64       2                
    store    i64       skip             
    jump               #1029            
#1031: 
    load     i64       173              
    store    u8        newcmd           
    load     i64       2                
    store    i64       skip             
    jump               #1029            
#1032: 
    load     i64       162              
    store    u8        newcmd           
    load     i64       2                
    store    i64       skip             
    jump               #1029            
#1033: 
    load     i64       163              
    store    u8        newcmd           
    load     i64       2                
    store    i64       skip             
    jump               #1029            
#1034: 
    load     i64       164              
    store    u8        newcmd           
    load     i64       2                
    store    i64       skip             
    jump               #1029            
#1035: 
    load     i64       165              
    store    u8        newcmd           
    load     i64       2                
    store    i64       skip             
    jump               #1029            
#1036: 
    load     i64       160              
    store    u8        newcmd           
    load     i64       2                
    store    i64       skip             
    jump               #1029            
#1037: 
    load     i64       161              
    store    u8        newcmd           
    load     i64       2                
    store    i64       skip             
    jump               #1029            
#1038: 
! qq_cli.optim.dopushfci:
#1028: 
    load     i64       149              
    store    u8        newcmd           
    load     i64       1                
    store    i64       skip             
#1029: 
    jump               #999             
#1003: 
    load     i64       1                
    store    i64       skip             
    jump               #999             
#1004: 
    load     i64       150              
    store    u8        newcmd           
    load     i64       1                
    store    i64       skip             
    jump               #999             
#1005: 
    load     i64       1                
    store    i64       skip             
    jump               #999             
#1006: 
    load     i64       1                
    store    i64       skip             
    jump               #999             
#1007: 
    load     i64       1                
    store    i64       skip             
    jump               #999             
#1008: 
    load     i64       1                
    store    i64       skip             
    jump               #999             
#1009: 
    load     i64       190              
    store    u8        newcmd           
    load     i64       1                
    store    i64       skip             
    jump               #999             
#1010: 
#999: 
    jump               #990             
#992: 
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       8                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       8                
    jumpeq   i64 /1    #1040            
    load     i64       12               
    jumpeq   i64 /1    #1041            
    load     i64       13               
    jumpeq   i64 /1    #1042            
    load     i64       14               
    jumpeq   i64       #1043            
    jump               #1044            
#1040: 
    load     u8        abc              
    jumpf    u8        #1046            
    load     u64       pc               
    load     i64       2                
    addpx    u64 /32                    
    load     i64       8                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       130              
    jumpne   i64       #1046            
    load     i64       187              
    store    u8        newcmd           
    load     i64       2                
    store    i64       skip             
    jump               #1045            
#1046: 
    load     i64       1                
    store    i64       skip             
#1045: 
    jump               #1039            
#1041: 
    load     i64       1                
    store    i64       skip             
    jump               #1039            
#1042: 
    load     i64       1                
    store    i64       skip             
    jump               #1039            
#1043: 
    load     i64       148              
    store    u8        newcmd           
    load     i64       1                
    store    i64       skip             
    jump               #1039            
#1044: 
#1039: 
    jump               #990             
#993: 
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       8                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       12               
    jumpeq   i64 /1    #1048            
    load     i64       13               
    jumpeq   i64 /1    #1049            
    load     i64       25               
    jumpeq   i64 /1    #1050            
    load     i64       101              
    jumpeq   i64 /1    #1051            
    load     i64       102              
    jumpeq   i64 /1    #1052            
    load     i64       108              
    jumpeq   i64 /1    #1053            
    load     i64       111              
    jumpeq   i64 /1    #1054            
    load     i64       112              
    jumpeq   i64 /1    #1055            
    load     i64       40               
    jumpeq   i64 /1    #1056            
    load     i64       41               
    jumpeq   i64 /1    #1057            
    load     i64       10               
    jumpeq   i64       #1058            
    jump               #1059            
#1048: 
    load     i64       1                
    store    i64       skip             
    jump               #1047            
#1049: 
    load     i64       155              
    store    u8        newcmd           
    load     i64       1                
    store    i64       skip             
    jump               #1047            
#1050: 
    load     i64       1                
    store    i64       skip             
    jump               #1047            
#1051: 
    load     i64       176              
    store    u8        newcmd           
    load     i64       1                
    store    i64       skip             
    jump               #1047            
#1052: 
    load     i64       177              
    store    u8        newcmd           
    load     i64       1                
    store    i64       skip             
    jump               #1047            
#1053: 
    load     i64       178              
    store    u8        newcmd           
    load     i64       1                
    store    i64       skip             
    jump               #1047            
#1054: 
    load     i64       179              
    store    u8        newcmd           
    load     i64       1                
    store    i64       skip             
    jump               #1047            
#1055: 
    load     i64       180              
    store    u8        newcmd           
    load     i64       1                
    store    i64       skip             
    jump               #1047            
#1056: 
    load     i64       199              
    store    u8        newcmd           
    load     i64       1                
    store    i64       skip             
    jump               #1047            
#1057: 
    load     i64       200              
    store    u8        newcmd           
    load     i64       1                
    store    i64       skip             
    jump               #1047            
#1058: 
    load     u8        abc              
    jumpf    u8        #1061            
    load     u64       pc               
    load     i64       2                
    addpx    u64 /32                    
    load     i64       8                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       122              
    jumpne   i64       #1061            
    load     u64       &qq_pcltabs.bintotable
    load     u64       pc               
    load     i64       2                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   u8  /1                     
    widen    i64/u8                     
    addpx    mem:24 /24/-24             
    load     i64       0                
    iloadx   i64 /1                     
    load     i64       101              
    jumpeq   i64 /1    #1063            
    load     i64       102              
    jumpeq   i64 /1    #1064            
    load     i64       111              
    jumpeq   i64 /1    #1065            
    load     i64       112              
    jumpeq   i64       #1066            
    jump               #1067            
#1063: 
    load     i64       183              
    store    u8        newcmd           
    load     i64       2                
    store    i64       skip             
    jump               #1062            
#1064: 
    load     i64       184              
    store    u8        newcmd           
    load     i64       2                
    store    i64       skip             
    jump               #1062            
#1065: 
    load     i64       185              
    store    u8        newcmd           
    load     i64       2                
    store    i64       skip             
    jump               #1062            
#1066: 
    load     i64       186              
    store    u8        newcmd           
    load     i64       2                
    store    i64       skip             
    jump               #1062            
#1067: 
#1062: 
#1061: 
    jump               #1047            
#1059: 
#1047: 
    jump               #990             
#994: 
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       8                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       15               
    jumpeq   i64       #1069            
    jump               #1070            
#1069: 
    load     u8        abc              
    jumpf    u8        #1072            
    load     u64       pc               
    load     i64       2                
    addpx    u64 /32                    
    load     i64       8                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       15               
    jumpne   i64       #1072            
    load     i64       2                
    store    i64       skip             
    jump               #1071            
#1072: 
    load     i64       1                
    store    i64       skip             
#1071: 
    jump               #1068            
#1070: 
#1068: 
    jump               #990             
#995: 
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       8                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       73               
    jumpeq   i64 /1    #1074            
    load     i64       122              
    jumpeq   i64       #1075            
    jump               #1076            
#1074: 
    load     u8        abc              
    jumpf    u8        #1078            
    load     u64       pc               
    load     i64       2                
    addpx    u64 /32                    
    load     i64       8                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       22               
    jumpeq   i64 /1    #1080            
    load     i64       23               
    jumpeq   i64       #1081            
    jump               #1082            
#1080: 
    load     i64       192              
    store    u8        newcmd           
    load     i64       2                
    store    i64       skip             
    jump               #1079            
#1081: 
    load     i64       194              
    store    u8        newcmd           
    load     i64       2                
    store    i64       skip             
    jump               #1079            
#1082: 
#1079: 
#1078: 
    jump               #1073            
#1075: 
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpne   i64       #1084            
    load     i64       182              
    store    u8        newcmd           
    jump               #1083            
#1084: 
    load     i64       181              
    store    u8        newcmd           
#1083: 
    load     i64       1                
    store    i64       skip             
    jump               #1073            
#1076: 
#1073: 
    jump               #990             
#996: 
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       8                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       73               
    jumpeq   i64       #1086            
    jump               #1087            
#1086: 
    load     u8        abc              
    jumpf    u8        #1089            
    load     u64       pc               
    load     i64       2                
    addpx    u64 /32                    
    load     i64       8                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       22               
    jumpeq   i64 /1    #1091            
    load     i64       23               
    jumpeq   i64       #1092            
    jump               #1093            
#1091: 
    load     i64       191              
    store    u8        newcmd           
    load     i64       2                
    store    i64       skip             
    jump               #1090            
#1092: 
    load     i64       193              
    store    u8        newcmd           
    load     i64       2                
    store    i64       skip             
    jump               #1090            
#1093: 
#1090: 
#1089: 
    jump               #1085            
#1087: 
#1085: 
    jump               #990             
#997: 
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       8                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       8                
    jumpeq   i64       #1095            
    jump               #1096            
#1095: 
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   u64 /1                     
    jumpne   u64       #1098            
    load     i64       198              
    store    u8        newcmd           
    load     i64       2                
    store    i64       skip             
#1098: 
    jump               #1094            
#1096: 
#1094: 
    jump               #990             
#998: 
#990: 
! qq_cli.optim.finish:
    load     u8        newcmd           
    load     u64       pc               
    load     i64       8                
    istorex  u8  /1                     
    load     i64       skip             
    jumpf    i64       #1101            
    load     u8        newcmd           
    widen    i64/u8                     
    load     u8        cmd              
    widen    i64/u8                     
    setne    i64                        
    store    u8        aux              
    load     i64       1                
    store    i64       i                
    load     i64       skip             
    load     i64       1                
    jumplt   i64       #1104            
#1102: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u8        aux              
    widen    u64/u8                     
    load     u64       pc               
    load     i64       11               
    addpx    u64 /1                     
    load     i64       1                
    storebit u8                         
    forup    i64 /1    #1102            
    opnd     i64       i                
    opnd     i64       skip             
#1104: 
#1101: 
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    jumpret  u64       #975             
#975: 
    retfn    u64                        
endproc

proc qq_arrays.var_empty_array:
    param    i64       tag
    param    i64       elemtype
    param    i64       lower
    param    u64       dest
    setcall  u64 /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     i64       lower            
    setarg   i64 /2                     
    load     i64       elemtype         
    setarg   i64 /1                     
    callf    u64 /3    &qq_arrays.obj_newarray
    load     u64       dest             
    load     i64       8                
    istorex  u64 /1                     
    load     i64       tag              
    load     i64       256              
    bitor    i64                        
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    retproc                             
endproc

proc qq_arrays.obj_free_array:
    param    u64       p
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    jumpf    i64       #1108            
    setcall      /2/1                   
    load     u64       p                
    load     i64       24               
    iloadx   i64 /1                     
    load     u64       &qq_tables.ttsize
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i64 /8                     
    mul      i64                        
    setarg   i64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_free   
#1108: 
    setcall      /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callp        /1    &mlib.pcm_free32 
    retproc                             
endproc

proc qq_arrays.obj_free_vector:
    param    u64       p
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    jumpf    i64       #1111            
    setcall      /2/1                   
    load     u64       &qq_tables.ttsize
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i64 /8                     
    setarg   i64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_free   
#1111: 
    setcall      /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callp        /1    &mlib.pcm_free32 
    retproc                             
endproc

proc qq_arrays.var_make_array:
    param    u64       a
    param    u64       dest
    param    i64       lower
    param    i64       n
    param    i64       axtype
    param    i64       elemtype
    local    u64       p
    local    u64       q
    local    i64       m
    local    i64       av_1
    load     i64       axtype           
    load     i64       11               
    jumpeq   i64       #1114            
    load     u64       &qq_tables.ttlength
    load     i64       axtype           
    iloadx   i64 /8                     
    store    i64       m                
    load     i64       n                
    load     i64       m                
    jumpeq   i64       #1116            
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "N="             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     i64       n                
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       "M="             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     i64       m                
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Too few/too many elements"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1116: 
    jump               #1113            
#1114: 
    load     i64       n                
    jumpf    i64       #1117            
    load     i64       elemtype         
    load     i64       0                
    jumpne   i64       #1119            
    load     u64       a                
    load     i64       n                
    addpx    u64 /16                    
    load     i64       1                
    subpx    u64 /16                    
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #1121            
    load     i64       2                
    jumpeq   i64       #1122            
    jump               #1123            
#1121: 
    load     i64       26               
    store    i64       elemtype         
    jump               #1120            
#1122: 
    load     i64       32               
    store    i64       elemtype         
    jump               #1120            
#1123: 
    load     i64       26               
    store    i64       elemtype         
#1120: 
#1119: 
    jump               #1113            
#1117: 
    load     i64       elemtype         
    load     i64       0                
    jumpne   i64       #1124            
    load     i64       26               
    store    i64       elemtype         
#1124: 
#1113: 
    setcall  u64 /3/1                   
    load     i64       n                
    setarg   i64 /3                     
    load     i64       lower            
    setarg   i64 /2                     
    load     i64       elemtype         
    setarg   i64 /1                     
    callf    u64 /3    &qq_arrays.obj_newarray
    store    u64       p                
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     i64       n                
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #1127            
#1125: 
    setcall      /3/1                   
    load     i64       elemtype         
    setarg   i64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       q                
    setarg   u64 /1                     
    callp        /3    &qq_packed.var_storepacked
    load     u64       &qq_tables.ttsize
    load     i64       elemtype         
    iloadx   i64 /8                     
    load     u64 /1    &q               
    addpxto  u64 /1                     
    load     u64 /1    &a               
    incrto   u64 /16                    
    to       i64       #1125            
    opnd     i64       av_1             
#1127: 
    load     i64       axtype           
    load     i64       11               
    jumpne   i64       #1129            
    load     i64       267              
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    jump               #1128            
#1129: 
    load     i64       263              
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     i64       axtype           
    load     u64       p                
    load     i64       6                
    istorex  u16 /1                     
#1128: 
    load     u64       p                
    load     u64       dest             
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_arrays.obj_newarray:
    param    i64       elemtype
    param    i64       lower
    param    i64       length
    local    u64       p
    local    u64       q
    local    i64       elemsize
    rettype  u64
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_vars.obj_new 
    store    u64       p                
    load     u64       1                
    load     u64       p                
    load     i64       4                
    addpx    u64 /1                     
    load     i64       1                
    storebit u8                         
    load     i64       lower            
    load     i64       0                
    jumplt   i64 /1    #1132            
    load     i64       1                
    jumpgt   i64       #1132            
    load     i64       lower            
    load     u64       p                
    load     i64       4                
    addpx    u64 /1                     
    load     i64       0                
    storebit u8                         
    jump               #1131            
#1132: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Lwb not 0/1"    
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1131: 
    load     i64       length           
    load     u64       p                
    load     i64       16               
    istorex  i64 /1                     
    load     i64       0                
    load     u64       p                
    load     i64       5                
    istorex  u8  /1                     
    load     i64       elemtype         
    load     u64       p                
    load     i64       6                
    istorex  u16 /1                     
    load     u64       &qq_tables.ttsize
    load     i64       elemtype         
    iloadx   i64 /8                     
    store    i64       elemsize         
    load     i64       length           
    jumpf    i64       #1134            
    setcall  u64 /1/1                   
    load     i64       length           
    load     i64       elemsize         
    mul      i64                        
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_allocz 
    load     u64       p                
    load     i64       8                
    istorex  u64 /1                     
    load     i64       mlib.allocbytes  
    load     i64       elemsize         
    idiv     i64                        
    load     u64       p                
    load     i64       24               
    istorex  i64 /1                     
#1134: 
    load     u64       p                
    jumpret  u64       #1130            
#1130: 
    retfn    u64                        
endproc

proc qq_arrays.obj_newarray_u:
    param    i64       usertag
    local    u64       p
    local    u64       q
    local    i64       elemsize
    rettype  u64
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_vars.obj_new 
    store    u64       p                
    load     u64       1                
    load     u64       p                
    load     i64       4                
    addpx    u64 /1                     
    load     i64       1                
    storebit u8                         
    load     i64       0                
    load     u64       p                
    load     i64       5                
    istorex  u8  /1                     
    load     i64       usertag          
    load     u64       p                
    load     i64       6                
    istorex  u16 /1                     
    load     u64       &qq_tables.ttsize
    load     u64       &qq_tables.tttarget
    load     i64       usertag          
    iloadx   i16 /2                     
    widen    i64/i16                    
    iloadx   i64 /8                     
    store    i64       elemsize         
    load     u64       &qq_tables.ttlength
    load     i64       usertag          
    iloadx   i64 /8                     
    jumpf    i64       #1137            
    setcall  u64 /1/1                   
    load     u64       &qq_tables.ttsize
    load     i64       usertag          
    iloadx   i64 /8                     
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_allocz 
    load     u64       p                
    load     i64       8                
    istorex  u64 /1                     
    load     i64       mlib.allocbytes  
    load     i64       elemsize         
    idiv     i64                        
    load     u64       p                
    load     i64       24               
    istorex  i64 /1                     
#1137: 
    load     u64       p                
    jumpret  u64       #1135            
#1135: 
    retfn    u64                        
endproc

proc qq_arrays.var_getix_array:
    param    u64       a
    param    i64       index
    local    mem:16       v
    local    u64       p
    local    i64       elemtype
    local    i64       length
    load     u64       a                
    iload    mem:16                     
    store    mem:16       v             
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       &v               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       7                
    jumpne   i64       #1140            
    load     u64       &qq_tables.ttlength
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i64 /8                     
    store    i64       length           
    load     u64       &qq_tables.ttlower
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i64 /8                     
    load     u64 /1    &index           
    subto    i64                        
    load     u64       &qq_tables.tttarget
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i16 /2                     
    widen    i64/i16                    
    store    i64       elemtype         
    jump               #1139            
#1140: 
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       length           
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    store    i64       elemtype         
    load     u64       p                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    loadbit  i64                        
    load     u64 /1    &index           
    subto    i64                        
#1139: 
    load     i64       index            
    load     i64       length           
    jumplt   u64       #1142            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "ax[int] bounds" 
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1142: 
    load     i64       elemtype         
    load     i64       27               
    jumpne   i64       #1144            
    load     i64       1                
    load     u64       a                
    load     i64       0                
    istorex  u32 /1                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       index            
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       a                
    load     i64       8                
    istorex  i64 /1                     
    jump               #1143            
#1144: 
    setcall      /4/1                   
    load     u64       0                
    setarg   u64 /4                     
    load     u64       a                
    setarg   u64 /3                     
    load     i64       elemtype         
    setarg   i64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       index            
    load     u64       &qq_tables.ttsize
    load     i64       elemtype         
    iloadx   i64 /8                     
    mul      i64                        
    addpx    u64 /1                     
    setarg   u64 /1                     
    callp        /4    &qq_packed.var_loadpacked
#1143: 
    retproc                             
endproc

proc qq_arrays.var_putix_array:
    param    u64       a
    param    i64       index
    param    u64       x
    local    mem:16       v
    local    u64       p
    local    i64       elemtype
    local    i64       length
    local    i64       lower
    load     u64       a                
    iload    mem:16                     
    store    mem:16       v             
    load     u64       &v               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       &v               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       7                
    jumpne   i64       #1147            
    load     u64       &qq_tables.ttlength
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i64 /8                     
    store    i64       length           
    load     u64       &qq_tables.ttlower
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i64 /8                     
    store    i64       lower            
    load     u64       &qq_tables.tttarget
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i16 /2                     
    widen    i64/i16                    
    store    i64       elemtype         
    jump               #1146            
#1147: 
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       length           
    load     u64       p                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    loadbit  i64                        
    store    i64       lower            
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    store    i64       elemtype         
#1146: 
    load     i64       lower            
    load     u64 /1    &index           
    subto    i64                        
    load     i64       index            
    load     i64       length           
    jumplt   u64       #1149            
    load     i64       index            
    load     i64       0                
    jumpge   i64       #1151            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "lwb"            
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
    jump               #1150            
#1151: 
    load     i64       index            
    load     i64       length           
    jumpne   i64       #1152            
    load     u64       &v               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       7                
    jumpne   i64       #1154            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Can't append user type"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1154: 
    setcall      /2/1                   
    load     u64       x                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /2    &qq_arrays.obj_append_array
    jump               #1150            
#1152: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "ax[i]:=x bounds"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1150: 
#1149: 
    load     i64       elemtype         
    load     i64       27               
    jumpne   i64       #1156            
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64       #1158            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "rhs not int"    
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1158: 
    load     i64       1                
    load     u64       a                
    load     i64       0                
    istorex  u32 /1                     
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       index            
    istorex  u8  /1                     
    jump               #1155            
#1156: 
    setcall      /3/1                   
    load     i64       elemtype         
    setarg   i64 /3                     
    load     u64       x                
    setarg   u64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       index            
    load     u64       &qq_tables.ttsize
    load     i64       elemtype         
    iloadx   i64 /8                     
    mul      i64                        
    addpx    u64 /1                     
    setarg   u64 /1                     
    callp        /3    &qq_packed.var_storepacked
#1155: 
    retproc                             
endproc

proc qq_arrays.var_getixref_array:
    param    u64       a
    param    i64       index
    local    mem:16       v
    local    u64       p
    local    i64       elemtype
    local    i64       length
    local    i64       lower
    load     u64       a                
    iload    mem:16                     
    store    mem:16       v             
    load     u64       &v               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       &v               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       7                
    jumpne   i64       #1161            
    load     u64       &qq_tables.ttlength
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i64 /8                     
    store    i64       length           
    load     u64       &qq_tables.ttlower
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i64 /8                     
    store    i64       lower            
    load     u64       &qq_tables.tttarget
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i16 /2                     
    widen    i64/i16                    
    store    i64       elemtype         
    jump               #1160            
#1161: 
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       length           
    load     u64       p                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    loadbit  i64                        
    store    i64       lower            
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    store    i64       elemtype         
#1160: 
    load     i64       lower            
    load     u64 /1    &index           
    subto    i64                        
    load     i64       index            
    load     i64       length           
    jumplt   u64       #1163            
    load     i64       index            
    load     i64       0                
    jumpge   i64       #1165            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "lwb"            
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
    jump               #1164            
#1165: 
    load     i64       index            
    load     i64       length           
    jumpne   u64       #1167            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "PUTIXREF NEEDS IAPPEND"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    jump               #1166            
#1167: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "ax[i]:=x bounds"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1166: 
#1164: 
#1163: 
    load     i64       16               
    load     u64       a                
    load     i64       0                
    istorex  u32 /1                     
    load     i64       elemtype         
    load     u64       a                
    load     i64       4                
    istorex  u32 /1                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       index            
    load     u64       &qq_tables.ttsize
    load     i64       elemtype         
    iloadx   i64 /8                     
    mul      i64                        
    addpx    u64 /1                     
    load     u64       a                
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_arrays.obj_append_array:
    param    u64       a
    param    u64       x
    local    i64       n
    local    u64       q
    load     u64       a                
    load     i64       5                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpeq   i64       #1170            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Can't extend slice"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1170: 
    load     u64       a                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    loadbit  i64                        
    jumpt    u64       #1172            
    setcall      /0/1                   
    callp        /0    &qq_lib.pcnotmut 
#1172: 
    load     u64       a                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       1                
    add      i64                        
    store    i64       n                
    load     i64       n                
    load     u64       a                
    load     i64       24               
    iloadx   i64 /1                     
    jumple   i64       #1174            
    setcall      /2/1                   
    load     i64       n                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_arrays.obj_resize_array
    jump               #1173            
#1174: 
    load     i64       n                
    load     u64       a                
    load     i64       16               
    istorex  i64 /1                     
#1173: 
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       n                
    load     i64       1                
    sub      i64                        
    load     u64       &qq_tables.ttsize
    load     u64       a                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i64 /8                     
    mul      i64                        
    addpx    u64 /1                     
    store    u64       q                
    setcall      /3/1                   
    load     u64       a                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    setarg   i64 /3                     
    load     u64       x                
    setarg   u64 /2                     
    load     u64       q                
    setarg   u64 /1                     
    callp        /3    &qq_packed.var_storepacked
    retproc                             
endproc

proc qq_arrays.var_appendto_array:
    param    u64       a
    param    u64       x
    setcall      /2/1                   
    load     u64       x                
    setarg   u64 /2                     
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &qq_arrays.obj_append_array
    retproc                             
endproc

proc qq_arrays.obj_resize_array:
    param    u64       p
    param    i64       n
    local    u64       q
    local    i64       elemsize
    load     u64       &qq_tables.ttsize
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i64 /8                     
    store    i64       elemsize         
    load     i64       n                
    load     u64       p                
    load     i64       24               
    iloadx   i64 /1                     
    jumpgt   i64       #1178            
    load     i64       n                
    load     u64       p                
    load     i64       16               
    istorex  i64 /1                     
    jump               #1177            
#1178: 
    setcall  u64 /1/1                   
    load     i64       n                
    load     i64       elemsize         
    mul      i64                        
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    store    u64       q                
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    jumpf    i64       #1180            
    setcall      /3/1                   
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       elemsize         
    mul      u64                        
    setarg   u64 /3                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       q                
    setarg   u64 /1                     
    callp        /3    &memcpy          
    setcall      /2/1                   
    load     u64       p                
    load     i64       24               
    iloadx   i64 /1                     
    load     i64       elemsize         
    mul      i64                        
    setarg   i64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_free   
#1180: 
    load     u64       q                
    load     u64       p                
    load     i64       8                
    istorex  u64 /1                     
    load     i64       n                
    load     u64       p                
    load     i64       16               
    istorex  i64 /1                     
    load     i64       mlib.allocbytes  
    load     i64       elemsize         
    idiv     i64                        
    load     u64       p                
    load     i64       24               
    istorex  i64 /1                     
#1177: 
    retproc                             
endproc

proc qq_arrays.var_dupl_array:
    param    u64       a
    local    u64       p
    local    u64       q
    local    i64       elemsize
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    setcall  u64 /3/1                   
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /3                     
    load     u64       p                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    loadbit  i64                        
    setarg   i64 /2                     
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    setarg   i64 /1                     
    callf    u64 /3    &qq_arrays.obj_newarray
    store    u64       q                
    load     u64       q                
    load     u64       a                
    load     i64       8                
    istorex  u64 /1                     
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    jumpf    i64       #1183            
    setcall      /3/1                   
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    load     u64       &qq_tables.ttsize
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i64 /8                     
    mul      u64                        
    setarg   u64 /3                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &memcpy          
#1183: 
    retproc                             
endproc

proc qq_arrays.var_dupl_vector:
    param    u64       a
    local    u64       p
    local    u64       q
    local    i64       elemsize
    local    i64       length
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       &qq_tables.ttlength
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i64 /8                     
    store    i64       length           
    setcall  u64 /1/1                   
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    setarg   i64 /1                     
    callf    u64 /1    &qq_arrays.obj_newarray_u
    store    u64       q                
    load     u64       q                
    load     u64       a                
    load     i64       8                
    istorex  u64 /1                     
    load     i64       length           
    jumpf    i64       #1186            
    setcall      /3/1                   
    load     u64       &qq_tables.ttsize
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   u64 /8                     
    setarg   u64 /3                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &memcpy          
#1186: 
    retproc                             
endproc

proc qq_arrays.var_equal_array:
    param    u64       a
    param    u64       b
    local    u64       p
    local    u64       q
    local    i64       length
    local    i64       elemsize
    rettype  i64
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    store    i64       elemsize         
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     u64       q                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    jumpeq   i64       #1189            
    load     i64       0                
    jumpret  i64       #1187            
#1189: 
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       length           
    load     i64       length           
    load     u64       q                
    load     i64       16               
    iloadx   i64 /1                     
    jumpeq   i64       #1191            
    load     i64       0                
    jumpret  i64       #1187            
#1191: 
    load     i64       length           
    load     i64       0                
    jumpne   i64       #1193            
    load     i64       1                
    jumpret  i64       #1187            
#1193: 
    setcall  i64 /3/1                   
    load     u64       &qq_tables.ttsize
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i64 /8                     
    load     i64       length           
    mul      i64                        
    setarg   i64 /3                     
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /3    &mlib.eqbytes    
    jumpret  i64       #1187            
#1187: 
    retfn    i64                        
endproc

proc qq_arrays.var_concatto_array:
    param    u64       a
    param    u64       b
    local    u64       d
    local    i64       n
    local    i64       alen
    local    i64       blen
    local    i64       newlen
    local    i64       oldbytes
    local    i64       newbytes
    local    i64       elemsize
    local    u64       v
    local    u64       pa
    local    u64       pb
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pa               
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pb               
    load     u64       pa               
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    loadbit  i64                        
    jumpt    u64       #1196            
    setcall      /0/1                   
    callp        /0    &qq_lib.pcnotmut 
#1196: 
    load     u64       pa               
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     u64       pb               
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    jumpeq   i64       #1198            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "concat/not compat"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1198: 
    load     u64       &qq_tables.ttsize
    load     u64       pa               
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i64 /8                     
    store    i64       elemsize         
    load     u64       pa               
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       alen             
    load     u64       pb               
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       blen             
    load     i64       alen             
    load     i64       0                
    jumpne   i64       #1200            
    load     i64       blen             
    jumpf    i64       #1202            
    setcall      /2/1                   
    load     i64       blen             
    setarg   i64 /2                     
    load     u64       pa               
    setarg   u64 /1                     
    callp        /2    &qq_arrays.obj_resize_array
    load     u64       pa               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       d                
    setcall      /3/1                   
    load     i64       blen             
    load     i64       elemsize         
    mul      u64                        
    setarg   u64 /3                     
    load     u64       pb               
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       d                
    setarg   u64 /1                     
    callp        /3    &memcpy          
#1202: 
    jump               #1199            
#1200: 
    load     i64       blen             
    jumpf    i64       #1203            
    load     i64       alen             
    load     i64       blen             
    add      i64                        
    store    i64       newlen           
    setcall      /2/1                   
    load     i64       newlen           
    setarg   i64 /2                     
    load     u64       pa               
    setarg   u64 /1                     
    callp        /2    &qq_arrays.obj_resize_array
    load     u64       pa               
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       alen             
    load     i64       elemsize         
    mul      i64                        
    addpx    u64 /1                     
    store    u64       d                
    setcall      /3/1                   
    load     i64       blen             
    load     i64       elemsize         
    mul      u64                        
    setarg   u64 /3                     
    load     u64       pb               
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       d                
    setarg   u64 /1                     
    callp        /3    &memcpy          
#1203: 
#1199: 
    retproc                             
endproc

proc qq_arrays.var_getslice_array:
    param    u64       a
    param    i64       i
    param    i64       j
    local    i64       alower
    local    i64       elemsize
    local    u64       p
    local    u64       q
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       p                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    loadbit  i64                        
    store    i64       alower           
    load     u64       &qq_tables.ttsize
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i64 /8                     
    store    i64       elemsize         
    load     i64       i                
    load     i64       alower           
    jumplt   i64       #1207            
    load     i64       j                
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       alower           
    add      i64                        
    load     i64       1                
    sub      i64                        
    jumpgt   i64       #1207            
    load     i64       i                
    load     i64       j                
    jumple   i64       #1206            
#1207: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "array/slice bounds"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1206: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_vars.obj_new 
    store    u64       q                
    load     i64       1                
    load     u64       q                
    load     i64       5                
    istorex  u8  /1                     
    load     u64       p                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    loadbit  i64                        
    load     u64       q                
    load     i64       4                
    addpx    u64 /1                     
    load     i64       1                
    storebit u8                         
    load     u64       1                
    load     u64       q                
    load     i64       4                
    addpx    u64 /1                     
    load     i64       0                
    storebit u8                         
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       i                
    load     i64       alower           
    sub      i64                        
    load     i64       elemsize         
    mul      i64                        
    addpx    u64 /1                     
    load     u64       q                
    load     i64       8                
    istorex  u64 /1                     
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    load     u64       q                
    load     i64       6                
    istorex  u16 /1                     
    load     u64       p                
    load     i64       5                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #1209            
    load     i64       2                
    jumpeq   i64       #1210            
    jump               #1211            
#1209: 
    load     u64       p                
    load     i64       24               
    iloadx   u64 /1                     
    load     u64       q                
    load     i64       24               
    istorex  u64 /1                     
    setcall      /1/1                   
    load     u64       q                
    load     i64       24               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_vars.obj_shareu
    jump               #1208            
#1210: 
    load     u64       0                
    load     u64       q                
    load     i64       24               
    istorex  u64 /1                     
    load     i64       2                
    load     u64       q                
    load     i64       5                
    istorex  u8  /1                     
    jump               #1208            
#1211: 
    load     u64       p                
    load     u64       q                
    load     i64       24               
    istorex  u64 /1                     
    load     u64       p                
    incrto   u32 /1                     
#1208: 
    load     i64       j                
    load     i64       i                
    sub      i64                        
    load     i64       1                
    add      i64                        
    load     u64       q                
    load     i64       16               
    istorex  i64 /1                     
    load     u64       q                
    load     u64       a                
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_arrays.u8inarray:
    param    u8       a
    param    u64       p
    local    i64       i
    local    u64       q
    local    i64       av_1
    rettype  i64
    load     u64       p                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    loadbit  i64                        
    store    i64       i                
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #1215            
#1213: 
    load     u64       q                
    iload    u8                         
    widen    i64/u8                     
    load     u8        a                
    widen    i64/u8                     
    jumpne   i64       #1217            
    load     i64       i                
    jumpret  i64       #1212            
#1217: 
    load     u64 /1    &q               
    incrto   u64 /1                     
    load     u64 /1    &i               
    incrto   i64 /1                     
    to       i64       #1213            
    opnd     i64       av_1             
#1215: 
    load     i64       -9223372036854775808
    jumpret  i64       #1212            
#1212: 
    retfn    i64                        
endproc

proc qq_arrays.u16inarray:
    param    u16       a
    param    u64       p
    local    i64       i
    local    u64       q
    local    i64       av_1
    rettype  i64
    load     u64       p                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    loadbit  i64                        
    store    i64       i                
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #1221            
#1219: 
    load     u64       q                
    iload    u16                        
    widen    i64/u16                    
    load     u16       a                
    widen    i64/u16                    
    jumpne   i64       #1223            
    load     i64       i                
    jumpret  i64       #1218            
#1223: 
    load     u64 /1    &q               
    incrto   u64 /2                     
    load     u64 /1    &i               
    incrto   i64 /1                     
    to       i64       #1219            
    opnd     i64       av_1             
#1221: 
    load     i64       -9223372036854775808
    jumpret  i64       #1218            
#1218: 
    retfn    i64                        
endproc

proc qq_arrays.u32inarray:
    param    u32       a
    param    u64       p
    local    i64       i
    local    u64       q
    local    i64       av_1
    rettype  i64
    load     u64       p                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    loadbit  i64                        
    store    i64       i                
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #1227            
#1225: 
    load     u64       q                
    iload    u32                        
    widen    i64/u32                    
    load     u32       a                
    widen    i64/u32                    
    jumpne   i64       #1229            
    load     i64       i                
    jumpret  i64       #1224            
#1229: 
    load     u64 /1    &q               
    incrto   u64 /4                     
    load     u64 /1    &i               
    incrto   i64 /1                     
    to       i64       #1225            
    opnd     i64       av_1             
#1227: 
    load     i64       -9223372036854775808
    jumpret  i64       #1224            
#1224: 
    retfn    i64                        
endproc

proc qq_arrays.u64inarray:
    param    u64       a
    param    u64       p
    local    i64       i
    local    u64       q
    local    i64       av_1
    rettype  i64
    load     u64       p                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    loadbit  i64                        
    store    i64       i                
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #1233            
#1231: 
    load     u64       q                
    iload    u64                        
    load     u64       a                
    jumpne   u64       #1235            
    load     i64       i                
    jumpret  i64       #1230            
#1235: 
    load     u64 /1    &q               
    incrto   u64 /8                     
    load     u64 /1    &i               
    incrto   i64 /1                     
    to       i64       #1231            
    opnd     i64       av_1             
#1233: 
    load     i64       -9223372036854775808
    jumpret  i64       #1230            
#1230: 
    retfn    i64                        
endproc

proc qq_arrays.var_inx_array:
    param    u64       a
    param    u64       b
    param    i64       usertag
    local    i64       n
    local    u64       q
    local    i64       elemtag
    rettype  i64
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     i64       usertag          
    jumpf    i64       #1238            
    load     u64       &qq_tables.tttarget
    load     i64       usertag          
    iloadx   i16 /2                     
    widen    i64/i16                    
    store    i64       elemtag          
    jump               #1237            
#1238: 
    load     u64       q                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    store    i64       elemtag          
#1237: 
    load     i64       elemtag          
    load     i64       23               
    jumpeq   i64 /1    #1240            
    load     i64       27               
    jumpeq   i64 /1    #1240            
    load     i64       24               
    jumpeq   i64 /1    #1241            
    load     i64       28               
    jumpeq   i64 /1    #1241            
    load     i64       25               
    jumpeq   i64 /1    #1242            
    load     i64       29               
    jumpeq   i64 /1    #1242            
    load     i64       26               
    jumpeq   i64 /1    #1243            
    load     i64       30               
    jumpeq   i64       #1243            
    jump               #1244            
#1240: 
    setcall  i64 /2/1                   
    load     u64       q                
    setarg   u64 /2                     
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    setarg   u8  /1                     
    callf    i64 /2    &qq_arrays.u8inarray
    store    i64       n                
    jump               #1239            
#1241: 
    setcall  i64 /2/1                   
    load     u64       q                
    setarg   u64 /2                     
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    setarg   u16 /1                     
    callf    i64 /2    &qq_arrays.u16inarray
    store    i64       n                
    jump               #1239            
#1242: 
    setcall  i64 /2/1                   
    load     u64       q                
    setarg   u64 /2                     
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    setarg   u32 /1                     
    callf    i64 /2    &qq_arrays.u32inarray
    store    i64       n                
    jump               #1239            
#1243: 
    setcall  i64 /2/1                   
    load     u64       q                
    setarg   u64 /2                     
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /2    &qq_arrays.u64inarray
    store    i64       n                
    jump               #1239            
#1244: 
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       "x in array"     
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#1239: 
    load     i64       n                
    jumpret  i64       #1236            
#1236: 
    retfn    i64                        
endproc

proc qq_arrays.var_expand_array:
    param    u64       p
    param    u64       dest
    param    i64       m
    local    u64       q
    local    i64       i
    local    i64       n
    local    i64       elemtype
    local    i64       length
    local    u64       pa
    local    i64       av_1
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pa               
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       11               
    jumpne   i64       #1247            
    load     u64       pa               
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       length           
    load     u64       pa               
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    store    i64       elemtype         
    jump               #1246            
#1247: 
    load     u64       &qq_tables.ttlength
    load     u64       pa               
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i64 /8                     
    store    i64       length           
    load     u64       &qq_tables.tttarget
    load     u64       pa               
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i16 /2                     
    widen    i64/i16                    
    store    i64       elemtype         
#1246: 
    load     u64       pa               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     i64       1                
    store    i64       n                
    load     i64       m                
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #1250            
#1248: 
    load     i64       n                
    load     i64       length           
    jumple   i64       #1252            
    load     i64       0                
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    jump               #1251            
#1252: 
    setcall      /4/1                   
    load     u64       0                
    setarg   u64 /4                     
    load     u64       dest             
    setarg   u64 /3                     
    load     i64       elemtype         
    setarg   i64 /2                     
    load     u64       q                
    setarg   u64 /1                     
    callp        /4    &qq_packed.var_loadpacked
    load     u64       &qq_tables.ttsize
    load     i64       elemtype         
    iloadx   i64 /8                     
    load     u64 /1    &q               
    addpxto  u64 /1                     
#1251: 
    load     u64 /1    &n               
    incrto   i64 /1                     
    load     u64 /1    &dest            
    decrto   u64 /16                    
    to       i64       #1248            
    opnd     i64       av_1             
#1250: 
    retproc                             
endproc

proc qq_bits.obj_free_bits:
    param    u64       p
    param    i64       tag
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    jumpf    i64       #1255            
    setcall      /2                     
    setcall  i64 /2                     
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    setarg   i64 /2                     
    load     u64       p                
    load     i64       24               
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callf    i64 /2    &qq_bits.getbitssize
    setarg   i64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_free   
#1255: 
    setcall      /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callp        /1    &mlib.pcm_free32 
    retproc                             
endproc

proc qq_bits.var_make_bits:
    param    u64       a
    param    u64       dest
    param    i64       lower
    param    i64       n
    param    i64       bxtype
    param    i64       elemtype
    local    u64       p
    local    u64       q
    local    i64       bitwidthx
    local    i64       offset
    local    i64       av_1
    setcall  u64 /3/1                   
    load     i64       n                
    setarg   i64 /3                     
    load     i64       lower            
    setarg   i64 /2                     
    load     i64       elemtype         
    setarg   i64 /1                     
    callf    u64 /3    &qq_bits.obj_newbits
    store    u64       p                
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       &qq_tables.ttbitwidth
    load     i64       elemtype         
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       bitwidthx        
    load     i64       0                
    store    i64       offset           
    load     i64       n                
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #1259            
#1257: 
    setcall      /5/1                   
    load     i64       bitwidthx        
    setarg   i64 /5                     
    load     i64       elemtype         
    setarg   i64 /4                     
    load     u64       a                
    setarg   u64 /3                     
    load     i64       offset           
    setarg   i64 /2                     
    load     u64       q                
    setarg   u64 /1                     
    callp        /5    &qq_vars.var_storebit
    load     i64       bitwidthx        
    load     u64 /1    &offset          
    addto    i64                        
    load     i64       offset           
    load     i64       8                
    jumplt   i64       #1261            
    load     u64 /1    &q               
    incrto   u64 /1                     
    load     i64       0                
    store    i64       offset           
#1261: 
    load     u64 /1    &a               
    incrto   u64 /16                    
    to       i64       #1257            
    opnd     i64       av_1             
#1259: 
    load     i64       bxtype           
    load     i64       256              
    bitor    i64                        
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     u64       p                
    load     u64       dest             
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_bits.obj_newbits:
    param    i64       elemtype
    param    i64       lower
    param    i64       length
    local    u64       p
    local    u64       q
    local    i64       nbits
    local    i64       bitwidthx
    local    i64       nbytes
    rettype  u64
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_vars.obj_new 
    store    u64       p                
    load     u64       1                
    load     u64       p                
    load     i64       4                
    addpx    u64 /1                     
    load     i64       1                
    storebit u8                         
    load     i64       lower            
    load     u64       p                
    load     i64       4                
    addpx    u64 /1                     
    load     i64       0                
    storebit u8                         
    load     i64       length           
    load     u64       p                
    load     i64       16               
    istorex  i64 /1                     
    load     i64       0                
    load     u64       p                
    load     i64       5                
    istorex  u8  /1                     
    load     i64       elemtype         
    load     u64       p                
    load     i64       6                
    istorex  u16 /1                     
    load     i64       length           
    jumpf    i64       #1264            
    setcall  i64 /2/1                   
    load     i64       elemtype         
    setarg   i64 /2                     
    load     i64       length           
    setarg   i64 /1                     
    callf    i64 /2    &qq_bits.getbitssize
    store    i64       nbytes           
    setcall  u64 /1/1                   
    load     i64       nbytes           
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_allocz 
    load     u64       p                
    load     i64       8                
    istorex  u64 /1                     
    load     i64       mlib.allocbytes  
    load     i64       8                
    load     u64       &qq_tables.ttbitwidth
    load     i64       elemtype         
    iloadx   u8  /1                     
    widen    i64/u8                     
    idiv     i64                        
    mul      i64                        
    load     u64       p                
    load     i64       24               
    istorex  i64 /1                     
#1264: 
    load     u64       p                
    jumpret  u64       #1262            
#1262: 
    retfn    u64                        
endproc

proc qq_bits.var_getix_bits:
    param    u64       a
    param    i64       index
    local    u64       p
    local    u64       q
    local    i64       elemtype
    local    i64       offset
    local    i64       shift
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    store    i64       elemtype         
    load     u64       p                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    loadbit  i64                        
    load     u64 /1    &index           
    subto    i64                        
    load     i64       index            
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    jumplt   u64       #1267            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "ax[int] bounds" 
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1267: 
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     i64       1                
    load     u64       a                
    load     i64       0                
    istorex  u32 /1                     
    load     u64       p                
    load     i64       7                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64 /1    &index           
    addto    i64                        
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       33               
    jumpeq   i64 /1    #1269            
    load     i64       34               
    jumpeq   i64 /1    #1270            
    load     i64       35               
    jumpeq   i64       #1271            
    jump               #1272            
#1269: 
    load     u64       q                
    load     i64       index            
    load     i64       3                
    shr      i64                        
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    load     i64       index            
    load     i64       7                
    bitand   i64                        
    shl      i64                        
    bitand   i64                        
    toboolt  i64/i64                    
    load     u64       a                
    load     i64       8                
    istorex  i64 /1                     
    jump               #1268            
#1270: 
    load     i64       index            
    load     i64       3                
    bitand   i64                        
    load     i64       2                
    mul      i64                        
    store    i64       shift            
    load     u64       q                
    load     i64       index            
    load     i64       2                
    shr      i64                        
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    load     i64       shift            
    shl      i64                        
    bitand   i64                        
    load     i64       shift            
    shr      i64                        
    load     u64       a                
    load     i64       8                
    istorex  i64 /1                     
    jump               #1268            
#1271: 
    load     i64       index            
    load     i64       1                
    bitand   i64                        
    load     i64       4                
    mul      i64                        
    store    i64       shift            
    load     u64       q                
    load     i64       index            
    load     i64       1                
    shr      i64                        
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       15               
    load     i64       shift            
    shl      i64                        
    bitand   i64                        
    load     i64       shift            
    shr      i64                        
    load     u64       a                
    load     i64       8                
    istorex  i64 /1                     
    jump               #1268            
#1272: 
    setcall      /2/1                   
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    setarg   i64 /2                     
    load     u64       "bitix"          
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#1268: 
    retproc                             
endproc

proc qq_bits.var_putix_bits:
    param    u64       a
    param    i64       index
    param    u64       x
    local    u64       p
    local    u64       q
    local    i64       elemtype
    local    i64       newoffset
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    store    i64       elemtype         
    load     u64       p                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    loadbit  i64                        
    load     u64 /1    &index           
    subto    i64                        
    load     i64       index            
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    jumplt   u64       #1275            
    load     i64       index            
    load     i64       0                
    jumpge   i64       #1277            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "lwb"            
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
    jump               #1276            
#1277: 
    load     i64       index            
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    jumpne   i64       #1278            
    setcall      /2/1                   
    load     u64       x                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /2    &qq_bits.obj_append_bits
    jump               #1276            
#1278: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "bx[i]:=x bounds"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1276: 
#1275: 
    setcall  u64 /5/1                   
    load     u64       &newoffset       
    setarg   u64 /5                     
    load     i64       elemtype         
    setarg   i64 /4                     
    load     i64       index            
    setarg   i64 /3                     
    load     u64       p                
    load     i64       7                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /5    &qq_bits.getindexoffset
    store    u64       q                
    setcall      /5/1                   
    load     i64       0                
    setarg   i64 /5                     
    load     i64       elemtype         
    setarg   i64 /4                     
    load     u64       x                
    setarg   u64 /3                     
    load     i64       newoffset        
    load     u64       &qq_tables.ttbitwidth
    load     i64       elemtype         
    iloadx   u8  /1                     
    widen    i64/u8                     
    mul      i64                        
    setarg   i64 /2                     
    load     u64       q                
    setarg   u64 /1                     
    callp        /5    &qq_vars.var_storebit
    retproc                             
endproc

proc qq_bits.var_getixref_bits:
    param    u64       a
    param    i64       index
    local    mem:16       v
    local    u64       p
    local    u64       q
    local    i64       offset
    local    i64       newoffset
    local    i64       elemtype
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    store    i64       elemtype         
    load     u64       p                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    loadbit  i64                        
    load     u64 /1    &index           
    subto    i64                        
    load     i64       index            
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    jumplt   u64       #1281            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "&bx[i] bounds"  
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1281: 
    setcall  u64 /5/1                   
    load     u64       &newoffset       
    setarg   u64 /5                     
    load     i64       elemtype         
    setarg   i64 /4                     
    load     i64       index            
    setarg   i64 /3                     
    load     u64       p                
    load     i64       7                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /5    &qq_bits.getindexoffset
    store    u64       q                
    load     i64       15               
    load     u64       a                
    load     i64       0                
    istorex  u32 /1                     
    load     i64       elemtype         
    load     u64       a                
    load     i64       4                
    istorex  u32 /1                     
    load     u64       q                
    load     u64       a                
    load     i64       8                
    istorex  u64 /1                     
    load     i64       newoffset        
    load     u64       &qq_tables.ttbitwidth
    load     i64       elemtype         
    iloadx   u8  /1                     
    widen    i64/u8                     
    mul      i64                        
    load     u64       a                
    load     i64       2                
    istorex  u8  /1                     
    retproc                             
endproc

proc qq_bits.getindexoffset:
    param    u64       p
    param    i64       offset
    param    i64       index
    param    i64       t
    param    u64       newoffset
    rettype  u64
    load     i64       offset           
    load     u64 /1    &index           
    addto    i64                        
    load     i64       t                
    load     i64       33               
    jumpeq   i64 /1    #1284            
    load     i64       34               
    jumpeq   i64 /1    #1285            
    load     i64       35               
    jumpeq   i64       #1286            
    jump               #1287            
#1284: 
    load     i64       index            
    load     i64       3                
    shr      i64                        
    load     u64 /1    &p               
    addpxto  u64 /1                     
    load     i64       index            
    load     i64       7                
    bitand   i64                        
    load     u64       newoffset        
    istore   i64                        
    jump               #1283            
#1285: 
    load     i64       index            
    load     i64       2                
    shr      i64                        
    load     u64 /1    &p               
    addpxto  u64 /1                     
    load     i64       index            
    load     i64       3                
    bitand   i64                        
    load     u64       newoffset        
    istore   i64                        
    jump               #1283            
#1286: 
    load     i64       offset           
    load     i64       2                
    shr      i64                        
    load     u64 /1    &index           
    addto    i64                        
    load     i64       index            
    load     i64       1                
    shr      i64                        
    load     u64 /1    &p               
    addpxto  u64 /1                     
    load     i64       index            
    load     i64       1                
    bitand   i64                        
    load     u64       newoffset        
    istore   i64                        
    jump               #1283            
#1287: 
#1283: 
    load     u64       p                
    jumpret  u64       #1282            
#1282: 
    retfn    u64                        
endproc

proc qq_bits.obj_append_bits:
    param    u64       a
    param    u64       x
    local    i64       n
    local    i64       newoffset
    local    i64       elemtype
    local    u64       q
    load     u64       a                
    load     i64       5                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpeq   i64       #1290            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Can't extend slice"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1290: 
    load     u64       a                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    loadbit  i64                        
    jumpt    u64       #1292            
    setcall      /0/1                   
    callp        /0    &qq_lib.pcnotmut 
#1292: 
    load     u64       a                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       1                
    add      i64                        
    store    i64       n                
    load     u64       a                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    store    i64       elemtype         
    load     i64       n                
    load     u64       a                
    load     i64       24               
    iloadx   i64 /1                     
    jumple   i64       #1294            
    setcall      /2/1                   
    load     i64       n                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_bits.obj_resize_bits
    jump               #1293            
#1294: 
    load     i64       n                
    load     u64       a                
    load     i64       16               
    istorex  i64 /1                     
#1293: 
    setcall  u64 /5/1                   
    load     u64       &newoffset       
    setarg   u64 /5                     
    load     i64       elemtype         
    setarg   i64 /4                     
    load     i64       n                
    load     u64       a                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    loadbit  i64                        
    sub      i64                        
    setarg   i64 /3                     
    load     u64       a                
    load     i64       7                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /5    &qq_bits.getindexoffset
    store    u64       q                
    setcall      /5/1                   
    load     i64       0                
    setarg   i64 /5                     
    load     i64       elemtype         
    setarg   i64 /4                     
    load     u64       x                
    setarg   u64 /3                     
    load     i64       newoffset        
    load     u64       &qq_tables.ttbitwidth
    load     i64       elemtype         
    iloadx   u8  /1                     
    widen    i64/u8                     
    mul      i64                        
    setarg   i64 /2                     
    load     u64       q                
    setarg   u64 /1                     
    callp        /5    &qq_vars.var_storebit
    retproc                             
endproc

proc qq_bits.var_appendto_bits:
    param    u64       a
    param    u64       x
    setcall      /2/1                   
    load     u64       x                
    setarg   u64 /2                     
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &qq_bits.obj_append_bits
    retproc                             
endproc

proc qq_bits.obj_resize_bits:
    param    u64       p
    param    i64       n
    local    u64       q
    local    i64       newsize
    local    i64       elemtype
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    store    i64       elemtype         
    load     i64       n                
    load     u64       p                
    load     i64       24               
    iloadx   i64 /1                     
    jumpgt   i64       #1298            
    load     i64       n                
    load     u64       p                
    load     i64       16               
    istorex  i64 /1                     
    jump               #1297            
#1298: 
    setcall  i64 /2/1                   
    load     i64       elemtype         
    setarg   i64 /2                     
    load     i64       n                
    setarg   i64 /1                     
    callf    i64 /2    &qq_bits.getbitssize
    store    i64       newsize          
    setcall  u64 /1/1                   
    load     i64       newsize          
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    store    u64       q                
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    jumpf    i64       #1300            
    setcall      /3                     
    setcall  u64 /1                     
    load     u64       p                
    setarg   u64 /1                     
    callf    u64 /1    &qq_bits.bits_bytesize
    setarg   u64 /3                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       q                
    setarg   u64 /1                     
    callp        /3    &memcpy          
    setcall      /2                     
    setcall  i64 /2                     
    load     i64       elemtype         
    setarg   i64 /2                     
    load     u64       p                
    load     i64       24               
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callf    i64 /2    &qq_bits.getbitssize
    setarg   i64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_free   
#1300: 
    load     u64       q                
    load     u64       p                
    load     i64       8                
    istorex  u64 /1                     
    load     i64       n                
    load     u64       p                
    load     i64       16               
    istorex  i64 /1                     
    load     i64       mlib.allocbytes  
    load     i64       8                
    load     u64       &qq_tables.ttbitwidth
    load     i64       elemtype         
    iloadx   u8  /1                     
    widen    i64/u8                     
    idiv     i64                        
    mul      i64                        
    load     u64       p                
    load     i64       24               
    istorex  i64 /1                     
#1297: 
    retproc                             
endproc

proc qq_bits.var_dupl_bits:
    param    u64       a
    local    u64       p
    local    u64       q
    local    i64       elemsize
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    setcall  u64 /3/1                   
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /3                     
    load     u64       p                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    loadbit  i64                        
    setarg   i64 /2                     
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    setarg   i64 /1                     
    callf    u64 /3    &qq_bits.obj_newbits
    store    u64       q                
    load     u64       p                
    load     i64       7                
    iloadx   u8  /1                     
    load     u64       q                
    load     i64       7                
    istorex  u8  /1                     
    load     u64       q                
    load     u64       a                
    load     i64       8                
    istorex  u64 /1                     
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    jumpf    i64       #1303            
    setcall      /3                     
    setcall  u64 /1                     
    load     u64       p                
    setarg   u64 /1                     
    callf    u64 /1    &qq_bits.bits_bytesize
    setarg   u64 /3                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &memcpy          
#1303: 
    retproc                             
endproc

proc qq_bits.var_equal_bits:
    param    u64       a
    param    u64       b
    local    u64       p
    local    u64       q
    local    i64       length
    local    i64       elemsize
    rettype  i64
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    store    i64       elemsize         
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     u64       q                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    jumpeq   i64       #1306            
    load     i64       0                
    jumpret  i64       #1304            
#1306: 
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       length           
    load     i64       length           
    load     u64       q                
    load     i64       16               
    iloadx   i64 /1                     
    jumpeq   i64       #1308            
    load     i64       0                
    jumpret  i64       #1304            
#1308: 
    load     i64       length           
    load     i64       0                
    jumpne   i64       #1310            
    load     i64       1                
    jumpret  i64       #1304            
#1310: 
    setcall  i64 /3                     
    setcall  i64 /1                     
    load     u64       p                
    setarg   u64 /1                     
    callf    i64 /1    &qq_bits.bits_bytesize
    setarg   i64 /3                     
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /3    &mlib.eqbytes    
    jumpret  i64       #1304            
#1304: 
    retfn    i64                        
endproc

proc qq_bits.var_concatto_bits:
    param    u64       a
    param    u64       b
    local    u64       d
    local    i64       n
    local    i64       alen
    local    i64       blen
    local    i64       newlen
    local    i64       oldbytes
    local    i64       newbytes
    local    i64       elemsize
    local    u64       v
    local    u64       pa
    local    u64       pb
    setcall      /2/1                   
    load     u64       "var_concatto_bits"
    setarg   u64 /2                     
    load     u64       "VAR/BITS/NOT READY"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pa               
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pb               
    load     u64       pa               
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    loadbit  i64                        
    jumpt    u64       #1313            
    setcall      /0/1                   
    callp        /0    &qq_lib.pcnotmut 
#1313: 
    load     u64       pa               
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     u64       pb               
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    jumpeq   i64       #1315            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "concat/not compat"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1315: 
    load     u64       &qq_tables.ttsize
    load     u64       pa               
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i64 /8                     
    store    i64       elemsize         
    load     u64       pa               
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       alen             
    load     u64       pb               
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       blen             
    load     i64       alen             
    load     i64       0                
    jumpne   i64       #1317            
    load     i64       blen             
    jumpf    i64       #1319            
    setcall      /2/1                   
    load     i64       blen             
    setarg   i64 /2                     
    load     u64       pa               
    setarg   u64 /1                     
    callp        /2    &qq_bits.obj_resize_bits
    load     u64       pa               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       d                
    setcall      /3/1                   
    load     i64       blen             
    load     i64       elemsize         
    mul      u64                        
    setarg   u64 /3                     
    load     u64       pb               
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       d                
    setarg   u64 /1                     
    callp        /3    &memcpy          
#1319: 
    jump               #1316            
#1317: 
    load     i64       blen             
    jumpf    i64       #1320            
    load     i64       alen             
    load     i64       blen             
    add      i64                        
    store    i64       newlen           
    setcall      /2/1                   
    load     i64       newlen           
    setarg   i64 /2                     
    load     u64       pa               
    setarg   u64 /1                     
    callp        /2    &qq_bits.obj_resize_bits
    load     u64       pa               
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       alen             
    load     i64       elemsize         
    mul      i64                        
    addpx    u64 /1                     
    store    u64       d                
    setcall      /3/1                   
    load     i64       blen             
    load     i64       elemsize         
    mul      u64                        
    setarg   u64 /3                     
    load     u64       pb               
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       d                
    setarg   u64 /1                     
    callp        /3    &memcpy          
#1320: 
#1316: 
    retproc                             
endproc

proc qq_bits.var_getslice_bits:
    param    u64       a
    param    i64       i
    param    i64       j
    local    i64       alower
    local    i64       elemtype
    local    i64       newoffset
    local    u64       p
    local    u64       q
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       p                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    loadbit  i64                        
    store    i64       alower           
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    store    i64       elemtype         
    load     i64       i                
    load     i64       alower           
    jumplt   i64       #1324            
    load     i64       j                
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       alower           
    add      i64                        
    load     i64       1                
    sub      i64                        
    jumpgt   i64       #1324            
    load     i64       i                
    load     i64       j                
    jumple   i64       #1323            
#1324: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "bits/slice bounds"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1323: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_vars.obj_new 
    store    u64       q                
    load     i64       1                
    load     u64       q                
    load     i64       5                
    istorex  u8  /1                     
    load     u64       p                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    loadbit  i64                        
    load     u64       q                
    load     i64       4                
    addpx    u64 /1                     
    load     i64       1                
    storebit u8                         
    load     u64       1                
    load     u64       q                
    load     i64       4                
    addpx    u64 /1                     
    load     i64       0                
    storebit u8                         
    load     i64       elemtype         
    load     u64       q                
    load     i64       6                
    istorex  u16 /1                     
    setcall  u64 /5/1                   
    load     u64       &newoffset       
    setarg   u64 /5                     
    load     i64       elemtype         
    setarg   i64 /4                     
    load     i64       i                
    load     i64       alower           
    sub      i64                        
    setarg   i64 /3                     
    load     u64       p                
    load     i64       7                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /5    &qq_bits.getindexoffset
    load     u64       q                
    load     i64       8                
    istorex  u64 /1                     
    load     i64       newoffset        
    load     u64       q                
    load     i64       7                
    istorex  u8  /1                     
    load     u64       p                
    load     i64       5                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #1326            
    load     i64       2                
    jumpeq   i64       #1327            
    jump               #1328            
#1326: 
    load     u64       p                
    load     i64       24               
    iloadx   u64 /1                     
    load     u64       q                
    load     i64       24               
    istorex  u64 /1                     
    setcall      /1/1                   
    load     u64       q                
    load     i64       24               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_vars.obj_shareu
    jump               #1325            
#1327: 
    load     u64       0                
    load     u64       q                
    load     i64       24               
    istorex  u64 /1                     
    load     i64       2                
    load     u64       q                
    load     i64       5                
    istorex  u8  /1                     
    jump               #1325            
#1328: 
    load     u64       p                
    load     u64       q                
    load     i64       24               
    istorex  u64 /1                     
    load     u64       p                
    incrto   u32 /1                     
#1325: 
    load     i64       j                
    load     i64       i                
    sub      i64                        
    load     i64       1                
    add      i64                        
    load     u64       q                
    load     i64       16               
    istorex  i64 /1                     
    load     u64       q                
    load     u64       a                
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_bits.bits_bytesize:
    param    u64       p
    rettype  i64
    setcall  i64 /2/1                   
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    setarg   i64 /2                     
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callf    i64 /2    &qq_bits.getbitssize
    jumpret  i64       #1329            
#1329: 
    retfn    i64                        
endproc

proc qq_bits.getbitssize:
    param    i64       n
    param    i64       t
    local    i64       nbits
    rettype  i64
    load     i64       n                
    load     u64       &qq_tables.ttbitwidth
    load     i64       t                
    iloadx   u8  /1                     
    widen    i64/u8                     
    mul      i64                        
    store    i64       nbits            
    load     i64       nbits            
    load     i64       1                
    sub      i64                        
    load     i64       64               
    idiv     i64                        
    load     i64       1                
    add      i64                        
    load     i64       8                
    mul      i64                        
    jumpret  i64       #1330            
#1330: 
    retfn    i64                        
endproc

proc qq_calldll.calldll:
    param    u64       d
    param    u64       args
    param    u64       result
    param    i64       nargs
    local    u64       e
    local    mem:800       arglist
    local    i64       n
    local    i64       retcode
    local    i64       retval
    local    i64       fnindex
    local    i64       libindex
    local    u64       dllinst
    local    u64       fnaddr
    local    u64       name
    local    i64       i
    load     i64       nargs            
    load     i64       100              
    jumple   i64       #1333            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Too many dll args"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1333: 
    load     u64       d                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       e                
    load     i64       0                
    store    i64       n                
    load     i64       1                
    store    i64       i                
    load     i64       nargs            
    load     i64       1                
    jumplt   i64       #1336            
#1334: 
    load     u64       e                
    load     u64       0                
    jumpne   u64       #1338            
    load     u64       d                
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       8                
    loadbit  i64                        
    jumpf    u64       #1340            
    setcall  i64 /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       args             
    setarg   u64 /1                     
    callf    i64 /2    &qq_calldll.vartopacked
    load     u64       &arglist         
    load     i64       i                
    istorex  i64 /8/-8                  
    load     u64 /1    &args            
    incrto   u64 /16                    
    jump               #1339            
#1340: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Too many dll args"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1339: 
    jump               #1337            
#1338: 
    setcall  i64 /2/1                   
    load     u64       e                
    setarg   u64 /2                     
    load     u64       args             
    setarg   u64 /1                     
    callf    i64 /2    &qq_calldll.vartopacked
    load     u64       &arglist         
    load     i64       i                
    istorex  i64 /8/-8                  
    load     u64 /1    &args            
    incrto   u64 /16                    
    load     u64       e                
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       e                
#1337: 
    forup    i64 /1    #1334            
    opnd     i64       i                
    opnd     i64       nargs            
#1336: 
    load     u64       d                
    load     i64       116              
    iloadx   i16 /1                     
    widen    i64/i16                    
    load     i64       32               
    jumpne   i64       #1342            
    load     i64       82               
    store    i64       retcode          
    jump               #1341            
#1342: 
    load     i64       73               
    store    i64       retcode          
#1341: 
    setcall  u64 /1/1                   
    load     u64       d                
    setarg   u64 /1                     
    callf    u64 /1    &qq_calldll.getlibprocaddr
    store    u64       fnaddr           
    setcall  i64 /5/1                   
    load     u64       0                
    setarg   u64 /5                     
    load     u64       &arglist         
    setarg   u64 /4                     
    load     i64       nargs            
    setarg   i64 /3                     
    load     i64       retcode          
    setarg   i64 /2                     
    load     u64       fnaddr           
    setarg   u64 /1                     
    callf    i64 /5    &mwindllc.os_calldllfunction
    store    i64       retval           
    load     u64       d                
    load     i64       116              
    iloadx   i16 /1                     
    jumpf    i16       #1345            
    setcall      /3/1                   
    load     u64       result           
    setarg   u64 /3                     
    load     u64       d                
    load     i64       116              
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /2                     
    load     i64       retval           
    setarg   u64 /1                     
    callp        /3    &qq_calldll.packedtovar
#1345: 
    retproc                             
endproc

proc qq_calldll.getlibprocaddr:
    param    u64       d
    local    u64       fnaddr
    rettype  u64
    load     u64       &qq_decls.dllprocaddr
    load     u64       d                
    load     i64       96               
    iloadx   i32 /1                     
    widen    i64/i32                    
    iloadx   u64 /8/-8                  
    store    u64       fnaddr           
    load     u64       fnaddr           
    load     u64       0                
    jumpne   u64       #1348            
    setcall  u64 /1/1                   
    load     u64       d                
    setarg   u64 /1                     
    callf    u64 /1    &qq_calldll.loaddllfunction
    store    u64       fnaddr           
#1348: 
    load     u64       fnaddr           
    jumpret  u64       #1346            
#1346: 
    retfn    u64                        
endproc

proc qq_calldll.vartopacked:
    param    u64       p
    param    u64       d
    local    i64       s
    local    i64       t
    local    u64       a
    rettype  u64
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       s                
    load     u64       d                
    load     u64       0                
    jumpne   u64       #1351            
    load     i64       s                
    load     i64       9                
    jumpeq   i64 /1    #1353            
    load     i64       1                
    jumpeq   i64 /1    #1354            
    load     i64       2                
    jumpeq   i64 /1    #1354            
    load     i64       16               
    jumpeq   i64       #1354            
    jump               #1355            
#1353: 
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       a                
    setcall  u64 /2/1                   
    load     u64       a                
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /2    &qq_lib.convtostringz
    jumpret  u64       #1349            
    jump               #1352            
#1354: 
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    jumpret  u64       #1349            
    jump               #1352            
#1355: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Bad variadic param"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1352: 
#1351: 
    load     u64       d                
    load     i64       116              
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       t                
    load     u64       &qq_tables.ttbasetype
    load     i64       t                
    iloadx   i16 /2                     
    widen    i64/i16                    
    load     i64       26               
    jumpeq   i64 /1    #1357            
    load     i64       30               
    jumpeq   i64 /1    #1357            
    load     i64       25               
    jumpeq   i64 /1    #1357            
    load     i64       29               
    jumpeq   i64 /1    #1357            
    load     i64       24               
    jumpeq   i64 /1    #1357            
    load     i64       28               
    jumpeq   i64 /1    #1357            
    load     i64       32               
    jumpeq   i64 /1    #1358            
    load     i64       38               
    jumpeq   i64 /1    #1359            
    load     i64       16               
    jumpeq   i64 /1    #1360            
    load     i64       40               
    jumpeq   i64       #1361            
    jump               #1362            
#1357: 
    load     i64       s                
    load     i64       1                
    jumpeq   i64 /1    #1364            
    load     i64       16               
    jumpeq   i64 /1    #1364            
    load     i64       14               
    jumpeq   i64 /1    #1364            
    load     i64       2                
    jumpeq   i64       #1365            
    jump               #1366            
#1364: 
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    jumpret  u64       #1349            
    jump               #1363            
#1365: 
    load     u64       p                
    load     i64       8                
    iloadx   r64 /1                     
    fix      u64/r64                    
    jumpret  u64       #1349            
    jump               #1363            
#1366: 
! qq_calldll.vartopacked.error:
#1367: 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "'#' should be '#' (param # #)"
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1                     
    setcall  u64 /2                     
    load     i64       1                
    setarg   i64 /2                     
    load     i64       s                
    setarg   i64 /1                     
    callf    u64 /2    &qq_show.strmode 
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1                     
    setcall  u64 /2                     
    load     i64       0                
    setarg   i64 /2                     
    load     i64       t                
    setarg   i64 /1                     
    callf    u64 /2    &qq_show.strmode 
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       d                
    load     i64       96               
    iloadx   i32 /1                     
    widen    i64/i32                    
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "DLL: wrong param type"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1363: 
    jump               #1356            
#1358: 
    load     i64       s                
    load     i64       1                
    jumpeq   i64 /1    #1369            
    load     i64       2                
    jumpeq   i64       #1370            
    jump               #1371            
#1369: 
    load     u64       p                
    load     i64       8                
    iloadx   i64 /1                     
    float    r64/i64                    
    typepun  u64/r64                    
    jumpret  u64       #1349            
    jump               #1368            
#1370: 
    load     u64       p                
    load     i64       8                
    iloadx   r64 /1                     
    typepun  u64/r64                    
    jumpret  u64       #1349            
    jump               #1368            
#1371: 
    jump               #1367            
#1368: 
    jump               #1356            
#1359: 
    load     i64       s                
    load     i64       9                
    jumpeq   i64 /1    #1373            
    load     i64       16               
    jumpeq   i64       #1374            
    jump               #1375            
#1373: 
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       a                
    setcall  u64 /2/1                   
    load     u64       a                
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /2    &qq_lib.convtostringz
    jumpret  u64       #1349            
    jump               #1372            
#1374: 
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    jumpret  u64       #1349            
    jump               #1372            
#1375: 
    jump               #1367            
#1372: 
    jump               #1356            
#1360: 
    load     i64       s                
    load     i64       16               
    jumpeq   i64 /1    #1377            
    load     i64       11               
    jumpeq   i64 /1    #1378            
    load     i64       7                
    jumpeq   i64       #1378            
    jump               #1379            
#1377: 
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    jumpret  u64       #1349            
    jump               #1376            
#1378: 
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    jumpret  u64       #1349            
    jump               #1376            
#1379: 
    jump               #1367            
#1376: 
    jump               #1356            
#1361: 
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    addpx    u64 /1                     
    jumpret  u64       #1349            
    jump               #1356            
#1362: 
    setcall      /3/1                   
    load     i64       t                
    setarg   i64 /3                     
    load     i64       s                
    setarg   i64 /2                     
    load     u64       "DLL params:"    
    setarg   u64 /1                     
    callp        /3    &qq_runaux.pcmxtypestt
#1356: 
    load     u64       0                
    jumpret  u64       #1349            
#1349: 
    retfn    u64                        
endproc

proc qq_calldll.packedtovar:
    param    u64       retval
    param    i64       t
    param    u64       dest
    local    i64       tbase
    local    u64       a
    load     u64       &qq_tables.ttbasetype
    load     i64       t                
    iloadx   i16 /2                     
    widen    i64/i16                    
    store    i64       tbase            
    load     i64       tbase            
    load     i64       0                
    jumpeq   i64 /1    #1382            
    load     i64       32               
    jumpeq   i64 /1    #1383            
    load     i64       31               
    jumpeq   i64 /1    #1384            
    load     i64       26               
    jumpeq   i64 /1    #1385            
    load     i64       30               
    jumpeq   i64 /1    #1385            
    load     i64       25               
    jumpeq   i64 /1    #1386            
    load     i64       29               
    jumpeq   i64 /1    #1387            
    load     i64       24               
    jumpeq   i64 /1    #1388            
    load     i64       28               
    jumpeq   i64 /1    #1389            
    load     i64       16               
    jumpeq   i64 /1    #1390            
    load     i64       38               
    jumpeq   i64       #1391            
    jump               #1392            
#1382: 
    jump               #1381            
#1383: 
    load     i64       2                
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     u64       retval           
    typepun  r64/u64                    
    load     u64       dest             
    load     i64       8                
    istorex  r64 /1                     
    jump               #1381            
#1384: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "dll/r32ret"     
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
    jump               #1381            
#1385: 
    load     i64       1                
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     u64       retval           
    load     u64       dest             
    load     i64       8                
    istorex  i64 /1                     
    jump               #1381            
#1386: 
    load     i64       1                
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     u64       retval           
    truncate i64/i32                    
    load     u64       dest             
    load     i64       8                
    istorex  i64 /1                     
    jump               #1381            
#1387: 
    load     i64       1                
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     u64       retval           
    truncate i64/u32                    
    load     u64       dest             
    load     i64       8                
    istorex  i64 /1                     
    jump               #1381            
#1388: 
    load     i64       1                
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     u64       retval           
    truncate i64/i16                    
    load     u64       dest             
    load     i64       8                
    istorex  i64 /1                     
    jump               #1381            
#1389: 
    load     i64       1                
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     u64       retval           
    truncate i64/u16                    
    load     u64       dest             
    load     i64       8                
    istorex  i64 /1                     
    jump               #1381            
#1390: 
    load     i64       16               
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     u64       retval           
    load     u64       dest             
    load     i64       8                
    istorex  u64 /1                     
    load     u64       &qq_tables.tttarget
    load     i64       t                
    iloadx   i16 /2                     
    widen    i64/i16                    
    load     u64       dest             
    load     i64       4                
    istorex  u32 /1                     
    jump               #1381            
#1391: 
    load     u64       retval           
    jumpf    u64       #1394            
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     u64       dest             
    setarg   u64 /2                     
    load     u64       retval           
    setarg   u64 /1                     
    callp        /3    &qq_strings.var_make_string
    jump               #1393            
#1394: 
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     u64       dest             
    setarg   u64 /2                     
    load     u64       ""               
    setarg   u64 /1                     
    callp        /3    &qq_strings.var_make_string
#1393: 
    jump               #1381            
#1392: 
    setcall      /2/1                   
    load     u64       &qq_tables.ttname
    load     i64       t                
    iloadx   u64 /8                     
    setarg   u64 /2                     
    load     u64       "Rettype not supported:"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1381: 
    retproc                             
endproc

proc qq_calldll.loaddllfunction:
    param    u64       d
    local    i64       fnindex
    local    i64       libindex
    local    u64       dllinst
    local    u64       fnaddr
    local    u64       name
    rettype  u64
    load     u64       d                
    load     i64       96               
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       fnindex          
    load     u64       &qq_decls.dllprocaddr
    load     i64       fnindex          
    iloadx   u64 /8/-8                  
    store    u64       fnaddr           
    load     u64       fnaddr           
    jumpf    u64       #1397            
    load     u64       fnaddr           
    jumpret  u64       #1395            
#1397: 
    load     u64       &qq_decls.dllproclibindex
    load     i64       fnindex          
    iloadx   u8  /1/-1                  
    widen    i64/u8                     
    store    i64       libindex         
    load     u64       &qq_decls.dllinsttable
    load     i64       libindex         
    iloadx   u64 /8/-8                  
    store    u64       dllinst          
    load     u64       dllinst          
    load     i64       0                
    jumpne   i64       #1399            
    setcall  u64 /1/1                   
    load     u64       &qq_decls.libtable
    load     i64       libindex         
    iloadx   u64 /8/-8                  
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /1    &mlinux.os_getdllinst
    store    u64       dllinst          
    load     u64       dllinst          
    load     i64       0                
    jumpne   i64       #1401            
    setcall      /2/1                   
    load     u64       &qq_decls.libtable
    load     i64       libindex         
    iloadx   u64 /8/-8                  
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       "Can't load DLL:"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1401: 
    load     u64       dllinst          
    load     u64       &qq_decls.dllinsttable
    load     i64       libindex         
    istorex  u64 /8/-8                  
#1399: 
    startmx                             
    load     u64       d                
    load     i64       80               
    iloadx   u64 /1                     
    jumpf    u64       #1403            
    load     u64       d                
    load     i64       80               
    iloadx   u64 /1                     
    resetmx  u64                        
    jump               #1402            
#1403: 
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    endmx    u64                        
#1402: 
    store    u64       name             
    setcall  u64 /2/1                   
    load     u64       name             
    setarg   u64 /2                     
    load     u64       dllinst          
    setarg   i64 /1                     
    callf    u64 /2    &mlinux.os_getdllprocaddr
    store    u64       fnaddr           
    load     u64       fnaddr           
    load     u64       0                
    jumpne   u64       #1405            
    setcall      /2/1                   
    load     u64       name             
    setarg   u64 /2                     
    load     u64       "Can't find DLL func:"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1405: 
    load     u64       fnaddr           
    load     u64       &qq_decls.dllprocaddr
    load     i64       fnindex          
    istorex  u64 /8/-8                  
    load     u64       fnaddr           
    jumpret  u64       #1395            
#1395: 
    retfn    u64                        
endproc

proc qq_decimal.obj_free_dec:
    param    u64       p
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    jumpf    i64       #1408            
    setcall      /2/1                   
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       4                
    mul      i64                        
    setarg   i64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_free   
#1408: 
    setcall      /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callp        /1    &mlib.pcm_free32 
    retproc                             
endproc

proc qq_decimal.var_dupl_dec:
    param    u64       a
    local    u64       p
    local    u64       q
    local    i64       size
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_vars.obj_new 
    store    u64       p                
    load     u64       q                
    load     i64       16               
    iloadx   i64 /1                     
    load     u64       p                
    load     i64       16               
    istorex  i64 /1                     
    load     u64       q                
    load     i64       28               
    iloadx   i32 /1                     
    load     u64       p                
    load     i64       28               
    istorex  i32 /1                     
    load     u64       q                
    load     i64       24               
    iloadx   i16 /1                     
    load     u64       p                
    load     i64       24               
    istorex  i16 /1                     
    load     u64       q                
    load     i64       26               
    iloadx   i16 /1                     
    load     u64       p                
    load     i64       26               
    istorex  i16 /1                     
    load     u64       q                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       4                
    mul      i64                        
    store    i64       size             
    load     i64       size             
    jumpf    i64       #1411            
    setcall  u64 /1/1                   
    load     i64       size             
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    load     u64       p                
    load     i64       8                
    istorex  u64 /1                     
    setcall      /3/1                   
    load     i64       size             
    setarg   u64 /3                     
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &memcpy          
#1411: 
    load     u64       p                
    load     u64       a                
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_decimal.var_empty_dec:
    param    u64       dest
    load     i64       259              
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    setcall  u64 /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_decimal.makebignum
    load     u64       dest             
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_decimal.var_make_dec_str:
    param    u64       s
    param    i64       length
    param    u64       dest
    load     i64       259              
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    setcall  u64 /2/1                   
    load     i64       length           
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /2    &qq_decimal.bn_makestr
    load     u64       dest             
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_decimal.var_make_dec_int:
    param    i64       a
    param    u64       dest
    load     i64       259              
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    setcall  u64 /1/1                   
    load     i64       a                
    setarg   i64 /1                     
    callf    u64 /1    &qq_decimal.bn_makeint
    load     u64       dest             
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_decimal.badnumber:
    local    u64       c
    rettype  u64
    setcall  u64 /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_decimal.makebignum
    store    u64       c                
    load     i64       3                
    load     u64       c                
    load     i64       26               
    istorex  i16 /1                     
    load     u64       c                
    jumpret  u64       #1415            
#1415: 
    retfn    u64                        
endproc

proc qq_decimal.bn_makestr:
    param    u64       s
    param    i64       length
    local    u64       t
    local    u64       u
    local    u64       oldt
    local    i64       tlength
    local    i64       neg
    local    i64       dpindex
    local    i64       expon
    local    i64       nonzeros
    local    i64       talloc
    local    i64       dpseen
    local    i64       leadingzeros
    local    i64       trailingzeros
    local    i64       zerosafterdp
    local    i64       d
    local    i64       n
    local    i64       wd
    local    i64       dp
    local    i64       wdp
    local    i64       w
    local    i64       d2
    local    i64       na
    local    i64       nb
    local    i64       c
    local    u64       a
    local    i64       av_1
    local    i64       av_2
    local    i64       i
    rettype  u64
    load     i64       length           
    load     i64       0                
    jumpne   i64       #1418            
    setcall  i64 /1/1                   
    load     u64       s                
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    store    i64       length           
#1418: 
    load     i64       length           
    load     i64       0                
    jumpgt   i64       #1420            
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_decimal.badnumber
    jumpret  u64       #1416            
#1420: 
    setcall  u64 /1/1                   
    load     i64       length           
    load     i64       1                
    add      u64                        
    setarg   u64 /1                     
    callf    u64 /1    &malloc          
    store    u64       t                
    setcall      /3/1                   
    load     i64       length           
    setarg   u64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       t                
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     u64       0                
    load     u64       t                
    load     i64       length           
    istorex  u8  /1                     
    load     u64       t                
    store    u64       oldt             
    load     i64       length           
    load     i64       1                
    add      i64                        
    store    i64       tlength          
    load     u64       t                
    store    u64       s                
    load     i64       length           
    load     i64       1                
    add      i64                        
    load     i64       10               
    add      i64                        
    store    i64       talloc           
    load     i64       0                
    store    i64       neg              
    load     u64       s                
    iload    u8                         
    widen    u64/u8                     
    load     u64       43               
    jumpeq   u64 /1    #1422            
    load     u64       45               
    jumpeq   u64       #1423            
    jump               #1424            
#1422: 
    load     u64 /1    &s               
    incrto   u64 /1                     
    jump               #1421            
#1423: 
    load     i64       1                
    store    i64       neg              
    load     u64 /1    &s               
    incrto   u64 /1                     
    jump               #1421            
#1424: 
#1421: 
    setcall  u64 /1/1                   
    load     i64       talloc           
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    double                              
    store    u64       u                
    store    u64       t                
    load     i64       -1               
    store    i64       dpindex          
    load     i64       0                
    double                              
    store    i64       zerosafterdp     
    store    i64       dpseen           
    load     i64       0                
    store    i64       nonzeros         
    load     i64       0                
    double                              
    store    i64       trailingzeros    
    store    i64       leadingzeros     
    load     i64       0                
    store    i64       expon            
#1425: 
    load     u64       s                
    iload    u8                         
    widen    i64/u8                     
    double                              
    store    i64       c                
    load     i64       49               
    jumplt   i64 /1    #1428            
    load     i64       57               
    jumpgt   i64       #1428            
    load     u64 /1    &s               
    loadincr u64 /1                     
    iload    u8                         
    load     u64 /1    &u               
    loadincr u64 /1                     
    istore   u8                         
    load     i64       0                
    store    i64       trailingzeros    
    load     i64       1                
    store    i64       nonzeros         
    jump               #1427            
#1428: 
    load     i64       c                
    load     i64       48               
    jumpeq   i64 /1    #1430            
    load     i64       95               
    jumpeq   i64 /1    #1431            
    load     i64       39               
    jumpeq   i64 /1    #1431            
    load     i64       96               
    jumpeq   i64 /1    #1431            
    load     i64       32               
    jumpeq   i64 /1    #1431            
    load     i64       13               
    jumpeq   i64 /1    #1431            
    load     i64       10               
    jumpeq   i64 /1    #1431            
    load     i64       46               
    jumpeq   i64 /1    #1432            
    load     i64       0                
    jumpeq   i64 /1    #1433            
    load     i64       101              
    jumpeq   i64 /1    #1434            
    load     i64       69               
    jumpeq   i64       #1434            
    jump               #1435            
#1430: 
    load     i64       nonzeros         
    jumpf    i64       #1437            
    load     u64 /1    &trailingzeros   
    incrto   i64 /1                     
    load     u64 /1    &s               
    loadincr u64 /1                     
    iload    u8                         
    load     u64 /1    &u               
    loadincr u64 /1                     
    istore   u8                         
    jump               #1436            
#1437: 
    load     u64 /1    &leadingzeros    
    incrto   i64 /1                     
    load     i64       dpseen           
    jumpf    i64       #1439            
    load     u64 /1    &zerosafterdp    
    incrto   i64 /1                     
#1439: 
    load     u64 /1    &s               
    incrto   u64 /1                     
#1436: 
    jump               #1429            
#1431: 
    load     u64 /1    &s               
    incrto   u64 /1                     
    jump               #1429            
#1432: 
    load     i64       dpseen           
    jumpt    i64       #1442            
    load     i64       dpindex          
    load     i64       0                
    jumplt   i64       #1441            
#1442: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_decimal.badnumber
    jumpret  u64       #1416            
#1441: 
    load     i64       nonzeros         
    jumpf    i64       #1444            
    load     u64       u                
    load     u64       t                
    subp     i64 /1                     
    store    i64       dpindex          
    jump               #1443            
#1444: 
    load     i64       1                
    store    i64       dpseen           
#1443: 
    load     u64 /1    &s               
    incrto   u64 /1                     
    jump               #1429            
#1433: 
    jump               #1426            
    jump               #1429            
#1434: 
    setcall  i64 /1/1                   
    load     u64       s                
    load     i64       1                
    addpx    u64 /1                     
    setarg   u64 /1                     
    callf    i64 /1    &qq_decimal.readexpon
    store    i64       expon            
    jump               #1426            
    jump               #1429            
#1435: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_decimal.badnumber
    jumpret  u64       #1416            
#1429: 
#1427: 
    jump               #1425            
#1426: 
    load     u64       0                
    load     u64       u                
    istore   u8                         
    load     u64       u                
    load     u64       t                
    subp     i64 /1                     
    store    i64       length           
    load     i64       dpindex          
    load     i64       0                
    jumpge   i64       #1446            
    load     i64       dpseen           
    jumpf    i64       #1448            
    load     i64       zerosafterdp     
    neg      i64                        
    store    i64       dpindex          
    jump               #1447            
#1448: 
    load     i64       length           
    store    i64       dpindex          
#1447: 
#1446: 
    load     i64       trailingzeros    
    load     u64 /1    &length          
    subto    i64                        
    load     u64       0                
    load     u64       t                
    load     i64       length           
    istorex  u8  /1                     
    load     i64       length           
    load     i64       0                
    jumpne   i64       #1450            
    setcall  u64 /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_decimal.bn_makeint
    jumpret  u64       #1416            
#1450: 
    load     i64       dpindex          
    load     i64       1                
    sub      i64                        
    load     i64       expon            
    add      i64                        
    store    i64       d                
    load     i64       length           
    store    i64       n                
    load     i64       0                
    store    i64       dp               
    load     i64       1                
    store    i64       na               
    load     i64       n                
    load     i64       na               
    sub      i64                        
    store    i64       nb               
    load     i64       9                
    store    i64       w                
    load     i64       d                
    load     i64       0                
    jumplt   i64       #1452            
    load     i64       d                
    load     i64       w                
    idiv     i64                        
    store    i64       wd               
    load     i64       d                
    load     i64       w                
    irem     i64                        
    store    i64       wdp              
    jump               #1451            
#1452: 
    load     i64       d                
    load     i64       1                
    add      i64                        
    abs      i64                        
    store    i64       d2               
    load     i64       d2               
    load     i64       w                
    idiv     i64                        
    load     i64       1                
    add      i64                        
    neg      i64                        
    store    i64       wd               
    load     i64       w                
    load     i64       1                
    sub      i64                        
    load     i64       d2               
    load     i64       w                
    irem     i64                        
    sub      i64                        
    store    i64       wdp              
#1451: 
    load     i64       wdp              
    load     i64       1                
    add      i64                        
    store    i64       na               
    load     i64       n                
    load     i64       na               
    sub      i64                        
    load     i64       0                
    max      i64                        
    store    i64       nb               
    jump               #1454            
#1453: 
    load     u64 /1    &nb              
    incrto   i64 /1                     
#1454: 
    load     i64       nb               
    load     i64       w                
    irem     i64                        
    jumpt    i64       #1453            
    load     i64       nb               
    load     i64       w                
    idiv     i64                        
    load     i64       1                
    add      i64                        
    store    i64       length           
    load     u64       t                
    load     i64       n                
    addpx    u64 /1                     
    store    u64       u                
    load     i64       na               
    load     i64       nb               
    add      i64                        
    load     i64       n                
    sub      i64                        
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #1458            
#1456: 
    load     u64       48               
    load     u64 /1    &u               
    loadincr u64 /1                     
    istore   u8                         
    to       i64       #1456            
    opnd     i64       av_1             
#1458: 
    load     i64       na               
    load     i64       nb               
    add      i64                        
    store    i64       n                
    load     u64       0                
    load     u64       t                
    load     i64       n                
    istorex  u8  /1                     
    setcall  u64 /1/1                   
    load     i64       length           
    setarg   i64 /1                     
    callf    u64 /1    &qq_decimal.makebignum
    store    u64       a                
    load     i64       neg              
    load     u64       a                
    load     i64       24               
    istorex  i16 /1                     
    load     i64       wd               
    load     u64       a                
    load     i64       28               
    istorex  i32 /1                     
    load     u64       t                
    store    u64       u                
    setcall  i64 /2/1                   
    load     i64       na               
    setarg   i64 /2                     
    load     u64       u                
    setarg   u64 /1                     
    callf    i64 /2    &qq_decimal.strvaln
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       0                
    istorex  i32 /4                     
    load     i64       na               
    load     u64 /1    &u               
    addpxto  u64 /1                     
    load     i64       1                
    store    i64       i                
    load     i64       length           
    load     i64       1                
    sub      i64                        
    store    i64       av_2             
    load     i64       av_2             
    load     i64       1                
    jumplt   i64       #1461            
#1459: 
    setcall  i64 /2/1                   
    load     i64       w                
    setarg   i64 /2                     
    load     u64       u                
    setarg   u64 /1                     
    callf    i64 /2    &qq_decimal.strvaln
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       i                
    istorex  i32 /4                     
    load     i64       w                
    load     u64 /1    &u               
    addpxto  u64 /1                     
    forup    i64 /1    #1459            
    opnd     i64       i                
    opnd     i64       av_2             
#1461: 
    setcall      /2/1                   
    load     i64       talloc           
    setarg   i64 /2                     
    load     u64       t                
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_free   
    setcall      /1/1                   
    load     u64       oldt             
    setarg   u64 /1                     
    callp        /1    &free            
    load     u64       a                
    jumpret  u64       #1416            
#1416: 
    retfn    u64                        
endproc

proc qq_decimal.readexpon:
    param    u64       s
    local    i64       neg
    local    i64       expon
    local    i64       c
    rettype  i64
    load     i64       0                
    double                              
    store    i64       expon            
    store    i64       neg              
    load     u64       s                
    iload    u8                         
    widen    u64/u8                     
    load     u64       43               
    jumpeq   u64 /1    #1464            
    load     u64       45               
    jumpeq   u64       #1465            
    jump               #1466            
#1464: 
    load     u64 /1    &s               
    incrto   u64 /1                     
    jump               #1463            
#1465: 
    load     i64       1                
    store    i64       neg              
    load     u64 /1    &s               
    incrto   u64 /1                     
    jump               #1463            
#1466: 
#1463: 
#1467: 
    load     u64       s                
    iload    u8                         
    widen    i64/u8                     
    double                              
    store    i64       c                
    load     i64       48               
    jumplt   i64 /1    #1470            
    load     i64       57               
    jumpgt   i64       #1470            
    load     i64       expon            
    load     i64       10               
    mul      i64                        
    load     u64       s                
    iload    u8                         
    widen    u64/u8                     
    load     u64       48               
    sub      i64                        
    add      i64                        
    store    i64       expon            
    load     u64 /1    &s               
    incrto   u64 /1                     
    jump               #1469            
#1470: 
    load     i64       c                
    load     i64       95               
    jumpeq   i64 /1    #1472            
    load     i64       39               
    jumpeq   i64 /1    #1472            
    load     i64       96               
    jumpeq   i64 /1    #1472            
    load     i64       32               
    jumpeq   i64 /1    #1472            
    load     i64       0                
    jumpeq   i64       #1473            
    jump               #1474            
#1472: 
    load     u64 /1    &s               
    incrto   u64 /1                     
    jump               #1471            
#1473: 
    jump               #1468            
    jump               #1471            
#1474: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "make expon?"    
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1471: 
#1469: 
    jump               #1467            
#1468: 
    startmx                             
    load     i64       neg              
    jumpf    i64       #1476            
    load     i64       expon            
    neg      i64                        
    resetmx  i64                        
    jump               #1475            
#1476: 
    load     i64       expon            
    endmx    i64                        
#1475: 
    jumpret  i64       #1462            
#1462: 
    retfn    i64                        
endproc

proc qq_decimal.bn_makeint:
    param    i64       x
    local    u64       a
    local    mem:256       str
    rettype  u64
    load     i64       x                
    load     i64       0                
    jumpne   i64       #1479            
    setcall  u64 /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_decimal.makebignum
    store    u64       a                
    jump               #1478            
#1479: 
    load     i64       x                
    load     i64       0                
    jumplt   i64 /1    #1480            
    load     i64       999999999        
    jumpgt   i64       #1480            
    setcall  u64 /1/1                   
    load     i64       1                
    setarg   i64 /1                     
    callf    u64 /1    &qq_decimal.makebignum
    store    u64       a                
    load     i64       x                
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       0                
    istorex  i32 /4                     
    jump               #1478            
#1480: 
    load     i64       x                
    neg      i64                        
    load     i64       0                
    jumplt   i64 /1    #1481            
    load     i64       999999999        
    jumpgt   i64       #1481            
    setcall  u64 /1/1                   
    load     i64       1                
    setarg   i64 /1                     
    callf    u64 /1    &qq_decimal.makebignum
    store    u64       a                
    load     i64       x                
    neg      i64                        
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       0                
    istorex  i32 /4                     
    load     i64       1                
    load     u64       a                
    load     i64       24               
    istorex  i16 /1                     
    jump               #1478            
#1481: 
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     i64       x                
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall  u64 /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /2    &qq_decimal.bn_makestr
    store    u64       a                
#1478: 
    load     u64       a                
    jumpret  u64       #1477            
#1477: 
    retfn    u64                        
endproc

proc qq_decimal.var_tostr_dec:
    param    u64       a
    param    i64       fmt
    rettype  u64
    setcall  u64 /2/1                   
    load     i64       fmt              
    setarg   i64 /2                     
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /2    &qq_decimal.obj_tostr_dec
    jumpret  u64       #1482            
#1482: 
    retfn    u64                        
endproc

proc qq_decimal.obj_tostr_dec:
    param    u64       a
    param    i64       fmt
    local    i64       expon
    local    i64       upper
    local    u64       s
    local    u64       t
    rettype  u64
    load     u64       0                
    store    u64       t                
    load     u64       a                
    load     u64       0                
    jumpne   u64       #1485            
    load     u64       "<void>"         
    store    u64       t                
    jump               #1484            
#1485: 
    load     u64       a                
    load     i64       26               
    iloadx   i16 /1                     
    widen    i64/i16                    
    load     i64       0                
    jumpeq   i64 /1    #1487            
    load     i64       2                
    jumpeq   i64 /1    #1488            
    load     i64       3                
    jumpeq   i64       #1489            
    jump               #1490            
#1487: 
    startmx                             
    load     i64       fmt              
    load     i64       69               
    jumpeq   i64       #1493            
    load     i64       fmt              
    load     i64       70               
    jumpne   i64       #1492            
#1493: 
    load     u64       "0.0"            
    resetmx  u64                        
    jump               #1491            
#1492: 
    load     u64       "0"              
    endmx    u64                        
#1491: 
    store    u64       t                
    jump               #1486            
#1488: 
    startmx                             
    load     u64       a                
    load     i64       24               
    iloadx   i16 /1                     
    jumpf    i16       #1495            
    load     u64       "-Infinity"      
    resetmx  u64                        
    jump               #1494            
#1495: 
    load     u64       "Infinity"       
    endmx    u64                        
#1494: 
    store    u64       t                
    jump               #1486            
#1489: 
    load     u64       "<NaN>"          
    store    u64       t                
    jump               #1486            
#1490: 
#1486: 
#1484: 
    load     u64       t                
    jumpf    u64       #1497            
    setcall  u64 /1                     
    setcall  i64 /1                     
    load     u64       t                
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    load     i64       1                
    add      i64                        
    double                              
    store    i64       qq_decimal.decstrsize
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    store    u64       s                
    setcall  u64 /2/1                   
    load     u64       t                
    setarg   u64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    load     u64       s                
    jumpret  u64       #1483            
#1497: 
    load     i64       fmt              
    load     i64       0                
    jumpeq   i64       #1500            
    load     i64       fmt              
    load     i64       65               
    jumpne   i64       #1499            
#1500: 
    setcall  i64 /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /1    &qq_decimal.bn_isint
    jumpf    i64       #1502            
    load     u64       a                
    load     i64       28               
    iloadx   i32 /1                     
    widen    i64/i32                    
    load     u64       a                
    load     i64       16               
    iloadx   i64 /1                     
    sub      i64                        
    load     i64       9                
    mul      i64                        
    load     i64       60               
    jumpge   i64       #1502            
    load     i64       73               
    store    i64       fmt              
    jump               #1501            
#1502: 
    load     u64       a                
    load     i64       28               
    iloadx   i32 /1                     
    widen    i64/i32                    
    load     i64       9                
    mul      i64                        
    abs      i64                        
    load     i64       60               
    jumpge   i64       #1503            
    load     i64       70               
    store    i64       fmt              
    jump               #1501            
#1503: 
    load     i64       69               
    store    i64       fmt              
#1501: 
#1499: 
    load     i64       fmt              
    load     i64       69               
    jumpne   i64       #1505            
    setcall  u64 /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callf    u64 /1    &qq_decimal.tostring_scient
    store    u64       s                
    jump               #1504            
#1505: 
    setcall  u64 /2/1                   
    load     i64       fmt              
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    u64 /2    &qq_decimal.tostring_float
    store    u64       s                
#1504: 
    load     u64       s                
    jumpret  u64       #1483            
#1483: 
    retfn    u64                        
endproc

proc qq_decimal.tostring_scient:
    param    u64       a
    local    u64       s
    local    u64       t
    local    i64       expon
    local    i64       nchars
    local    i64       n
    local    i64       shift
    local    i64       x
    local    i64       scale
    local    i64       av_1
    local    i64       i
    rettype  u64
    load     i64       3                
    store    i64       nchars           
    load     u64       a                
    load     i64       28               
    iloadx   i32 /1                     
    widen    i64/i32                    
    load     i64       9                
    mul      i64                        
    store    i64       expon            
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   i32 /4                     
    widen    i64/i32                    
    store    i64       x                
    load     i64       1                
    store    i64       scale            
    load     i64       0                
    store    i64       shift            
    jump               #1508            
#1507: 
    load     i64       x                
    load     i64       10               
    idiv     i64                        
    store    i64       x                
    load     i64       10               
    load     u64 /1    &scale           
    multo    i64                        
    load     u64 /1    &expon           
    incrto   i64 /1                     
    load     u64 /1    &shift           
    incrto   i64 /1                     
#1508: 
    load     i64       x                
    load     i64       10               
    jumpge   i64       #1507            
    load     u64       a                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       9                
    mul      i64                        
    load     i64       16               
    add      i64                        
    store    i64       nchars           
    setcall  u64 /1/1                   
    load     i64       nchars           
    double                              
    store    i64       qq_decimal.decstrsize
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    double                              
    store    u64       t                
    store    u64       s                
    load     u64       a                
    load     i64       24               
    iloadx   i16 /1                     
    jumpf    i16       #1511            
    load     u64       45               
    load     u64 /1    &t               
    loadincr u64 /1                     
    istore   u8                         
#1511: 
    setcall      /1/1                   
    load     u64       t                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     i64       x                
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64       "."              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall  i64 /1/1                   
    load     u64       t                
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    load     u64 /1    &t               
    addpxto  u64 /1                     
    load     i64       shift            
    jumpf    i64       #1513            
    setcall      /1/1                   
    load     u64       t                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /2/1                   
    load     u64       "v"              
    setarg   u64 /2                     
    load     i64       shift            
    setarg   i64 /1                     
    callp        /2    &msysc.m$print_i64
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /2/1                   
    load     u64       "z*"             
    setarg   u64 /2                     
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   i32 /4                     
    widen    i64/i32                    
    load     i64       x                
    load     i64       scale            
    mul      i64                        
    sub      i64                        
    setarg   i64 /1                     
    callp        /2    &msysc.m$print_i64
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall  i64 /1/1                   
    load     u64       t                
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    load     u64 /1    &t               
    addpxto  u64 /1                     
#1513: 
    load     i64       1                
    store    i64       i                
    load     u64       a                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       1                
    sub      i64                        
    store    i64       av_1             
    load     i64       av_1             
    load     i64       1                
    jumplt   i64       #1516            
#1514: 
    setcall      /1/1                   
    load     u64       t                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /2/1                   
    load     u64       "z9"             
    setarg   u64 /2                     
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       i                
    iloadx   i32 /4                     
    widen    i64/i32                    
    setarg   i64 /1                     
    callp        /2    &msysc.m$print_i64
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall  i64 /1/1                   
    load     u64       t                
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    load     u64 /1    &t               
    addpxto  u64 /1                     
    forup    i64 /1    #1514            
    opnd     i64       i                
    opnd     i64       av_1             
#1516: 
    jump               #1518            
#1517: 
    load     u64 /1    &t               
    decrto   u64 /1                     
#1518: 
    load     u64       t                
    load     i64       1                
    subpx    u64 /1                     
    iload    u8                         
    widen    u64/u8                     
    load     u64       48               
    jumpne   u64       #1520            
    load     u64       t                
    load     i64       2                
    subpx    u64 /1                     
    iload    u8                         
    widen    u64/u8                     
    load     u64       46               
    jumpne   u64       #1517            
#1520: 
    setcall      /1/1                   
    load     u64       t                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "e"              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     i64       expon            
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall  i64 /1/1                   
    load     u64       t                
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    load     u64 /1    &t               
    addpxto  u64 /1                     
    load     u64       0                
    load     u64       t                
    istore   u8                         
    load     u64       s                
    jumpret  u64       #1506            
#1506: 
    retfn    u64                        
endproc

proc qq_decimal.tostring_float:
    param    u64       a
    param    i64       fmt
    local    i64       expon
    local    i64       upper
    local    i64       nchars
    local    i64       w
    local    i64       prel
    local    i64       n
    local    i64       showdot
    local    u64       s
    local    u64       t
    local    i64       av_1
    local    i64       av_2
    local    i64       av_3
    local    i64       av_4
    local    i64       i
    rettype  u64
    load     u64       a                
    load     i64       28               
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       expon            
    load     u64       a                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       1                
    sub      i64                        
    store    i64       upper            
    load     i64       fmt              
    load     i64       73               
    jumpne   i64       #1523            
    setcall  i64 /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /1    &qq_decimal.bn_isint
    jumpf    i64       #1523            
    load     i64       0                
    store    i64       showdot          
    jump               #1522            
#1523: 
    load     i64       1                
    store    i64       showdot          
#1522: 
    load     i64       9                
    store    i64       w                
    load     i64       3                
    store    i64       nchars           
    load     i64       expon            
    load     i64       0                
    jumpge   i64       #1525            
    load     i64       expon            
    load     i64       1                
    sub      i64                        
    abs      i64                        
    load     i64       w                
    mul      i64                        
    load     u64 /1    &nchars          
    addto    i64                        
#1525: 
    load     u64       a                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       w                
    mul      i64                        
    load     u64 /1    &nchars          
    addto    i64                        
    load     i64       expon            
    load     i64       upper            
    sub      i64                        
    load     i64       0                
    jumple   i64       #1527            
    load     i64       expon            
    load     i64       upper            
    sub      i64                        
    load     i64       w                
    mul      i64                        
    load     u64 /1    &nchars          
    addto    i64                        
#1527: 
    load     i64       8                
    load     u64 /1    &nchars          
    addto    i64                        
    setcall  u64 /1/1                   
    load     i64       nchars           
    double                              
    store    i64       qq_decimal.decstrsize
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    double                              
    store    u64       t                
    store    u64       s                
    load     u64       a                
    load     i64       24               
    iloadx   i16 /1                     
    jumpf    i16       #1529            
    load     u64       45               
    load     u64 /1    &t               
    loadincr u64 /1                     
    istore   u8                         
#1529: 
    load     i64       0                
    store    i64       prel             
    load     i64       expon            
    load     i64       0                
    jumpge   i64       #1531            
    load     i64       1                
    store    i64       prel             
    load     u64       48               
    load     u64 /1    &t               
    loadincr u64 /1                     
    istore   u8                         
    load     u64       46               
    load     u64 /1    &t               
    loadincr u64 /1                     
    istore   u8                         
    load     i64       expon            
    abs      i64                        
    load     i64       1                
    sub      i64                        
    store    i64       av_2             
    load     i64       av_2             
    load     i64       0                
    jumple   i64       #1534            
#1532: 
    load     i64       9                
    store    i64       av_1             
#1535: 
    load     u64       48               
    load     u64 /1    &t               
    loadincr u64 /1                     
    istore   u8                         
    to       i64       #1535            
    opnd     i64       av_1             
    to       i64       #1532            
    opnd     i64       av_2             
#1534: 
#1531: 
    load     i64       0                
    store    i64       i                
    load     i64       upper            
    load     i64       0                
    jumplt   i64       #1540            
#1538: 
    setcall      /1/1                   
    load     u64       t                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /2/1                   
    startmx                             
    load     i64       i                
    load     i64       0                
    jumpgt   i64       #1543            
    load     i64       prel             
    jumpf    i64       #1542            
#1543: 
    load     u64       "z9"             
    resetmx  u64                        
    jump               #1541            
#1542: 
    load     u64       ""               
    endmx    u64                        
#1541: 
    setarg   u64 /2                     
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       i                
    iloadx   i32 /4                     
    widen    i64/i32                    
    setarg   i64 /1                     
    callp        /2    &msysc.m$print_i64
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall  i64 /1/1                   
    load     u64       t                
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    load     u64 /1    &t               
    addpxto  u64 /1                     
    load     i64       expon            
    load     i64       i                
    jumpne   i64       #1545            
    load     i64       i                
    load     i64       upper            
    jumpge   i64       #1545            
    load     i64       showdot          
    jumpf    i64       #1545            
    load     u64       46               
    load     u64 /1    &t               
    loadincr u64 /1                     
    istore   u8                         
#1545: 
    forup    i64 /1    #1538            
    opnd     i64       i                
    opnd     i64       upper            
#1540: 
    load     i64       expon            
    load     i64       upper            
    sub      i64                        
    store    i64       av_4             
    load     i64       av_4             
    load     i64       0                
    jumple   i64       #1548            
#1546: 
    load     i64       9                
    store    i64       av_3             
#1549: 
    load     u64       48               
    load     u64 /1    &t               
    loadincr u64 /1                     
    istore   u8                         
    to       i64       #1549            
    opnd     i64       av_3             
    to       i64       #1546            
    opnd     i64       av_4             
#1548: 
    load     i64       expon            
    load     i64       upper            
    jumplt   i64       #1553            
    load     i64       showdot          
    jumpf    i64       #1553            
    load     u64       46               
    load     u64 /1    &t               
    loadincr u64 /1                     
    istore   u8                         
    load     u64       48               
    load     u64 /1    &t               
    loadincr u64 /1                     
    istore   u8                         
#1553: 
    load     u64       0                
    load     u64       t                
    istore   u8                         
    load     u64       s                
    jumpret  u64       #1521            
#1521: 
    retfn    u64                        
endproc

proc qq_decimal.strvaln:
    param    u64       s
    param    i64       n
    local    i64       a
    local    i64       av_1
    rettype  i64
    load     i64       0                
    store    i64       a                
    load     i64       n                
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #1557            
#1555: 
    load     u64       s                
    iload    u8                         
    widen    u64/u8                     
    load     u64       95               
    jumpeq   u64       #1559            
    load     i64       a                
    load     i64       10               
    mul      i64                        
    load     u64       s                
    iload    u8                         
    widen    i64/u8                     
    add      i64                        
    load     i64       48               
    sub      i64                        
    store    i64       a                
#1559: 
    load     u64 /1    &s               
    incrto   u64 /1                     
    to       i64       #1555            
    opnd     i64       av_1             
#1557: 
    load     i64       a                
    jumpret  i64       #1554            
#1554: 
    retfn    i64                        
endproc

proc qq_decimal.bn_isint:
    param    u64       a
    rettype  i64
    load     u64       a                
    load     i64       16               
    iloadx   i64 /1                     
    load     u64       a                
    load     i64       28               
    iloadx   i32 /1                     
    widen    i64/i32                    
    load     i64       1                
    add      i64                        
    setle    i64                        
    jumpret  i64       #1560            
#1560: 
    retfn    i64                        
endproc

proc qq_decimal.obj_len_dec:
    param    u64       a
    rettype  i64
    setcall  i64 /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /1    &qq_decimal.bn_getprec
    jumpret  i64       #1561            
    setcall  i64 /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /1    &qq_decimal.bn_isint
    jumpt    i64       #1563            
    load     i64       0                
    jumpret  i64       #1561            
#1563: 
    setcall  i64 /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /1    &qq_decimal.bn_iszero
    jumpf    i64       #1565            
    load     i64       1                
    jumpret  i64       #1561            
#1565: 
    setcall  i64 /1                     
    setcall  u64 /2                     
    load     u64       0                
    setarg   u64 /2                     
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   i32 /4                     
    widen    i64/i32                    
    setarg   i64 /1                     
    callf    u64 /2    &msysc.strint    
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    load     u64       a                
    load     i64       28               
    iloadx   i32 /1                     
    widen    i64/i32                    
    load     i64       9                
    mul      i64                        
    add      i64                        
    jumpret  i64       #1561            
#1561: 
    retfn    i64                        
endproc

proc qq_decimal.bn_iszero:
    param    u64       a
    rettype  i64
    load     u64       a                
    load     i64       26               
    iloadx   i16 /1                     
    widen    i64/i16                    
    load     i64       0                
    seteq    i64                        
    jumpret  i64       #1566            
#1566: 
    retfn    i64                        
endproc

proc qq_decimal.var_equal_dec:
    param    u64       a
    param    u64       b
    rettype  i64
    setcall  i64 /2/1                   
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /2    &qq_decimal.bn_equal
    jumpret  i64       #1567            
#1567: 
    retfn    i64                        
endproc

proc qq_decimal.var_add_dec:
    param    u64       a
    param    u64       b
    local    u64       dest
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_decimal.bn_init
    store    u64       dest             
    setcall  i64 /3/1                   
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /3                     
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callf    i64 /3    &qq_decimal.bn_add
    unload   i64                        
    load     u64       dest             
    load     u64       a                
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_decimal.var_sub_dec:
    param    u64       a
    param    u64       b
    local    u64       dest
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_decimal.bn_init
    store    u64       dest             
    setcall  i64 /3/1                   
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /3                     
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callf    i64 /3    &qq_decimal.bn_sub
    unload   i64                        
    load     u64       dest             
    load     u64       a                
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_decimal.var_mul_dec:
    param    u64       a
    param    u64       b
    local    u64       dest
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_decimal.bn_init
    store    u64       dest             
    setcall  i64 /3/1                   
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /3                     
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callf    i64 /3    &qq_decimal.bn_mul
    unload   i64                        
    load     u64       dest             
    load     u64       a                
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_decimal.var_div_dec:
    param    u64       a
    param    u64       b
    local    u64       dest
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_decimal.bn_init
    store    u64       dest             
    setcall  i64 /4/1                   
    load     i64       0                
    setarg   i64 /4                     
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /3                     
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callf    i64 /4    &qq_decimal.bn_div
    unload   i64                        
    load     u64       dest             
    load     u64       a                
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_decimal.var_idiv_dec:
    param    u64       a
    param    u64       b
    local    u64       dest
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_decimal.bn_init
    store    u64       dest             
    setcall  i64 /3/1                   
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /3                     
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callf    i64 /3    &qq_decimal.bn_idiv
    unload   i64                        
    load     u64       dest             
    load     u64       a                
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_decimal.var_irem_dec:
    param    u64       a
    param    u64       b
    local    u64       dest
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_decimal.bn_init
    store    u64       dest             
    setcall  i64 /3/1                   
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /3                     
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callf    i64 /3    &qq_decimal.bn_irem
    unload   i64                        
    load     u64       dest             
    load     u64       a                
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_decimal.var_neg_dec:
    param    u64       a
    setcall      /1/1                   
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_negto
    retproc                             
endproc

proc qq_decimal.var_abs_dec:
    param    u64       a
    setcall      /1/1                   
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_absto
    retproc                             
endproc

proc qq_decimal.var_compare_dec:
    param    u64       a
    param    u64       b
    rettype  i64
    setcall  i64 /2/1                   
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /2    &qq_decimal.bn_cmp
    jumpret  i64       #1576            
#1576: 
    retfn    i64                        
endproc

proc qq_decimal.bn_cmp:
    param    u64       a
    param    u64       b
    local    u64       d
    local    i64       neg
    rettype  i64
    setcall  i64 /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /2    &qq_decimal.bn_equal
    jumpf    i64       #1579            
    load     i64       0                
    jumpret  i64       #1577            
#1579: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_decimal.bn_init
    store    u64       d                
    setcall  i64 /3/1                   
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       d                
    setarg   u64 /1                     
    callf    i64 /3    &qq_decimal.bn_sub
    unload   i64                        
    load     u64       d                
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       neg              
    setcall      /1/1                   
    load     u64       d                
    setarg   u64 /1                     
    callp        /1    &qq_decimal.obj_free_dec
    startmx                             
    load     i64       neg              
    jumpf    i64       #1581            
    load     i64       -1               
    resetmx  i64                        
    jump               #1580            
#1581: 
    load     i64       1                
    endmx    i64                        
#1580: 
    jumpret  i64       #1577            
#1577: 
    retfn    i64                        
endproc

proc qq_decimal.bn_equal:
    param    u64       a
    param    u64       b
    rettype  i64
    load     u64       a                
    load     i64       26               
    iloadx   i16 /1                     
    widen    i64/i16                    
    load     i64       1                
    jumpeq   i64       #1584            
    load     u64       a                
    load     i64       26               
    iloadx   i16 /1                     
    widen    i64/i16                    
    load     u64       b                
    load     i64       26               
    iloadx   i16 /1                     
    widen    i64/i16                    
    jumpne   i64       #1584            
    load     u64       a                
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    load     u64       b                
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    seteq    i64                        
    jumpret  i64       #1582            
#1584: 
    load     u64       a                
    load     i64       16               
    iloadx   i64 /1                     
    load     u64       b                
    load     i64       16               
    iloadx   i64 /1                     
    jumpne   i64       #1587            
    load     u64       a                
    load     i64       26               
    iloadx   i16 /1                     
    widen    i64/i16                    
    load     u64       b                
    load     i64       26               
    iloadx   i16 /1                     
    widen    i64/i16                    
    jumpne   i64       #1587            
    load     u64       a                
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    load     u64       b                
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    jumpne   i64       #1587            
    load     u64       a                
    load     i64       28               
    iloadx   i32 /1                     
    widen    i64/i32                    
    load     u64       b                
    load     i64       28               
    iloadx   i32 /1                     
    widen    i64/i32                    
    jumpeq   i64       #1586            
#1587: 
    load     i64       0                
    jumpret  i64       #1582            
#1586: 
    load     u64       a                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       0                
    jumpne   i64       #1589            
    load     i64       1                
    jumpret  i64       #1582            
#1589: 
    setcall  i64 /3/1                   
    load     u64       a                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       4                
    mul      i64                        
    setarg   i64 /3                     
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /3    &mlib.eqbytes    
    jumpret  i64       #1582            
#1582: 
    retfn    i64                        
endproc

proc qq_decimal.bn_add:
    param    u64       dest
    param    u64       a
    param    u64       b
    local    i64       nega
    local    i64       negb
    rettype  i64
    setcall  i64 /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /2    &qq_decimal.getbintype
    load     i64       1                
    jumpeq   i64 /1    #1592            
    load     i64       2                
    jumpeq   i64 /1    #1593            
    load     i64       5                
    jumpeq   i64 /1    #1594            
    load     i64       7                
    jumpeq   i64       #1595            
    jump               #1596            
#1592: 
    jump               #1591            
#1593: 
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_setzero
    load     i64       1                
    jumpret  i64       #1590            
    jump               #1591            
#1594: 
    setcall      /2/1                   
    load     u64       a                
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /2    &qq_decimal.bn_dupl
    load     i64       1                
    jumpret  i64       #1590            
    jump               #1591            
#1595: 
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /2    &qq_decimal.bn_dupl
    load     i64       1                
    jumpret  i64       #1590            
    jump               #1591            
#1596: 
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_setnan
    load     i64       0                
    jumpret  i64       #1590            
#1591: 
    load     u64       a                
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       nega             
    load     u64       b                
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       negb             
    load     i64       nega             
    jumpt    i64       #1598            
    load     i64       negb             
    jumpt    i64       #1598            
    setcall      /3/1                   
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_decimal.bn_addu
    jump               #1597            
#1598: 
    load     i64       nega             
    jumpf    i64       #1599            
    load     i64       negb             
    jumpf    i64       #1599            
    setcall      /3/1                   
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_decimal.bn_addu
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_negto
    jump               #1597            
#1599: 
    load     i64       nega             
    jumpt    i64       #1600            
    load     i64       negb             
    jumpf    i64       #1600            
    setcall      /3/1                   
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_decimal.bn_subu
    jump               #1597            
#1600: 
    setcall      /3/1                   
    load     u64       a                
    setarg   u64 /3                     
    load     u64       b                
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_decimal.bn_subu
#1597: 
    load     i64       1                
    jumpret  i64       #1590            
#1590: 
    retfn    i64                        
endproc

proc qq_decimal.bn_sub:
    param    u64       dest
    param    u64       a
    param    u64       b
    local    i64       nega
    local    i64       negb
    rettype  i64
    setcall  i64 /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /2    &qq_decimal.getbintype
    load     i64       1                
    jumpeq   i64 /1    #1603            
    load     i64       2                
    jumpeq   i64 /1    #1604            
    load     i64       5                
    jumpeq   i64 /1    #1605            
    load     i64       7                
    jumpeq   i64       #1606            
    jump               #1607            
#1603: 
    jump               #1602            
#1604: 
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_setzero
    load     i64       1                
    jumpret  i64       #1601            
    jump               #1602            
#1605: 
    setcall      /2/1                   
    load     u64       a                
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /2    &qq_decimal.bn_dupl
    load     i64       1                
    jumpret  i64       #1601            
    jump               #1602            
#1606: 
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /2    &qq_decimal.bn_dupl
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_negto
    load     i64       1                
    jumpret  i64       #1601            
    jump               #1602            
#1607: 
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_setnan
    load     i64       0                
    jumpret  i64       #1601            
#1602: 
    load     u64       a                
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       nega             
    load     u64       b                
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       negb             
    load     i64       nega             
    jumpt    i64       #1609            
    load     i64       negb             
    jumpt    i64       #1609            
    setcall      /3/1                   
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_decimal.bn_subu
    jump               #1608            
#1609: 
    load     i64       nega             
    jumpf    i64       #1610            
    load     i64       negb             
    jumpf    i64       #1610            
    setcall      /3/1                   
    load     u64       a                
    setarg   u64 /3                     
    load     u64       b                
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_decimal.bn_subu
    jump               #1608            
#1610: 
    load     i64       nega             
    jumpt    i64       #1611            
    load     i64       negb             
    jumpf    i64       #1611            
    setcall      /3/1                   
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_decimal.bn_addu
    jump               #1608            
#1611: 
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /2    &qq_decimal.bn_dupl
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_negto
    setcall  i64 /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callf    i64 /3    &qq_decimal.bn_add
    unload   i64                        
#1608: 
    load     i64       1                
    jumpret  i64       #1601            
#1601: 
    retfn    i64                        
endproc

proc qq_decimal.bn_addu:
    param    u64       dest
    param    u64       a
    param    u64       b
    local    i64       preca
    local    i64       precb
    local    i64       precc
    local    i64       uppera
    local    i64       upperb
    local    i64       upperc
    local    i64       offset
    local    i64       carry
    local    i64       expona
    local    i64       exponb
    local    i64       dc
    local    u64       j
    local    u64       pa
    local    u64       pb
    local    u64       pax
    local    u64       pbx
    local    u64       c
    local    u64       c2
    local    i64       i
    load     u64       a                
    load     i64       28               
    iloadx   i32 /1                     
    widen    i64/i32                    
    load     u64       b                
    load     i64       28               
    iloadx   i32 /1                     
    widen    i64/i32                    
    jumpge   i64       #1614            
    load     u64 /1    &a               
    load     u64 /1    &b               
    iswap    u64                        
#1614: 
    load     u64       a                
    load     i64       28               
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       expona           
    load     u64       b                
    load     i64       28               
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       exponb           
    load     u64       a                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       preca            
    load     u64       b                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       precb            
    load     i64       expona           
    load     i64       exponb           
    sub      i64                        
    store    i64       offset           
    load     i64       preca            
    load     i64       1                
    sub      i64                        
    store    i64       uppera           
    load     i64       precb            
    load     i64       1                
    sub      i64                        
    store    i64       upperb           
    load     i64       uppera           
    load     i64       upperb           
    load     i64       offset           
    add      i64                        
    jumple   i64       #1616            
    load     i64       uppera           
    store    i64       upperc           
    jump               #1615            
#1616: 
    load     i64       upperb           
    load     i64       offset           
    add      i64                        
    store    i64       upperc           
#1615: 
    load     i64       upperc           
    load     i64       1                
    add      i64                        
    store    i64       precc            
    setcall  u64 /1/1                   
    load     i64       precc            
    setarg   i64 /1                     
    callf    u64 /1    &qq_decimal.makesmallnum
    store    u64       c                
    load     i64       0                
    store    i64       carry            
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pa               
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pb               
    load     i64       upperc           
    store    i64       i                
    load     i64       i                
    load     i64       0                
    jumplt   i64       #1619            
#1617: 
    load     i64       i                
    load     i64       offset           
    sub      u64                        
    store    u64       j                
    load     i64       i                
    load     i64       uppera           
    jumpgt   i64       #1621            
    load     u64       j                
    load     i64       upperb           
    jumpgt   u64       #1621            
    load     u64       pa               
    load     i64       i                
    iloadx   i32 /4                     
    widen    i64/i32                    
    load     u64       pb               
    load     u64       j                
    iloadx   i32 /4                     
    widen    i64/i32                    
    add      i64                        
    load     i64       carry            
    add      i64                        
    store    i64       dc               
    jump               #1620            
#1621: 
    load     i64       i                
    load     i64       uppera           
    jumpgt   i64       #1622            
    load     u64       pa               
    load     i64       i                
    iloadx   i32 /4                     
    widen    i64/i32                    
    load     i64       carry            
    add      i64                        
    store    i64       dc               
    jump               #1620            
#1622: 
    load     u64       j                
    load     i64       upperb           
    jumpgt   u64       #1623            
    load     u64       pb               
    load     u64       j                
    iloadx   i32 /4                     
    widen    i64/i32                    
    load     i64       carry            
    add      i64                        
    store    i64       dc               
    jump               #1620            
#1623: 
    load     i64       carry            
    store    i64       dc               
#1620: 
    load     i64       dc               
    load     i64       1000000000       
    jumplt   i64       #1625            
    load     i64       1                
    store    i64       carry            
    load     i64       dc               
    load     i64       1000000000       
    sub      i64                        
    load     u64       c                
    load     i64       i                
    istorex  i32 /4                     
    jump               #1624            
#1625: 
    load     i64       dc               
    load     u64       c                
    load     i64       i                
    istorex  i32 /4                     
    load     i64       0                
    store    i64       carry            
#1624: 
    fordown  i64 /1    #1617            
    opnd     i64       i                
    opnd     i64       0                
#1619: 
    load     i64       carry            
    jumpf    i64       #1627            
    setcall  u64 /1/1                   
    load     i64       precc            
    load     i64       1                
    add      i64                        
    setarg   i64 /1                     
    callf    u64 /1    &qq_decimal.makesmallnum
    store    u64       c2               
    load     i64       carry            
    load     u64       c2               
    istore   i32                        
    setcall      /3/1                   
    load     i64       precc            
    load     i64       4                
    mul      u64                        
    setarg   u64 /3                     
    load     u64       c                
    setarg   u64 /2                     
    load     u64       c2               
    load     i64       1                
    addpx    u64 /4                     
    setarg   u64 /1                     
    callp        /3    &memcpy          
    setcall      /2/1                   
    load     i64       precc            
    setarg   i64 /2                     
    load     u64       c                
    setarg   u64 /1                     
    callp        /2    &qq_decimal.freesmall
    load     u64       c2               
    store    u64       c                
    load     u64 /1    &precc           
    incrto   i64 /1                     
#1627: 
    setcall  u64 /5/1                   
    load     i64       0                
    setarg   i64 /5                     
    load     i64       precc            
    setarg   i64 /4                     
    load     i64       precc            
    setarg   i64 /3                     
    load     u64       c                
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callf    u64 /5    &qq_decimal.smalltobig
    unload   u64                        
    load     i64       expona           
    load     i64       carry            
    add      i64                        
    load     u64       dest             
    load     i64       28               
    istorex  i32 /1                     
    retproc                             
endproc

proc qq_decimal.bn_subu:
    param    u64       dest
    param    u64       a
    param    u64       b
    local    i64       preca
    local    i64       precb
    local    i64       precc
    local    i64       uppera
    local    i64       upperb
    local    i64       upperc
    local    i64       offset
    local    i64       carry
    local    i64       expona
    local    i64       da
    local    i64       db
    local    i64       dc
    local    i64       isneg
    local    i64       z
    local    i64       newprec
    local    i64       diff
    local    u64       j
    local    u64       pa
    local    u64       pb
    local    u64       c
    local    i64       i
    load     i64       0                
    store    i64       isneg            
    load     u64       a                
    load     i64       28               
    iloadx   i32 /1                     
    widen    i64/i32                    
    load     u64       b                
    load     i64       28               
    iloadx   i32 /1                     
    widen    i64/i32                    
    jumpge   i64       #1630            
    load     u64 /1    &a               
    load     u64 /1    &b               
    iswap    u64                        
    load     i64       1                
    store    i64       isneg            
#1630: 
! qq_decimal.bn_subu.retry:
#1631: 
    load     u64       a                
    load     i64       28               
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       expona           
    load     u64       a                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       preca            
    load     u64       b                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       precb            
    load     i64       expona           
    load     u64       b                
    load     i64       28               
    iloadx   i32 /1                     
    widen    i64/i32                    
    sub      i64                        
    store    i64       offset           
    load     i64       preca            
    load     i64       1                
    sub      i64                        
    store    i64       uppera           
    load     i64       precb            
    load     i64       1                
    sub      i64                        
    store    i64       upperb           
    load     i64       uppera           
    load     i64       upperb           
    load     i64       offset           
    add      i64                        
    jumple   i64       #1633            
    load     i64       uppera           
    store    i64       upperc           
    jump               #1632            
#1633: 
    load     i64       upperb           
    load     i64       offset           
    add      i64                        
    store    i64       upperc           
#1632: 
    load     i64       upperc           
    load     i64       1                
    add      i64                        
    store    i64       precc            
    setcall  u64 /1/1                   
    load     i64       precc            
    setarg   i64 /1                     
    callf    u64 /1    &qq_decimal.makesmallnum
    store    u64       c                
    load     i64       0                
    store    i64       carry            
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pa               
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pb               
    load     i64       upperc           
    store    i64       i                
    load     i64       i                
    load     i64       0                
    jumplt   i64       #1636            
#1634: 
    load     i64       i                
    load     i64       offset           
    sub      u64                        
    store    u64       j                
    load     i64       i                
    load     i64       uppera           
    jumpgt   i64       #1638            
    load     u64       j                
    load     i64       upperb           
    jumpgt   u64       #1638            
    load     u64       pa               
    load     i64       i                
    iloadx   i32 /4                     
    widen    i64/i32                    
    load     u64       pb               
    load     u64       j                
    iloadx   i32 /4                     
    widen    i64/i32                    
    sub      i64                        
    load     i64       carry            
    sub      i64                        
    store    i64       diff             
    jump               #1637            
#1638: 
    load     i64       i                
    load     i64       uppera           
    jumpgt   i64       #1639            
    load     u64       pa               
    load     i64       i                
    iloadx   i32 /4                     
    widen    i64/i32                    
    load     i64       carry            
    sub      i64                        
    store    i64       diff             
    jump               #1637            
#1639: 
    load     u64       j                
    load     i64       upperb           
    jumpgt   u64       #1640            
    load     u64       pb               
    load     u64       j                
    iloadx   i32 /4                     
    widen    i64/i32                    
    neg      i64                        
    load     i64       carry            
    sub      i64                        
    store    i64       diff             
    jump               #1637            
#1640: 
    load     i64       carry            
    neg      i64                        
    store    i64       diff             
#1637: 
    load     i64       diff             
    load     i64       0                
    jumpge   i64       #1642            
    load     i64       1                
    store    i64       carry            
    load     i64       diff             
    load     i64       1000000000       
    add      i64                        
    load     u64       c                
    load     i64       i                
    istorex  i32 /4                     
    jump               #1641            
#1642: 
    load     i64       diff             
    load     u64       c                
    load     i64       i                
    istorex  i32 /4                     
    load     i64       0                
    store    i64       carry            
#1641: 
    fordown  i64 /1    #1634            
    opnd     i64       i                
    opnd     i64       0                
#1636: 
    load     i64       carry            
    jumpf    i64       #1644            
    load     i64       isneg            
    jumpf    i64       #1646            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "SUBU/CARRY"     
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1646: 
    load     u64 /1    &a               
    load     u64 /1    &b               
    iswap    u64                        
    load     i64       1                
    store    i64       isneg            
    setcall      /2/1                   
    load     i64       precc            
    setarg   i64 /2                     
    load     u64       c                
    setarg   u64 /1                     
    callp        /2    &qq_decimal.freesmall
    jump               #1631            
#1644: 
    setcall  u64 /5/1                   
    load     i64       0                
    setarg   i64 /5                     
    load     i64       precc            
    setarg   i64 /4                     
    load     i64       precc            
    setarg   i64 /3                     
    load     u64       c                
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callf    u64 /5    &qq_decimal.smalltobig
    unload   u64                        
    load     i64       isneg            
    load     u64       dest             
    load     i64       24               
    istorex  i16 /1                     
    load     i64       expona           
    load     i64       qq_decimal.stblz 
    sub      i64                        
    load     u64       dest             
    load     i64       28               
    istorex  i32 /1                     
    retproc                             
endproc

proc qq_decimal.makebignum:
    param    i64       length
    local    u64       a
    rettype  u64
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_vars.obj_new 
    store    u64       a                
    load     i64       length           
    jumpf    i64       #1649            
    setcall  u64 /1/1                   
    load     i64       length           
    load     i64       4                
    mul      i64                        
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    load     u64       a                
    load     i64       8                
    istorex  u64 /1                     
    load     i64       1                
    load     u64       a                
    load     i64       26               
    istorex  i16 /1                     
    jump               #1648            
#1649: 
    load     u64       0                
    load     u64       a                
    load     i64       8                
    istorex  u64 /1                     
    load     i64       0                
    load     u64       a                
    load     i64       26               
    istorex  i16 /1                     
#1648: 
    load     i64       length           
    load     u64       a                
    load     i64       16               
    istorex  i64 /1                     
    load     i64       0                
    load     u64       a                
    load     i64       28               
    istorex  i32 /1                     
    load     i64       0                
    load     u64       a                
    load     i64       24               
    istorex  i16 /1                     
    load     u64       a                
    jumpret  u64       #1647            
#1647: 
    retfn    u64                        
endproc

proc qq_decimal.makesmallnum:
    param    i64       length
    rettype  u64
    setcall  u64 /1/1                   
    load     i64       length           
    load     i64       4                
    mul      i64                        
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    jumpret  u64       #1650            
#1650: 
    retfn    u64                        
endproc

proc qq_decimal.smalltobig:
    param    u64       c
    param    u64       a
    param    i64       length
    param    i64       alloc
    param    i64       offset
    local    u64       p
    local    i64       leadingzeros
    local    i64       trailingzeros
    local    i64       nonzeros
    local    i64       newlength
    local    i64       av_1
    rettype  u64
    setcall      /1/1                   
    load     u64       c                
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_setzero
    load     u64       a                
    store    u64       p                
    load     i64       0                
    double                              
    store    i64       nonzeros         
    double                              
    store    i64       trailingzeros    
    store    i64       leadingzeros     
    load     i64       length           
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #1654            
#1652: 
    load     u64 /1    &p               
    loadincr u64 /4                     
    iload    i32                        
    jumpf    i32       #1656            
    load     i64       1                
    store    i64       nonzeros         
    load     i64       0                
    store    i64       trailingzeros    
    jump               #1655            
#1656: 
    load     i64       nonzeros         
    jumpf    i64       #1658            
    load     u64 /1    &trailingzeros   
    incrto   i64 /1                     
    jump               #1657            
#1658: 
    load     u64 /1    &leadingzeros    
    incrto   i64 /1                     
#1657: 
#1655: 
    to       i64       #1652            
    opnd     i64       av_1             
#1654: 
    load     i64       leadingzeros     
    store    i64       qq_decimal.stblz 
    load     i64       nonzeros         
    jumpf    i64       #1660            
    load     i64       length           
    load     i64       trailingzeros    
    sub      i64                        
    load     i64       leadingzeros     
    sub      i64                        
    store    i64       newlength        
    load     i64       newlength        
    load     i64       length           
    swapstk      /1/2                   
    jumpne   i64 /1    #1662            
    load     i64       alloc            
    jumpne   i64       #1662            
    load     u64       a                
    load     u64       c                
    load     i64       8                
    istorex  u64 /1                     
    jump               #1661            
#1662: 
    setcall  u64 /1/1                   
    load     i64       newlength        
    setarg   i64 /1                     
    callf    u64 /1    &qq_decimal.makesmallnum
    load     u64       c                
    load     i64       8                
    istorex  u64 /1                     
    setcall      /3/1                   
    load     i64       newlength        
    load     i64       4                
    mul      u64                        
    setarg   u64 /3                     
    load     u64       a                
    load     i64       leadingzeros     
    addpx    u64 /4                     
    setarg   u64 /2                     
    load     u64       c                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &memcpy          
    setcall      /2/1                   
    load     i64       alloc            
    setarg   i64 /2                     
    load     u64       a                
    load     i64       offset           
    addpx    u64 /4                     
    setarg   u64 /1                     
    callp        /2    &qq_decimal.freesmall
#1661: 
    load     i64       newlength        
    load     u64       c                
    load     i64       16               
    istorex  i64 /1                     
    load     i64       1                
    load     u64       c                
    load     i64       26               
    istorex  i16 /1                     
    load     i64       length           
    load     i64       1                
    sub      i64                        
    load     i64       leadingzeros     
    sub      i64                        
    load     u64       c                
    load     i64       28               
    istorex  i32 /1                     
    jump               #1659            
#1660: 
    load     i64       alloc            
    jumpf    i64       #1663            
    setcall      /2/1                   
    load     i64       alloc            
    setarg   i64 /2                     
    load     u64       a                
    load     i64       offset           
    addpx    u64 /4                     
    setarg   u64 /1                     
    callp        /2    &qq_decimal.freesmall
#1663: 
#1659: 
    load     u64       c                
    jumpret  u64       #1651            
#1651: 
    retfn    u64                        
endproc

proc qq_decimal.freesmall:
    param    u64       p
    param    i64       length
    setcall      /2/1                   
    load     i64       length           
    load     i64       4                
    mul      i64                        
    setarg   i64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_free   
    retproc                             
endproc

proc qq_decimal.bn_init:
    local    u64       a
    rettype  u64
    setcall  u64 /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_decimal.makebignum
    store    u64       a                
    load     u64       a                
    jumpret  u64       #1665            
#1665: 
    retfn    u64                        
endproc

proc qq_decimal.bn_setzero:
    param    u64       a
    load     u64       a                
    jumpf    u64       #1668            
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    jumpf    u64       #1670            
    setcall      /2/1                   
    load     u64       a                
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &qq_decimal.freesmall
#1670: 
    load     u64       0                
    load     u64       a                
    load     i64       8                
    istorex  u64 /1                     
    load     i64       0                
    load     u64       a                
    load     i64       16               
    istorex  i64 /1                     
    load     i64       0                
    load     u64       a                
    load     i64       24               
    istorex  i16 /1                     
    load     i64       0                
    load     u64       a                
    load     i64       28               
    istorex  i32 /1                     
    load     i64       0                
    load     u64       a                
    load     i64       26               
    istorex  i16 /1                     
#1668: 
    retproc                             
endproc

proc qq_decimal.bn_move:
    param    u64       a
    param    u64       b
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_setzero
    load     u64       b                
    load     i64       8                
    iloadx   mem:24 /1                  
    load     u64       a                
    load     i64       8                
    istorex  mem:24 /1                  
    load     u64       b                
    load     i64       8                
    addpx    u64 /1                     
    clear    mem:24                     
    retproc                             
endproc

proc qq_decimal.bn_dupl:
    param    u64       a
    param    u64       b
    local    u64       c
    local    i64       size
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_decimal.bn_init
    store    u64       c                
    load     u64       b                
    iload    mem:32                     
    load     u64       c                
    istore   mem:32                     
    load     u64       c                
    load     i64       16               
    iloadx   i64 /1                     
    jumpf    i64       #1674            
    setcall  u64 /1/1                   
    load     u64       c                
    load     i64       16               
    iloadx   i64 /1                     
    double                              
    store    i64       size             
    setarg   i64 /1                     
    callf    u64 /1    &qq_decimal.makesmallnum
    load     u64       c                
    load     i64       8                
    istorex  u64 /1                     
    setcall      /3/1                   
    load     i64       size             
    load     i64       4                
    mul      u64                        
    setarg   u64 /3                     
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       c                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &memcpy          
#1674: 
    setcall      /2/1                   
    load     u64       c                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_decimal.bn_move
    setcall      /1/1                   
    load     u64       c                
    setarg   u64 /1                     
    callp        /1    &qq_decimal.obj_free_dec
    retproc                             
endproc

proc qq_decimal.bn_setinf:
    param    u64       dest
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_setzero
    load     i64       2                
    load     u64       dest             
    load     i64       26               
    istorex  i16 /1                     
    retproc                             
endproc

proc qq_decimal.bn_setnan:
    param    u64       dest
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_setzero
    load     i64       3                
    load     u64       dest             
    load     i64       26               
    istorex  i16 /1                     
    retproc                             
endproc

proc qq_decimal.var_setnan:
    param    u64       dest
    load     i64       259              
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    setcall  u64 /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_decimal.makebignum
    load     u64       dest             
    load     i64       8                
    istorex  u64 /1                     
    setcall      /1/1                   
    load     u64       dest             
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_setnan
    retproc                             
endproc

proc qq_decimal.var_setinf:
    param    u64       dest
    load     i64       259              
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    setcall  u64 /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_decimal.makebignum
    load     u64       dest             
    load     i64       8                
    istorex  u64 /1                     
    setcall      /1/1                   
    load     u64       dest             
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_setinf
    retproc                             
endproc

proc qq_decimal.getbintype:
    param    u64       a
    param    u64       b
    local    i64       atype
    local    i64       btype
    rettype  i64
    load     u64       a                
    load     i64       26               
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       atype            
    load     u64       b                
    load     i64       26               
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       btype            
    load     i64       atype            
    load     i64       3                
    jumpeq   i64       #1682            
    load     i64       btype            
    load     i64       3                
    jumpne   i64       #1681            
#1682: 
    load     i64       4                
    jumpret  i64       #1679            
#1681: 
    startmx                             
    load     i64       atype            
    load     i64       1                
    jumpeq   i64 /1    #1684            
    load     i64       0                
    jumpeq   i64       #1685            
    jump               #1686            
#1684: 
    startmx                             
    load     i64       btype            
    load     i64       1                
    jumpeq   i64 /1    #1688            
    load     i64       0                
    jumpeq   i64       #1689            
    jump               #1690            
#1688: 
    load     i64       1                
    resetmx  i64                        
    jump               #1687            
#1689: 
    load     i64       5                
    resetmx  i64                        
    jump               #1687            
#1690: 
    load     i64       6                
    endmx    i64                        
#1687: 
    resetmx  i64                        
    jump               #1683            
#1685: 
    startmx                             
    load     i64       btype            
    load     i64       1                
    jumpeq   i64 /1    #1692            
    load     i64       0                
    jumpeq   i64       #1693            
    jump               #1694            
#1692: 
    load     i64       7                
    resetmx  i64                        
    jump               #1691            
#1693: 
    load     i64       2                
    resetmx  i64                        
    jump               #1691            
#1694: 
    load     i64       9                
    endmx    i64                        
#1691: 
    resetmx  i64                        
    jump               #1683            
#1686: 
    startmx                             
    load     i64       btype            
    load     i64       1                
    jumpeq   i64 /1    #1696            
    load     i64       0                
    jumpeq   i64       #1697            
    jump               #1698            
#1696: 
    load     i64       8                
    resetmx  i64                        
    jump               #1695            
#1697: 
    load     i64       10               
    resetmx  i64                        
    jump               #1695            
#1698: 
    load     i64       3                
    endmx    i64                        
#1695: 
    endmx    i64                        
#1683: 
    jumpret  i64       #1679            
#1679: 
    retfn    i64                        
endproc

proc qq_decimal.bn_negto:
    param    u64       a
    setcall  i64 /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /1    &qq_decimal.bn_iszero
    jumpt    i64       #1701            
    load     u64       a                
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    toboolf  i64/i64                    
    load     u64       a                
    load     i64       24               
    istorex  i16 /1                     
#1701: 
    retproc                             
endproc

proc qq_decimal.bn_absto:
    param    u64       a
    load     i64       0                
    load     u64       a                
    load     i64       24               
    istorex  i16 /1                     
    retproc                             
endproc

proc qq_decimal.bn_mul:
    param    u64       dest
    param    u64       a
    param    u64       b
    local    i64       neg
    rettype  i64
    setcall  i64 /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /2    &qq_decimal.getbintype
    load     i64       1                
    jumpeq   i64 /1    #1705            
    load     i64       2                
    jumpeq   i64 /1    #1706            
    load     i64       5                
    jumpeq   i64 /1    #1706            
    load     i64       7                
    jumpeq   i64       #1706            
    jump               #1707            
#1705: 
    jump               #1704            
#1706: 
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_setzero
    load     i64       1                
    jumpret  i64       #1703            
    jump               #1704            
#1707: 
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_setnan
    load     i64       0                
    jumpret  i64       #1703            
#1704: 
    load     u64       a                
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    load     u64       b                
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    setne    i64                        
    store    i64       neg              
    setcall      /3/1                   
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_decimal.bn_mulu
    load     i64       neg              
    jumpf    i64       #1709            
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_negto
#1709: 
    load     i64       1                
    jumpret  i64       #1703            
#1703: 
    retfn    i64                        
endproc

proc qq_decimal.bn_mulp:
    param    u64       dest
    param    u64       a
    param    u64       b
    param    i64       prec
    local    i64       res
    rettype  i64
    setcall  i64 /3/1                   
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callf    i64 /3    &qq_decimal.bn_mul
    store    i64       res              
    load     i64       res              
    jumpf    i64       #1712            
    setcall      /2/1                   
    startmx                             
    load     i64       prec             
    load     i64       0                
    jumpne   i64       #1714            
    load     i64       qq_decimal.currprec
    resetmx  i64                        
    jump               #1713            
#1714: 
    load     i64       prec             
    endmx    i64                        
#1713: 
    setarg   i64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /2    &qq_decimal.bn_setprec
#1712: 
    load     i64       res              
    jumpret  i64       #1710            
#1710: 
    retfn    i64                        
endproc

proc qq_decimal.bn_mulu:
    param    u64       dest
    param    u64       a
    param    u64       b
    local    i64       uppera
    local    i64       upperb
    local    i64       upperc
    local    i64       precc
    local    i64       expona
    local    i64       exponb
    local    i64       ax
    local    i64       bx
    local    i64       cx
    local    i64       i
    local    i64       cx1
    local    i64       nc2
    local    i64       pd
    local    i64       pr
    local    i64       p
    local    i64       carry
    local    i64       x
    local    u64       d
    local    u64       c
    local    i64       pdquot
    local    i64       pdrem
    load     u64       a                
    load     i64       28               
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       expona           
    load     u64       b                
    load     i64       28               
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       exponb           
    load     u64       a                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       1                
    sub      i64                        
    store    i64       uppera           
    load     u64       b                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       1                
    sub      i64                        
    store    i64       upperb           
    load     i64       uppera           
    load     i64       upperb           
    add      i64                        
    load     i64       2                
    add      i64                        
    store    i64       precc            
    load     i64       precc            
    store    i64       nc2              
    setcall  u64 /1/1                   
    load     i64       nc2              
    setarg   i64 /1                     
    callf    u64 /1    &qq_decimal.makesmallnum
    store    u64       c                
    setcall      /3/1                   
    load     i64       precc            
    load     i64       4                
    mul      u64                        
    setarg   u64 /3                     
    load     i64       0                
    setarg   i32 /2                     
    load     u64       c                
    setarg   u64 /1                     
    callp        /3    &memset          
    load     i64       precc            
    load     i64       1                
    sub      i64                        
    store    i64       cx               
    load     i64       upperb           
    store    i64       bx               
    load     i64       bx               
    load     i64       0                
    jumplt   i64       #1718            
#1716: 
    load     i64       0                
    store    i64       carry            
    load     i64       cx               
    store    i64       cx1              
    load     i64       uppera           
    store    i64       ax               
    load     i64       ax               
    load     i64       0                
    jumplt   i64       #1721            
#1719: 
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       ax               
    iloadx   i32 /4                     
    widen    i64/i32                    
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       bx               
    iloadx   i32 /4                     
    widen    i64/i32                    
    mul      i64                        
    load     i64       carry            
    add      i64                        
    store    i64       p                
    load     i64       p                
    load     i64       1000000000       
    idiv     i64                        
    store    i64       pd               
    load     i64       p                
    load     i64       pd               
    load     i64       1000000000       
    mul      i64                        
    sub      i64                        
    store    i64       pr               
    load     u64       c                
    load     i64       cx1              
    iloadx   i32 /4                     
    widen    i64/i32                    
    load     i64       pr               
    add      i64                        
    store    i64       x                
    load     i64       x                
    load     i64       999999999        
    jumple   i64       #1723            
    load     i64       pd               
    load     i64       1                
    add      i64                        
    store    i64       carry            
    load     i64       x                
    load     i64       1000000000       
    sub      i64                        
    load     u64       c                
    load     u64 /1    &cx1             
    loaddecr i64 /1                     
    istorex  i32 /4                     
    jump               #1722            
#1723: 
    load     i64       pd               
    store    i64       carry            
    load     i64       x                
    load     u64       c                
    load     u64 /1    &cx1             
    loaddecr i64 /1                     
    istorex  i32 /4                     
#1722: 
    fordown  i64 /1    #1719            
    opnd     i64       ax               
    opnd     i64       0                
#1721: 
    load     i64       carry            
    load     u64       c                
    load     i64       cx1              
    istorex  i32 /4                     
    load     u64 /1    &cx              
    decrto   i64 /1                     
    fordown  i64 /1    #1716            
    opnd     i64       bx               
    opnd     i64       0                
#1718: 
    setcall  u64 /5/1                   
    load     i64       0                
    setarg   i64 /5                     
    load     i64       nc2              
    setarg   i64 /4                     
    load     i64       precc            
    setarg   i64 /3                     
    load     u64       c                
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callf    u64 /5    &qq_decimal.smalltobig
    unload   u64                        
    load     i64       expona           
    load     i64       exponb           
    add      i64                        
    load     i64       1                
    add      i64                        
    load     i64       qq_decimal.stblz 
    sub      i64                        
    load     u64       dest             
    load     i64       28               
    istorex  i32 /1                     
    retproc                             
endproc

proc qq_decimal.smallmulto:
    param    u64       p
    param    u64       q
    param    i64       plen
    param    i64       m
    local    u64       pp
    local    u64       qq
    local    i64       carry
    local    i64       d
    local    i64       av_1
    local    i64       av_2
    rettype  i64
    load     i64       m                
    load     i64       0                
    jumpeq   i64 /1    #1726            
    load     i64       1                
    jumpeq   i64       #1727            
    jump               #1728            
#1726: 
    load     i64       0                
    load     u64       p                
    istore   i32                        
    load     i64       1                
    jumpret  i64       #1724            
    jump               #1725            
#1727: 
    setcall      /3/1                   
    load     i64       plen             
    load     i64       4                
    mul      u64                        
    setarg   u64 /3                     
    load     u64       q                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     i64       plen             
    jumpret  i64       #1724            
    jump               #1725            
#1728: 
#1725: 
    load     u64       p                
    load     i64       plen             
    addpx    u64 /4                     
    load     i64       1                
    subpx    u64 /4                     
    store    u64       pp               
    load     u64       q                
    load     i64       plen             
    addpx    u64 /4                     
    load     i64       1                
    subpx    u64 /4                     
    store    u64       qq               
    load     i64       0                
    store    i64       carry            
    load     i64       plen             
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #1731            
#1729: 
    load     u64       qq               
    iload    i32                        
    widen    i64/i32                    
    load     i64       m                
    mul      i64                        
    load     i64       carry            
    add      i64                        
    store    i64       d                
    load     i64       d                
    load     i64       1000000000       
    irem     i64                        
    load     u64       pp               
    istore   i32                        
    load     i64       d                
    load     i64       1000000000       
    idiv     i64                        
    store    i64       carry            
    load     u64 /1    &qq              
    decrto   u64 /4                     
    load     u64 /1    &pp              
    decrto   u64 /4                     
    to       i64       #1729            
    opnd     i64       av_1             
#1731: 
    load     i64       carry            
    jumpf    i64       #1733            
    load     u64       p                
    load     i64       plen             
    addpx    u64 /4                     
    store    u64       pp               
    load     i64       plen             
    store    i64       av_2             
    load     i64       av_2             
    load     i64       0                
    jumple   i64       #1736            
#1734: 
    load     u64       pp               
    load     i64       1                
    subpx    u64 /4                     
    iload    i32                        
    load     u64       pp               
    istore   i32                        
    load     u64 /1    &pp              
    decrto   u64 /4                     
    to       i64       #1734            
    opnd     i64       av_2             
#1736: 
    load     i64       carry            
    load     u64       pp               
    istore   i32                        
    load     u64 /1    &plen            
    incrto   i64 /1                     
#1733: 
    load     i64       plen             
    jumpret  i64       #1724            
#1724: 
    retfn    i64                        
endproc

proc qq_decimal.bn_div:
    param    u64       dest
    param    u64       a
    param    u64       b
    param    i64       prec
    local    i64       neg
    rettype  i64
    setcall  i64 /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /2    &qq_decimal.getbintype
    load     i64       1                
    jumpeq   i64 /1    #1739            
    load     i64       7                
    jumpeq   i64 /1    #1740            
    load     i64       2                
    jumpeq   i64 /1    #1741            
    load     i64       5                
    jumpeq   i64       #1741            
    jump               #1742            
#1739: 
    jump               #1738            
#1740: 
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_setzero
    load     i64       1                
    jumpret  i64       #1737            
    jump               #1738            
#1741: 
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_setinf
    load     i64       0                
    jumpret  i64       #1737            
    jump               #1738            
#1742: 
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_setnan
    load     i64       0                
    jumpret  i64       #1737            
#1738: 
    load     u64       a                
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    load     u64       b                
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    setne    i64                        
    store    i64       neg              
    setcall      /4/1                   
    load     i64       prec             
    setarg   i64 /4                     
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /4    &qq_decimal.bn_fdivu
    load     i64       neg              
    jumpf    i64       #1744            
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_negto
#1744: 
    load     i64       1                
    jumpret  i64       #1737            
#1737: 
    retfn    i64                        
endproc

proc qq_decimal.bn_idiv:
    param    u64       dest
    param    u64       a
    param    u64       b
    local    i64       neg
    rettype  i64
    setcall  i64 /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /2    &qq_decimal.getbintype
    load     i64       1                
    jumpeq   i64 /1    #1747            
    load     i64       7                
    jumpeq   i64 /1    #1748            
    load     i64       2                
    jumpeq   i64 /1    #1749            
    load     i64       5                
    jumpeq   i64       #1749            
    jump               #1750            
#1747: 
    jump               #1746            
#1748: 
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_setzero
    load     i64       1                
    jumpret  i64       #1745            
    jump               #1746            
#1749: 
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_setinf
    load     i64       0                
    jumpret  i64       #1745            
    jump               #1746            
#1750: 
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_setnan
    load     i64       0                
    jumpret  i64       #1745            
#1746: 
    load     u64       a                
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    load     u64       b                
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    setne    i64                        
    store    i64       neg              
    setcall      /4/1                   
    load     u64       0                
    setarg   u64 /4                     
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /4    &qq_decimal.bn_idivu
    load     i64       neg              
    jumpf    i64       #1752            
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_negto
#1752: 
    load     i64       1                
    jumpret  i64       #1745            
#1745: 
    retfn    i64                        
endproc

proc qq_decimal.bn_idivrem:
    param    u64       dest
    param    u64       rm
    param    u64       a
    param    u64       b
    local    i64       nega
    local    i64       negb
    rettype  i64
    setcall  i64 /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /2    &qq_decimal.getbintype
    load     i64       1                
    jumpeq   i64 /1    #1755            
    load     i64       7                
    jumpeq   i64 /1    #1756            
    load     i64       2                
    jumpeq   i64 /1    #1757            
    load     i64       5                
    jumpeq   i64       #1757            
    jump               #1758            
#1755: 
    jump               #1754            
#1756: 
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_setzero
    setcall      /1/1                   
    load     u64       rm               
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_setzero
    load     i64       1                
    jumpret  i64       #1753            
    jump               #1754            
#1757: 
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_setinf
    setcall      /1/1                   
    load     u64       rm               
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_setzero
    load     i64       0                
    jumpret  i64       #1753            
    jump               #1754            
#1758: 
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_setnan
    load     i64       0                
    jumpret  i64       #1753            
#1754: 
    load     u64       a                
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       nega             
    load     u64       b                
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       negb             
    setcall      /4/1                   
    load     u64       rm               
    setarg   u64 /4                     
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /4    &qq_decimal.bn_idivu
    load     i64       nega             
    load     i64       negb             
    jumpeq   i64       #1760            
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_negto
#1760: 
    load     i64       nega             
    jumpf    i64       #1762            
    setcall      /1/1                   
    load     u64       rm               
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_negto
#1762: 
    load     i64       1                
    jumpret  i64       #1753            
#1753: 
    retfn    i64                        
endproc

proc qq_decimal.bn_irem:
    param    u64       dest
    param    u64       a
    param    u64       b
    local    u64       rm
    local    u64       d
    local    i64       nega
    rettype  i64
    setcall  i64 /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /2    &qq_decimal.getbintype
    load     i64       1                
    jumpeq   i64 /1    #1765            
    load     i64       7                
    jumpeq   i64 /1    #1766            
    load     i64       2                
    jumpeq   i64 /1    #1767            
    load     i64       5                
    jumpeq   i64       #1767            
    jump               #1768            
#1765: 
    jump               #1764            
#1766: 
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /2    &qq_decimal.bn_dupl
    load     i64       1                
    jumpret  i64       #1763            
    jump               #1764            
#1767: 
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_setinf
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_setzero
    load     i64       0                
    jumpret  i64       #1763            
    jump               #1764            
#1768: 
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_setnan
    load     i64       0                
    jumpret  i64       #1763            
#1764: 
    load     u64       a                
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       nega             
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_decimal.bn_init
    store    u64       d                
    setcall      /4/1                   
    load     u64       dest             
    setarg   u64 /4                     
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       d                
    setarg   u64 /1                     
    callp        /4    &qq_decimal.bn_idivu
    load     i64       nega             
    jumpf    i64       #1770            
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_negto
#1770: 
    setcall      /1/1                   
    load     u64       d                
    setarg   u64 /1                     
    callp        /1    &qq_decimal.obj_free_dec
    load     i64       1                
    jumpret  i64       #1763            
#1763: 
    retfn    i64                        
endproc

proc qq_decimal.bn_idivu:
    param    u64       dest
    param    u64       a
    param    u64       b
    param    u64       rm
    local    u64       c
    local    u64       x
    local    u64       e
    local    i64       expona
    local    i64       exponb
    local    i64       badjust
    local    i64       exponc
    local    i64       na
    local    i64       nb
    local    i64       nc
    local    i64       nx
    local    i64       ne
    local    i64       nx2
    local    i64       ne2
    local    i64       cx
    local    i64       nupper
    local    i64       uppera
    local    i64       upperb
    local    i64       upperc
    local    i64       n
    local    i64       k
    local    i64       nexta
    local    i64       xx
    local    i64       y
    local    u64       pa
    local    u64       pb
    local    u64       d
    local    i64       i
    load     u64       a                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       na               
    load     u64       b                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       nb               
    load     u64       a                
    load     i64       28               
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       expona           
    load     u64       b                
    load     i64       28               
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       exponb           
    load     i64       exponb           
    load     i64       1                
    add      i64                        
    load     i64       nb               
    sub      i64                        
    store    i64       badjust          
    load     i64       na               
    load     i64       expona           
    load     i64       1                
    add      i64                        
    jumpgt   i64       #1774            
    load     i64       nb               
    load     i64       exponb           
    load     i64       1                
    add      i64                        
    jumple   i64       #1773            
#1774: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "idivu:a or b not int"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1773: 
    load     i64       expona           
    load     i64       1                
    add      i64                        
    store    i64       nc               
    load     i64       expona           
    load     i64       exponb           
    jumpge   i64       #1776            
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_setzero
    load     u64       rm               
    jumpf    u64       #1778            
    setcall      /2/1                   
    load     u64       a                
    setarg   u64 /2                     
    load     u64       rm               
    setarg   u64 /1                     
    callp        /2    &qq_decimal.bn_dupl
#1778: 
    jump               #1771            
#1776: 
    load     i64       na               
    load     i64       1                
    sub      i64                        
    store    i64       uppera           
    load     i64       nb               
    load     i64       1                
    sub      i64                        
    store    i64       upperb           
    load     i64       nc               
    load     i64       1                
    sub      i64                        
    store    i64       upperc           
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pa               
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pb               
    load     i64       nb               
    store    i64       n                
    setcall  u64 /1/1                   
    load     i64       n                
    load     i64       1                
    add      i64                        
    double                              
    store    i64       nx2              
    setarg   i64 /1                     
    callf    u64 /1    &qq_decimal.makesmallnum
    store    u64       x                
    load     i64       n                
    store    i64       nx               
    load     i64       nc               
    load     i64       badjust          
    sub      i64                        
    store    i64       nupper           
    load     i64       0                
    store    i64       i                
    load     i64       upperb           
    load     i64       0                
    jumplt   i64       #1781            
#1779: 
    load     i64       i                
    load     i64       uppera           
    jumpgt   i64       #1783            
    load     u64       pa               
    load     i64       i                
    iloadx   i32 /4                     
    load     u64       x                
    load     i64       i                
    istorex  i32 /4                     
    jump               #1782            
#1783: 
    load     i64       0                
    load     u64       x                
    load     i64       i                
    istorex  i32 /4                     
#1782: 
    forup    i64 /1    #1779            
    opnd     i64       i                
    opnd     i64       upperb           
#1781: 
    setcall  u64 /1/1                   
    load     i64       nc               
    setarg   i64 /1                     
    callf    u64 /1    &qq_decimal.makesmallnum
    store    u64       c                
    load     i64       0                
    store    i64       cx               
#1784: 
    setcall  i64 /4/1                   
    load     i64       nb               
    setarg   i64 /4                     
    load     u64       &nx              
    setarg   u64 /3                     
    load     u64       pb               
    setarg   u64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callf    i64 /4    &qq_decimal.smalldiv
    store    i64       k                
    load     i64       k                
    load     u64       c                
    load     u64 /1    &cx              
    loadincr i64 /1                     
    istorex  i32 /4                     
    load     i64       n                
    load     i64       nupper           
    jumplt   i64       #1787            
    jump               #1785            
#1787: 
    startmx                             
    load     i64       n                
    load     i64       uppera           
    jumple   i64       #1789            
    load     i64       0                
    resetmx  i64                        
    jump               #1788            
#1789: 
    load     u64       pa               
    load     i64       n                
    iloadx   i32 /4                     
    widen    i64/i32                    
    endmx    i64                        
#1788: 
    store    i64       nexta            
    load     u64 /1    &n               
    incrto   i64 /1                     
    load     i64       nx               
    load     i64       1                
    jumpne   i64       #1791            
    load     u64       x                
    iload    i32                        
    widen    i64/i32                    
    load     i64       0                
    jumpne   i64       #1791            
    load     i64       nexta            
    load     u64       x                
    istore   i32                        
    jump               #1790            
#1791: 
    load     i64       nexta            
    load     u64       x                
    load     i64       nx               
    istorex  i32 /4                     
    load     u64 /1    &nx              
    incrto   i64 /1                     
#1790: 
    jump               #1784            
#1785: 
    load     u64       rm               
    jumpf    u64       #1793            
    load     i64       exponb           
    load     i64       nb               
    jumpge   i64       #1793            
    setcall  u64 /5/1                   
    load     i64       0                
    setarg   i64 /5                     
    load     i64       nx2              
    setarg   i64 /4                     
    load     i64       nx               
    setarg   i64 /3                     
    load     u64       x                
    setarg   u64 /2                     
    load     u64       rm               
    setarg   u64 /1                     
    callf    u64 /5    &qq_decimal.smalltobig
    unload   u64                        
    jump               #1792            
#1793: 
    setcall      /2/1                   
    load     i64       nx2              
    setarg   i64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callp        /2    &qq_decimal.freesmall
#1792: 
    load     i64       cx               
    load     i64       1                
    jumpne   i64       #1795            
    load     u64       c                
    iload    i32                        
    widen    i64/i32                    
    load     i64       0                
    jumpne   i64       #1795            
    setcall      /2/1                   
    load     i64       nc               
    setarg   i64 /2                     
    load     u64       c                
    setarg   u64 /1                     
    callp        /2    &qq_decimal.freesmall
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_setzero
    load     u64       rm               
    jumpf    u64       #1797            
    setcall      /2/1                   
    load     u64       a                
    setarg   u64 /2                     
    load     u64       rm               
    setarg   u64 /1                     
    callp        /2    &qq_decimal.bn_dupl
#1797: 
    jump               #1771            
#1795: 
    load     u64       c                
    iload    i32                        
    widen    i64/i32                    
    load     i64       0                
    jumpne   i64       #1799            
    load     i64       cx               
    load     i64       2                
    jumplt   i64       #1799            
    setcall  u64 /5/1                   
    load     i64       -1               
    setarg   i64 /5                     
    load     i64       nc               
    setarg   i64 /4                     
    load     i64       cx               
    load     i64       1                
    sub      i64                        
    setarg   i64 /3                     
    load     u64       c                
    load     i64       1                
    addpx    u64 /4                     
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callf    u64 /5    &qq_decimal.smalltobig
    unload   u64                        
    jump               #1798            
#1799: 
    setcall  u64 /5/1                   
    load     i64       0                
    setarg   i64 /5                     
    load     i64       nc               
    setarg   i64 /4                     
    load     i64       cx               
    setarg   i64 /3                     
    load     u64       c                
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callf    u64 /5    &qq_decimal.smalltobig
    unload   u64                        
#1798: 
    load     u64       rm               
    jumpf    u64       #1801            
    load     i64       exponb           
    load     i64       nb               
    jumplt   i64       #1801            
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_decimal.bn_init
    store    u64       d                
    setcall      /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     u64       b                
    setarg   u64 /2                     
    load     u64       d                
    setarg   u64 /1                     
    callp        /3    &qq_decimal.bn_mulu
    setcall      /3/1                   
    load     u64       d                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       rm               
    setarg   u64 /1                     
    callp        /3    &qq_decimal.bn_subu
    setcall      /1/1                   
    load     u64       d                
    setarg   u64 /1                     
    callp        /1    &qq_decimal.obj_free_dec
#1801: 
#1771: 
    retproc                             
endproc

proc qq_decimal.bn_fdivu:
    param    u64       dest
    param    u64       a
    param    u64       b
    param    i64       precision
    local    u64       c
    local    u64       x
    local    u64       e
    local    i64       expona
    local    i64       exponb
    local    i64       badjust
    local    i64       exponc
    local    i64       na
    local    i64       nb
    local    i64       nc
    local    i64       nx
    local    i64       ne
    local    i64       nx2
    local    i64       ne2
    local    i64       cx
    local    i64       nupper
    local    i64       nc2
    local    i64       uppera
    local    i64       upperb
    local    i64       upperc
    local    i64       n
    local    i64       k
    local    i64       nexta
    local    i64       xx
    local    i64       y
    local    u64       pa
    local    u64       pb
    local    i64       i
    load     u64       a                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       na               
    load     u64       b                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       nb               
    load     u64       a                
    load     i64       28               
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       expona           
    load     u64       b                
    load     i64       28               
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       exponb           
    load     i64       precision        
    jumpf    i64       #1804            
    load     i64       precision        
    load     i64       1                
    sub      i64                        
    load     i64       9                
    idiv     i64                        
    load     i64       1                
    add      i64                        
    store    i64       precision        
    jump               #1803            
#1804: 
    load     i64       qq_decimal.currprec
    store    i64       precision        
#1803: 
    load     i64       precision        
    store    i64       nc               
    load     i64       na               
    load     i64       1                
    sub      i64                        
    store    i64       uppera           
    load     i64       nb               
    load     i64       1                
    sub      i64                        
    store    i64       upperb           
    load     i64       nc               
    load     i64       1                
    sub      i64                        
    store    i64       upperc           
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pa               
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pb               
    load     i64       nb               
    store    i64       n                
    setcall  u64 /1/1                   
    load     i64       n                
    load     i64       1                
    add      i64                        
    double                              
    store    i64       nx2              
    setarg   i64 /1                     
    callf    u64 /1    &qq_decimal.makesmallnum
    store    u64       x                
    load     i64       n                
    store    i64       nx               
    load     i64       0                
    store    i64       i                
    load     i64       upperb           
    load     i64       0                
    jumplt   i64       #1807            
#1805: 
    load     i64       i                
    load     i64       uppera           
    jumpgt   i64       #1809            
    load     u64       pa               
    load     i64       i                
    iloadx   i32 /4                     
    load     u64       x                
    load     i64       i                
    istorex  i32 /4                     
    jump               #1808            
#1809: 
    load     i64       0                
    load     u64       x                
    load     i64       i                
    istorex  i32 /4                     
#1808: 
    forup    i64 /1    #1805            
    opnd     i64       i                
    opnd     i64       upperb           
#1807: 
    setcall  u64 /1/1                   
    load     i64       nc               
    load     i64       1                
    add      i64                        
    double                              
    store    i64       nc2              
    setarg   i64 /1                     
    callf    u64 /1    &qq_decimal.makesmallnum
    store    u64       c                
    load     i64       0                
    store    i64       cx               
#1810: 
    setcall  i64 /4/1                   
    load     i64       nb               
    setarg   i64 /4                     
    load     u64       &nx              
    setarg   u64 /3                     
    load     u64       pb               
    setarg   u64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callf    i64 /4    &qq_decimal.smalldiv
    store    i64       k                
    load     i64       k                
    load     u64       c                
    load     u64 /1    &cx              
    loadincr i64 /1                     
    istorex  i32 /4                     
    load     i64       cx               
    load     i64       nc               
    jumple   i64       #1813            
    jump               #1811            
#1813: 
    startmx                             
    load     i64       n                
    load     i64       uppera           
    jumple   i64       #1815            
    load     i64       0                
    resetmx  i64                        
    jump               #1814            
#1815: 
    load     u64       pa               
    load     i64       n                
    iloadx   i32 /4                     
    widen    i64/i32                    
    endmx    i64                        
#1814: 
    store    i64       nexta            
    load     u64 /1    &n               
    incrto   i64 /1                     
    load     i64       nx               
    load     i64       1                
    jumpne   i64       #1817            
    load     u64       x                
    iload    i32                        
    widen    i64/i32                    
    load     i64       0                
    jumpne   i64       #1817            
    load     i64       nexta            
    load     u64       x                
    istore   i32                        
    jump               #1816            
#1817: 
    load     i64       nexta            
    load     u64       x                
    load     i64       nx               
    istorex  i32 /4                     
    load     u64 /1    &nx              
    incrto   i64 /1                     
#1816: 
    jump               #1810            
#1811: 
    setcall      /2/1                   
    load     i64       nx2              
    setarg   i64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callp        /2    &qq_decimal.freesmall
    load     i64       cx               
    load     i64       1                
    jumpne   i64       #1819            
    load     u64       c                
    iload    i32                        
    widen    i64/i32                    
    load     i64       0                
    jumpne   i64       #1819            
    setcall      /2/1                   
    load     i64       nc2              
    setarg   i64 /2                     
    load     u64       c                
    setarg   u64 /1                     
    callp        /2    &qq_decimal.freesmall
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_setzero
    jump               #1802            
#1819: 
    load     u64       c                
    iload    i32                        
    widen    i64/i32                    
    load     i64       0                
    jumpne   i64       #1821            
    load     i64       cx               
    load     i64       2                
    jumplt   i64       #1821            
    setcall  u64 /5/1                   
    load     i64       -1               
    setarg   i64 /5                     
    load     i64       nc2              
    setarg   i64 /4                     
    load     i64       cx               
    load     i64       1                
    sub      i64                        
    setarg   i64 /3                     
    load     u64       c                
    load     i64       1                
    addpx    u64 /4                     
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callf    u64 /5    &qq_decimal.smalltobig
    unload   u64                        
    load     i64       expona           
    load     i64       exponb           
    sub      i64                        
    load     i64       1                
    sub      i64                        
    load     u64       dest             
    load     i64       28               
    istorex  i32 /1                     
    jump               #1820            
#1821: 
    setcall  u64 /5/1                   
    load     i64       0                
    setarg   i64 /5                     
    load     i64       nc2              
    setarg   i64 /4                     
    load     i64       cx               
    setarg   i64 /3                     
    load     u64       c                
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callf    u64 /5    &qq_decimal.smalltobig
    unload   u64                        
    load     i64       expona           
    load     i64       exponb           
    sub      i64                        
    load     u64       dest             
    load     i64       28               
    istorex  i32 /1                     
#1820: 
#1802: 
    retproc                             
endproc

proc qq_decimal.smalldiv:
    param    u64       x
    param    u64       b
    param    u64       xlen
    param    i64       nb
    local    i64       k
    local    i64       count
    local    i64       xx
    local    i64       y
    local    i32       xi
    local    i32       bi
    local    u64       e
    local    i64       esize
    local    i64       ne
    local    i64       nx
    local    i64       av_1
    local    i64       i
    rettype  i64
    load     u64       xlen             
    iload    i64                        
    store    i64       nx               
    load     i64       0                
    store    i64       k                
    load     i64       0                
    store    i64       count            
    setcall  u64 /1/1                   
    load     i64       nb               
    load     i64       1                
    add      i64                        
    double                              
    store    i64       esize            
    setarg   i64 /1                     
    callf    u64 /1    &qq_decimal.makesmallnum
    store    u64       e                
#1823: 
    load     i64       nx               
    load     i64       nb               
    jumpge   i64       #1826            
    jump               #1824            
    jump               #1825            
#1826: 
    load     i64       nx               
    load     i64       nb               
    jumple   i64       #1827            
    load     u64       x                
    iload    i32                        
    widen    i64/i32                    
    load     i64       1000000000       
    mul      i64                        
    load     u64       x                
    load     i64       1                
    iloadx   i32 /4                     
    widen    i64/i32                    
    add      i64                        
    store    i64       xx               
    load     i64       xx               
    load     u64       b                
    iload    i32                        
    widen    i64/i32                    
    load     i64       1                
    add      i64                        
    idiv     i64                        
    store    i64       y                
    jump               #1825            
#1827: 
    load     u64       x                
    iload    i32                        
    widen    i64/i32                    
    load     u64       b                
    iload    i32                        
    widen    i64/i32                    
    load     i64       1                
    add      i64                        
    jumplt   i64       #1829            
    load     u64       x                
    iload    i32                        
    widen    i64/i32                    
    load     u64       b                
    iload    i32                        
    widen    i64/i32                    
    load     i64       1                
    add      i64                        
    idiv     i64                        
    store    i64       y                
    jump               #1828            
#1829: 
    load     i64       1                
    store    i64       y                
    load     i64       0                
    store    i64       i                
    load     i64       nb               
    load     i64       1                
    sub      i64                        
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumplt   i64       #1832            
#1830: 
    load     u64       x                
    load     i64       i                
    iloadx   i32 /4                     
    store    i32       xi               
    load     u64       b                
    load     i64       i                
    iloadx   i32 /4                     
    store    i32       bi               
    load     i32       xi               
    widen    i64/i32                    
    load     i32       bi               
    widen    i64/i32                    
    jumpge   i64       #1834            
    load     i64       0                
    store    i64       y                
    jump               #1824            
    jump               #1833            
#1834: 
    load     i32       xi               
    widen    i64/i32                    
    load     i32       bi               
    widen    i64/i32                    
    jumple   i64       #1835            
    jump               #1832            
#1835: 
#1833: 
    forup    i64 /1    #1830            
    opnd     i64       i                
    opnd     i64       av_1             
#1832: 
#1828: 
#1825: 
    load     i64       y                
    load     u64 /1    &k               
    addto    i64                        
    load     i64       y                
    load     i64       1                
    jumple   i64       #1837            
    setcall  i64 /4/1                   
    load     i64       y                
    setarg   i64 /4                     
    load     i64       nb               
    setarg   i64 /3                     
    load     u64       b                
    setarg   u64 /2                     
    load     u64       e                
    setarg   u64 /1                     
    callf    i64 /4    &qq_decimal.smallmulto
    store    i64       ne               
    setcall  i64 /4/1                   
    load     i64       ne               
    setarg   i64 /4                     
    load     i64       nx               
    setarg   i64 /3                     
    load     u64       e                
    setarg   u64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callf    i64 /4    &qq_decimal.smallsubto
    store    i64       nx               
    jump               #1836            
#1837: 
    load     i64       y                
    jumpf    i64       #1838            
    setcall  i64 /4/1                   
    load     i64       nb               
    setarg   i64 /4                     
    load     i64       nx               
    setarg   i64 /3                     
    load     u64       b                
    setarg   u64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callf    i64 /4    &qq_decimal.smallsubto
    store    i64       nx               
    jump               #1836            
#1838: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "smalldiv:Y=0"   
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1836: 
    jump               #1823            
#1824: 
    setcall      /2/1                   
    load     i64       esize            
    setarg   i64 /2                     
    load     u64       e                
    setarg   u64 /1                     
    callp        /2    &qq_decimal.freesmall
    load     i64       nx               
    load     u64       xlen             
    istore   i64                        
    load     i64       k                
    jumpret  i64       #1822            
#1822: 
    retfn    i64                        
endproc

proc qq_decimal.smallsubto:
    param    u64       p
    param    u64       q
    param    i64       plen
    param    i64       qlen
    local    u64       pp
    local    u64       qq
    local    i64       carry
    local    i64       diff
    local    i64       z
    local    i64       av_1
    local    i64       av_2
    rettype  i64
    load     u64       p                
    load     i64       plen             
    addpx    u64 /4                     
    load     i64       1                
    subpx    u64 /4                     
    store    u64       pp               
    load     u64       q                
    load     i64       qlen             
    addpx    u64 /4                     
    load     i64       1                
    subpx    u64 /4                     
    store    u64       qq               
    load     i64       0                
    store    i64       carry            
    load     i64       0                
    store    i64       z                
    load     i64       plen             
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #1842            
#1840: 
    load     u64       qq               
    load     u64       q                
    jumplt   u64       #1844            
    load     u64       pp               
    iload    i32                        
    widen    i64/i32                    
    load     u64       qq               
    iload    i32                        
    widen    i64/i32                    
    sub      i64                        
    load     i64       carry            
    sub      i64                        
    store    i64       diff             
    load     u64 /1    &qq              
    decrto   u64 /4                     
    jump               #1843            
#1844: 
    load     u64       pp               
    iload    i32                        
    widen    i64/i32                    
    load     i64       carry            
    sub      i64                        
    store    i64       diff             
#1843: 
    load     i64       diff             
    load     i64       0                
    jumpge   i64       #1846            
    load     i64       1                
    store    i64       carry            
    load     i64       diff             
    load     i64       1000000000       
    add      i64                        
    load     u64       pp               
    istore   i32                        
    jump               #1845            
#1846: 
    load     i64       diff             
    load     u64       pp               
    istore   i32                        
    load     i64       0                
    store    i64       carry            
#1845: 
    load     u64       pp               
    iload    i32                        
    jumpf    i32       #1848            
    load     i64       0                
    store    i64       z                
    jump               #1847            
#1848: 
    load     u64 /1    &z               
    incrto   i64 /1                     
#1847: 
    load     u64 /1    &pp              
    decrto   u64 /4                     
    to       i64       #1840            
    opnd     i64       av_1             
#1842: 
    load     i64       carry            
    jumpf    i64       #1850            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "SSUBTO/CARRY?"  
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1850: 
    load     i64       z                
    load     i64       plen             
    jumpne   i64       #1852            
    load     u64 /1    &z               
    decrto   i64 /1                     
#1852: 
    load     i64       z                
    jumpf    i64       #1854            
    load     i64       z                
    load     u64 /1    &plen            
    subto    i64                        
    load     u64       p                
    store    u64       pp               
    load     u64       p                
    load     i64       z                
    addpx    u64 /4                     
    store    u64       qq               
    load     i64       plen             
    store    i64       av_2             
    load     i64       av_2             
    load     i64       0                
    jumple   i64       #1857            
#1855: 
    load     u64 /1    &qq              
    loadincr u64 /4                     
    iload    i32                        
    load     u64 /1    &pp              
    loadincr u64 /4                     
    istore   i32                        
    to       i64       #1855            
    opnd     i64       av_2             
#1857: 
#1854: 
    load     i64       plen             
    jumpret  i64       #1839            
#1839: 
    retfn    i64                        
endproc

proc qq_decimal.bn_getprec:
    param    u64       a
    rettype  i64
    load     u64       a                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       9                
    mul      i64                        
    jumpret  i64       #1858            
#1858: 
    retfn    i64                        
endproc

proc qq_decimal.bn_setprec:
    param    u64       a
    param    i64       prec
    local    i64       oldlength
    local    i64       newlength
    local    u64       c
    local    i64       av_1
    local    i64       i
    load     u64       a                
    load     i64       26               
    iloadx   i16 /1                     
    widen    i64/i16                    
    load     i64       1                
    jumpeq   i64       #1861            
    jump               #1859            
#1861: 
    load     i64       prec             
    load     i64       1                
    jumplt   i64       #1864            
    load     i64       prec             
    load     i64       10000000         
    jumple   i64       #1863            
#1864: 
    jump               #1859            
#1863: 
    load     i64       prec             
    load     i64       1                
    sub      i64                        
    load     i64       9                
    idiv     i64                        
    load     i64       1                
    add      i64                        
    load     i64       9                
    mul      i64                        
    store    i64       prec             
    load     i64       prec             
    load     i64       9                
    idiv     i64                        
    store    i64       newlength        
    load     u64       a                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       oldlength        
    load     i64       oldlength        
    load     i64       newlength        
    jumpgt   i64       #1866            
    jump               #1859            
#1866: 
    setcall  u64 /1/1                   
    load     i64       newlength        
    setarg   i64 /1                     
    callf    u64 /1    &qq_decimal.makebignum
    store    u64       c                
    load     u64       a                
    load     i64       24               
    iloadx   i16 /1                     
    load     u64       c                
    load     i64       24               
    istorex  i16 /1                     
    load     u64       a                
    load     i64       28               
    iloadx   i32 /1                     
    load     u64       c                
    load     i64       28               
    istorex  i32 /1                     
    load     i64       0                
    store    i64       i                
    load     i64       newlength        
    load     i64       1                
    sub      i64                        
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumplt   i64       #1869            
#1867: 
    load     i64       i                
    load     i64       oldlength        
    jumpge   i64       #1871            
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       i                
    iloadx   i32 /4                     
    load     u64       c                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       i                
    istorex  i32 /4                     
    jump               #1870            
#1871: 
    load     i64       0                
    load     u64       c                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       i                
    istorex  i32 /4                     
#1870: 
    forup    i64 /1    #1867            
    opnd     i64       i                
    opnd     i64       av_1             
#1869: 
    setcall      /2/1                   
    load     u64       c                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_decimal.bn_move
    setcall      /1/1                   
    load     u64       c                
    setarg   u64 /1                     
    callp        /1    &qq_decimal.obj_free_dec
#1859: 
    retproc                             
endproc

proc qq_decimal.bn_getglobalprec:
    rettype  i64
    load     i64       qq_decimal.currprec
    load     i64       9                
    mul      i64                        
    jumpret  i64       #1872            
#1872: 
    retfn    i64                        
endproc

proc qq_decimal.bn_setglobalprec:
    param    i64       prec
    load     i64       prec             
    load     i64       1                
    sub      i64                        
    load     i64       9                
    idiv     i64                        
    load     i64       1                
    add      i64                        
    store    i64       qq_decimal.currprec
    retproc                             
endproc

proc qq_decimal.bn_makefloat:
    param    r64       x
    local    u64       a
    local    mem:2048       str
    rettype  u64
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /2/1                   
    load     u64       ".15g"           
    setarg   u64 /2                     
    load     r64       x                
    setarg   r64 /1                     
    callp        /2    &msysc.m$print_r64
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall  u64 /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /2    &qq_decimal.bn_makestr
    jumpret  u64       #1874            
#1874: 
    retfn    u64                        
endproc

proc qq_decimal.dectemp:
    param    u64       a
    rettype  u64
    load     i64       259              
    load     u64       &qq_decimal.vtemp
    load     i64       0                
    istorex  u32 /1                     
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #1877            
    load     i64       2                
    jumpeq   i64       #1878            
    jump               #1879            
#1877: 
    setcall  u64 /1/1                   
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callf    u64 /1    &qq_decimal.bn_makeint
    load     u64       &qq_decimal.vtemp
    load     i64       8                
    istorex  u64 /1                     
    jump               #1876            
#1878: 
    setcall  u64 /1/1                   
    load     u64       a                
    load     i64       8                
    iloadx   r64 /1                     
    setarg   r64 /1                     
    callf    u64 /1    &qq_decimal.bn_makefloat
    load     u64       &qq_decimal.vtemp
    load     i64       8                
    istorex  u64 /1                     
    jump               #1876            
#1879: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "dectemp"        
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1876: 
    load     mem:16       qq_decimal.vtemp
    load     u64       a                
    istore   mem:16                     
    load     u64       a                
    jumpret  u64       #1875            
#1875: 
    retfn    u64                        
endproc

proc qq_decimal.freedectemp:
    setcall      /1/1                   
    load     u64       &qq_decimal.vtemp
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_decimal.obj_free_dec
    retproc                             
endproc

proc qq_decimal.bn_ipower:
    param    u64       d
    param    u64       a
    param    i64       n
    local    u64       e
    local    u64       f
    load     i64       n                
    load     i64       0                
    jumpge   i64       #1883            
    setcall      /1/1                   
    load     u64       d                
    setarg   u64 /1                     
    callp        /1    &qq_decimal.bn_setzero
    jump               #1882            
#1883: 
    load     i64       n                
    load     i64       0                
    jumpne   i64       #1884            
    setcall      /2                     
    setcall  u64 /1                     
    load     i64       1                
    setarg   i64 /1                     
    callf    u64 /1    &qq_decimal.bn_makeint
    setarg   u64 /2                     
    load     u64       d                
    setarg   u64 /1                     
    callp        /2    &qq_decimal.bn_move
    jump               #1882            
#1884: 
    load     i64       n                
    load     i64       1                
    jumpne   i64       #1885            
    setcall      /2/1                   
    load     u64       a                
    setarg   u64 /2                     
    load     u64       d                
    setarg   u64 /1                     
    callp        /2    &qq_decimal.bn_dupl
    jump               #1882            
#1885: 
    load     i64       n                
    load     i64       1                
    bitand   i64                        
    load     i64       0                
    jumpne   i64       #1886            
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_decimal.bn_init
    store    u64       e                
    setcall      /3/1                   
    load     u64       a                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       e                
    setarg   u64 /1                     
    callp        /3    &qq_decimal.bn_mulu
    setcall      /3/1                   
    load     i64       n                
    load     i64       2                
    idiv     i64                        
    setarg   i64 /3                     
    load     u64       e                
    setarg   u64 /2                     
    load     u64       d                
    setarg   u64 /1                     
    callp        /3    &qq_decimal.bn_ipower
    setcall      /1/1                   
    load     u64       e                
    setarg   u64 /1                     
    callp        /1    &qq_decimal.obj_free_dec
    jump               #1882            
#1886: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_decimal.bn_init
    store    u64       e                
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_decimal.bn_init
    store    u64       f                
    setcall      /3/1                   
    load     u64       a                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       e                
    setarg   u64 /1                     
    callp        /3    &qq_decimal.bn_mulu
    setcall      /3/1                   
    load     i64       n                
    load     i64       1                
    sub      i64                        
    load     i64       2                
    idiv     i64                        
    setarg   i64 /3                     
    load     u64       e                
    setarg   u64 /2                     
    load     u64       f                
    setarg   u64 /1                     
    callp        /3    &qq_decimal.bn_ipower
    setcall      /3/1                   
    load     u64       f                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       d                
    setarg   u64 /1                     
    callp        /3    &qq_decimal.bn_mulu
    setcall      /1/1                   
    load     u64       e                
    setarg   u64 /1                     
    callp        /1    &qq_decimal.obj_free_dec
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &qq_decimal.obj_free_dec
#1882: 
    retproc                             
endproc

proc qq_decimal.var_power_dec:
    param    u64       a
    param    i64       n
    local    u64       dest
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_decimal.bn_init
    store    u64       dest             
    setcall      /3/1                   
    load     i64       n                
    setarg   i64 /3                     
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_decimal.bn_ipower
    load     u64       dest             
    load     u64       a                
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_decimal.var_convert_dec_int:
    param    u64       a
    rettype  i64
    setcall  i64 /1/1                   
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /1    &qq_decimal.bn_toint
    jumpret  i64       #1888            
#1888: 
    retfn    i64                        
endproc

proc qq_decimal.bn_toint:
    param    u64       a
    local    i64       x
    local    i64       av_1
    local    i64       av_2
    local    i64       i
    rettype  i64
    setcall  i64 /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /1    &qq_decimal.bn_isint
    jumpt    i64       #1891            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "dec-float->int not ready"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
    load     i64       0                
    jumpret  i64       #1889            
#1891: 
    setcall  i64 /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /1    &qq_decimal.bn_iszero
    jumpf    i64       #1893            
    load     i64       0                
    jumpret  i64       #1889            
#1893: 
    load     i64       0                
    store    i64       x                
    load     i64       0                
    store    i64       i                
    load     u64       a                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       1                
    sub      i64                        
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumplt   i64       #1896            
#1894: 
    load     i64       x                
    load     i64       1000000000       
    mul      i64                        
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       i                
    iloadx   i32 /4                     
    widen    i64/i32                    
    add      i64                        
    store    i64       x                
    forup    i64 /1    #1894            
    opnd     i64       i                
    opnd     i64       av_1             
#1896: 
    load     u64       a                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       i                
    load     u64       a                
    load     i64       28               
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       av_2             
    load     i64       i                
    load     i64       av_2             
    jumpgt   i64       #1899            
#1897: 
    load     i64       1000000000       
    load     u64 /1    &x               
    multo    i64                        
    forup    i64 /1    #1897            
    opnd     i64       i                
    opnd     i64       av_2             
#1899: 
    startmx                             
    load     u64       a                
    load     i64       24               
    iloadx   i16 /1                     
    jumpf    i16       #1901            
    load     i64       x                
    neg      i64                        
    resetmx  i64                        
    jump               #1900            
#1901: 
    load     i64       x                
    endmx    i64                        
#1900: 
    jumpret  i64       #1889            
#1889: 
    retfn    i64                        
endproc

proc qq_dicts.var_make_dict:
    param    u64       a
    param    u64       dest
    param    i64       n
    local    u64       p
    local    u64       b
    local    mem:16       v
    local    i64       av_1
    setcall  u64 /1/1                   
    load     i64       n                
    setarg   i64 /1                     
    callf    u64 /1    &qq_dicts.obj_new_dict
    store    u64       p                
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       b                
    load     i64       262              
    load     u64       &v               
    load     i64       0                
    istorex  u32 /1                     
    load     u64       p                
    load     u64       &v               
    load     i64       8                
    istorex  u64 /1                     
    load     i64       n                
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #1905            
#1903: 
    setcall      /3/1                   
    load     u64       a                
    load     i64       1                
    addpx    u64 /16                    
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       &v               
    setarg   u64 /1                     
    callp        /3    &qq_dicts.adddictitem
    load     i64       2                
    load     u64 /1    &a               
    addpxto  u64 /16                    
    to       i64       #1903            
    opnd     i64       av_1             
#1905: 
    load     i64       n                
    load     u64       p                
    load     i64       28               
    istorex  u32 /1                     
    load     mem:16       v             
    load     u64       dest             
    istore   mem:16                     
    retproc                             
endproc

proc qq_dicts.obj_new_dict:
    param    i64       n
    local    u64       p
    local    i64       m
    rettype  u64
    load     i64       16               
    setcall  i64 /1/1                   
    load     i64       n                
    load     i64       2                
    mul      i64                        
    setarg   i64 /1                     
    callf    i64 /1    &qq_lib.nextpoweroftwo
    max      i64                        
    store    i64       m                
    setcall  u64 /3/1                   
    load     u64       0                
    setarg   u64 /3                     
    load     i64       1                
    setarg   i64 /2                     
    load     i64       m                
    setarg   i64 /1                     
    callf    u64 /3    &qq_lists.obj_newlist
    store    u64       p                
    load     i64       0                
    load     u64       p                
    load     i64       28               
    istorex  u32 /1                     
    load     u64       p                
    jumpret  u64       #1906            
#1906: 
    retfn    u64                        
endproc

proc qq_dicts.obj_free_dict:
    param    u64       p
    param    i64       internal
    local    u64       q
    local    mem:16       v
    local    i64       av_1
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #1910            
#1908: 
    load     u64       q                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #1912            
    setcall      /1/1                   
    load     u64       q                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#1912: 
    load     u64 /1    &q               
    incrto   u64 /16                    
    to       i64       #1908            
    opnd     i64       av_1             
#1910: 
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    jumpf    i64       #1914            
    setcall      /2/1                   
    load     u64       p                
    load     i64       24               
    iloadx   u32 /1                     
    widen    i64/u32                    
    load     i64       16               
    mul      i64                        
    setarg   i64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_free   
#1914: 
    load     i64       internal         
    jumpt    i64       #1916            
    setcall      /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callp        /1    &mlib.pcm_free32 
#1916: 
    retproc                             
endproc

proc qq_dicts.var_dupl_dict:
    param    u64       a
    local    u64       p
    local    u64       q
    local    u64       plist
    local    u64       qlist
    local    i64       av_1
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    setcall  u64 /1/1                   
    load     u64       p                
    load     i64       28               
    iloadx   u32 /1                     
    widen    i64/u32                    
    setarg   i64 /1                     
    callf    u64 /1    &qq_dicts.obj_new_dict
    store    u64       q                
    load     u64       p                
    iload    mem:32                     
    load     u64       q                
    istore   mem:32                     
    load     i64       1                
    load     u64       q                
    load     i64       0                
    istorex  u32 /1                     
    load     u64       1                
    load     u64       q                
    load     i64       4                
    addpx    u64 /1                     
    load     i64       1                
    storebit u8                         
    load     u64       q                
    load     u64       a                
    load     i64       8                
    istorex  u64 /1                     
    load     u64       q                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       0                
    jumpne   i64       #1919            
    jump               #1917            
#1919: 
    setcall  u64 /1/1                   
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       16               
    mul      i64                        
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    double                              
    load     u64       q                
    load     i64       8                
    istorex  u64 /1                     
    store    u64       qlist            
    load     i64       mlib.allocbytes  
    load     i64       16               
    idiv     i64                        
    load     u64       q                
    load     i64       24               
    istorex  u32 /1                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       plist            
    load     u64       q                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #1922            
#1920: 
    load     u64       plist            
    iload    mem:16                     
    load     u64       qlist            
    istore   mem:16                     
    load     u64       qlist            
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #1924            
    setcall      /1/1                   
    load     u64       qlist            
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_duplu
#1924: 
    load     u64 /1    &qlist           
    incrto   u64 /16                    
    load     u64 /1    &plist           
    incrto   u64 /16                    
    to       i64       #1920            
    opnd     i64       av_1             
#1922: 
#1917: 
    retproc                             
endproc

proc qq_dicts.var_equal_dict:
    param    u64       x
    param    u64       y
    local    i64       xlen
    local    i64       ylen
    local    i64       res
    local    u64       px
    local    u64       py
    local    u64       a
    local    u64       b
    rettype  i64
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "EQUALDICT"      
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
    load     i64       1                
    jumpret  i64       #1925            
#1925: 
    retfn    i64                        
endproc

proc qq_dicts.var_finddictitem:
    param    u64       vd
    param    u64       p
    param    i64       doins
    local    i64       hash
    local    i64       index
    local    i64       size
    local    i64       keytag
    local    i64       wrapped
    local    i64       limit
    local    i64       keyvalue
    local    u64       q
    local    u64       pa
    local    u64       qa
    local    u64       d
    rettype  u64
! qq_dicts.var_finddictitem.retry:
#1927: 
    load     u64       vd               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       d                
    load     u64       d                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       2                
    idiv     i64                        
    store    i64       size             
    setcall  i64 /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callf    i64 /1    &qq_vars.var_gethashvalue
    load     i64       size             
    load     i64       1                
    sub      i64                        
    bitand   i64                        
    store    i64       index            
    load     u64       d                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       index            
    load     i64       2                
    mul      i64                        
    addpx    u64 /16                    
    store    u64       q                
    load     i64       0                
    store    i64       wrapped          
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       keytag           
    load     u64       p                
    load     i64       8                
    iloadx   i64 /1                     
    store    i64       keyvalue         
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pa               
#1928: 
    load     u64       q                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #1931            
    jump               #1929            
    jump               #1930            
#1931: 
    load     u64       q                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       keytag           
    jumpne   i64       #1932            
    load     i64       keytag           
    load     i64       1                
    jumpeq   i64 /1    #1934            
    load     i64       2                
    jumpeq   i64 /1    #1934            
    load     i64       4                
    jumpeq   i64 /1    #1934            
    load     i64       9                
    jumpeq   i64 /1    #1935            
    load     i64       12               
    jumpeq   i64       #1936            
    jump               #1937            
#1934: 
    load     u64       q                
    load     i64       8                
    iloadx   i64 /1                     
    load     i64       keyvalue         
    jumpne   i64       #1939            
    load     u64 /1    &q               
    incrto   u64 /16                    
    load     u64       q                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #1941            
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#1941: 
    load     u64       q                
    jumpret  u64       #1926            
#1939: 
    jump               #1933            
#1935: 
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       qa               
    load     u64       pa               
    load     i64       16               
    iloadx   i64 /1                     
    load     u64       qa               
    load     i64       16               
    iloadx   i64 /1                     
    jumpne   i64       #1943            
    setcall  i32 /3/1                   
    load     u64       pa               
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /3                     
    load     u64       qa               
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       pa               
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i32 /3    &memcmp          
    widen    i64/i32                    
    load     i64       0                
    jumpne   i64       #1945            
    load     u64 /1    &q               
    incrto   u64 /16                    
    load     u64       q                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #1947            
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#1947: 
    load     u64       q                
    jumpret  u64       #1926            
#1945: 
#1943: 
    jump               #1933            
#1936: 
    setcall  i64 /2/1                   
    load     u64       q                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callf    i64 /2    &qq_records.var_equal_record
    jumpf    i64       #1949            
    load     u64 /1    &q               
    incrto   u64 /16                    
    load     u64       q                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #1951            
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#1951: 
    load     u64       q                
    jumpret  u64       #1926            
#1949: 
    jump               #1933            
#1937: 
#1933: 
#1932: 
#1930: 
    load     u64 /1    &index           
    incrto   i64 /1                     
    load     i64       2                
    load     u64 /1    &q               
    addpxto  u64 /16                    
    load     i64       index            
    load     i64       size             
    jumplt   i64       #1953            
    load     i64       wrapped          
    jumpf    i64       #1955            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "DICT FULL?"     
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1955: 
    load     i64       1                
    store    i64       wrapped          
    load     i64       0                
    store    i64       index            
    load     u64       d                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
#1953: 
    jump               #1928            
#1929: 
    startmx                             
    load     i64       doins            
    jumpf    i64       #1957            
    load     i64       size             
    load     i64       3                
    mul      i64                        
    load     i64       4                
    idiv     i64                        
    store    i64       limit            
    load     u64       d                
    load     i64       28               
    iloadx   u32 /1                     
    widen    i64/u32                    
    load     i64       limit            
    jumplt   i64       #1959            
    setcall      /1/1                   
    load     u64       vd               
    setarg   u64 /1                     
    callp        /1    &qq_dicts.expanddict
    jump               #1927            
#1959: 
    load     u64       p                
    iload    mem:16                     
    load     u64       q                
    istore   mem:16                     
    load     u64       q                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #1961            
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#1961: 
    load     u64       d                
    load     i64       28               
    addpx    u64 /1                     
    incrto   u32 /1                     
    load     u64       q                
    load     i64       1                
    addpx    u64 /16                    
    resetmx  u64                        
    jump               #1956            
#1957: 
    load     u64       0                
    endmx    u64                        
#1956: 
    jumpret  u64       #1926            
#1926: 
    retfn    u64                        
endproc

proc qq_dicts.expanddict:
    param    u64       vd
    local    i64       n
    local    i64       m
    local    i64       i
    local    i64       j
    local    i64       k
    local    i64       oldrefcount
    local    u64       d
    local    u64       e
    local    mem:32       temp
    local    u64       p
    local    u64       q
    local    u64       r
    local    mem:16       ev
    load     u8        qq_dicts.expanddict.inuse
    jumpf    u8        #1964            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "expanddict?"    
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1964: 
    load     i64       1                
    store    u8        qq_dicts.expanddict.inuse
    load     u64       vd               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       d                
    load     u64       d                
    load     i64       24               
    iloadx   u32 /1                     
    widen    i64/u32                    
    store    i64       n                
    load     i64       n                
    load     i64       2                
    idiv     i64                        
    store    i64       m                
    load     u64       d                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    setcall  u64 /1/1                   
    load     i64       m                
    load     i64       2                
    mul      i64                        
    setarg   i64 /1                     
    callf    u64 /1    &qq_dicts.obj_new_dict
    store    u64       e                
    setcall      /3/1                   
    load     u64       &ev              
    setarg   u64 /3                     
    load     u64       e                
    setarg   u64 /2                     
    load     i64       6                
    setarg   i64 /1                     
    callp        /3    &qq_vars.var_objtovar
    load     u64       p                
    store    u64       q                
    load     i64       1                
    store    i64       i                
    load     i64       m                
    load     i64       1                
    jumplt   i64       #1967            
#1965: 
    load     u64       q                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpeq   i64       #1969            
    setcall  u64 /3/1                   
    load     i64       1                
    setarg   i64 /3                     
    load     u64       q                
    setarg   u64 /2                     
    load     u64       &ev              
    setarg   u64 /1                     
    callf    u64 /3    &qq_dicts.var_finddictitem
    store    u64       r                
    load     u64 /1    &q               
    incrto   u64 /16                    
    load     u64 /1    &q               
    loadincr u64 /16                    
    iload    mem:16                     
    load     u64       r                
    istore   mem:16                     
    load     u64       r                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #1971            
    load     u64       r                
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#1971: 
    jump               #1968            
#1969: 
    load     i64       2                
    load     u64 /1    &q               
    addpxto  u64 /16                    
#1968: 
    forup    i64 /1    #1965            
    opnd     i64       i                
    opnd     i64       m                
#1967: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       d                
    setarg   u64 /1                     
    callp        /2    &qq_dicts.obj_free_dict
    load     u64       d                
    load     i64       0                
    iloadx   u32 /1                     
    widen    i64/u32                    
    store    i64       oldrefcount      
    load     u64       e                
    iload    mem:32                     
    load     u64       d                
    istore   mem:32                     
    setcall      /2/1                   
    load     i64       8                
    setarg   i64 /2                     
    load     u64       e                
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_free   
    load     i64       oldrefcount      
    load     u64       d                
    load     i64       0                
    istorex  u32 /1                     
    load     i64       0                
    store    u8        qq_dicts.expanddict.inuse
    retproc                             
endproc

proc qq_dicts.adddictitem:
    param    u64       d
    param    u64       p
    param    u64       q
    local    u64       da
    local    u64       r
    load     u64       d                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       da               
    load     u64       da               
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       0                
    jumpne   i64       #1974            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "NULL DICT"      
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1974: 
    setcall  u64 /3/1                   
    load     i64       1                
    setarg   i64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     u64       d                
    setarg   u64 /1                     
    callf    u64 /3    &qq_dicts.var_finddictitem
    store    u64       r                
    load     u64       q                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #1976            
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#1976: 
    load     u64       r                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #1978            
    setcall      /1/1                   
    load     u64       r                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#1978: 
    load     u64       q                
    iload    mem:16                     
    load     u64       r                
    istore   mem:16                     
    retproc                             
endproc

proc qq_host.callhostfunction:
    param    i64       hostfn
    param    u64       sp
    local    u64       fnaddr
    local    i64       nparams
    local    i64       isfn
    local    u64       p
    local    i64       av_1
    rettype  u64
    load     u64       &qq_tables.hosthandlers
    load     i64       hostfn           
    iloadx   u64 /8                     
    store    u64       fnaddr           
    load     u64       &qq_tables.hostnparams
    load     i64       hostfn           
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       nparams          
    load     u64       &qq_tables.hostisfn
    load     i64       hostfn           
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       isfn             
    load     u64       fnaddr           
    load     u64       0                
    jumpne   u64       #1981            
    setcall      /2/1                   
    load     u64       &qq_tables.hostfnnames
    load     i64       hostfn           
    iloadx   u64 /8                     
    setarg   u64 /2                     
    load     u64       "Hostfn not implemented:"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1981: 
    load     i64       nparams          
    load     i64       isfn             
    add      i64                        
    load     i64       0                
    jumpeq   i64 /1    #1983            
    load     i64       1                
    jumpeq   i64 /1    #1984            
    load     i64       2                
    jumpeq   i64 /1    #1985            
    load     i64       3                
    jumpeq   i64 /1    #1986            
    load     i64       4                
    jumpeq   i64 /1    #1987            
    load     i64       5                
    jumpeq   i64       #1988            
    jump               #1989            
#1983: 
    setcall      /0/1                   
    load     u64       fnaddr           
    icallp       /0                     
    jump               #1982            
#1984: 
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    load     u64       fnaddr           
    icallp       /1                     
    jump               #1982            
#1985: 
    setcall      /2/1                   
    load     u64       sp               
    load     i64       1                
    subpx    u64 /16                    
    setarg   u64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    load     u64       fnaddr           
    icallp       /2                     
    jump               #1982            
#1986: 
    setcall      /3/1                   
    load     u64       sp               
    load     i64       2                
    subpx    u64 /16                    
    setarg   u64 /3                     
    load     u64       sp               
    load     i64       1                
    subpx    u64 /16                    
    setarg   u64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    load     u64       fnaddr           
    icallp       /3                     
    jump               #1982            
#1987: 
    setcall      /4/1                   
    load     u64       sp               
    load     i64       3                
    subpx    u64 /16                    
    setarg   u64 /4                     
    load     u64       sp               
    load     i64       2                
    subpx    u64 /16                    
    setarg   u64 /3                     
    load     u64       sp               
    load     i64       1                
    subpx    u64 /16                    
    setarg   u64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    load     u64       fnaddr           
    icallp       /4                     
    jump               #1982            
#1988: 
    setcall      /5/1                   
    load     u64       sp               
    load     i64       4                
    subpx    u64 /16                    
    setarg   u64 /5                     
    load     u64       sp               
    load     i64       3                
    subpx    u64 /16                    
    setarg   u64 /4                     
    load     u64       sp               
    load     i64       2                
    subpx    u64 /16                    
    setarg   u64 /3                     
    load     u64       sp               
    load     i64       1                
    subpx    u64 /16                    
    setarg   u64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    load     u64       fnaddr           
    icallp       /5                     
    jump               #1982            
#1989: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "callhost/proc"  
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1982: 
    load     i64       nparams          
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #1992            
#1990: 
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #1994            
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #1996            
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#1996: 
#1994: 
    load     u64 /1    &sp              
    decrto   u64 /16                    
    to       i64       #1990            
    opnd     i64       av_1             
#1992: 
    load     u64       sp               
    jumpret  u64       #1979            
#1979: 
    retfn    u64                        
endproc

proc qq_host.pch_leftstr:
    param    u64       a
    param    u64       b
    param    u64       c
    param    u64       result
    local    i64       n
    local    i64       length
    local    i64       padchar
    local    u64       s
    local    u64       pa
    load     i64       32               
    store    i64       padchar          
    load     u64       c                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpeq   i64 /1    #1999            
    load     i64       9                
    jumpeq   i64 /1    #2000            
    load     i64       1                
    jumpeq   i64       #2001            
    jump               #2002            
#1999: 
    jump               #1998            
#2000: 
    load     u64       c                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       1                
    jumpne   i64       #2004            
    load     u64       c                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    store    i64       padchar          
    jump               #2003            
#2004: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "left/padx"      
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#2003: 
    jump               #1998            
#2001: 
    load     u64       c                
    load     i64       8                
    iloadx   i64 /1                     
    store    i64       padchar          
    jump               #1998            
#2002: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "left/pad?"      
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#1998: 
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpeq   i64 /1    #2006            
    load     i64       1                
    jumpeq   i64       #2007            
    jump               #2008            
#2006: 
    load     i64       1                
    store    i64       n                
    jump               #2005            
#2007: 
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    store    i64       n                
    jump               #2005            
#2008: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "left:bad n"     
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#2005: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       9                
    jumpeq   i64       #2010            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "left:not str"   
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#2010: 
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pa               
    load     u64       pa               
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       length           
    load     u64       pa               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       s                
    load     i64       n                
    load     i64       0                
    jumpne   i64       #2012            
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       result           
    setarg   u64 /1                     
    callp        /2    &qq_strings.var_empty_string
    jump               #1997            
#2012: 
    load     i64       265              
    load     u64       result           
    load     i64       0                
    istorex  u32 /1                     
    load     i64       n                
    load     i64       0                
    jumple   i64       #2014            
    load     i64       n                
    load     i64       length           
    jumpgt   i64       #2016            
    setcall      /3/1                   
    load     u64       result           
    setarg   u64 /3                     
    load     i64       n                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /3    &qq_host.leftstring
    jump               #2015            
#2016: 
    setcall      /4/1                   
    load     u64       result           
    setarg   u64 /4                     
    load     i64       padchar          
    setarg   i64 /3                     
    load     i64       n                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /4    &qq_host.padstring_right
#2015: 
    jump               #2013            
#2014: 
    load     i64       n                
    neg      i64                        
    store    i64       n                
    load     i64       n                
    load     i64       length           
    jumpge   i64       #2018            
    setcall      /3/1                   
    load     u64       result           
    setarg   u64 /3                     
    load     i64       length           
    load     i64       n                
    sub      i64                        
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /3    &qq_host.leftstring
    jump               #2017            
#2018: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       result           
    setarg   u64 /1                     
    callp        /2    &qq_strings.var_empty_string
#2017: 
#2013: 
#1997: 
    retproc                             
endproc

proc qq_host.pch_rightstr:
    param    u64       a
    param    u64       b
    param    u64       c
    param    u64       result
    local    i64       n
    local    i64       length
    local    i64       padchar
    local    u64       s
    local    u64       pa
    load     i64       32               
    store    i64       padchar          
    load     u64       c                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpeq   i64 /1    #2021            
    load     i64       9                
    jumpeq   i64 /1    #2022            
    load     i64       1                
    jumpeq   i64       #2023            
    jump               #2024            
#2021: 
    jump               #2020            
#2022: 
    load     u64       c                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       1                
    jumpne   i64       #2026            
    load     u64       c                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    store    i64       padchar          
    jump               #2025            
#2026: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "right/padx"     
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#2025: 
    jump               #2020            
#2023: 
    load     u64       c                
    load     i64       8                
    iloadx   i64 /1                     
    store    i64       padchar          
    jump               #2020            
#2024: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "right/pad?"     
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#2020: 
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpeq   i64 /1    #2028            
    load     i64       1                
    jumpeq   i64       #2029            
    jump               #2030            
#2028: 
    load     i64       1                
    store    i64       n                
    jump               #2027            
#2029: 
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    store    i64       n                
    jump               #2027            
#2030: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "right:bad n"    
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#2027: 
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pa               
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       9                
    jumpeq   i64       #2032            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "right:not str"  
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#2032: 
    load     u64       pa               
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       length           
    load     u64       pa               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       s                
    load     i64       265              
    load     u64       result           
    load     i64       0                
    istorex  u32 /1                     
    load     i64       n                
    load     i64       0                
    jumpne   i64       #2034            
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       result           
    setarg   u64 /1                     
    callp        /2    &qq_strings.var_empty_string
    jump               #2019            
#2034: 
    load     i64       n                
    load     i64       0                
    jumple   i64       #2036            
    load     i64       n                
    load     i64       length           
    jumpgt   i64       #2038            
    setcall      /3/1                   
    load     u64       result           
    setarg   u64 /3                     
    load     i64       n                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /3    &qq_host.rightstring
    jump               #2037            
#2038: 
    setcall      /4/1                   
    load     u64       result           
    setarg   u64 /4                     
    load     i64       padchar          
    setarg   i64 /3                     
    load     i64       n                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /4    &qq_host.padstring_left
#2037: 
    jump               #2035            
#2036: 
    load     i64       n                
    neg      i64                        
    store    i64       n                
    load     i64       n                
    load     i64       length           
    jumpge   i64       #2040            
    setcall      /3/1                   
    load     u64       result           
    setarg   u64 /3                     
    load     i64       length           
    load     i64       n                
    sub      i64                        
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /3    &qq_host.rightstring
    jump               #2039            
#2040: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       result           
    setarg   u64 /1                     
    callp        /2    &qq_strings.var_empty_string
#2039: 
#2035: 
#2019: 
    retproc                             
endproc

proc qq_host.pch_convlc:
    param    u64       a
    param    u64       b
    param    u64       result
    setcall  i64 /3/1                   
    load     i64       -999999          
    setarg   i64 /3                     
    load     i64       9                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /3    &qq_host.checkparam
    unload   i64                        
    load     u64       a                
    iload    mem:16                     
    load     u64       result           
    istore   mem:16                     
    load     u64       result           
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
    setcall      /1/1                   
    load     u64       result           
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_duplu
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     u64       b                
    setarg   u64 /2                     
    load     u64       result           
    setarg   u64 /1                     
    callp        /3    &qq_strings.var_iconvcase
    retproc                             
endproc

proc qq_host.pch_convuc:
    param    u64       a
    param    u64       b
    param    u64       result
    setcall  i64 /3/1                   
    load     i64       -999999          
    setarg   i64 /3                     
    load     i64       9                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /3    &qq_host.checkparam
    unload   i64                        
    load     u64       a                
    iload    mem:16                     
    load     u64       result           
    istore   mem:16                     
    load     u64       result           
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
    load     u64       result           
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #2044            
    load     u64       result           
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #2046            
    setcall      /1/1                   
    load     u64       result           
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_duplu
#2046: 
#2044: 
    setcall      /3/1                   
    load     i64       1                
    setarg   i64 /3                     
    load     u64       b                
    setarg   u64 /2                     
    load     u64       result           
    setarg   u64 /1                     
    callp        /3    &qq_strings.var_iconvcase
    retproc                             
endproc

proc qq_host.pch_waitkey:
    param    u64       result
    load     i64       1                
    load     u64       result           
    load     i64       0                
    istorex  u32 /1                     
    setcall  i64 /0/1                   
    callf    i64 /0    &mlinux.os_getch 
    load     u64       result           
    load     i64       8                
    istorex  i64 /1                     
    retproc                             
endproc

proc qq_host.pch_execwait:
    param    u64       a
    param    u64       b
    param    u64       c
    param    u64       result
    local    u64       workdir
    local    i64       flag
    local    u64       pa
    setcall  i64 /3/1                   
    load     i64       -999999          
    setarg   i64 /3                     
    load     i64       9                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /3    &qq_host.checkparam
    unload   i64                        
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pa               
    setcall  i64 /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     i64       1                
    setarg   i64 /2                     
    load     u64       b                
    setarg   u64 /1                     
    callf    i64 /3    &qq_host.checkparam
    store    i64       flag             
    load     u64       c                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #2050            
    load     u64       0                
    store    u64       workdir          
    jump               #2049            
#2050: 
    setcall  i64 /3/1                   
    load     i64       -999999          
    setarg   i64 /3                     
    load     i64       9                
    setarg   i64 /2                     
    load     u64       c                
    setarg   u64 /1                     
    callf    i64 /3    &qq_host.checkparam
    unload   i64                        
    setcall  u64 /2/1                   
    load     u64       c                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     u64       c                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /2    &qq_lib.convtostringz
    store    u64       workdir          
#2049: 
    load     i64       1                
    load     u64       result           
    load     i64       0                
    istorex  u32 /1                     
    setcall  i64 /3                     
    load     u64       workdir          
    setarg   u64 /3                     
    load     i64       flag             
    setarg   i64 /2                     
    setcall  u64 /2                     
    load     u64       pa               
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     u64       pa               
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /2    &qq_lib.convtostringz
    setarg   u64 /1                     
    callf    i64 /3    &mlinux.os_execwait
    load     u64       result           
    load     i64       8                
    istorex  i64 /1                     
    retproc                             
endproc

proc qq_host.pch_execcmd:
    param    u64       a
    param    u64       b
    param    u64       c
    param    u64       result
    local    u64       workdir
    local    i64       flag
    local    u64       pa
    setcall  i64 /3/1                   
    load     i64       -999999          
    setarg   i64 /3                     
    load     i64       9                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /3    &qq_host.checkparam
    unload   i64                        
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pa               
    setcall  i64 /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     i64       1                
    setarg   i64 /2                     
    load     u64       b                
    setarg   u64 /1                     
    callf    i64 /3    &qq_host.checkparam
    store    i64       flag             
    load     u64       c                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #2053            
    load     u64       0                
    store    u64       workdir          
    jump               #2052            
#2053: 
    setcall  i64 /3/1                   
    load     i64       -999999          
    setarg   i64 /3                     
    load     i64       9                
    setarg   i64 /2                     
    load     u64       c                
    setarg   u64 /1                     
    callf    i64 /3    &qq_host.checkparam
    unload   i64                        
    setcall  u64 /2/1                   
    load     u64       c                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     u64       c                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /2    &qq_lib.convtostringz
    store    u64       workdir          
#2052: 
    load     i64       1                
    load     u64       result           
    load     i64       0                
    istorex  u32 /1                     
    setcall  i64 /2                     
    load     i64       flag             
    setarg   i64 /2                     
    setcall  u64 /2                     
    load     u64       pa               
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     u64       pa               
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /2    &qq_lib.convtostringz
    setarg   u64 /1                     
    callf    i64 /2    &mlinux.os_execcmd
    load     u64       result           
    load     i64       8                
    istorex  i64 /1                     
    retproc                             
endproc

proc qq_host.pch_makestr:
    param    u64       a
    param    u64       b
    param    u64       result
    local    i64       n
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       16               
    jumpeq   i64 /1    #2056            
    load     i64       1                
    jumpeq   i64       #2057            
    jump               #2058            
#2056: 
    jump               #2055            
#2057: 
    jump               #2055            
#2058: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "makestr"        
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#2055: 
    setcall  i64 /1/1                   
    load     u64       b                
    setarg   u64 /1                     
    callf    i64 /1    &qq_vars.var_getintvalue
    store    i64       n                
    load     i64       265              
    load     u64       result           
    load     i64       0                
    istorex  u32 /1                     
    setcall  u64 /2/1                   
    load     i64       n                
    setarg   i64 /2                     
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /2    &qq_strings.obj_make_strslicexobj
    load     u64       result           
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_host.pch_makeref:
    param    u64       a
    param    u64       b
    param    u64       result
    local    u64       ptr
    load     u64       &qq_tables.ttbasetype
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   i16 /2                     
    widen    i64/i16                    
    load     i64       14               
    jumpeq   i64 /1    #2061            
    load     i64       16               
    jumpeq   i64 /1    #2061            
    load     i64       1                
    jumpeq   i64 /1    #2061            
    load     i64       9                
    jumpeq   i64 /1    #2062            
    load     i64       11               
    jumpeq   i64 /1    #2062            
    load     i64       10               
    jumpeq   i64 /1    #2062            
    load     i64       5                
    jumpeq   i64       #2062            
    jump               #2063            
#2061: 
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       ptr              
    jump               #2060            
#2062: 
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       ptr              
    jump               #2060            
#2063: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "makeref"        
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#2060: 
    load     i64       16               
    load     u64       result           
    load     i64       0                
    istorex  u32 /1                     
    load     u64       ptr              
    load     u64       result           
    load     i64       8                
    istorex  u64 /1                     
    setcall  i64 /1/1                   
    load     u64       b                
    setarg   u64 /1                     
    callf    i64 /1    &qq_vars.var_getintvalue
    load     u64       result           
    load     i64       4                
    istorex  u32 /1                     
    load     u64       result           
    load     i64       4                
    iloadx   u32 /1                     
    widen    i64/u32                    
    load     i64       33               
    jumpeq   i64 /1    #2065            
    load     i64       34               
    jumpeq   i64 /1    #2065            
    load     i64       35               
    jumpeq   i64       #2065            
    jump               #2066            
#2065: 
    load     i64       15               
    load     u64       result           
    load     i64       0                
    istorex  u8  /1                     
    load     i64       0                
    load     u64       result           
    load     i64       2                
    istorex  u8  /1                     
    load     i64       0                
    load     u64       result           
    load     i64       3                
    istorex  u8  /1                     
    jump               #2064            
#2066: 
#2064: 
    retproc                             
endproc

proc qq_host.pch_getcmdparam:
    param    u64       a
    param    u64       result
    local    i64       n
    local    u64       s
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #2069            
    load     i64       1                
    load     u64       result           
    load     i64       0                
    istorex  u32 /1                     
    load     i64       qq_decls.nqparams
    load     u64       result           
    load     i64       8                
    istorex  i64 /1                     
    jump               #2067            
#2069: 
    setcall  i64 /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /1    &qq_vars.var_getintvalue
    store    i64       n                
    load     i64       n                
    load     i64       1                
    jumplt   i64 /1    #2072            
    load     i64       qq_decls.nqparams
    jumple   i64       #2071            
#2072: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "getcmdpm"       
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#2071: 
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     u64       result           
    setarg   u64 /2                     
    load     u64       &qq_decls.qparamtable
    load     i64       n                
    iloadx   u64 /8/-8                  
    setarg   u64 /1                     
    callp        /3    &qq_strings.var_make_string
#2067: 
    retproc                             
endproc

proc qq_host.pch_clock:
    param    u64       result
    load     i64       1                
    load     u64       result           
    load     i64       0                
    istorex  u32 /1                     
    setcall  i64 /0/1                   
    callf    i64 /0    &mlinux.os_clock 
    load     u64       result           
    load     i64       8                
    istorex  i64 /1                     
    retproc                             
endproc

proc qq_host.pch_allocexec:
    param    u64       a
    param    u64       result
    local    i64       n
    local    u64       p
    setcall  i64 /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /1    &qq_vars.var_getintvalue
    store    i64       n                
    setcall  u64 /1/1                   
    load     i64       n                
    setarg   i64 /1                     
    callf    u64 /1    &mlinux.os_allocexecmem
    store    u64       p                
    load     i64       16               
    load     u64       result           
    load     i64       0                
    istorex  u32 /1                     
    load     u64       p                
    load     u64       result           
    load     i64       8                
    istorex  u64 /1                     
    load     i64       27               
    load     u64       result           
    load     i64       4                
    istorex  u32 /1                     
    retproc                             
endproc

proc qq_host.pch_runnative:
    param    u64       a
    param    u64       b
    param    u64       result
    local    i64       n
    local    u64       fnptr
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       16               
    jumpeq   i64       #2077            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "runnative?"     
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#2077: 
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       fnptr            
    setcall  i64 /1/1                   
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    setarg   i64 /1                     
    load     u64       fnptr            
    icallf   i64 /1                     
    load     u64       result           
    load     i64       8                
    istorex  i64 /1                     
    load     i64       1                
    load     u64       result           
    load     i64       0                
    istorex  u32 /1                     
    retproc                             
endproc

proc qq_host.pch_setlwb:
    param    u64       a
    param    u64       b
    local    i64       n
    local    u64       p
    load     u64       a                
    load     i64       1                
    iloadx   u8  /1                     
    jumpt    u8        #2080            
    jump               #2081            
#2080: 
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       p                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    loadbit  i64                        
    jumpt    u64       #2083            
    setcall      /0/1                   
    callp        /0    &qq_lib.pcnotmut 
#2083: 
    setcall  i64 /3/1                   
    load     i64       -999999          
    setarg   i64 /3                     
    load     i64       1                
    setarg   i64 /2                     
    load     u64       b                
    setarg   u64 /1                     
    callf    i64 /3    &qq_host.checkparam
    store    i64       n                
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       10               
    jumpeq   i64 /1    #2085            
    load     i64       11               
    jumpeq   i64 /1    #2086            
    load     i64       8                
    jumpeq   i64       #2086            
    jump               #2087            
#2085: 
    load     i64       n                
    load     i64       -32768           
    jumplt   i64 /1    #2090            
    load     i64       32767            
    jumple   i64       #2089            
#2090: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "lwb not i16"    
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#2089: 
    load     i64       n                
    load     u64       p                
    load     i64       6                
    istorex  i16 /1                     
    jump               #2084            
#2086: 
    load     i64       n                
    load     i64       0                
    jumplt   i64 /1    #2093            
    load     i64       1                
    jumple   i64       #2092            
#2093: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "lwb not 0/1"    
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#2092: 
    load     i64       n                
    load     u64       p                
    load     i64       4                
    addpx    u64 /1                     
    load     i64       0                
    storebit u8                         
    jump               #2084            
#2087: 
! qq_host.pch_setlwb.error:
#2081: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Can't set lwb"  
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#2084: 
    retproc                             
endproc

proc qq_host.pch_ticks:
    param    u64       result
    load     i64       1                
    load     u64       result           
    load     i64       0                
    istorex  u32 /1                     
    setcall  i64 /0/1                   
    callf    i64 /0    &mlinux.os_ticks 
    load     u64       result           
    load     i64       8                
    istorex  i64 /1                     
    retproc                             
endproc

proc qq_host.pch_sleep:
    param    u64       a
    setcall  i64 /3/1                   
    load     i64       -999999          
    setarg   i64 /3                     
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /3    &qq_host.checkparam
    unload   i64                        
    setcall      /1/1                   
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callp        /1    &mlinux.os_sleep 
    retproc                             
endproc

proc qq_host.pch_random:
    param    u64       a
    param    u64       result
    local    i64       n
    local    i64       x
    load     i64       1                
    load     u64       result           
    load     i64       0                
    istorex  u32 /1                     
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       4                
    jumpne   i64       #2098            
    setcall  i64 /2/1                   
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     u64       a                
    load     i64       0                
    iloadx   i64 /1                     
    load     i64       16               
    load     i64       63               
    loadbf   i64                        
    setarg   i64 /1                     
    callf    i64 /2    &mlib.mrandomrange
    store    i64       x                
    jump               #2097            
#2098: 
    setcall  i64 /3/1                   
    load     i64       -999999          
    setarg   i64 /3                     
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /3    &qq_host.checkparam
    unload   i64                        
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    store    i64       n                
    load     i64       n                
    load     i64       1                
    jumple   i64       #2100            
    setcall  i64 /1/1                   
    load     i64       n                
    setarg   i64 /1                     
    callf    i64 /1    &mlib.mrandomint 
    store    i64       x                
    jump               #2099            
#2100: 
    load     i64       n                
    load     i64       0                
    jumpne   i64       #2101            
    setcall  i64 /0/1                   
    callf    i64 /0    &mlib.mrandom    
    store    i64       x                
    jump               #2099            
#2101: 
    load     i64       n                
    load     i64       1                
    jumpne   i64       #2102            
    load     i64       2                
    load     u64       result           
    load     i64       0                
    istorex  u32 /1                     
    setcall  r64 /0/1                   
    callf    r64 /0    &mlib.mrandomreal
    load     u64       result           
    load     i64       8                
    istorex  r64 /1                     
    jump               #2096            
    jump               #2099            
#2102: 
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     i64       n                
    neg      i64                        
    setarg   u64 /1                     
    callp        /2    &mlib.mseed      
    load     i64       0                
    store    i64       x                
#2099: 
#2097: 
    load     i64       x                
    load     u64       result           
    load     i64       8                
    istorex  i64 /1                     
#2096: 
    retproc                             
endproc

proc qq_host.pch_system:
    param    u64       a
    param    u64       result
    setcall  i64 /3/1                   
    load     i64       -999999          
    setarg   i64 /3                     
    load     i64       9                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /3    &qq_host.checkparam
    unload   i64                        
    load     i64       1                
    load     u64       result           
    load     i64       0                
    istorex  u32 /1                     
    setcall  i32 /1                     
    setcall  u64 /2                     
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /2    &qq_lib.convtostringz
    setarg   u64 /1                     
    callf    i32 /1    &system          
    widen    i64/i32                    
    load     u64       result           
    load     i64       8                
    istorex  i64 /1                     
    retproc                             
endproc

proc qq_host.pch_$getparam:
    param    u64       a
    param    u64       result
    setcall  i64 /3/1                   
    load     i64       -999999          
    setarg   i64 /3                     
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /3    &qq_host.checkparam
    unload   i64                        
    load     u64       qq_decls.frameptr
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    load     i64       16               
    mul      i64                        
    subpx    u64 /1                     
    iload    mem:16                     
    load     u64       result           
    istore   mem:16                     
    load     u64       result           
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #2106            
    load     u64       result           
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#2106: 
    retproc                             
endproc

proc qq_host.checkparam:
    param    u64       p
    param    i64       tag
    param    i64       defaultx
    rettype  i64
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpeq   i64 /1    #2109            
    load     i64       tag              
    jumpeq   i64       #2110            
    jump               #2111            
#2109: 
    load     i64       defaultx         
    load     i64       -999999          
    jumpne   i64       #2113            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Missing host param"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#2113: 
    load     i64       defaultx         
    jumpret  i64       #2107            
    jump               #2108            
#2110: 
    load     u64       p                
    load     i64       8                
    iloadx   i64 /1                     
    jumpret  i64       #2107            
    jump               #2108            
#2111: 
#2108: 
    load     i64       tag              
    load     i64       1                
    jumpne   i64       #2115            
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       2                
    jumpeq   i64       #2117            
    jump               #2118            
#2117: 
    load     u64       p                
    load     i64       8                
    iloadx   r64 /1                     
    fix      i64/r64                    
    jumpret  i64       #2107            
    jump               #2116            
#2118: 
#2116: 
#2115: 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       &qq_tables.ttname
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Host param wrong type"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
    load     i64       0                
    jumpret  i64       #2107            
#2107: 
    retfn    i64                        
endproc

proc qq_host.leftstring:
    param    u64       a
    param    i64       n
    param    u64       result
    local    u64       p
    setcall      /4/1                   
    load     i64       1                
    setarg   i64 /4                     
    load     u64       result           
    setarg   u64 /3                     
    load     i64       n                
    setarg   i64 /2                     
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /4    &qq_strings.var_make_stringn
    retproc                             
endproc

proc qq_host.rightstring:
    param    u64       a
    param    i64       n
    param    u64       result
    local    u64       p
    setcall      /4/1                   
    load     i64       1                
    setarg   i64 /4                     
    load     u64       result           
    setarg   u64 /3                     
    load     i64       n                
    setarg   i64 /2                     
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       n                
    sub      i64                        
    addpx    u64 /1                     
    setarg   u64 /1                     
    callp        /4    &qq_strings.var_make_stringn
    retproc                             
endproc

proc qq_host.padstring_right:
    param    u64       a
    param    i64       n
    param    i64       fillchar
    param    u64       result
    local    u64       s
    local    i64       length
    local    i64       av_1
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       length           
    setcall      /2/1                   
    load     u64       result           
    setarg   u64 /2                     
    load     i64       n                
    setarg   i64 /1                     
    callp        /2    &qq_strings.var_new_stringn
    load     u64       result           
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       s                
    load     i64       length           
    jumpf    i64       #2123            
    setcall      /3/1                   
    load     i64       length           
    setarg   u64 /3                     
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     i64       length           
    load     u64 /1    &s               
    addpxto  u64 /1                     
#2123: 
    load     i64       n                
    load     i64       length           
    sub      i64                        
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #2126            
#2124: 
    load     i64       fillchar         
    load     u64       s                
    istore   u8                         
    load     u64 /1    &s               
    incrto   u64 /1                     
    to       i64       #2124            
    opnd     i64       av_1             
#2126: 
    retproc                             
endproc

proc qq_host.padstring_left:
    param    u64       a
    param    i64       n
    param    i64       fillchar
    param    u64       result
    local    u64       s
    local    i64       length
    local    i64       padlen
    local    i64       av_1
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       length           
    load     i64       n                
    load     i64       length           
    sub      i64                        
    store    i64       padlen           
    setcall      /4/1                   
    load     i64       0                
    setarg   i64 /4                     
    load     u64       result           
    setarg   u64 /3                     
    load     i64       n                
    setarg   i64 /2                     
    load     u64       0                
    setarg   u64 /1                     
    callp        /4    &qq_strings.var_make_stringn
    load     u64       result           
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       s                
    load     i64       padlen           
    load     u64 /1    &s               
    addpxto  u64 /1                     
    load     i64       length           
    jumpf    i64       #2129            
    setcall      /3/1                   
    load     i64       length           
    setarg   u64 /3                     
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callp        /3    &memcpy          
#2129: 
    load     i64       padlen           
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #2132            
#2130: 
    load     u64 /1    &s               
    decrto   u64 /1                     
    load     i64       fillchar         
    load     u64       s                
    istore   u8                         
    to       i64       #2130            
    opnd     i64       av_1             
#2132: 
    retproc                             
endproc

proc qq_host.getbounds:
    param    u64       p
    param    u64       dims
    param    i64       lower
    local    i64       n
    load     u64       p                
    jumpt    u64       #2135            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "New: no bounds" 
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#2135: 
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpeq   i64 /1    #2137            
    load     i64       4                
    jumpeq   i64       #2138            
    jump               #2139            
#2137: 
    load     i64       lower            
    load     u64       dims             
    load     i64       0                
    istorex  i64 /1                     
    load     i64       0                
    load     u64       dims             
    load     i64       8                
    istorex  i64 /1                     
    load     i64       0                
    load     u64       dims             
    load     i64       16               
    istorex  i64 /1                     
    jump               #2136            
#2138: 
    load     u64       p                
    load     i64       0                
    iloadx   i64 /1                     
    load     i64       16               
    load     i64       63               
    loadbf   i64                        
    load     u64       dims             
    load     i64       0                
    istorex  i64 /1                     
    load     u64       p                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       dims             
    load     i64       8                
    istorex  i64 /1                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       p                
    load     i64       0                
    iloadx   i64 /1                     
    load     i64       16               
    load     i64       63               
    loadbf   i64                        
    sub      i64                        
    load     i64       1                
    add      i64                        
    load     u64       dims             
    load     i64       16               
    istorex  i64 /1                     
    load     u64       dims             
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       0                
    jumpge   i64       #2141            
    load     i64       0                
    load     u64       dims             
    load     i64       16               
    istorex  i64 /1                     
    load     u64       dims             
    load     i64       0                
    iloadx   i64 /1                     
    load     i64       1                
    sub      i64                        
    load     u64       dims             
    load     i64       8                
    istorex  i64 /1                     
#2141: 
    jump               #2136            
#2139: 
    setcall  i64 /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callf    i64 /1    &qq_vars.var_getintvalue
    store    i64       n                
    load     i64       lower            
    load     u64       dims             
    load     i64       0                
    istorex  i64 /1                     
    load     i64       n                
    double                              
    load     u64       dims             
    load     i64       16               
    istorex  i64 /1                     
    load     u64       dims             
    load     i64       8                
    istorex  i64 /1                     
#2136: 
    retproc                             
endproc

proc qq_host.pch_new:
    param    u64       a
    param    u64       b
    param    u64       c
    param    u64       d
    param    u64       result
    local    mem:16       v
    local    i64       i
    local    i64       t
    local    i64       nbytes
    local    i64       ival
    local    i64       nwords
    local    i64       nbits
    local    i64       offset
    local    i64       elemtype
    local    i64       n
    local    i64       usertag
    local    mem:24       dims
    local    u64       qvar
    local    u64       qint
    local    u64       qbyte
    local    u64       ptr
    local    u64       p
    local    i64       av_1
    local    i64       av_2
    setcall  i64 /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /1    &qq_vars.var_getintvalue
    store    i64       t                
    load     i64       t                
    load     i64       0                
    jumplt   i64       #2145            
    load     i64       t                
    load     i64       qq_tables.ntypes 
    jumple   i64       #2144            
#2145: 
    setcall      /2/1                   
    load     i64       t                
    setarg   i64 /2                     
    load     u64       "New:bad type"   
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#2144: 
    load     i64       t                
    load     i64       256              
    bitor    i64                        
    load     u64       &v               
    load     i64       0                
    istorex  u32 /1                     
    load     i64       0                
    store    i64       usertag          
    load     u64       &qq_tables.ttbasetype
    load     i64       t                
    iloadx   i16 /2                     
    widen    i64/i16                    
    switch   i64 /1/14  #2147           
    opnd     i64       #2148            
#2147: 
    swlabel            #2186            
    swlabel            #2186            
    swlabel            #2192            
    swlabel            #2148            
    swlabel            #2177            
    swlabel            #2189            
    swlabel            #2163            
    swlabel            #2164            
    swlabel            #2149            
    swlabel            #2150            
    swlabel            #2151            
    swlabel            #2182            
    swlabel            #2183            
    swlabel            #2186            
    endsw                               
#2149: 
    setcall      /3/1                   
    load     u64       result           
    setarg   u64 /3                     
    load     u64       c                
    setarg   u64 /2                     
    load     u64       b                
    setarg   u64 /1                     
    callp        /3    &qq_strings.var_new_string
    jump               #2142            
    jump               #2146            
#2150: 
    setcall      /3/1                   
    load     i64       1                
    setarg   i64 /3                     
    load     u64       &dims            
    setarg   u64 /2                     
    load     u64       b                
    setarg   u64 /1                     
    callp        /3    &qq_host.getbounds
    setcall  u64 /3/1                   
    load     u64       c                
    setarg   u64 /3                     
    load     u64       &dims            
    load     i64       0                
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     u64       &dims            
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callf    u64 /3    &qq_lists.obj_newlist
    store    u64       p                
    load     u64       p                
    load     u64       &v               
    load     i64       8                
    istorex  u64 /1                     
    jump               #2146            
#2151: 
    setcall  i64 /1/1                   
    load     u64       b                
    setarg   u64 /1                     
    callf    i64 /1    &qq_vars.var_getintvalue
    store    i64       elemtype         
    setcall      /3/1                   
    load     i64       1                
    setarg   i64 /3                     
    load     u64       &dims            
    setarg   u64 /2                     
    load     u64       c                
    setarg   u64 /1                     
    callp        /3    &qq_host.getbounds
    load     i64       elemtype         
    load     i64       33               
    jumplt   i64       #2153            
    load     i64       elemtype         
    load     i64       35               
    jumpgt   i64       #2153            
    load     i64       8                
    double                              
    store    i64       t                
    load     u64       &v               
    load     i64       0                
    istorex  u8  /1                     
    jump               #2154            
#2153: 
    setcall  u64 /3/1                   
    load     u64       &dims            
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /3                     
    load     u64       &dims            
    load     i64       0                
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     i64       elemtype         
    setarg   i64 /1                     
    callf    u64 /3    &qq_arrays.obj_newarray
    store    u64       p                
! qq_host.pch_new.doarray2:
#2155: 
    load     u64       p                
    load     u64       &v               
    load     i64       8                
    istorex  u64 /1                     
    load     u64       &dims            
    load     i64       16               
    iloadx   i64 /1                     
    jumpf    i64       #2157            
    load     u64       d                
    jumpf    u64       #2159            
    load     u64       d                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpeq   i64       #2159            
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       qbyte            
    load     u64       &dims            
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #2162            
#2160: 
    setcall      /3/1                   
    load     i64       elemtype         
    setarg   i64 /3                     
    load     u64       d                
    setarg   u64 /2                     
    load     u64       qbyte            
    setarg   u64 /1                     
    callp        /3    &qq_packed.var_storepacked
    load     u64       &qq_tables.ttsize
    load     i64       elemtype         
    iloadx   i64 /8                     
    load     u64 /1    &qbyte           
    addpxto  u64 /1                     
    to       i64       #2160            
    opnd     i64       av_1             
#2162: 
#2159: 
#2157: 
    jump               #2146            
#2163: 
    load     i64       t                
    store    i64       usertag          
    load     i64       7                
    load     u64       &v               
    load     i64       0                
    istorex  u8  /1                     
    load     u64       &qq_tables.tttarget
    load     i64       t                
    iloadx   i16 /2                     
    widen    i64/i16                    
    store    i64       elemtype         
    load     u64       &qq_tables.ttlength
    load     i64       t                
    iloadx   i64 /8                     
    load     u64       &dims            
    load     i64       16               
    istorex  i64 /1                     
    load     u64       &qq_tables.ttlower
    load     i64       t                
    iloadx   i64 /8                     
    load     u64       &dims            
    load     i64       0                
    istorex  i64 /1                     
    load     u64       &dims            
    load     i64       16               
    iloadx   i64 /1                     
    load     u64       &dims            
    load     i64       0                
    iloadx   i64 /1                     
    add      i64                        
    load     i64       1                
    sub      i64                        
    load     u64       &dims            
    load     i64       8                
    istorex  i64 /1                     
    load     u64       b                
    store    u64       d                
    setcall  u64 /1/1                   
    load     i64       t                
    setarg   i64 /1                     
    callf    u64 /1    &qq_arrays.obj_newarray_u
    store    u64       p                
    jump               #2155            
    jump               #2146            
#2164: 
    setcall  i64 /1/1                   
    load     u64       b                
    setarg   u64 /1                     
    callf    i64 /1    &qq_vars.var_getintvalue
    store    i64       elemtype         
    load     i64       elemtype         
    load     i64       33               
    jumplt   i64 /1    #2167            
    load     i64       35               
    jumple   i64       #2166            
#2167: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "new: bad bits elem"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#2166: 
    setcall      /3/1                   
    load     i64       1                
    setarg   i64 /3                     
    load     u64       &dims            
    setarg   u64 /2                     
    load     u64       c                
    setarg   u64 /1                     
    callp        /3    &qq_host.getbounds
! qq_host.pch_new.dobits2:
#2154: 
    setcall  u64 /3/1                   
    load     u64       &dims            
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /3                     
    load     u64       &dims            
    load     i64       0                
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     i64       elemtype         
    setarg   i64 /1                     
    callf    u64 /3    &qq_bits.obj_newbits
    store    u64       p                
    load     u64       p                
    load     u64       &v               
    load     i64       8                
    istorex  u64 /1                     
    load     u64       &dims            
    load     i64       16               
    iloadx   i64 /1                     
    jumpf    i64       #2169            
    load     u64       d                
    jumpf    u64       #2171            
    load     u64       d                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpeq   i64       #2171            
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       qbyte            
    load     i64       0                
    store    i64       offset           
    load     u64       &dims            
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       av_2             
    load     i64       av_2             
    load     i64       0                
    jumple   i64       #2174            
#2172: 
    setcall      /5/1                   
    load     i64       0                
    setarg   i64 /5                     
    load     i64       elemtype         
    setarg   i64 /4                     
    load     u64       d                
    setarg   u64 /3                     
    load     i64       offset           
    setarg   i64 /2                     
    load     u64       qbyte            
    setarg   u64 /1                     
    callp        /5    &qq_vars.var_storebit
    load     u64       &qq_tables.ttbitwidth
    load     i64       elemtype         
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64 /1    &offset          
    addto    i64                        
    load     i64       offset           
    load     i64       8                
    jumplt   i64       #2176            
    load     i64       0                
    store    i64       offset           
    load     u64 /1    &qbyte           
    incrto   u64 /1                     
#2176: 
    to       i64       #2172            
    opnd     i64       av_2             
#2174: 
#2171: 
#2169: 
    jump               #2146            
#2177: 
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     u64       &dims            
    setarg   u64 /2                     
    load     u64       b                
    setarg   u64 /1                     
    callp        /3    &qq_host.getbounds
    load     u64       &dims            
    load     i64       0                
    iloadx   i64 /1                     
    load     i64       0                
    jumpge   i64       #2179            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "new:set:lwb"    
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#2179: 
    load     u64       &dims            
    load     i64       0                
    iloadx   i64 /1                     
    load     i64       0                
    jumpeq   i64       #2181            
    load     i64       0                
    load     u64       &dims            
    load     i64       0                
    istorex  i64 /1                     
    load     u64       &dims            
    load     i64       8                
    iloadx   i64 /1                     
    load     i64       1                
    add      i64                        
    load     u64       &dims            
    load     i64       16               
    istorex  i64 /1                     
#2181: 
    setcall  u64 /1/1                   
    load     u64       &dims            
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callf    u64 /1    &qq_sets.obj_newset
    store    u64       p                
    load     u64       p                
    load     u64       &v               
    load     i64       8                
    istorex  u64 /1                     
    jump               #2146            
#2182: 
    setcall  u64 /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     i64       t                
    setarg   i64 /1                     
    callf    u64 /2    &qq_records.obj_new_record
    store    u64       p                
    setcall      /3/1                   
    load     u64       &v               
    setarg   u64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     i64       t                
    setarg   i64 /1                     
    callp        /3    &qq_vars.var_fromobj
    load     i64       12               
    load     u64       &v               
    load     i64       0                
    istorex  u8  /1                     
    load     i64       t                
    store    i64       usertag          
    jump               #2146            
#2183: 
    setcall  u64 /1/1                   
    load     i64       t                
    setarg   i64 /1                     
    callf    u64 /1    &qq_packed.obj_new_struct
    store    u64       p                
    setcall      /3/1                   
    load     u64       &v               
    setarg   u64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     i64       t                
    setarg   i64 /1                     
    callp        /3    &qq_vars.var_objtovar
    load     i64       13               
    load     u64       &v               
    load     i64       0                
    istorex  u8  /1                     
    load     i64       t                
    store    i64       usertag          
    load     u64       b                
    jumpf    u64       #2185            
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpeq   i64       #2185            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "New: struct init"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#2185: 
    jump               #2146            
#2186: 
    load     i64       0                
    load     u64       &v               
    load     i64       8                
    istorex  i64 /1                     
    load     i64       0                
    load     u64       &v               
    load     i64       1                
    istorex  u8  /1                     
    load     u64       b                
    jumpf    u64       #2188            
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpeq   i64       #2188            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "NEW(int/value)" 
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#2188: 
    jump               #2146            
#2189: 
    setcall      /3/1                   
    load     i64       1                
    setarg   i64 /3                     
    load     u64       &dims            
    setarg   u64 /2                     
    load     u64       b                
    setarg   u64 /1                     
    callp        /3    &qq_host.getbounds
    load     u64       &dims            
    load     i64       0                
    iloadx   i64 /1                     
    load     i64       1                
    jumpeq   i64       #2191            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "new:dict:lwb"   
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#2191: 
    setcall  u64 /1/1                   
    load     u64       &dims            
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callf    u64 /1    &qq_dicts.obj_new_dict
    store    u64       p                
    load     u64       p                
    load     u64       &v               
    load     i64       8                
    istorex  u64 /1                     
    jump               #2146            
#2192: 
    setcall      /1/1                   
    load     u64       result           
    setarg   u64 /1                     
    callp        /1    &qq_decimal.var_empty_dec
    jump               #2142            
    jump               #2146            
#2148: 
    setcall      /2/1                   
    load     i64       t                
    setarg   i64 /2                     
    load     u64       "new"            
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#2146: 
! qq_host.pch_new.finish:
    load     i64       usertag          
    jumpf    i64       #2195            
    load     i64       usertag          
    load     u64       &v               
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       6                
    istorex  u16 /1                     
#2195: 
    load     mem:16       v             
    load     u64       result           
    istore   mem:16                     
#2142: 
    retproc                             
endproc

proc qq_host.pch_gethostname:
    param    u64       result
    setcall  u64 /2                     
    setcall  u64 /0                     
    callf    u64 /0    &mlinux.os_gethostname
    setarg   u64 /2                     
    load     u64       &qq_host.pch_gethostname.name
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     u64       result           
    setarg   u64 /2                     
    load     u64       &qq_host.pch_gethostname.name
    setarg   u64 /1                     
    callp        /3    &qq_strings.var_make_string
    retproc                             
endproc

proc qq_host.pch_getprogname:
    param    u64       result
    setcall  u64 /2/1                   
    load     u64       qq_cli.inputfile 
    setarg   u64 /2                     
    load     u64       &qq_host.pch_getprogname.name
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     u64       result           
    setarg   u64 /2                     
    load     u64       &qq_host.pch_getprogname.name
    setarg   u64 /1                     
    callp        /3    &qq_strings.var_make_string
    retproc                             
endproc

proc qq_host.pch_$test:
    param    u64       a
    param    u64       b
    param    u64       c
    param    u64       result
    local    u64       p
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "$TEST:"         
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &qq_tables.ttname
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     i64       1                
    load     u64       result           
    load     i64       0                
    istorex  u32 /1                     
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    add      i64                        
    load     u64       c                
    load     i64       8                
    iloadx   i64 /1                     
    add      i64                        
    load     u64       result           
    load     i64       8                
    istorex  i64 /1                     
    retproc                             
endproc

proc qq_host.pch_$test2:
    param    u64       a
    param    u64       result
    load     i64       0                
    load     u64       result           
    load     i64       0                
    istorex  u32 /1                     
    retproc                             
endproc

proc qq_host.pch_$refcount:
    param    u64       a
    param    u64       result
    load     i64       1                
    load     u64       result           
    load     i64       0                
    istorex  u32 /1                     
    load     u64       a                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #2202            
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   u32 /1                     
    widen    i64/u32                    
    load     i64       1                
    sub      i64                        
    load     u64       result           
    load     i64       8                
    istorex  i64 /1                     
    jump               #2201            
#2202: 
    load     i64       0                
    load     u64       result           
    load     i64       8                
    istorex  i64 /1                     
#2201: 
    retproc                             
endproc

proc qq_host.pch_testkey:
    param    u64       result
    load     i64       1                
    load     u64       result           
    load     i64       0                
    istorex  u32 /1                     
    setcall  i64 /0/1                   
    callf    i64 /0    &mlinux.os_kbhit 
    load     u64       result           
    load     i64       8                
    istorex  i64 /1                     
    retproc                             
endproc

proc qq_host.pch_getos:
    param    u64       result
    setcall      /3                     
    load     i64       0                
    setarg   i64 /3                     
    load     u64       result           
    setarg   u64 /2                     
    setcall  u64 /0                     
    callf    u64 /0    &mlinux.os_getos 
    setarg   u64 /1                     
    callp        /3    &qq_strings.var_make_string
    retproc                             
endproc

proc qq_host.pch_setmesshandler:
    param    u64       fn
    load     u64       fn               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       17               
    jumpne   i64       #2208            
    load     u64       fn               
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       5                
    jumpeq   i64       #2207            
#2208: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Not proc ref"   
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#2207: 
    load     u64       fn               
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       80               
    iloadx   u64 /1                     
    store    u64       qq_decls.pcl_callbackfn
    setcall      /1/1                   
    load     u64       &qq_runaux.runproc_m
    setarg   u64 /1                     
    callp        /1    &mlinux.os_setmesshandler
    retproc                             
endproc

proc qq_host.pch_$smallmemtotal:
    param    u64       result
    load     i64       1                
    load     u64       result           
    load     i64       0                
    istorex  u32 /1                     
    load     i64       mlib.smallmemtotal
    load     i64       16               
    idiv     i64                        
    load     u64       result           
    load     i64       8                
    istorex  i64 /1                     
    retproc                             
endproc

proc qq_host.pch_$id:
    param    u64       a
    param    u64       result
    load     i64       1                
    load     u64       result           
    load     i64       0                
    istorex  u32 /1                     
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       result           
    load     i64       8                
    istorex  i64 /1                     
    retproc                             
endproc

proc qq_host.pch_iswindows:
    param    u64       result
    load     i64       1                
    load     u64       result           
    load     i64       0                
    istorex  u32 /1                     
    setcall  i64 /0/1                   
    callf    i64 /0    &mlinux.os_iswindows
    load     u64       result           
    load     i64       8                
    istorex  i64 /1                     
    retproc                             
endproc

proc qq_host.pch_$setdebug:
    param    u64       a
    setcall  i64 /3/1                   
    load     i64       -999999          
    setarg   i64 /3                     
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /3    &qq_host.checkparam
    unload   i64                        
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "SETDEBUG................."
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    store    i64       mlib.fdebug      
    retproc                             
endproc

proc qq_host.pch_copy:
    param    u64       a
    param    u64       dest
    load     u64       a                
    iload    mem:16                     
    load     u64       dest             
    istore   mem:16                     
    load     u64       dest             
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #2215            
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_duplu
#2215: 
    retproc                             
endproc

proc qq_host.pch_gethash:
    param    u64       a
    param    u64       result
    load     i64       1                
    load     u64       result           
    load     i64       0                
    istorex  u32 /1                     
    setcall  i64 /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /1    &qq_vars.var_gethashvalue
    load     u64       result           
    load     i64       8                
    istorex  i64 /1                     
    retproc                             
endproc

proc qq_host.pch_makeempty:
    param    u64       a
    param    u64       result
    local    u64       p
    local    i64       t
    load     u64       &qq_tables.ttbasetype
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   i16 /2                     
    widen    i64/i16                    
    store    i64       t                
    load     i64       t                
    load     i64       18               
    jumpne   i64       #2219            
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    store    i64       t                
#2219: 
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     i64       t                
    load     i64       10               
    jumpeq   i64 /1    #2221            
    load     i64       9                
    jumpeq   i64 /1    #2222            
    load     i64       11               
    jumpeq   i64       #2223            
    jump               #2224            
#2221: 
    setcall      /2/1                   
    load     u64       result           
    setarg   u64 /2                     
    load     u64       p                
    load     i64       6                
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /1                     
    callp        /2    &qq_lists.var_empty_list
    jump               #2217            
    jump               #2220            
#2222: 
    load     u64       qq_strings.emptystring
    store    u64       p                
    load     u64       p                
    incrto   u32 /1                     
    jump               #2220            
#2223: 
    setcall      /4/1                   
    load     u64       result           
    setarg   u64 /4                     
    load     u64       p                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    loadbit  i64                        
    setarg   i64 /3                     
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    setarg   i64 /2                     
    load     i64       t                
    setarg   i64 /1                     
    callp        /4    &qq_arrays.var_empty_array
    jump               #2217            
    jump               #2220            
#2224: 
    setcall      /2/1                   
    load     i64       t                
    setarg   i64 /2                     
    load     u64       "makeempty?"     
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#2220: 
    load     i64       t                
    load     i64       256              
    bitor    i64                        
    load     u64       result           
    load     i64       0                
    istorex  u32 /1                     
    load     u64       p                
    load     u64       result           
    load     i64       8                
    istorex  u64 /1                     
#2217: 
    retproc                             
endproc

proc qq_host.pch_$infinity:
    param    u64       dest
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.var_setinf
    retproc                             
endproc

proc qq_host.pch_$nan:
    param    u64       dest
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_decimal.var_setnan
    retproc                             
endproc

proc qq_host.setcmdparam:
    param    i64       index
    param    u64       s
    load     u64       s                
    load     u64       0                
    jumpne   u64       #2229            
    load     i64       index            
    store    i64       qq_decls.nqparams
    jump               #2228            
#2229: 
    load     i64       index            
    load     i64       32               
    jumpgt   i64       #2230            
    setcall  u64 /1/1                   
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /1    &mlib.pcm_copyheapstring
    load     u64       &qq_decls.qparamtable
    load     i64       index            
    istorex  u64 /8/-8                  
    load     i64       index            
    load     u64 /1    &qq_decls.nqparams
    maxto    i64                        
#2230: 
#2228: 
    retproc                             
endproc

proc qq_host.pch_$nprocs:
    param    u64       result
    load     i64       1                
    load     u64       result           
    load     i64       0                
    istorex  u32 /1                     
    load     i64       qq_decls.nproclist
    load     u64       result           
    load     i64       8                
    istorex  i64 /1                     
    retproc                             
endproc

proc qq_host.initprocrefs:
    local    u64       pp
    local    i64       i
    load     i64       qq_host.initprocrefs.oldnprocs
    load     i64       qq_decls.nproclist
    jumpne   i64       #2234            
    jump               #2232            
#2234: 
    setcall  u64 /1/1                   
    load     i64       qq_decls.nproclist
    load     i64       8                
    mul      i64                        
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    store    u64       qq_host.procrefs 
    load     u64       qq_decls.proclist
    store    u64       pp               
    load     i64       1                
    store    i64       i                
    load     i64       qq_decls.nproclist
    load     i64       1                
    jumplt   i64       #2237            
#2235: 
    load     u64       pp               
    load     i64       0                
    iloadx   u64 /1                     
    load     u64       qq_host.procrefs 
    load     i64       i                
    istorex  u64 /8/-8                  
    load     u64       pp               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pp               
    forup    i64 /1    #2235            
    opnd     i64       i                
    opnd     i64       qq_decls.nproclist
#2237: 
    load     i64       qq_decls.nproclist
    store    i64       qq_host.initprocrefs.oldnprocs
#2232: 
    retproc                             
endproc

proc qq_host.pch_$procname:
    param    u64       a
    param    u64       result
    local    i64       n
    setcall  i64 /3/1                   
    load     i64       -999999          
    setarg   i64 /3                     
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /3    &qq_host.checkparam
    store    i64       n                
    setcall      /0/1                   
    callp        /0    &qq_host.initprocrefs
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     u64       result           
    setarg   u64 /2                     
    load     u64       qq_host.procrefs 
    load     i64       n                
    iloadx   u64 /8/-8                  
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &qq_strings.var_make_string
    retproc                             
endproc

proc qq_host.pch_$procref:
    param    u64       a
    param    u64       result
    local    i64       n
    local    u64       pp
    setcall  i64 /3/1                   
    load     i64       -999999          
    setarg   i64 /3                     
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /3    &qq_host.checkparam
    store    i64       n                
    setcall      /0/1                   
    callp        /0    &qq_host.initprocrefs
    load     i64       17               
    load     u64       result           
    load     i64       0                
    istorex  u32 /1                     
    load     u64       qq_host.procrefs 
    load     i64       n                
    iloadx   u64 /8/-8                  
    load     u64       result           
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_host.pch_$getstdinout:
    param    u64       a
    param    u64       result
    local    i64       n
    setcall  i64 /3/1                   
    load     i64       -999999          
    setarg   i64 /3                     
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /3    &qq_host.checkparam
    store    i64       n                
    load     i64       16               
    load     u64       result           
    load     i64       0                
    istorex  u32 /1                     
    startmx                             
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    load     i64       1                
    jumpne   i64       #2242            
    setcall  u64 /0/1                   
    callf    u64 /0    &mlinux.os_getstdout
    resetmx  u64                        
    jump               #2241            
#2242: 
    setcall  u64 /0/1                   
    callf    u64 /0    &mlinux.os_getstdin
    endmx    u64                        
#2241: 
    load     u64       result           
    load     i64       8                
    istorex  u64 /1                     
    load     i64       0                
    load     u64       result           
    load     i64       4                
    istorex  u32 /1                     
    retproc                             
endproc

proc qq_lex.lexreadtoken:
    local    i64       c
    local    i64       csum
    local    i64       hsum
    local    i64       commentseen
    local    u64       pstart
    local    u64       pnext
    local    u64       p
    local    u64       ss
    load     i64       0                
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
#2244: 
    load     u64       qq_lex.lxsptr    
    store    u64       qq_lex.lxstart   
    load     u64 /1    &qq_lex.lxsptr   
    loadincr u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    switch   i64 /0/125  #2246          
    opnd     i64       #2247            
#2246: 
    swlabel            #2366            
    swlabel            #2247            
    swlabel            #2247            
    swlabel            #2247            
    swlabel            #2247            
    swlabel            #2247            
    swlabel            #2247            
    swlabel            #2247            
    swlabel            #2247            
    swlabel            #2363            
    swlabel            #2365            
    swlabel            #2247            
    swlabel            #2247            
    swlabel            #2364            
    swlabel            #2247            
    swlabel            #2247            
    swlabel            #2247            
    swlabel            #2247            
    swlabel            #2247            
    swlabel            #2247            
    swlabel            #2247            
    swlabel            #2247            
    swlabel            #2247            
    swlabel            #2247            
    swlabel            #2247            
    swlabel            #2247            
    swlabel            #2366            
    swlabel            #2247            
    swlabel            #2247            
    swlabel            #2247            
    swlabel            #2247            
    swlabel            #2247            
    swlabel            #2363            
    swlabel            #2273            
    swlabel            #2361            
    swlabel            #2273            
    swlabel            #2248            
    swlabel            #2339            
    swlabel            #2356            
    swlabel            #2360            
    swlabel            #2319            
    swlabel            #2320            
    swlabel            #2335            
    swlabel            #2327            
    swlabel            #2308            
    swlabel            #2330            
    swlabel            #2300            
    swlabel            #2338            
    swlabel            #2264            
    swlabel            #2264            
    swlabel            #2264            
    swlabel            #2264            
    swlabel            #2264            
    swlabel            #2264            
    swlabel            #2264            
    swlabel            #2264            
    swlabel            #2264            
    swlabel            #2264            
    swlabel            #2310            
    swlabel            #2309            
    swlabel            #2345            
    swlabel            #2340            
    swlabel            #2351            
    swlabel            #2326            
    swlabel            #2325            
    swlabel            #2256            
    swlabel            #2256            
    swlabel            #2256            
    swlabel            #2256            
    swlabel            #2256            
    swlabel            #2261            
    swlabel            #2256            
    swlabel            #2256            
    swlabel            #2256            
    swlabel            #2256            
    swlabel            #2256            
    swlabel            #2256            
    swlabel            #2256            
    swlabel            #2256            
    swlabel            #2256            
    swlabel            #2256            
    swlabel            #2256            
    swlabel            #2256            
    swlabel            #2256            
    swlabel            #2256            
    swlabel            #2256            
    swlabel            #2256            
    swlabel            #2256            
    swlabel            #2256            
    swlabel            #2256            
    swlabel            #2256            
    swlabel            #2321            
    swlabel            #2281            
    swlabel            #2322            
    swlabel            #2324            
    swlabel            #2248            
    swlabel            #2362            
    swlabel            #2248            
    swlabel            #2248            
    swlabel            #2248            
    swlabel            #2248            
    swlabel            #2248            
    swlabel            #2258            
    swlabel            #2248            
    swlabel            #2248            
    swlabel            #2248            
    swlabel            #2248            
    swlabel            #2248            
    swlabel            #2248            
    swlabel            #2248            
    swlabel            #2248            
    swlabel            #2248            
    swlabel            #2248            
    swlabel            #2248            
    swlabel            #2248            
    swlabel            #2248            
    swlabel            #2248            
    swlabel            #2248            
    swlabel            #2248            
    swlabel            #2248            
    swlabel            #2248            
    swlabel            #2248            
    swlabel            #2248            
    swlabel            #2298            
    swlabel            #2323            
    swlabel            #2299            
    endsw                               
#2248: 
! qq_lex.lexreadtoken.dolower:
#2249: 
    load     u64       qq_lex.lxsptr    
    load     i64       1                
    subpx    u64 /1                     
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    istorex  u64 /1                     
! qq_lex.lexreadtoken.doname:
#2250: 
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    iloadx   u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    store    i64       hsum             
#2251: 
    load     u64       &qq_lex.namemap  
    load     u64 /1    &qq_lex.lxsptr   
    loadincr u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    double                              
    store    i64       c                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #2253            
    load     i64       2                
    jumpeq   i64       #2254            
    jump               #2255            
#2253: 
    load     i64       hsum             
    load     i64       4                
    shl      i64                        
    load     i64       hsum             
    sub      i64                        
    load     i64       c                
    add      i64                        
    store    i64       hsum             
    jump               #2251            
#2254: 
    load     i64       c                
    load     i64       32               
    add      u64                        
    load     u64       qq_lex.lxsptr    
    load     i64       1                
    subpx    u64 /1                     
    istore   u8                         
    load     i64       hsum             
    load     i64       4                
    shl      i64                        
    load     i64       hsum             
    sub      i64                        
    load     i64       c                
    add      i64                        
    load     i64       32               
    add      i64                        
    store    i64       hsum             
    jump               #2251            
#2255: 
    load     u64 /1    &qq_lex.lxsptr   
    decrto   u64 /1                     
    jump               #2252            
    jump               #2251            
#2252: 
    setcall  i64 /3/1                   
    load     i64       hsum             
    load     i64       5                
    shl      i64                        
    load     i64       hsum             
    sub      i64                        
    load     i64       32767            
    bitand   i64                        
    setarg   i64 /3                     
    load     u64       qq_lex.lxsptr    
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    iloadx   u64 /1                     
    subp     i64 /1                     
    setarg   i64 /2                     
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /3    &qq_lex.lookup   
    unload   i64                        
    jump               #2243            
    jump               #2244            
#2256: 
! qq_lex.lexreadtoken.doupper:
#2257: 
    load     u64       qq_lex.lxsptr    
    load     i64       1                
    subpx    u64 /1                     
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    istorex  u64 /1                     
    load     i64       32               
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    iloadx   u64 /1                     
    addto    u8                         
    jump               #2250            
    jump               #2244            
#2258: 
    load     u64       qq_lex.lxsptr    
    iload    u8                         
    widen    u64/u8                     
    load     u64       34               
    jumpeq   u64       #2260            
    jump               #2249            
#2260: 
    setcall      /0/1                   
    callp        /0    &qq_lex.readrawstring
    jump               #2243            
    jump               #2244            
#2261: 
    load     u64       qq_lex.lxsptr    
    iload    u8                         
    widen    u64/u8                     
    load     u64       34               
    jumpeq   u64       #2263            
    jump               #2257            
#2263: 
    setcall      /0/1                   
    callp        /0    &qq_lex.readrawstring
    jump               #2243            
    jump               #2244            
#2264: 
    load     u64       qq_lex.lxsptr    
    iload    u8                         
    widen    u64/u8                     
    load     u64       41               
    jumpeq   u64 /1    #2266            
    load     u64       13               
    jumpeq   u64 /1    #2266            
    load     u64       44               
    jumpeq   u64 /1    #2266            
    load     u64       32               
    jumpeq   u64 /1    #2266            
    load     u64       120              
    jumpeq   u64 /1    #2267            
    load     u64       88               
    jumpeq   u64       #2267            
    jump               #2268            
#2266: 
    load     i64       63               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       1                
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
    load     u64       qq_lex.lxstart   
    iload    u8                         
    widen    u64/u8                     
    load     u64       48               
    sub      i64                        
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    istorex  i64 /1                     
    jump               #2265            
#2267: 
    load     u64       qq_lex.lxstart   
    iload    u8                         
    widen    u64/u8                     
    load     u64       48               
    jumpeq   u64 /1    #2270            
    load     u64       50               
    jumpeq   u64       #2271            
    jump               #2272            
#2270: 
    load     u64 /1    &qq_lex.lxsptr   
    incrto   u64 /1                     
    setcall      /0/1                   
    callp        /0    &qq_lex.readhex  
    jump               #2269            
#2271: 
    load     u64 /1    &qq_lex.lxsptr   
    incrto   u64 /1                     
    setcall      /0/1                   
    callp        /0    &qq_lex.readbin  
    jump               #2269            
#2272: 
    setcall      /1/1                   
    load     u64       "Bad base"       
    setarg   u64 /1                     
    callp        /1    &qq_lib.lxerror  
#2269: 
    jump               #2265            
#2268: 
    load     u64 /1    &qq_lex.lxsptr   
    decrto   u64 /1                     
    setcall      /0/1                   
    callp        /0    &qq_lex.readdec  
#2265: 
    jump               #2243            
    jump               #2244            
#2273: 
! qq_lex.lexreadtoken.docomment:
#2275: 
    load     u64 /1    &qq_lex.lxsptr   
    loadincr u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    double                              
    store    i64       c                
    load     i64       13               
    jumpeq   i64 /1    #2277            
    load     i64       10               
    jumpeq   i64 /1    #2278            
    load     i64       26               
    jumpeq   i64 /1    #2279            
    load     i64       0                
    jumpeq   i64       #2279            
    jump               #2280            
#2277: 
    load     u64 /1    &qq_lex.lxsptr   
    incrto   u64 /1                     
    load     u64 /1    &qq_lex.lxlineno 
    incrto   i64 /1                     
    jump               #2276            
    jump               #2275            
#2278: 
    load     u64 /1    &qq_lex.lxlineno 
    incrto   i64 /1                     
    jump               #2276            
    jump               #2275            
#2279: 
    load     u64 /1    &qq_lex.lxsptr   
    decrto   u64 /1                     
    jump               #2276            
    jump               #2275            
#2280: 
    jump               #2275            
#2276: 
    load     i64       61               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    jump               #2243            
    jump               #2244            
#2281: 
    load     i64       0                
    store    i64       commentseen      
#2282: 
    load     u64 /1    &qq_lex.lxsptr   
    loadincr u64 /1                     
    iload    u8                         
    widen    u64/u8                     
    load     u64       13               
    jumpeq   u64 /1    #2284            
    load     u64       10               
    jumpeq   u64 /1    #2285            
    load     u64       26               
    jumpeq   u64 /1    #2286            
    load     u64       0                
    jumpeq   u64 /1    #2286            
    load     u64       32               
    jumpeq   u64 /1    #2287            
    load     u64       9                
    jumpeq   u64 /1    #2287            
    load     u64       33               
    jumpeq   u64       #2288            
    jump               #2289            
#2284: 
    load     u64 /1    &qq_lex.lxsptr   
    incrto   u64 /1                     
    load     u64 /1    &qq_lex.lxlineno 
    incrto   i64 /1                     
    jump               #2283            
    jump               #2282            
#2285: 
    load     u64 /1    &qq_lex.lxlineno 
    incrto   i64 /1                     
    jump               #2283            
    jump               #2282            
#2286: 
    load     i64       62               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     u64 /1    &qq_lex.lxsptr   
    decrto   u64 /1                     
    jump               #2243            
    jump               #2282            
#2287: 
    jump               #2282            
#2288: 
    load     i64       1                
    store    i64       commentseen      
    jump               #2282            
#2289: 
    load     i64       commentseen      
    jumpt    i64       #2291            
    setcall      /1/1                   
    load     u64       "\\ not followed by eol"
    setarg   u64 /1                     
    callp        /1    &qq_lib.lxerror  
#2291: 
    jump               #2282            
#2283: 
#2292: 
    load     u64 /1    &qq_lex.lxsptr   
    loadincr u64 /1                     
    iload    u8                         
    widen    u64/u8                     
    load     u64       13               
    jumpeq   u64 /1    #2294            
    load     u64       10               
    jumpeq   u64 /1    #2295            
    load     u64       32               
    jumpeq   u64 /1    #2296            
    load     u64       9                
    jumpeq   u64       #2296            
    jump               #2297            
#2294: 
    load     u64 /1    &qq_lex.lxsptr   
    incrto   u64 /1                     
    load     u64 /1    &qq_lex.lxlineno 
    incrto   i64 /1                     
    jump               #2292            
#2295: 
    load     u64 /1    &qq_lex.lxlineno 
    incrto   i64 /1                     
    jump               #2292            
#2296: 
    jump               #2292            
#2297: 
    load     u64 /1    &qq_lex.lxsptr   
    decrto   u64 /1                     
    jump               #2293            
    jump               #2292            
#2293: 
    jump               #2244            
#2298: 
    load     i64       13               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    jump               #2243            
    jump               #2244            
#2299: 
    load     i64       14               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    jump               #2243            
    jump               #2244            
#2300: 
    load     u64       qq_lex.lxsptr    
    iload    u8                         
    widen    u64/u8                     
    load     u64       46               
    jumpeq   u64       #2302            
    jump               #2303            
#2302: 
    load     u64 /1    &qq_lex.lxsptr   
    incrto   u64 /1                     
    load     u64       qq_lex.lxsptr    
    iload    u8                         
    widen    u64/u8                     
    load     u64       46               
    jumpne   u64       #2305            
    load     u64 /1    &qq_lex.lxsptr   
    incrto   u64 /1                     
    load     i64       21               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    jump               #2304            
#2305: 
    load     i64       20               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       87               
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
#2304: 
    jump               #2243            
    jump               #2301            
#2303: 
    load     u64       qq_lex.lxsptr    
    iload    u8                         
    widen    i64/u8                     
    load     i64       48               
    jumplt   i64 /1    #2307            
    load     i64       57               
    jumpgt   i64       #2307            
    load     u64 /1    &qq_lex.lxsptr   
    decrto   u64 /1                     
    setcall      /0/1                   
    callp        /0    &qq_lex.readreal 
    jump               #2243            
    jump               #2306            
#2307: 
    load     i64       2                
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    jump               #2243            
#2306: 
#2301: 
    jump               #2244            
#2308: 
    load     i64       3                
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    jump               #2243            
    jump               #2244            
#2309: 
    load     i64       4                
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    jump               #2243            
    jump               #2244            
#2310: 
    load     u64       qq_lex.lxsptr    
    iload    u8                         
    widen    u64/u8                     
    load     u64       61               
    jumpeq   u64 /1    #2312            
    load     u64       58               
    jumpeq   u64       #2313            
    jump               #2314            
#2312: 
    load     u64 /1    &qq_lex.lxsptr   
    incrto   u64 /1                     
    load     i64       6                
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    jump               #2311            
#2313: 
    load     u64 /1    &qq_lex.lxsptr   
    incrto   u64 /1                     
    load     u64       qq_lex.lxsptr    
    iload    u8                         
    widen    u64/u8                     
    load     u64       61               
    jumpeq   u64       #2316            
    jump               #2317            
#2316: 
    load     u64 /1    &qq_lex.lxsptr   
    incrto   u64 /1                     
    load     i64       6                
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       1                
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
    jump               #2315            
#2317: 
    jump               #2318            
#2315: 
    jump               #2311            
#2314: 
    load     i64       5                
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
#2311: 
    jump               #2243            
    jump               #2244            
#2319: 
    load     i64       9                
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    jump               #2243            
    jump               #2244            
#2320: 
    load     i64       10               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    jump               #2243            
    jump               #2244            
#2321: 
    load     i64       11               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    jump               #2243            
    jump               #2244            
#2322: 
    load     i64       12               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    jump               #2243            
    jump               #2244            
#2323: 
    load     i64       16               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    jump               #2243            
    jump               #2244            
#2324: 
    load     i64       15               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       1                
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
    jump               #2243            
    jump               #2244            
#2325: 
    load     i64       17               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    jump               #2243            
    jump               #2244            
#2326: 
    load     i64       18               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    jump               #2243            
    jump               #2244            
#2327: 
    load     i64       22               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       101              
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
    load     u64       qq_lex.lxsptr    
    iload    u8                         
    widen    u64/u8                     
    load     u64       43               
    jumpne   u64       #2329            
    load     u64 /1    &qq_lex.lxsptr   
    incrto   u64 /1                     
    load     i64       60               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       0                
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
#2329: 
    jump               #2243            
    jump               #2244            
#2330: 
    load     i64       23               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       102              
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
    load     u64       qq_lex.lxsptr    
    iload    u8                         
    widen    u64/u8                     
    load     u64       45               
    jumpeq   u64 /1    #2332            
    load     u64       62               
    jumpeq   u64       #2333            
    jump               #2334            
#2332: 
    load     u64 /1    &qq_lex.lxsptr   
    incrto   u64 /1                     
    load     i64       60               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       1                
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
    jump               #2331            
#2333: 
    load     u64 /1    &qq_lex.lxsptr   
    incrto   u64 /1                     
    load     i64       8                
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    jump               #2331            
#2334: 
#2331: 
    jump               #2243            
    jump               #2244            
#2335: 
    load     i64       24               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       103              
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
    load     u64       qq_lex.lxsptr    
    iload    u8                         
    widen    u64/u8                     
    load     u64       42               
    jumpne   u64       #2337            
    load     u64 /1    &qq_lex.lxsptr   
    incrto   u64 /1                     
    load     i64       41               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       121              
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
#2337: 
    jump               #2243            
    jump               #2244            
#2338: 
    load     i64       25               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       104              
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
    jump               #2243            
    jump               #2244            
#2339: 
    load     i64       26               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       105              
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
    jump               #2243            
    jump               #2244            
#2340: 
    load     u64       qq_lex.lxsptr    
    iload    u8                         
    widen    u64/u8                     
    load     u64       62               
    jumpeq   u64 /1    #2342            
    load     u64       61               
    jumpeq   u64       #2343            
    jump               #2344            
#2342: 
    load     i64       7                
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     u64 /1    &qq_lex.lxsptr   
    incrto   u64 /1                     
    jump               #2341            
#2343: 
    load     i64       42               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       120              
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
    load     u64 /1    &qq_lex.lxsptr   
    incrto   u64 /1                     
    jump               #2341            
#2344: 
    load     i64       43               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       0                
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
#2341: 
    jump               #2243            
    jump               #2244            
#2345: 
    load     u64       qq_lex.lxsptr    
    iload    u8                         
    widen    u64/u8                     
    load     u64       61               
    jumpeq   u64 /1    #2347            
    load     u64       62               
    jumpeq   u64 /1    #2348            
    load     u64       60               
    jumpeq   u64       #2349            
    jump               #2350            
#2347: 
    load     u64 /1    &qq_lex.lxsptr   
    incrto   u64 /1                     
    load     i64       46               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       3                
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
    jump               #2346            
#2348: 
    load     u64 /1    &qq_lex.lxsptr   
    incrto   u64 /1                     
    load     i64       44               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       1                
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
    jump               #2346            
#2349: 
    load     u64 /1    &qq_lex.lxsptr   
    incrto   u64 /1                     
    load     i64       34               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       111              
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
    jump               #2346            
#2350: 
    load     i64       45               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       2                
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
#2346: 
    jump               #2243            
    jump               #2244            
#2351: 
    load     u64       qq_lex.lxsptr    
    iload    u8                         
    widen    u64/u8                     
    load     u64       61               
    jumpeq   u64 /1    #2353            
    load     u64       62               
    jumpeq   u64       #2354            
    jump               #2355            
#2353: 
    load     u64 /1    &qq_lex.lxsptr   
    incrto   u64 /1                     
    load     i64       47               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       4                
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
    jump               #2352            
#2354: 
    load     u64 /1    &qq_lex.lxsptr   
    incrto   u64 /1                     
    load     i64       35               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       112              
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
    jump               #2352            
#2355: 
    load     i64       48               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       5                
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
#2352: 
    jump               #2243            
    jump               #2244            
#2356: 
    load     u64       qq_lex.lxsptr    
    iload    u8                         
    widen    u64/u8                     
    load     u64       38               
    jumpeq   u64       #2358            
    jump               #2359            
#2358: 
    load     u64 /1    &qq_lex.lxsptr   
    incrto   u64 /1                     
    load     i64       38               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       118              
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
    jump               #2357            
#2359: 
    load     i64       19               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       0                
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
#2357: 
    jump               #2243            
    jump               #2244            
#2360: 
    setcall      /1/1                   
    load     i64       39               
    setarg   i64 /1                     
    callp        /1    &qq_lex.lxreadstring
    jump               #2243            
    jump               #2244            
#2361: 
    setcall      /1/1                   
    load     i64       34               
    setarg   i64 /1                     
    callp        /1    &qq_lex.lxreadstring
    jump               #2243            
    jump               #2244            
#2362: 
    setcall      /0/1                   
    callp        /0    &qq_lex.readrawxname
    jump               #2243            
    jump               #2244            
#2363: 
    jump               #2244            
#2364: 
    load     u64 /1    &qq_lex.lxsptr   
    incrto   u64 /1                     
    load     u64 /1    &qq_lex.lxlineno 
    incrto   i64 /1                     
    load     i64       61               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    jump               #2243            
    jump               #2244            
#2365: 
    load     i64       61               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     u64 /1    &qq_lex.lxlineno 
    incrto   i64 /1                     
    jump               #2243            
    jump               #2244            
#2366: 
    load     i64       62               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     u64 /1    &qq_lex.lxsptr   
    decrto   u64 /1                     
    jump               #2243            
    jump               #2244            
#2247: 
    load     u64       qq_lex.lxsptr    
    load     i64       1                
    subpx    u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    store    i64       c                
    load     i64       c                
    load     i64       226              
    jumpne   i64       #2368            
    load     u64       qq_lex.lxsptr    
    iload    u8                         
    widen    i64/u8                     
    load     i64       136              
    jumpne   i64       #2368            
    load     u64       qq_lex.lxsptr    
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       154              
    jumpne   i64       #2368            
    load     i64       2                
    load     u64 /1    &qq_lex.lxsptr   
    addpxto  u64 /1                     
    load     i64       55               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       1                
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
    jump               #2243            
#2368: 
    load     i64       c                
    load     i64       128              
    jumplt   i64       #2370            
    jump               #2250            
#2370: 
! qq_lex.lexreadtoken.error:
#2318: 
    load     i64       1                
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       c                
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    istorex  i64 /1                     
    jump               #2243            
    jump               #2244            
#2243: 
    retproc                             
endproc

proc qq_lex.lxreadstring:
    param    i64       termchar
    local    u64       s
    local    u64       t
    local    i64       c
    local    i64       d
    local    i64       length
    local    i64       hasescape
    local    i64       a
    local    i64       n
    local    u64       str
    local    i64       pass
    load     i64       termchar         
    load     i64       34               
    jumpne   i64       #2373            
    load     i64       67               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    jump               #2372            
#2373: 
    load     i64       66               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       1                
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
#2372: 
    load     i64       0                
    store    i64       length           
    load     i64       0                
    store    i64       hasescape        
    load     u64       0                
    store    u64       t                
    load     i64       1                
    store    i64       pass             
#2374: 
    load     u64       qq_lex.lxsptr    
    store    u64       s                
#2377: 
    load     u64 /1    &s               
    loadincr u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    double                              
    store    i64       c                
    load     i64       92               
    jumpeq   i64 /1    #2380            
    load     i64       34               
    jumpeq   i64 /1    #2381            
    load     i64       39               
    jumpeq   i64 /1    #2381            
    load     i64       13               
    jumpeq   i64 /1    #2382            
    load     i64       10               
    jumpeq   i64 /1    #2382            
    load     i64       0                
    jumpeq   i64       #2382            
    jump               #2383            
#2380: 
    load     i64       1                
    store    i64       hasescape        
    load     u64       s                
    iload    u8                         
    widen    i64/u8                     
    store    i64       c                
    load     i64       c                
    load     i64       65               
    jumplt   i64       #2385            
    load     i64       c                
    load     i64       90               
    jumpgt   i64       #2385            
    load     i64       32               
    load     u64 /1    &c               
    addto    i64                        
#2385: 
    load     u64 /1    &s               
    incrto   u64 /1                     
    load     i64       c                
    load     i64       97               
    jumpeq   i64 /1    #2387            
    load     i64       98               
    jumpeq   i64 /1    #2388            
    load     i64       99               
    jumpeq   i64 /1    #2389            
    load     i64       114              
    jumpeq   i64 /1    #2389            
    load     i64       101              
    jumpeq   i64 /1    #2390            
    load     i64       102              
    jumpeq   i64 /1    #2391            
    load     i64       104              
    jumpeq   i64 /1    #2392            
    load     i64       108              
    jumpeq   i64 /1    #2393            
    load     i64       110              
    jumpeq   i64 /1    #2393            
    load     i64       116              
    jumpeq   i64 /1    #2394            
    load     i64       117              
    jumpeq   i64 /1    #2395            
    load     i64       118              
    jumpeq   i64 /1    #2395            
    load     i64       119              
    jumpeq   i64 /1    #2396            
    load     i64       120              
    jumpeq   i64 /1    #2397            
    load     i64       121              
    jumpeq   i64 /1    #2398            
    load     i64       122              
    jumpeq   i64       #2399            
    jump               #2400            
#2387: 
    load     i64       7                
    store    i64       c                
    jump               #2386            
#2388: 
    load     i64       8                
    store    i64       c                
    jump               #2386            
#2389: 
    load     i64       13               
    store    i64       c                
    jump               #2386            
#2390: 
    load     i64       27               
    store    i64       c                
    jump               #2386            
#2391: 
    load     i64       12               
    store    i64       c                
    jump               #2386            
#2392: 
    jump               #2402            
#2401: 
    setcall  i64 /3/1                   
    load     i64       1                
    setarg   i64 /3                     
    load     i64       2                
    setarg   i64 /2                     
    load     u64       &s               
    setarg   u64 /1                     
    callf    i64 /3    &qq_lex.readhexcode
    store    i64       c                
    load     i64       pass             
    load     i64       2                
    jumpne   i64       #2405            
    load     i64       c                
    load     u64       t                
    istore   u8                         
#2405: 
    load     u64 /1    &t               
    incrto   u64 /1                     
#2402: 
    load     u64       s                
    iload    u8                         
    widen    u64/u8                     
    load     u64       92               
    jumpne   u64       #2401            
    load     u64 /1    &s               
    incrto   u64 /1                     
    load     u64 /1    &t               
    decrto   u64 /1                     
    jump               #2386            
#2393: 
    load     i64       10               
    store    i64       c                
    jump               #2386            
#2394: 
    load     i64       9                
    store    i64       c                
    jump               #2386            
#2395: 
    setcall  i64 /2                     
    startmx                             
    load     i64       pass             
    load     i64       2                
    jumpne   i64       #2407            
    load     u64       t                
    resetmx  u64                        
    jump               #2406            
#2407: 
    load     u64       0                
    endmx    u64                        
#2406: 
    setarg   u64 /2                     
    setcall  i64 /3                     
    load     i64       0                
    setarg   i64 /3                     
    startmx                             
    load     i64       c                
    load     i64       117              
    jumpne   i64       #2409            
    load     i64       4                
    resetmx  i64                        
    jump               #2408            
#2409: 
    load     i64       6                
    endmx    i64                        
#2408: 
    setarg   i64 /2                     
    load     u64       &s               
    setarg   u64 /1                     
    callf    i64 /3    &qq_lex.readhexcode
    setarg   i64 /1                     
    callf    i64 /2    &qq_lex.getutf8  
    load     u64 /1    &t               
    addpxto  u64 /1                     
    jump               #2377            
    jump               #2386            
#2396: 
    load     i64       pass             
    load     i64       2                
    jumpne   i64       #2411            
    load     u64       13               
    load     u64       t                
    istore   u8                         
#2411: 
    load     u64 /1    &t               
    incrto   u64 /1                     
    load     i64       10               
    store    i64       c                
    jump               #2386            
#2397: 
    setcall  i64 /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     i64       2                
    setarg   i64 /2                     
    load     u64       &s               
    setarg   u64 /1                     
    callf    i64 /3    &qq_lex.readhexcode
    store    i64       c                
    jump               #2386            
#2398: 
    load     i64       16               
    store    i64       c                
    jump               #2386            
#2399: 
    load     i64       0                
    store    i64       c                
    jump               #2386            
#2400: 
    load     i64       c                
    load     i64       34               
    jumpeq   i64 /1    #2413            
    load     i64       92               
    jumpeq   i64 /1    #2414            
    load     i64       39               
    jumpeq   i64 /1    #2415            
    load     i64       48               
    jumpeq   i64       #2416            
    jump               #2417            
#2413: 
    load     i64       34               
    store    i64       c                
    jump               #2412            
#2414: 
    load     i64       92               
    store    i64       c                
    jump               #2412            
#2415: 
    load     i64       39               
    store    i64       c                
    jump               #2412            
#2416: 
    load     i64       0                
    store    i64       c                
    jump               #2412            
#2417: 
    load     i64       c                
    load     u64       &str             
    load     i64       1                
    istorex  u8  /1/-1                  
    load     u64       0                
    load     u64       &str             
    load     i64       2                
    istorex  u8  /1/-1                  
    setcall      /2/1                   
    load     u64       &str             
    setarg   u64 /2                     
    load     u64       "Unknown string escape: #"
    setarg   u64 /1                     
    callp        /2    &qq_lex.lxerror_s
#2412: 
#2386: 
    jump               #2379            
#2381: 
    load     i64       c                
    load     i64       termchar         
    jumpne   i64       #2419            
    load     u64       s                
    iload    u8                         
    widen    i64/u8                     
    load     i64       c                
    jumpne   i64       #2421            
    load     u64 /1    &s               
    incrto   u64 /1                     
    jump               #2420            
#2421: 
    jump               #2378            
#2420: 
#2419: 
    load     i64       1                
    store    i64       hasescape        
    jump               #2379            
#2382: 
    setcall      /1/1                   
    load     u64       "String not terminated"
    setarg   u64 /1                     
    callp        /1    &qq_lib.lxerror  
    jump               #2379            
#2383: 
#2379: 
    load     i64       pass             
    load     i64       2                
    jumpne   i64       #2423            
    load     i64       c                
    load     u64       t                
    istore   u8                         
#2423: 
    load     u64 /1    &t               
    incrto   u64 /1                     
    jump               #2377            
#2378: 
    load     i64       pass             
    load     i64       1                
    jumpne   i64       #2425            
    load     u64       t                
    store    i64       length           
    load     i64       length           
    load     i64       1                
    add      i64                        
    load     u64       &qq_decls.nextlx 
    load     i64       14               
    istorex  u16 /1                     
    load     i64       hasescape        
    jumpf    i64       #2427            
    setcall  u64 /1/1                   
    load     i64       length           
    load     i64       1                
    add      i64                        
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    double                              
    store    u64       t                
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    istorex  u64 /1                     
    jump               #2426            
#2427: 
    load     i64       length           
    load     i64       0                
    jumpne   i64       #2428            
    load     u64       ""               
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    istorex  u64 /1                     
    load     u64       s                
    store    u64       qq_lex.lxsptr    
    jump               #2371            
    jump               #2426            
#2428: 
    setcall  u64 /2/1                   
    load     i64       length           
    setarg   i64 /2                     
    load     u64       qq_lex.lxsptr    
    setarg   u64 /1                     
    callf    u64 /2    &mlib.pcm_copyheapstringn
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    istorex  u64 /1                     
    load     u64       s                
    store    u64       qq_lex.lxsptr    
    jump               #2371            
#2426: 
    jump               #2424            
#2425: 
    load     u64       0                
    load     u64       t                
    istore   u8                         
    load     u64       s                
    store    u64       qq_lex.lxsptr    
#2424: 
    forup    i64 /1    #2374            
    opnd     i64       pass             
    opnd     i64       2                
#2371: 
    retproc                             
endproc

proc qq_lex.readhexcode:
    param    u64       s
    param    i64       n
    param    i64       sp
    local    i64       a
    local    i64       c
    local    i64       i
    rettype  i64
    load     i64       0                
    store    i64       a                
    load     i64       1                
    store    i64       i                
    load     i64       n                
    load     i64       1                
    jumplt   i64       #2432            
#2430: 
    load     i64       sp               
    jumpf    i64       #2434            
    load     i64       i                
    load     i64       0                
    loadbit  i64                        
    jumpf    u64       #2434            
#2435: 
    load     u64       s                
    loadincr u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    store    i64       c                
    load     i64       c                
    load     i64       32               
    jumpeq   i64       #2435            
    jump               #2433            
#2434: 
    load     u64       s                
    loadincr u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    store    i64       c                
#2433: 
    load     i64       c                
    load     i64       65               
    jumplt   i64 /1    #2439            
    load     i64       70               
    jumpgt   i64       #2439            
    load     i64       a                
    load     i64       16               
    mul      i64                        
    load     i64       c                
    add      i64                        
    load     i64       65               
    sub      i64                        
    load     i64       10               
    add      i64                        
    store    i64       a                
    jump               #2438            
#2439: 
    load     i64       c                
    load     i64       97               
    jumplt   i64 /1    #2440            
    load     i64       102              
    jumpgt   i64       #2440            
    load     i64       a                
    load     i64       16               
    mul      i64                        
    load     i64       c                
    add      i64                        
    load     i64       97               
    sub      i64                        
    load     i64       10               
    add      i64                        
    store    i64       a                
    jump               #2438            
#2440: 
    load     i64       c                
    load     i64       48               
    jumplt   i64 /1    #2441            
    load     i64       57               
    jumpgt   i64       #2441            
    load     i64       a                
    load     i64       16               
    mul      i64                        
    load     i64       c                
    add      i64                        
    load     i64       48               
    sub      i64                        
    store    i64       a                
    jump               #2438            
#2441: 
    setcall      /1/1                   
    load     u64       "Bad hex digit"  
    setarg   u64 /1                     
    callp        /1    &qq_lib.lxerror  
#2438: 
    forup    i64 /1    #2430            
    opnd     i64       i                
    opnd     i64       n                
#2432: 
    load     i64       a                
    jumpret  i64       #2429            
#2429: 
    retfn    i64                        
endproc

proc qq_lex.getutf8:
    param    i64       c
    param    u64       s
    local    i64       n
    local    mem:16       str
    rettype  i64
    load     u64       s                
    load     u64       0                
    jumpne   u64       #2444            
    load     u64       &str             
    store    u64       s                
#2444: 
    load     i64       c                
    load     i64       127              
    jumpgt   i64       #2446            
    load     i64       1                
    store    i64       n                
    load     i64       c                
    load     u64 /1    &s               
    loadincr u64 /1                     
    istore   u8                         
    jump               #2445            
#2446: 
    load     i64       c                
    load     i64       2047             
    jumpgt   i64       #2447            
    load     i64       2                
    store    i64       n                
    load     i64       192              
    load     i64       c                
    load     i64       6                
    load     i64       10               
    loadbf   i64                        
    add      u64                        
    load     u64 /1    &s               
    loadincr u64 /1                     
    istore   u8                         
    load     i64       128              
    load     i64       c                
    load     i64       0                
    load     i64       5                
    loadbf   i64                        
    add      u64                        
    load     u64 /1    &s               
    loadincr u64 /1                     
    istore   u8                         
    jump               #2445            
#2447: 
    load     i64       c                
    load     i64       65535            
    jumpgt   i64       #2448            
    load     i64       3                
    store    i64       n                
    load     i64       224              
    load     i64       c                
    load     i64       12               
    load     i64       15               
    loadbf   i64                        
    add      u64                        
    load     u64 /1    &s               
    loadincr u64 /1                     
    istore   u8                         
    load     i64       128              
    load     i64       c                
    load     i64       6                
    load     i64       11               
    loadbf   i64                        
    add      u64                        
    load     u64 /1    &s               
    loadincr u64 /1                     
    istore   u8                         
    load     i64       128              
    load     i64       c                
    load     i64       0                
    load     i64       5                
    loadbf   i64                        
    add      u64                        
    load     u64 /1    &s               
    loadincr u64 /1                     
    istore   u8                         
    jump               #2445            
#2448: 
    load     i64       c                
    load     i64       1114111          
    jumpgt   i64       #2449            
    load     i64       4                
    store    i64       n                
    load     i64       240              
    load     i64       c                
    load     i64       18               
    load     i64       20               
    loadbf   i64                        
    add      u64                        
    load     u64 /1    &s               
    loadincr u64 /1                     
    istore   u8                         
    load     i64       128              
    load     i64       c                
    load     i64       12               
    load     i64       17               
    loadbf   i64                        
    add      u64                        
    load     u64 /1    &s               
    loadincr u64 /1                     
    istore   u8                         
    load     i64       128              
    load     i64       c                
    load     i64       6                
    load     i64       11               
    loadbf   i64                        
    add      u64                        
    load     u64 /1    &s               
    loadincr u64 /1                     
    istore   u8                         
    load     i64       128              
    load     i64       c                
    load     i64       0                
    load     i64       5                
    loadbf   i64                        
    add      u64                        
    load     u64 /1    &s               
    loadincr u64 /1                     
    istore   u8                         
    jump               #2445            
#2449: 
    load     i64       0                
    store    i64       n                
#2445: 
    load     u64       0                
    load     u64       s                
    istore   u8                         
    load     i64       n                
    jumpret  i64       #2442            
#2442: 
    retfn    i64                        
endproc

proc qq_lex.lexinit:
    local    i64       i
    setcall      /3/1                   
    load     u64       4194304          
    setarg   u64 /3                     
    load     i64       0                
    setarg   i32 /2                     
    load     u64       &qq_lex.hashtable
    setarg   u64 /1                     
    callp        /3    &memset          
    load     u64       &qq_lex.hashtable
    load     i64       4194176          
    addpx    u8  /1                     
    store    u64       qq_lex.hashtablelast
    setcall      /0/1                   
    callp        /0    &qq_lex.inithashtable
    retproc                             
endproc

proc qq_lex.readrawstring:
    local    u64       pstart
    local    i64       length
    load     i64       67               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     u64 /1    &qq_lex.lxsptr   
    incrload u64 /1                     
    store    u64       pstart           
    load     i64       0                
    store    i64       length           
#2452: 
    load     u64 /1    &qq_lex.lxsptr   
    loadincr u64 /1                     
    iload    u8                         
    widen    u64/u8                     
    load     u64       34               
    jumpeq   u64 /1    #2454            
    load     u64       13               
    jumpeq   u64 /1    #2455            
    load     u64       10               
    jumpeq   u64 /1    #2455            
    load     u64       0                
    jumpeq   u64       #2455            
    jump               #2456            
#2454: 
    jump               #2453            
    jump               #2452            
#2455: 
    setcall      /1/1                   
    load     u64       "Raw string not terminated"
    setarg   u64 /1                     
    callp        /1    &qq_lib.lxerror  
    load     u64 /1    &qq_lex.lxsptr   
    decrto   u64 /1                     
    jump               #2453            
    jump               #2452            
#2456: 
    load     u64 /1    &length          
    incrto   i64 /1                     
    jump               #2452            
#2453: 
    load     i64       length           
    store    i64       qq_lex.nextlxlength
    setcall  u64 /2/1                   
    load     i64       length           
    setarg   i64 /2                     
    load     u64       pstart           
    setarg   u64 /1                     
    callf    u64 /2    &mlib.pcm_copyheapstringn
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_lex.lookup:
    param    u64       name
    param    i64       length
    param    i64       hashindex
    local    i64       j
    local    i64       wrapped
    local    i64       n
    local    u64       d
    local    u64       s
    rettype  i64
    load     u64       &qq_lex.hashtable
    load     i64       hashindex        
    addpx    mem:128 /128               
    store    u64       d                
    load     i64       0                
    store    i64       wrapped          
#2458: 
    load     u64       d                
    load     i64       126              
    iloadx   u8  /1                     
    widen    i64/u8                     
    double                              
    store    i64       n                
    load     i64       length           
    jumpne   i64       #2461            
    setcall  i32 /3/1                   
    load     i64       n                
    setarg   u64 /3                     
    load     u64       name             
    setarg   u64 /2                     
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i32 /3    &memcmp          
    widen    i64/i32                    
    load     i64       0                
    jumpne   i64       #2461            
    load     u64       d                
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    istorex  u64 /1                     
    load     u64       d                
    load     i64       123              
    iloadx   u8  /1                     
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     u64       d                
    load     i64       112              
    iloadx   u16 /1                     
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
    load     i64       1                
    jumpret  i64       #2457            
    jump               #2460            
#2461: 
    load     i64       n                
    load     i64       0                
    jumpne   i64       #2462            
    jump               #2459            
#2462: 
#2460: 
    load     u64 /1    &d               
    incrload u64 /128                   
    load     u64       qq_lex.hashtablelast
    jumple   u64       #2464            
    load     i64       wrapped          
    jumpf    i64       #2466            
    setcall      /1/1                   
    load     u64       "HASHTABLE FULL" 
    setarg   u64 /1                     
    callp        /1    &mlib.abortprogram
#2466: 
    load     i64       1                
    store    i64       wrapped          
    load     u64       &qq_lex.hashtable
    load     i64       0                
    addpx    u8  /1                     
    store    u64       d                
#2464: 
    jump               #2458            
#2459: 
    setcall  u64 /2/1                   
    load     i64       length           
    setarg   i64 /2                     
    load     u64       name             
    setarg   u64 /1                     
    callf    u64 /2    &mlib.pcm_copyheapstringn
    load     u64       d                
    load     i64       0                
    istorex  u64 /1                     
    load     i64       length           
    load     u64       d                
    load     i64       126              
    istorex  u8  /1                     
    load     i64       69               
    load     u64       d                
    load     i64       123              
    istorex  u8  /1                     
    load     u64       d                
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    istorex  u64 /1                     
    load     u64       d                
    load     i64       123              
    iloadx   u8  /1                     
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     u64       d                
    load     i64       112              
    iloadx   u16 /1                     
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
    load     i64       0                
    jumpret  i64       #2457            
#2457: 
    retfn    i64                        
endproc

proc qq_lex.gethashvaluez:
    param    u64       s
    local    i64       c
    local    i64       hsum
    rettype  i64
    load     u64       s                
    iload    u8                         
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #2469            
    load     i64       0                
    jumpret  i64       #2467            
#2469: 
    load     u64 /1    &s               
    loadincr u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    store    i64       hsum             
#2470: 
    load     u64 /1    &s               
    loadincr u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    store    i64       c                
    load     i64       c                
    load     i64       0                
    jumpne   i64       #2473            
    jump               #2471            
#2473: 
    load     i64       hsum             
    load     i64       4                
    shl      i64                        
    load     i64       hsum             
    sub      i64                        
    load     i64       c                
    add      i64                        
    store    i64       hsum             
    jump               #2470            
#2471: 
    load     i64       hsum             
    load     i64       5                
    shl      i64                        
    load     i64       hsum             
    sub      i64                        
    load     i64       32767            
    bitand   i64                        
    jumpret  i64       #2467            
#2467: 
    retfn    i64                        
endproc

proc qq_lex.start:
    local    i64       av_1
    local    i64       c
    load     i64       0                
    store    i64       c                
    load     i64       255              
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumplt   i64       #2477            
#2475: 
    load     i64       c                
    load     i64       97               
    jumplt   i64 /1    #2481            
    load     i64       122              
    jumple   i64       #2480            
#2481: 
    load     i64       c                
    load     i64       48               
    jumplt   i64 /1    #2482            
    load     i64       57               
    jumple   i64       #2480            
#2482: 
    load     i64       c                
    load     u64       95               
    jumpeq   i64 /1    #2480            
    load     u64       36               
    jumpeq   i64       #2480            
    load     i64       c                
    load     i64       128              
    jumplt   i64 /1    #2479            
    load     i64       255              
    jumpgt   i64       #2479            
#2480: 
    load     i64       1                
    load     u64       &qq_lex.namemap  
    load     i64       c                
    istorex  u8  /1                     
    jump               #2478            
#2479: 
    load     i64       c                
    load     i64       65               
    jumplt   i64 /1    #2483            
    load     i64       90               
    jumpgt   i64       #2483            
    load     i64       2                
    load     u64       &qq_lex.namemap  
    load     i64       c                
    istorex  u8  /1                     
#2483: 
#2478: 
    forup    i64 /1    #2475            
    opnd     i64       c                
    opnd     i64       av_1             
#2477: 
    retproc                             
endproc

proc qq_lex.inithashtable:
    local    i64       i
    local    u64       name
    local    i64       av_1
    local    i64       av_2
    load     i64       1                
    store    i64       i                
    load     i64       188              
    store    i64       av_1             
    load     i64       av_1             
    load     i64       1                
    jumplt   i64       #2487            
#2485: 
    setcall      /3/1                   
    load     u64       &qq_tables.stsubcodes
    load     i64       i                
    iloadx   u8  /1/-1                  
    widen    i64/u8                     
    setarg   i64 /3                     
    load     u64       &qq_tables.stsymbols
    load     i64       i                
    iloadx   u8  /1/-1                  
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       &qq_tables.stnames
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /1                     
    callp        /3    &qq_lex.addstname
    forup    i64 /1    #2485            
    opnd     i64       i                
    opnd     i64       av_1             
#2487: 
    load     i64       1                
    store    i64       i                
    load     i64       60               
    store    i64       av_2             
    load     i64       av_2             
    load     i64       1                
    jumplt   i64       #2490            
#2488: 
    load     u64       &qq_tables.hostinternal
    load     i64       i                
    iloadx   u8  /1                     
    jumpt    u8        #2492            
    load     u64       &qq_tables.hostfnnames
    load     i64       i                
    iloadx   u64 /8                     
    load     i64       2                
    addpx    u64 /1                     
    store    u64       name             
    setcall      /3/1                   
    load     i64       i                
    setarg   i64 /3                     
    load     i64       129              
    setarg   i64 /2                     
    load     u64       name             
    setarg   u64 /1                     
    callp        /3    &qq_lex.addstname
#2492: 
    forup    i64 /1    #2488            
    opnd     i64       i                
    opnd     i64       av_2             
#2490: 
    retproc                             
endproc

proc qq_lex.addstname:
    param    u64       name
    param    i64       symbol
    param    i64       subcode
    setcall  i64 /3                     
    setcall  i64 /1                     
    load     u64       name             
    setarg   u64 /1                     
    callf    i64 /1    &qq_lex.gethashvaluez
    setarg   i64 /3                     
    setcall  i64 /1                     
    load     u64       name             
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    setarg   i64 /2                     
    load     u64       name             
    setarg   u64 /1                     
    callf    i64 /3    &qq_lex.lookup   
    jumpf    i64       #2495            
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       name             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       "Dupl ST entry"  
    setarg   u64 /1                     
    callp        /1    &mlib.abortprogram
#2495: 
    load     i64       symbol           
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    iloadx   u64 /1                     
    load     i64       123              
    istorex  u8  /1                     
    load     i64       subcode          
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    iloadx   u64 /1                     
    load     i64       112              
    istorex  u16 /1                     
    retproc                             
endproc

proc qq_lex.startlex:
    param    u64       pm
    setcall  u64 /1/1                   
    load     u64       pm               
    load     i64       24               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /1    &mlib.pcm_copyheapstring
    double                              
    store    u64       qq_lex.lxsptr    
    store    u64       qq_lex.lxsource  
    load     i64       4                
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       0                
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
    load     u64       pm               
    load     i64       46               
    iloadx   i16 /1                     
    widen    u64/i16                    
    load     u64       &qq_decls.nextlx 
    load     i64       8                
    addpx    u64 /1                     
    load     i64       24               
    load     i64       31               
    storebf  i32                        
    load     i64       1                
    store    i64       qq_lex.lxlineno  
    retproc                             
endproc

proc qq_lex.addnamestr:
    param    u64       name
    local    mem:16       oldlx
    local    u64       symptr
    rettype  u64
    load     mem:16       qq_decls.nextlx
    store    mem:16       oldlx         
    setcall  i64 /1/1                   
    load     u64       name             
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    store    i64       qq_lex.nextlxlength
    setcall  u64 /1/1                   
    load     i64       qq_lex.nextlxlength
    load     i64       1                
    add      i64                        
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    istorex  u64 /1                     
    setcall      /3/1                   
    load     i64       qq_lex.nextlxlength
    load     i64       1                
    add      u64                        
    setarg   u64 /3                     
    load     u64       name             
    setarg   u64 /2                     
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &memcpy          
    setcall  i64 /3                     
    setcall  i64 /1                     
    load     u64       name             
    setarg   u64 /1                     
    callf    i64 /1    &qq_lex.gethashvaluez
    setarg   i64 /3                     
    load     i64       qq_lex.nextlxlength
    setarg   i64 /2                     
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /3    &qq_lex.lookup   
    unload   i64                        
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    iloadx   u64 /1                     
    store    u64       symptr           
    load     mem:16       oldlx         
    store    mem:16       qq_decls.nextlx
    load     u64       symptr           
    jumpret  u64       #2497            
#2497: 
    retfn    u64                        
endproc

proc qq_lex.ps:
    param    u64       caption
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       caption          
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64       ":::"            
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       &qq_decls.lx     
    setarg   u64 /1                     
    callp        /1    &qq_show.printsymbol
    retproc                             
endproc

proc qq_lex.psnext:
    param    u64       caption
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "\t"             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64       caption          
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64       ":##"            
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       &qq_decls.nextlx 
    setarg   u64 /1                     
    callp        /1    &qq_show.printsymbol
    retproc                             
endproc

proc qq_lex.lex:
    local    i64       lineno
    local    i64       n
    local    i64       dir
    local    i64       namelen
    local    u64       p
    local    u64       symptr
    load     mem:16       qq_decls.nextlx
    store    mem:16       qq_decls.lx   
    load     i64       qq_lex.lxlineno  
    load     u64       &qq_decls.lx     
    load     i64       8                
    addpx    u64 /1                     
    load     i64       0                
    load     i64       23               
    storebf  i32                        
    load     i64       qq_lex.nextlxlength
    store    i64       qq_lex.lxlength  
! qq_lex.lex.reenter:
#2501: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lexreadtoken
! qq_lex.lex.reenter2:
#2502: 
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       68               
    jumpeq   i64 /1    #2504            
    load     i64       128              
    jumpeq   i64 /1    #2505            
    load     i64       61               
    jumpeq   i64 /1    #2506            
    load     i64       39               
    jumpeq   i64       #2507            
    jump               #2508            
#2504: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       63               
    jumpeq   i64 /1    #2510            
    load     i64       65               
    jumpeq   i64       #2511            
    jump               #2512            
#2510: 
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    iloadx   u64 /1                     
    load     i64       112              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       2                
    jumpeq   i64 /1    #2514            
    load     i64       3                
    jumpeq   i64 /1    #2515            
    load     i64       1                
    jumpeq   i64       #2516            
    jump               #2517            
#2514: 
    load     i64       1000000          
    load     u64 /1    &qq_decls.lx     
    multo    i64                        
    jump               #2513            
#2515: 
    load     i64       1000000000       
    load     u64 /1    &qq_decls.lx     
    multo    i64                        
    jump               #2513            
#2516: 
    load     i64       1000             
    load     u64 /1    &qq_decls.lx     
    multo    i64                        
    jump               #2513            
#2517: 
    setcall      /1/1                   
    load     u64       "Can't do this unit index"
    setarg   u64 /1                     
    callp        /1    &qq_lib.lxerror  
#2513: 
    load     i64       1                
    load     u64       &qq_decls.lx     
    load     i64       13               
    istorex  u8  /1                     
    jump               #2501            
    jump               #2509            
#2511: 
    setcall      /1/1                   
    load     u64       "unit symbol after float?"
    setarg   u64 /1                     
    callp        /1    &qq_lib.lxerror  
    jump               #2509            
#2512: 
    load     i64       69               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
#2509: 
    jump               #2503            
#2505: 
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64 /1    #2519            
    load     i64       1                
    jumpeq   i64 /1    #2520            
    load     i64       2                
    jumpeq   i64 /1    #2521            
    load     i64       4                
    jumpeq   i64 /1    #2522            
    load     i64       5                
    jumpeq   i64       #2523            
    jump               #2524            
#2519: 
    load     i64       63               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       0                
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    istorex  i64 /1                     
    load     i64       1                
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
    jump               #2518            
#2520: 
    load     i64       65               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     r64       3.1415926535897931e+000
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    istorex  r64 /1                     
    load     i64       2                
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
    jump               #2518            
#2521: 
    load     i64       67               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     u64       "\t"             
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    istorex  u64 /1                     
    load     i64       1                
    store    i64       qq_lex.nextlxlength
    jump               #2518            
#2522: 
    load     i64       63               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       1                
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    istorex  i64 /1                     
    load     i64       1                
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
    jump               #2518            
#2523: 
    load     i64       63               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       0                
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    istorex  i64 /1                     
    load     i64       1                
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
    jump               #2518            
#2524: 
    setcall      /1/1                   
    load     u64       "sysconst?"      
    setarg   u64 /1                     
    callp        /1    &qq_lib.lxerror  
#2518: 
    jump               #2503            
#2506: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64 /1    #2526            
    load     i64       11               
    jumpeq   i64 /1    #2526            
    load     i64       9                
    jumpeq   i64 /1    #2526            
    load     i64       6                
    jumpeq   i64 /1    #2526            
    load     i64       4                
    jumpeq   i64       #2526            
    jump               #2527            
#2526: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lexreadtoken
    jump               #2502            
    jump               #2501            
    jump               #2525            
#2527: 
    load     u64       &qq_tables.binopset
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u8  /1                     
    jumpf    u8        #2529            
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       36               
    jumpeq   i64       #2529            
    setcall      /0/1                   
    callp        /0    &qq_lex.lexreadtoken
    jump               #2502            
#2529: 
#2525: 
    load     i64       4                
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    jump               #2503            
#2507: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       49               
    jumpne   i64       #2531            
    load     i64       39               
    load     u64       &qq_decls.lx     
    load     i64       12               
    istorex  u8  /1                     
    load     i64       1                
    load     u64       &qq_decls.lx     
    load     i64       13               
    istorex  u8  /1                     
    jump               #2501            
#2531: 
    jump               #2503            
#2508: 
#2503: 
    retproc                             
endproc

proc qq_lex.lxerror_s:
    param    u64       mess
    param    u64       a
    local    mem:256       str
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       mess             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &qq_lib.lxerror  
    retproc                             
endproc

proc qq_lex.makedecimal:
    param    u64       s
    param    i64       length
    param    i64       base
    load     i64       base             
    load     i64       10               
    jumpeq   i64       #2535            
    setcall      /1/1                   
    load     u64       "MAKEDECIMAL/16/2"
    setarg   u64 /1                     
    callp        /1    &qq_lib.lxerror  
#2535: 
    load     i64       64               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       3                
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
    setcall  u64 /2/1                   
    load     i64       length           
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /2    &mlib.pcm_copyheapstringn
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    istorex  u64 /1                     
    load     i64       length           
    store    i64       qq_lex.nextlxlength
    retproc                             
endproc

proc qq_lex.readdec:
    local    i64       c
    local    u64       dest
    local    u64       destend
    local    u64       pstart
    local    i64       islong
    local    i64       length
    local    mem:1024       str
    local    u64       a
    local    i64       av_1
    load     i64       0                
    store    i64       islong           
    load     u64       qq_lex.lxsptr    
    store    u64       pstart           
    load     u64       &str             
    store    u64       dest             
    load     u64       dest             
    load     i64       1024             
    addpx    u64 /1                     
    load     i64       10               
    subpx    u64 /1                     
    store    u64       destend          
    load     u64       0                
    store    u64       a                
#2537: 
    load     u64 /1    &qq_lex.lxsptr   
    loadincr u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    double                              
    store    i64       c                
    load     i64       48               
    jumplt   i64 /1    #2540            
    load     i64       57               
    jumpgt   i64       #2540            
    load     u64       a                
    load     i64       10               
    mul      i64                        
    load     i64       c                
    add      i64                        
    load     i64       48               
    sub      u64                        
    store    u64       a                
    load     i64       c                
    load     u64 /1    &dest            
    loadincr u64 /1                     
    istore   u8                         
    jump               #2539            
#2540: 
    load     i64       c                
    load     i64       101              
    jumpeq   i64 /1    #2542            
    load     i64       69               
    jumpeq   i64 /1    #2542            
    load     i64       46               
    jumpeq   i64 /1    #2543            
    load     i64       95               
    jumpeq   i64 /1    #2544            
    load     i64       39               
    jumpeq   i64 /1    #2544            
    load     i64       108              
    jumpeq   i64 /1    #2545            
    load     i64       76               
    jumpeq   i64 /1    #2545            
    load     i64       98               
    jumpeq   i64 /1    #2546            
    load     i64       66               
    jumpeq   i64       #2546            
    jump               #2547            
#2542: 
    load     u64       pstart           
    store    u64       qq_lex.lxsptr    
    setcall      /0/1                   
    callp        /0    &qq_lex.readreal 
    jump               #2536            
    jump               #2541            
#2543: 
    load     u64       qq_lex.lxsptr    
    iload    u8                         
    widen    u64/u8                     
    load     u64       46               
    jumpeq   u64       #2549            
    load     u64       pstart           
    store    u64       qq_lex.lxsptr    
    setcall      /0/1                   
    callp        /0    &qq_lex.readreal 
    jump               #2536            
#2549: 
    load     u64 /1    &qq_lex.lxsptr   
    decrto   u64 /1                     
    jump               #2538            
    jump               #2541            
#2544: 
    jump               #2541            
#2545: 
    load     u64       0                
    load     u64       dest             
    istore   u8                         
    setcall      /3/1                   
    load     i64       10               
    setarg   i64 /3                     
    load     u64       dest             
    load     u64       &str             
    subp     i64 /1                     
    setarg   i64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callp        /3    &qq_lex.makedecimal
    jump               #2536            
    jump               #2541            
#2546: 
    load     u64       dest             
    load     u64       &str             
    subp     i64 /1                     
    store    i64       length           
    load     i64       length           
    load     i64       64               
    jumple   i64       #2551            
    setcall      /1/1                   
    load     u64       "bin overflow"   
    setarg   u64 /1                     
    callp        /1    &qq_lib.lxerror  
#2551: 
    load     u64       &str             
    store    u64       dest             
    load     u64       0                
    store    u64       a                
    load     i64       length           
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #2554            
#2552: 
    load     u64       dest             
    iload    u8                         
    widen    u64/u8                     
    load     u64       50               
    jumplt   u64       #2556            
    setcall      /1/1                   
    load     u64       "bad bin digit"  
    setarg   u64 /1                     
    callp        /1    &qq_lib.lxerror  
#2556: 
    load     u64       a                
    load     i64       2                
    mul      i64                        
    load     u64 /1    &dest            
    loadincr u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    add      i64                        
    load     i64       48               
    sub      u64                        
    store    u64       a                
    to       i64       #2552            
    opnd     i64       av_1             
#2554: 
    jump               #2557            
    jump               #2541            
#2547: 
    load     u64 /1    &qq_lex.lxsptr   
    decrto   u64 /1                     
    jump               #2538            
#2541: 
#2539: 
    load     u64       dest             
    load     u64       destend          
    jumplt   u64       #2559            
    setcall      /1/1                   
    load     u64       "Numlit too long"
    setarg   u64 /1                     
    callp        /1    &qq_lib.lxerror  
#2559: 
    jump               #2537            
#2538: 
    load     u64       dest             
    load     u64       &str             
    subp     i64 /1                     
    store    i64       length           
    load     i64       length           
    load     i64       20               
    jumpgt   i64       #2562            
    load     i64       length           
    load     i64       20               
    jumpne   i64       #2561            
    setcall  i32 /3/1                   
    load     u64       20               
    setarg   u64 /3                     
    load     u64       qq_lex.u64maxstr 
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    i32 /3    &strncmp         
    widen    i64/i32                    
    load     i64       0                
    jumple   i64       #2561            
#2562: 
    setcall      /3/1                   
    load     i64       10               
    setarg   i64 /3                     
    load     i64       length           
    setarg   i64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callp        /3    &qq_lex.makedecimal
    jump               #2536            
#2561: 
! qq_lex.readdec.finish:
#2557: 
    load     i64       63               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       1                
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
    load     u64       a                
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    istorex  i64 /1                     
#2536: 
    retproc                             
endproc

proc qq_lex.readhex:
    local    i64       c
    local    u64       dest
    local    u64       destend
    local    u64       pstart
    local    i64       length
    local    mem:1024       str
    local    u64       a
    load     u64       qq_lex.lxsptr    
    store    u64       pstart           
    load     u64       &str             
    store    u64       dest             
    load     u64       dest             
    load     i64       1024             
    addpx    u64 /1                     
    load     i64       10               
    subpx    u64 /1                     
    store    u64       destend          
    load     u64       0                
    store    u64       a                
#2564: 
    load     u64 /1    &qq_lex.lxsptr   
    loadincr u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    double                              
    store    i64       c                
    load     i64       48               
    jumplt   i64 /1    #2567            
    load     i64       57               
    jumpgt   i64       #2567            
    load     u64       a                
    load     i64       16               
    mul      i64                        
    load     i64       c                
    add      i64                        
    load     i64       48               
    sub      u64                        
    store    u64       a                
    load     i64       c                
    load     u64 /1    &dest            
    loadincr u64 /1                     
    istore   u8                         
    jump               #2566            
#2567: 
    load     i64       c                
    load     i64       65               
    jumplt   i64 /1    #2568            
    load     i64       70               
    jumpgt   i64       #2568            
    load     i64       c                
    load     u64 /1    &dest            
    loadincr u64 /1                     
    istore   u8                         
    load     u64       a                
    load     i64       16               
    mul      i64                        
    load     i64       c                
    add      i64                        
    load     i64       65               
    sub      i64                        
    load     i64       10               
    add      u64                        
    store    u64       a                
    jump               #2566            
#2568: 
    load     i64       c                
    load     i64       97               
    jumplt   i64 /1    #2569            
    load     i64       102              
    jumpgt   i64       #2569            
    load     i64       c                
    load     i64       32               
    sub      u64                        
    load     u64 /1    &dest            
    loadincr u64 /1                     
    istore   u8                         
    load     u64       a                
    load     i64       16               
    mul      i64                        
    load     i64       c                
    add      i64                        
    load     i64       97               
    sub      i64                        
    load     i64       10               
    add      u64                        
    store    u64       a                
    jump               #2566            
#2569: 
    load     i64       c                
    load     i64       95               
    jumpeq   i64 /1    #2571            
    load     i64       39               
    jumpeq   i64 /1    #2571            
    load     i64       108              
    jumpeq   i64 /1    #2572            
    load     i64       76               
    jumpeq   i64 /1    #2572            
    load     i64       46               
    jumpeq   i64       #2573            
    jump               #2574            
#2571: 
    jump               #2570            
#2572: 
    load     u64       0                
    load     u64       dest             
    istore   u8                         
    setcall      /3/1                   
    load     i64       16               
    setarg   i64 /3                     
    load     u64       dest             
    load     u64       &str             
    subp     i64 /1                     
    setarg   i64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callp        /3    &qq_lex.makedecimal
    jump               #2563            
    jump               #2570            
#2573: 
    load     u64 /1    &qq_lex.lxsptr   
    decrto   u64 /1                     
    jump               #2565            
    jump               #2570            
#2574: 
    load     u64 /1    &qq_lex.lxsptr   
    decrto   u64 /1                     
    jump               #2565            
#2570: 
#2566: 
    load     u64       dest             
    load     u64       destend          
    jumplt   u64       #2576            
    setcall      /1/1                   
    load     u64       "Numlit too long"
    setarg   u64 /1                     
    callp        /1    &qq_lib.lxerror  
#2576: 
    jump               #2564            
#2565: 
    load     u64       dest             
    load     u64       &str             
    subp     i64 /1                     
    store    i64       length           
    load     i64       length           
    load     i64       16               
    jumple   i64       #2578            
    setcall      /3/1                   
    load     i64       16               
    setarg   i64 /3                     
    load     i64       length           
    setarg   i64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callp        /3    &qq_lex.makedecimal
    jump               #2563            
#2578: 
    load     i64       63               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       1                
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
    load     u64       a                
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    istorex  i64 /1                     
#2563: 
    retproc                             
endproc

proc qq_lex.readbin:
    local    i64       c
    local    u64       dest
    local    u64       destend
    local    u64       pstart
    local    i64       length
    local    mem:1024       str
    local    u64       a
    load     u64       qq_lex.lxsptr    
    store    u64       pstart           
    load     u64       &str             
    store    u64       dest             
    load     u64       dest             
    load     i64       1024             
    addpx    u64 /1                     
    load     i64       10               
    subpx    u64 /1                     
    store    u64       destend          
    load     u64       0                
    store    u64       a                
#2580: 
    load     u64 /1    &qq_lex.lxsptr   
    loadincr u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    double                              
    store    i64       c                
    load     i64       48               
    jumpeq   i64 /1    #2583            
    load     i64       49               
    jumpeq   i64 /1    #2583            
    load     i64       95               
    jumpeq   i64 /1    #2584            
    load     i64       39               
    jumpeq   i64 /1    #2584            
    load     i64       108              
    jumpeq   i64 /1    #2585            
    load     i64       76               
    jumpeq   i64 /1    #2585            
    load     i64       46               
    jumpeq   i64       #2586            
    jump               #2587            
#2583: 
    load     u64       a                
    load     i64       2                
    mul      i64                        
    load     i64       c                
    add      i64                        
    load     i64       48               
    sub      u64                        
    store    u64       a                
    load     i64       c                
    load     u64 /1    &dest            
    loadincr u64 /1                     
    istore   u8                         
    jump               #2582            
#2584: 
    jump               #2582            
#2585: 
    load     u64       0                
    load     u64       dest             
    istore   u8                         
    setcall      /3/1                   
    load     i64       2                
    setarg   i64 /3                     
    load     u64       dest             
    load     u64       &str             
    subp     i64 /1                     
    setarg   i64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callp        /3    &qq_lex.makedecimal
    jump               #2579            
    jump               #2582            
#2586: 
    load     u64 /1    &qq_lex.lxsptr   
    decrto   u64 /1                     
    jump               #2581            
    jump               #2582            
#2587: 
    load     i64       c                
    load     i64       50               
    jumplt   i64 /1    #2589            
    load     i64       57               
    jumpgt   i64       #2589            
    setcall      /1/1                   
    load     u64       "bin bad digit"  
    setarg   u64 /1                     
    callp        /1    &qq_lib.lxerror  
    jump               #2588            
#2589: 
    load     u64 /1    &qq_lex.lxsptr   
    decrto   u64 /1                     
    jump               #2581            
#2588: 
#2582: 
    load     u64       dest             
    load     u64       destend          
    jumplt   u64       #2591            
    setcall      /1/1                   
    load     u64       "bin overflow"   
    setarg   u64 /1                     
    callp        /1    &qq_lib.lxerror  
#2591: 
    jump               #2580            
#2581: 
    load     u64       dest             
    load     u64       &str             
    subp     i64 /1                     
    store    i64       length           
    load     i64       length           
    load     i64       64               
    jumple   i64       #2593            
    setcall      /3/1                   
    load     i64       2                
    setarg   i64 /3                     
    load     i64       length           
    setarg   i64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callp        /3    &qq_lex.makedecimal
    jump               #2579            
#2593: 
    load     i64       63               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       1                
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
    load     u64       a                
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    istorex  i64 /1                     
#2579: 
    retproc                             
endproc

proc qq_lex.readreal:
    local    i64       c
    local    i64       n
    local    i64       negexpon
    local    i64       dotseen
    local    i64       length
    local    i64       fractlen
    local    i64       expon
    local    i64       expseen
    local    r64       x
    local    mem:1024       str
    local    u64       dest
    local    u64       destend
    local    u64       pexpon
    local    i64       av_1
    local    i64       av_2
    local    i64       av_3
    local    i64       i
    load     u64       &str             
    store    u64       dest             
    load     u64       dest             
    load     i64       1024             
    addpx    u64 /1                     
    load     i64       100              
    subpx    u64 /1                     
    store    u64       destend          
    load     i64       0                
    double                              
    store    i64       fractlen         
    double                              
    store    i64       expon            
    double                              
    store    i64       expseen          
    double                              
    store    i64       dotseen          
    double                              
    store    i64       negexpon         
    store    i64       length           
#2595: 
    load     u64 /1    &qq_lex.lxsptr   
    loadincr u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    double                              
    store    i64       c                
    load     i64       48               
    jumplt   i64 /1    #2598            
    load     i64       57               
    jumpgt   i64       #2598            
    load     i64       c                
    load     u64 /1    &dest            
    loadincr u64 /1                     
    istore   u8                         
    load     u64 /1    &length          
    incrto   i64 /1                     
    load     i64       dotseen          
    jumpf    i64       #2600            
    load     u64 /1    &fractlen        
    incrto   i64 /1                     
#2600: 
    jump               #2597            
#2598: 
    load     i64       c                
    load     i64       46               
    jumpeq   i64 /1    #2602            
    load     i64       101              
    jumpeq   i64 /1    #2603            
    load     i64       69               
    jumpeq   i64 /1    #2603            
    load     i64       95               
    jumpeq   i64 /1    #2604            
    load     i64       39               
    jumpeq   i64 /1    #2604            
    load     i64       108              
    jumpeq   i64 /1    #2605            
    load     i64       76               
    jumpeq   i64       #2605            
    jump               #2606            
#2602: 
    load     i64       dotseen          
    jumpf    i64       #2608            
    load     u64 /1    &qq_lex.lxsptr   
    decrto   u64 /1                     
    jump               #2596            
#2608: 
    load     i64       1                
    store    i64       dotseen          
    load     i64       c                
    load     u64 /1    &dest            
    loadincr u64 /1                     
    istore   u8                         
    jump               #2601            
#2603: 
    load     i64       expseen          
    jumpf    i64       #2610            
    setcall      /1/1                   
    load     u64       "double expon"   
    setarg   u64 /1                     
    callp        /1    &qq_lib.lxerror  
#2610: 
    load     i64       1                
    store    i64       expseen          
    load     i64       c                
    load     u64 /1    &dest            
    loadincr u64 /1                     
    istore   u8                         
    jump               #2612            
#2611: 
    load     u64 /1    &qq_lex.lxsptr   
    incrto   u64 /1                     
#2612: 
    load     u64       qq_lex.lxsptr    
    iload    u8                         
    widen    u64/u8                     
    load     u64       32               
    jumpeq   u64       #2611            
    load     u64       qq_lex.lxsptr    
    iload    u8                         
    widen    i64/u8                     
    load     u64       43               
    jumpeq   i64 /1    #2616            
    load     u64       45               
    jumpne   i64       #2615            
#2616: 
    load     u64       qq_lex.lxsptr    
    iload    u8                         
    widen    u64/u8                     
    load     u64       45               
    jumpne   u64       #2618            
    load     i64       1                
    store    i64       negexpon         
#2618: 
    load     u64 /1    &qq_lex.lxsptr   
    loadincr u64 /1                     
    iload    u8                         
    load     u64 /1    &dest            
    loadincr u64 /1                     
    istore   u8                         
#2615: 
    load     i64       0                
    store    i64       expon            
#2619: 
    load     u64 /1    &qq_lex.lxsptr   
    loadincr u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    double                              
    store    i64       c                
    load     i64       48               
    jumplt   i64 /1    #2622            
    load     i64       57               
    jumpgt   i64       #2622            
    load     i64       expon            
    load     i64       10               
    mul      i64                        
    load     i64       c                
    add      i64                        
    load     i64       48               
    sub      i64                        
    store    i64       expon            
    load     i64       c                
    load     u64 /1    &dest            
    loadincr u64 /1                     
    istore   u8                         
    load     u64       dest             
    load     u64       destend          
    jumplt   u64       #2624            
    setcall      /1/1                   
    load     u64       "expon?"         
    setarg   u64 /1                     
    callp        /1    &qq_lib.lxerror  
#2624: 
    jump               #2621            
#2622: 
    load     i64       c                
    load     i64       95               
    jumpeq   i64 /1    #2626            
    load     i64       39               
    jumpeq   i64 /1    #2626            
    load     i64       108              
    jumpeq   i64 /1    #2627            
    load     i64       76               
    jumpeq   i64       #2627            
    jump               #2628            
#2626: 
    jump               #2625            
#2627: 
    load     u64       0                
    load     u64       dest             
    istore   u8                         
    setcall      /3/1                   
    load     i64       10               
    setarg   i64 /3                     
    load     u64       dest             
    load     u64       &str             
    subp     i64 /1                     
    setarg   i64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callp        /3    &qq_lex.makedecimal
    jump               #2594            
    jump               #2625            
#2628: 
    load     u64 /1    &qq_lex.lxsptr   
    decrto   u64 /1                     
    jump               #2596            
#2625: 
#2621: 
    jump               #2619            
    jump               #2601            
#2604: 
    jump               #2601            
#2605: 
    setcall      /3/1                   
    load     i64       10               
    setarg   i64 /3                     
    load     u64       dest             
    load     u64       &str             
    subp     i64 /1                     
    setarg   i64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callp        /3    &qq_lex.makedecimal
    jump               #2594            
    jump               #2601            
#2606: 
    load     u64 /1    &qq_lex.lxsptr   
    decrto   u64 /1                     
    jump               #2596            
#2601: 
#2597: 
    load     u64       dest             
    load     u64       destend          
    jumplt   u64       #2630            
    setcall      /1/1                   
    load     u64       "r64lit too long"
    setarg   u64 /1                     
    callp        /1    &qq_lib.lxerror  
#2630: 
    jump               #2595            
#2596: 
    load     u64       0                
    load     u64       dest             
    istore   u8                         
    load     i64       negexpon         
    jumpf    i64       #2632            
    load     i64       expon            
    neg      i64                        
    store    i64       expon            
#2632: 
    load     i64       fractlen         
    load     u64 /1    &expon           
    subto    i64                        
    load     r64       0.0000000000000000e+000
    store    r64       x                
    load     i64       1                
    store    i64       i                
    load     i64       length           
    load     i64       dotseen          
    add      i64                        
    store    i64       av_1             
    load     i64       av_1             
    load     i64       1                
    jumplt   i64       #2635            
#2633: 
    load     u64       &str             
    load     i64       i                
    iloadx   u8  /1/-1                  
    widen    i64/u8                     
    store    i64       c                
    load     i64       c                
    load     i64       46               
    jumpeq   i64       #2637            
    load     r64       x                
    load     r64       1.0000000000000000e+001
    mul      r64                        
    load     i64       c                
    float    r64/i64                    
    add      r64                        
    load     u64       48               
    float    r64/u64                    
    sub      r64                        
    store    r64       x                
#2637: 
    forup    i64 /1    #2633            
    opnd     i64       i                
    opnd     i64       av_1             
#2635: 
    load     i64       expon            
    load     i64       0                
    jumplt   i64       #2639            
    load     i64       expon            
    store    i64       av_2             
    load     i64       av_2             
    load     i64       0                
    jumple   i64       #2642            
#2640: 
    load     r64       1.0000000000000000e+001
    load     u64 /1    &x               
    multo    r64                        
    to       i64       #2640            
    opnd     i64       av_2             
#2642: 
    jump               #2638            
#2639: 
    load     i64       expon            
    neg      i64                        
    store    i64       av_3             
    load     i64       av_3             
    load     i64       0                
    jumple   i64       #2645            
#2643: 
    load     r64       1.0000000000000000e+001
    load     u64 /1    &x               
    divto    r64                        
    to       i64       #2643            
    opnd     i64       av_3             
#2645: 
#2638: 
    load     r64       x                
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    istorex  r64 /1                     
    load     i64       65               
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    istorex  u8  /1                     
    load     i64       2                
    load     u64       &qq_decls.nextlx 
    load     i64       13               
    istorex  u8  /1                     
#2594: 
    retproc                             
endproc

proc qq_lex.readrawxname:
    local    i64       c
    local    i64       hsum
    local    i64       length
    load     u64       qq_lex.lxsptr    
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    istorex  u64 /1                     
    load     i64       0                
    store    i64       hsum             
    jump               #2648            
#2647: 
    load     i64       hsum             
    load     i64       4                
    shl      i64                        
    load     i64       hsum             
    sub      i64                        
    load     i64       c                
    add      i64                        
    store    i64       hsum             
#2648: 
    load     u64       &qq_lex.namemap  
    load     u64 /1    &qq_lex.lxsptr   
    loadincr u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    double                              
    store    i64       c                
    iloadx   u8  /1                     
    jumpt    u8        #2647            
    load     u64 /1    &qq_lex.lxsptr   
    decrto   u64 /1                     
    setcall  i64 /3/1                   
    load     i64       hsum             
    load     i64       5                
    shl      i64                        
    load     i64       hsum             
    sub      i64                        
    load     i64       32767            
    bitand   i64                        
    setarg   i64 /3                     
    load     u64       qq_lex.lxsptr    
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    iloadx   u64 /1                     
    subp     i64 /1                     
    setarg   i64 /2                     
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /3    &qq_lex.lookup   
    unload   i64                        
    jump               #2646            
#2646: 
    retproc                             
endproc

proc qq_lib.reportcterror:
    param    u64       errortype
    param    u64       mess
    param    i64       pos
    param    u64       currproc
    local    mem:48       loc
    setcall  mem:48 /2/1                
    load     u64       currproc         
    setarg   u64 /2                     
    load     i64       pos              
    setarg   u64 /1                     
    callf    mem:48 /2    &qq_lib.geterrorinfo
    store    mem:48       loc           
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       errortype        
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       "Error:"         
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "    "           
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64       mess             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     i64       pos              
    jumpt    i64       #2653            
    load     i64       qq_decls.qpos    
    jumpf    i64       #2652            
#2653: 
    setcall      /1/1                   
    load     mem:48       loc           
    setarg   mem:48 /1                  
    callp        /1    &qq_lib.showerrorsource
#2652: 
    setcall      /1/1                   
    load     mem:48       loc           
    setarg   mem:48 /1                  
    callp        /1    &qq_lib.stopcompiler
    retproc                             
endproc

proc qq_lib.geterrorinfo:
    param    u64       pos
    param    u64       currproc
    local    i64       soffset
    local    i64       moduleno
    local    mem:48       loc
    rettype  mem:0
    load     u64       &loc             
    clear    mem:48                     
    load     u64       pos              
    load     i64       0                
    load     i64       23               
    loadbf   i64                        
    load     u64       &loc             
    load     i64       32               
    istorex  i64 /1                     
    load     u64       pos              
    load     i64       24               
    load     i64       31               
    loadbf   i64                        
    store    i64       moduleno         
    load     i64       moduleno         
    load     i64       0                
    jumpne   i64       #2656            
    load     mem:48       loc           
    jumpret  mem:48       #2654         
#2656: 
    load     u64       currproc         
    load     u64       0                
    jumpne   u64       #2658            
    setcall      /1/1                   
    load     u64       "GETERRORINFO: no currproc"
    setarg   u64 /1                     
    callp        /1    &mlib.abortprogram
#2658: 
    load     u64       &qq_decls.modules
    load     i64       moduleno         
    iloadx   u64 /8                     
    load     u64       &loc             
    load     i64       8                
    istorex  u64 /1                     
    load     u64       &qq_decls.subprogs
    load     u64       &loc             
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       44               
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8/-8                  
    load     u64       &loc             
    load     i64       0                
    istorex  u64 /1                     
    load     u64       currproc         
    load     u64       &loc             
    load     i64       16               
    istorex  u64 /1                     
    load     mem:48       loc           
    jumpret  mem:48       #2654         
#2654: 
    retfn    mem:48                     
endproc

proc qq_lib.showerrorsource:
    param    mem:48       loc
    local    u64       s
    load     u64       &loc             
    load     i64       8                
    iloadx   u64 /1                     
    jumpt    u64       #2661            
    jump               #2659            
#2661: 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "Line:"          
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &loc             
    load     i64       32               
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       "in Module"      
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &loc             
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64       ".q:"            
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     u64       &loc             
    load     i64       16               
    iloadx   u64 /1                     
    jumpf    u64       #2663            
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "In function:"   
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &loc             
    load     i64       16               
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
#2663: 
#2659: 
    retproc                             
endproc

proc qq_lib.stopcompiler:
    param    mem:48       loc
    local    u64       f
    load     u64       &loc             
    load     i64       8                
    iloadx   u64 /1                     
    jumpf    u64       #2666            
    setcall  u64 /2/1                   
    load     u64       "w"              
    setarg   u64 /2                     
    load     u64       "$error.tmp"     
    setarg   u64 /1                     
    callf    u64 /2    &fopen           
    store    u64       f                
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       &loc             
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &loc             
    load     i64       32               
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall  i32 /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callf    i32 /1    &fclose          
    unload   i32                        
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
#2666: 
    load     i64       1                
    stop                                
    retproc                             
endproc

proc qq_lib.gerror:
    param    u64       mess
    param    u64       p
    setcall      /4/1                   
    load     u64       qq_decls.stcurrproc
    setarg   u64 /4                     
    startmx                             
    load     u64       p                
    jumpf    u64       #2669            
    load     u64       p                
    load     i64       4                
    iloadx   i32 /1                     
    widen    i64/i32                    
    resetmx  i64                        
    jump               #2668            
#2669: 
    load     i64       qq_decls.qpos    
    endmx    i64                        
#2668: 
    setarg   i64 /3                     
    load     u64       mess             
    setarg   u64 /2                     
    load     u64       "Code Gen"       
    setarg   u64 /1                     
    callp        /4    &qq_lib.reportcterror
    retproc                             
endproc

proc qq_lib.gerror_s:
    param    u64       mess
    param    u64       param
    param    u64       p
    local    mem:300       str
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       mess             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       param            
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /4/1                   
    load     u64       qq_decls.stcurrproc
    setarg   u64 /4                     
    startmx                             
    load     u64       p                
    jumpf    u64       #2672            
    load     u64       p                
    load     i64       4                
    iloadx   i32 /1                     
    widen    i64/i32                    
    resetmx  i64                        
    jump               #2671            
#2672: 
    load     i64       qq_decls.qpos    
    endmx    i64                        
#2671: 
    setarg   i64 /3                     
    load     u64       &str             
    setarg   u64 /2                     
    load     u64       "Code Gen"       
    setarg   u64 /1                     
    callp        /4    &qq_lib.reportcterror
    retproc                             
endproc

proc qq_lib.serror:
    param    u64       mess
    setcall      /4/1                   
    load     u64       qq_decls.stcurrproc
    setarg   u64 /4                     
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    setarg   i64 /3                     
    load     u64       mess             
    setarg   u64 /2                     
    load     u64       "Syntax"         
    setarg   u64 /1                     
    callp        /4    &qq_lib.reportcterror
    retproc                             
endproc

proc qq_lib.serror_s:
    param    u64       mess
    param    u64       param
    local    mem:300       str
    setcall  u64 /2/1                   
    load     u64       mess             
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    setcall  u64 /2/1                   
    load     u64       " "              
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /2    &strcat          
    unload   u64                        
    setcall  u64 /2/1                   
    load     u64       param            
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /2    &strcat          
    unload   u64                        
    setcall      /4/1                   
    load     u64       qq_decls.stcurrproc
    setarg   u64 /4                     
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    setarg   i64 /3                     
    load     u64       &str             
    setarg   u64 /2                     
    load     u64       "Syntax"         
    setarg   u64 /1                     
    callp        /4    &qq_lib.reportcterror
    retproc                             
endproc

proc qq_lib.rxerror:
    param    u64       mess
    param    u64       p
    setcall      /4/1                   
    load     u64       qq_decls.stcurrproc
    setarg   u64 /4                     
    startmx                             
    load     u64       p                
    jumpf    u64       #2677            
    load     u64       p                
    load     i64       4                
    iloadx   i32 /1                     
    widen    i64/i32                    
    resetmx  i64                        
    jump               #2676            
#2677: 
    load     i64       qq_decls.qpos    
    endmx    i64                        
#2676: 
    setarg   i64 /3                     
    load     u64       mess             
    setarg   u64 /2                     
    load     u64       "Resolve"        
    setarg   u64 /1                     
    callp        /4    &qq_lib.reportcterror
    retproc                             
endproc

proc qq_lib.rxerror_s:
    param    u64       mess
    param    u64       param
    param    u64       p
    local    mem:300       str
    setcall  u64 /2/1                   
    load     u64       mess             
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    setcall  u64 /2/1                   
    load     u64       " "              
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /2    &strcat          
    unload   u64                        
    setcall  u64 /2/1                   
    load     u64       param            
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /2    &strcat          
    unload   u64                        
    setcall      /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callp        /2    &qq_lib.rxerror  
    retproc                             
endproc

proc qq_lib.lxerror:
    param    u64       mess
    setcall      /4/1                   
    load     u64       qq_decls.stcurrproc
    setarg   u64 /4                     
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    setarg   i64 /3                     
    load     u64       mess             
    setarg   u64 /2                     
    load     u64       "Lex"            
    setarg   u64 /1                     
    callp        /4    &qq_lib.reportcterror
    retproc                             
endproc

proc qq_lib.loaderror:
    param    u64       mess
    param    u64       mess2
    local    mem:512       str
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       mess             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       mess2            
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "Load Error:"    
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "Stopping"       
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     i64       1                
    stop                                
    retproc                             
endproc

proc qq_lib.prterror:
    param    u64       mess
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "Print error:"   
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       mess             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall  i64 /0/1                   
    callf    i64 /0    &mlinux.os_getch 
    unload   i64                        
    load     i64       1                
    stop                                
    retproc                             
endproc

proc qq_lib.allocunitrec:
    local    u64       p
    rettype  u64
    setcall  u64 /1/1                   
    load     i64       32               
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_allocnfz
    store    u64       p                
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    load     u64       p                
    load     i64       4                
    istorex  i32 /1                     
    load     u64       p                
    jumpret  u64       #2682            
#2682: 
    retfn    u64                        
endproc

proc qq_lib.createintunit:
    param    i64       a
    local    u64       u
    rettype  u64
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_lib.allocunitrec
    store    u64       u                
    load     i64       41               
    load     u64       u                
    load     i64       0                
    istorex  u8  /1                     
    load     i64       a                
    load     u64       u                
    load     i64       16               
    istorex  i64 /1                     
    load     u64       u                
    jumpret  u64       #2683            
#2683: 
    retfn    u64                        
endproc

proc qq_lib.createrealunit:
    param    r64       x
    local    u64       u
    rettype  u64
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_lib.allocunitrec
    store    u64       u                
    load     i64       42               
    load     u64       u                
    load     i64       0                
    istorex  u8  /1                     
    load     r64       x                
    load     u64       u                
    load     i64       16               
    istorex  r64 /1                     
    load     u64       u                
    jumpret  u64       #2684            
#2684: 
    retfn    u64                        
endproc

proc qq_lib.createstringunit:
    param    u64       s
    param    i64       slength
    local    u64       u
    rettype  u64
    load     i64       slength          
    load     i64       -1               
    jumpne   i64       #2687            
    setcall  i64 /1/1                   
    load     u64       s                
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    store    i64       slength          
#2687: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_lib.allocunitrec
    store    u64       u                
    load     i64       43               
    load     u64       u                
    load     i64       0                
    istorex  u8  /1                     
    setcall  u64 /1/1                   
    load     i64       slength          
    load     i64       1                
    add      i64                        
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    load     u64       u                
    load     i64       16               
    istorex  u64 /1                     
    load     i64       slength          
    jumpf    i64       #2689            
    setcall      /3/1                   
    load     i64       slength          
    setarg   u64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       u                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &memcpy          
#2689: 
    load     u64       0                
    load     u64       u                
    load     i64       16               
    iloadx   u64 /1                     
    load     i64       slength          
    istorex  u8  /1                     
    load     i64       slength          
    load     u64       u                
    load     i64       24               
    istorex  i64 /1                     
    load     u64       u                
    jumpret  u64       #2685            
#2685: 
    retfn    u64                        
endproc

proc qq_lib.createunit0:
    param    i64       tag
    local    u64       u
    rettype  u64
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_lib.allocunitrec
    store    u64       u                
    load     i64       tag              
    load     u64       u                
    load     i64       0                
    istorex  u8  /1                     
    load     u64       u                
    jumpret  u64       #2690            
#2690: 
    retfn    u64                        
endproc

proc qq_lib.createunit1:
    param    i64       tag
    param    u64       p
    local    u64       u
    rettype  u64
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_lib.allocunitrec
    store    u64       u                
    load     i64       tag              
    load     u64       u                
    load     i64       0                
    istorex  u8  /1                     
    load     u64       p                
    load     u64       u                
    load     i64       16               
    istorex  u64 /1                     
    load     u64       u                
    jumpret  u64       #2691            
#2691: 
    retfn    u64                        
endproc

proc qq_lib.createunit2:
    param    i64       tag
    param    u64       p
    param    u64       q
    local    u64       u
    rettype  u64
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_lib.allocunitrec
    store    u64       u                
    load     i64       tag              
    load     u64       u                
    load     i64       0                
    istorex  u8  /1                     
    load     u64       p                
    load     u64       u                
    load     i64       16               
    istorex  u64 /1                     
    load     u64       q                
    load     u64       u                
    load     i64       24               
    istorex  u64 /1                     
    load     u64       u                
    jumpret  u64       #2692            
#2692: 
    retfn    u64                        
endproc

proc qq_lib.createname:
    param    u64       p
    local    u64       u
    rettype  u64
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_lib.allocunitrec
    store    u64       u                
    load     i64       39               
    load     u64       u                
    load     i64       0                
    istorex  u8  /1                     
    load     u64       p                
    load     u64       u                
    load     i64       16               
    istorex  u64 /1                     
    load     u64       u                
    jumpret  u64       #2693            
#2693: 
    retfn    u64                        
endproc

proc qq_lib.addlistunit:
    param    u64       ulist
    param    u64       ulistx
    param    u64       p
    jump               #2696            
#2695: 
    load     u64       ulist            
    iload    u64                        
    load     u64       0                
    jumpne   u64       #2699            
    load     u64       p                
    double                              
    load     u64       ulistx           
    istore   u64                        
    load     u64       ulist            
    istore   u64                        
    jump               #2698            
#2699: 
    load     u64       p                
    load     u64       ulistx           
    iload    u64                        
    load     i64       8                
    istorex  u64 /1                     
#2698: 
    load     u64       p                
    load     u64       ulistx           
    istore   u64                        
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
#2696: 
    load     u64       p                
    jumpt    u64       #2695            
    retproc                             
endproc

proc qq_lib.createavname:
    local    u64       p
    local    mem:32       str
    local    u64       name
    rettype  u64
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "av$"            
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64 /1    &qq_lib.nextavindex
    incrload i64 /1                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall  u64 /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /1    &mlib.pcm_copyheapstring
    store    u64       name             
    setcall  u64 /1/1                   
    load     u64       name             
    setarg   u64 /1                     
    callf    u64 /1    &qq_lex.addnamestr
    store    u64       p                
    setcall  u64 /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callf    u64 /1    &qq_lib.createname
    jumpret  u64       #2700            
#2700: 
    retfn    u64                        
endproc

proc qq_lib.convtostringz:
    param    u64       svalue
    param    i64       length
    local    u64       p
    rettype  u64
    load     i64       length           
    load     i64       2000             
    jumplt   i64       #2703            
    load     u64       qq_lib.convtostringz.longstr
    jumpf    u64       #2705            
    setcall      /1/1                   
    load     u64       qq_lib.convtostringz.longstr
    setarg   u64 /1                     
    callp        /1    &free            
#2705: 
    setcall  u64 /1/1                   
    load     i64       length           
    load     i64       1                
    add      u64                        
    setarg   u64 /1                     
    callf    u64 /1    &malloc          
    store    u64       qq_lib.convtostringz.longstr
    setcall      /3/1                   
    load     i64       length           
    setarg   u64 /3                     
    load     u64       svalue           
    setarg   u64 /2                     
    load     u64       qq_lib.convtostringz.longstr
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     u64       0                
    load     u64       qq_lib.convtostringz.longstr
    load     i64       length           
    istorex  u8  /1                     
    load     u64       qq_lib.convtostringz.longstr
    jumpret  u64       #2701            
#2703: 
    load     u64       svalue           
    load     u64       0                
    jumpne   u64       #2707            
    load     u64       ""               
    jumpret  u64       #2701            
#2707: 
    load     u64 /1    &qq_lib.convtostringz.strindex
    incrload i64 /1                     
    load     i64       6                
    jumpne   i64       #2709            
    load     i64       0                
    store    i64       qq_lib.convtostringz.strindex
#2709: 
    load     u64       &qq_lib.convtostringz.table
    load     i64       qq_lib.convtostringz.strindex
    iloadx   u64 /8                     
    store    u64       p                
    setcall      /3/1                   
    load     i64       length           
    setarg   u64 /3                     
    load     u64       svalue           
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     u64       0                
    load     u64       p                
    load     i64       length           
    istorex  u8  /1                     
    load     u64       p                
    jumpret  u64       #2701            
#2701: 
    retfn    u64                        
endproc

proc qq_lib.findprocname:
    param    u64       fnptr
    local    u64       name
    local    i64       n
    local    i64       i
    rettype  u64
    load     i64       $nprocs          
    store    i64       n                
    load     i64       1                
    store    i64       i                
    load     i64       n                
    load     i64       1                
    jumplt   i64       #2713            
#2711: 
    load     u64       &$procaddr       
    load     i64       i                
    iloadx   i64 /8/-8                  
    load     u64       fnptr            
    jumpne   u64       #2715            
    load     u64       &$procname       
    load     i64       i                
    iloadx   i64 /8/-8                  
    jumpret  u64       #2710            
#2715: 
    forup    i64 /1    #2711            
    opnd     i64       i                
    opnd     i64       n                
#2713: 
    load     u64       "?"              
    jumpret  u64       #2710            
#2710: 
    retfn    u64                        
endproc

proc qq_lib.strexpr:
    param    u64       p
    rettype  u64
    setcall      /1/1                   
    load     u64       qq_lib.exprstr   
    setarg   u64 /1                     
    callp        /1    &mlib.gs_init    
    setcall      /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callp        /1    &qq_lib.jeval    
    load     u64       qq_lib.exprstr   
    jumpret  u64       #2716            
#2716: 
    retfn    u64                        
endproc

proc qq_lib.strexpr_s:
    param    u64       p
    rettype  u64
    load     u64       p                
    load     u64       0                
    jumpne   u64       #2719            
    load     u64       ""               
    jumpret  u64       #2717            
#2719: 
    setcall      /1/1                   
    load     u64       qq_lib.exprstr   
    setarg   u64 /1                     
    callp        /1    &mlib.gs_init    
    setcall      /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callp        /1    &qq_lib.jeval    
    load     u64       qq_lib.exprstr   
    load     i64       0                
    iloadx   u64 /1                     
    jumpret  u64       #2717            
#2717: 
    retfn    u64                        
endproc

proc qq_lib.jeval:
    param    u64       p
    local    u64       q
    local    mem:500       str
    local    i64       i
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       41               
    jumpeq   i64 /1    #2722            
    load     i64       5                
    jumpeq   i64 /1    #2722            
    load     i64       42               
    jumpeq   i64 /1    #2723            
    load     i64       43               
    jumpeq   i64 /1    #2724            
    load     i64       39               
    jumpeq   i64 /1    #2725            
    load     i64       27               
    jumpeq   i64 /1    #2726            
    load     i64       47               
    jumpeq   i64 /1    #2727            
    load     i64       48               
    jumpeq   i64 /1    #2727            
    load     i64       49               
    jumpeq   i64 /1    #2728            
    load     i64       46               
    jumpeq   i64 /1    #2729            
    load     i64       2                
    jumpeq   i64 /1    #2730            
    load     i64       34               
    jumpeq   i64 /1    #2731            
    load     i64       35               
    jumpeq   i64 /1    #2732            
    load     i64       4                
    jumpeq   i64 /1    #2733            
    load     i64       28               
    jumpeq   i64 /1    #2734            
    load     i64       40               
    jumpeq   i64 /1    #2735            
    load     i64       38               
    jumpeq   i64 /1    #2736            
    load     i64       64               
    jumpeq   i64       #2737            
    jump               #2738            
#2722: 
    setcall      /1                     
    setcall  u64 /2                     
    load     u64       0                
    setarg   u64 /2                     
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callf    u64 /2    &msysc.strint    
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    jump               #2721            
#2723: 
    setcall      /1                     
    setcall  u64 /2                     
    load     u64       0                
    setarg   u64 /2                     
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    float    r64/i64                    
    setarg   r64 /1                     
    callf    u64 /2    &msysc.strreal   
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    jump               #2721            
#2724: 
    load     u64       p                
    load     i64       24               
    iloadx   i64 /1                     
    load     i64       250              
    jumple   i64       #2740            
    setcall  u64 /2/1                   
    load     u64       "LONGSTR)"       
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    jump               #2739            
#2740: 
    setcall      /2/1                   
    load     u64       &str             
    setarg   u64 /2                     
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &qq_lib.convertstring
#2739: 
    setcall      /1/1                   
    load     u64       "\""             
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    setcall      /1/1                   
    load     u64       "\""             
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    jump               #2721            
#2725: 
    setcall      /1/1                   
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    jump               #2721            
#2726: 
    setcall      /1/1                   
    load     u64       "Host<"          
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    setcall      /1/1                   
    load     u64       &qq_tables.hostfnnames
    load     u64       p                
    load     i64       24               
    iloadx   i64 /1                     
    iloadx   u64 /8                     
    load     i64       2                
    addpx    u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    setcall      /1/1                   
    load     u64       ">("             
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       q                
    jump               #2742            
#2741: 
    setcall      /1/1                   
    load     u64       q                
    setarg   u64 /1                     
    callp        /1    &qq_lib.jeval    
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       q                
    jumpf    u64       #2745            
    setcall      /1/1                   
    load     u64       ","              
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
#2745: 
#2742: 
    load     u64       q                
    jumpt    u64       #2741            
    setcall      /1/1                   
    load     u64       ")"              
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    jump               #2721            
#2727: 
    setcall      /1/1                   
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_lib.jeval    
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       48               
    jumpne   i64       #2747            
    setcall      /1/1                   
    load     u64       "."              
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
#2747: 
    setcall      /1/1                   
    load     u64       "["              
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    setcall      /1/1                   
    load     u64       p                
    load     i64       24               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_lib.jeval    
    setcall      /1/1                   
    load     u64       "]"              
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    jump               #2721            
#2728: 
    setcall      /1/1                   
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_lib.jeval    
    setcall      /1/1                   
    load     u64       "{"              
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    setcall      /1/1                   
    load     u64       p                
    load     i64       24               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_lib.jeval    
    setcall      /1/1                   
    load     u64       "}"              
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    jump               #2721            
#2729: 
    setcall      /1/1                   
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_lib.jeval    
    setcall      /1/1                   
    load     u64       "."              
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    setcall      /1/1                   
    load     u64       p                
    load     i64       24               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_lib.jeval    
    jump               #2721            
#2730: 
    setcall      /1/1                   
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_lib.jeval    
    setcall      /1/1                   
    load     u64       ":="             
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    setcall      /1/1                   
    load     u64       p                
    load     i64       24               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_lib.jeval    
    jump               #2721            
#2731: 
    setcall      /1                     
    setcall  u64 /2                     
    load     i64       0                
    setarg   i64 /2                     
    load     u64       p                
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /1                     
    callf    u64 /2    &qq_show.strmode 
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    jump               #2721            
#2732: 
    setcall      /1                     
    setcall  u64 /2                     
    load     i64       0                
    setarg   i64 /2                     
    load     u64       p                
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /1                     
    callf    u64 /2    &qq_show.strmode 
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    setcall      /1/1                   
    load     u64       "("              
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    setcall      /1/1                   
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_lib.jeval    
    setcall      /1/1                   
    load     u64       ")"              
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    jump               #2721            
#2733: 
    setcall      /1/1                   
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_lib.jeval    
    setcall      /1/1                   
    load     u64       ":"              
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    setcall      /1/1                   
    load     u64       p                
    load     i64       24               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_lib.jeval    
    jump               #2721            
#2734: 
    setcall      /1/1                   
    load     u64       "nil"            
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    jump               #2721            
#2735: 
    setcall      /1/1                   
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_lib.jeval    
    setcall      /1/1                   
    load     u64       ".$"             
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    jump               #2721            
#2736: 
    setcall      /1/1                   
    load     u64       "CMPCHAIN:"      
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       q                
    setcall      /1/1                   
    load     u64       q                
    setarg   u64 /1                     
    callp        /1    &qq_lib.jeval    
    load     i64       1                
    store    i64       i                
#2748: 
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       p                
    load     i64       24               
    addpx    u64 /1                     
    load     i64       i                
    iloadx   u8  /1/-1                  
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #2752            
    jump               #2750            
#2752: 
    setcall      /1/1                   
    load     u64       &qq_tables.jtagnames
    load     u64       p                
    load     i64       24               
    addpx    u64 /1                     
    load     i64       i                
    iloadx   u8  /1/-1                  
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    setcall      /1/1                   
    load     u64       q                
    setarg   u64 /1                     
    callp        /1    &qq_lib.jeval    
    forup    i64 /1    #2748            
    opnd     i64       i                
    opnd     i64       4                
#2750: 
    jump               #2721            
#2737: 
    setcall      /1/1                   
    load     u64       &qq_tables.mathsnames
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8/-8                  
    load     i64       3                
    addpx    u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    setcall      /1/1                   
    load     u64       "("              
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    setcall      /1/1                   
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_lib.jeval    
    setcall      /1/1                   
    load     u64       ")"              
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    jump               #2721            
#2738: 
    load     u64       &qq_tables.jflags
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       2                
    jumpne   i64       #2754            
    setcall  u64 /2                     
    setcall  u64 /1                     
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /1                     
    callf    u64 /1    &qq_lib.getopcname
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    setcall      /1/1                   
    load     u64       "("              
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    setcall      /1/1                   
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_lib.jevallist
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    setcall      /1/1                   
    load     u64       p                
    load     i64       24               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_lib.jevallist
    setcall      /1/1                   
    load     u64       ")"              
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    jump               #2753            
#2754: 
    load     u64       &qq_tables.jflags
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpne   i64       #2755            
    setcall  u64 /2                     
    setcall  u64 /1                     
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /1                     
    callf    u64 /1    &qq_lib.getopcname
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    setcall      /1/1                   
    load     u64       "("              
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    setcall      /1/1                   
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_lib.jevallist
    setcall      /1/1                   
    load     u64       ")"              
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    jump               #2753            
#2755: 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       &qq_tables.jtagnames
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /2/1                   
    load     u64       &qq_tables.jtagnames
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /2                     
    load     u64       "CAN'T DO JEVAL:"
    setarg   u64 /1                     
    callp        /2    &qq_lib.loaderror
#2753: 
#2721: 
    retproc                             
endproc

proc qq_lib.jevallist:
    param    u64       p
    local    u64       q
    load     u64       p                
    jumpt    u64       #2758            
    jump               #2756            
#2758: 
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    jumpf    u64       #2760            
    setcall      /1/1                   
    load     u64       "("              
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    load     u64       p                
    store    u64       q                
    jump               #2762            
#2761: 
    setcall      /1/1                   
    load     u64       q                
    setarg   u64 /1                     
    callp        /1    &qq_lib.jeval    
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       q                
    jumpf    u64       #2765            
    setcall      /1/1                   
    load     u64       ","              
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
#2765: 
#2762: 
    load     u64       q                
    jumpt    u64       #2761            
    setcall      /1/1                   
    load     u64       ")"              
    setarg   u64 /1                     
    callp        /1    &qq_lib.additem  
    jump               #2756            
    jump               #2759            
#2760: 
    setcall      /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callp        /1    &qq_lib.jeval    
#2759: 
#2756: 
    retproc                             
endproc

proc qq_lib.additem:
    param    u64       s
    local    u64       d
    local    i64       lastchar
    local    i64       nextchar
    load     u64       qq_lib.exprstr   
    load     i64       0                
    iloadx   u64 /1                     
    store    u64       d                
    load     u64       qq_lib.exprstr   
    load     i64       8                
    iloadx   i32 /1                     
    jumpf    i32       #2768            
    load     u64       d                
    load     u64       qq_lib.exprstr   
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    addpx    u64 /1                     
    load     i64       1                
    subpx    u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    store    i64       lastchar         
    load     u64       s                
    iload    u8                         
    widen    i64/u8                     
    store    i64       nextchar         
    setcall  i64 /1/1                   
    load     i64       lastchar         
    setarg   i64 /1                     
    callf    i64 /1    &qq_lib.isalphanum
    jumpf    i64       #2770            
    setcall  i64 /1/1                   
    load     i64       nextchar         
    setarg   i64 /1                     
    callf    i64 /1    &qq_lib.isalphanum
    jumpf    i64       #2770            
    setcall      /3/1                   
    load     i64       -1               
    setarg   i64 /3                     
    load     u64       " "              
    setarg   u64 /2                     
    load     u64       qq_lib.exprstr   
    setarg   u64 /1                     
    callp        /3    &mlib.strbuffer_add
#2770: 
#2768: 
    setcall      /3/1                   
    load     i64       -1               
    setarg   i64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       qq_lib.exprstr   
    setarg   u64 /1                     
    callp        /3    &mlib.strbuffer_add
    retproc                             
endproc

proc qq_lib.isalphanum:
    param    i64       c
    rettype  i64
    load     i64       c                
    load     i64       65               
    jumplt   i64       #2775            
    load     i64       c                
    load     i64       90               
    jumple   i64       #2774            
#2775: 
    load     i64       c                
    load     i64       97               
    jumplt   i64       #2776            
    load     i64       c                
    load     i64       122              
    jumple   i64       #2774            
#2776: 
    load     i64       c                
    load     i64       48               
    jumplt   i64       #2773            
    load     i64       c                
    load     i64       57               
    jumpgt   i64       #2773            
#2774: 
    load     i64       1                
    jumpret  i64       #2771            
#2773: 
    load     i64       0                
    jumpret  i64       #2771            
#2771: 
    retfn    i64                        
endproc

proc qq_lib.getopcname:
    param    i64       opc
    rettype  u64
    load     u64       &qq_tables.jtagnames
    load     i64       opc              
    iloadx   u64 /8                     
    jumpret  u64       #2777            
#2777: 
    retfn    u64                        
endproc

proc qq_lib.convertstring:
    param    u64       s
    param    u64       t
    local    i64       c
    jump               #2780            
#2779: 
    load     i64       c                
    switch   i64 /7/92  #2783           
    opnd     i64       #2784            
#2783: 
    swlabel            #2790            
    swlabel            #2790            
    swlabel            #2788            
    swlabel            #2786            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2787            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2790            
    swlabel            #2790            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2785            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2784            
    swlabel            #2789            
    endsw                               
#2785: 
    load     u64       92               
    load     u64 /1    &t               
    loadincr u64 /1                     
    istore   u8                         
    load     u64       34               
    load     u64 /1    &t               
    loadincr u64 /1                     
    istore   u8                         
    jump               #2782            
#2786: 
    load     u64       92               
    load     u64 /1    &t               
    loadincr u64 /1                     
    istore   u8                         
    load     u64       110              
    load     u64 /1    &t               
    loadincr u64 /1                     
    istore   u8                         
    jump               #2782            
#2787: 
    load     u64       92               
    load     u64 /1    &t               
    loadincr u64 /1                     
    istore   u8                         
    load     u64       99               
    load     u64 /1    &t               
    loadincr u64 /1                     
    istore   u8                         
    jump               #2782            
#2788: 
    load     u64       92               
    load     u64 /1    &t               
    loadincr u64 /1                     
    istore   u8                         
    load     u64       116              
    load     u64 /1    &t               
    loadincr u64 /1                     
    istore   u8                         
    jump               #2782            
#2789: 
    load     u64       92               
    load     u64 /1    &t               
    loadincr u64 /1                     
    istore   u8                         
    load     u64       92               
    load     u64 /1    &t               
    loadincr u64 /1                     
    istore   u8                         
    jump               #2782            
#2790: 
    load     u64       60               
    load     u64 /1    &t               
    loadincr u64 /1                     
    istore   u8                         
    load     i64       c                
    load     i64       10               
    idiv     i64                        
    load     i64       48               
    add      u64                        
    load     u64 /1    &t               
    loadincr u64 /1                     
    istore   u8                         
    load     i64       c                
    load     i64       10               
    irem     i64                        
    load     i64       48               
    add      u64                        
    load     u64 /1    &t               
    loadincr u64 /1                     
    istore   u8                         
    load     u64       62               
    load     u64 /1    &t               
    loadincr u64 /1                     
    istore   u8                         
    jump               #2782            
#2784: 
    load     i64       c                
    load     u64 /1    &t               
    loadincr u64 /1                     
    istore   u8                         
#2782: 
#2780: 
    load     u64 /1    &s               
    loadincr u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    double                              
    store    i64       c                
    jumpt    i64       #2779            
    load     u64       0                
    load     u64       t                
    istore   u8                         
    retproc                             
endproc

proc qq_lib.createavnamex:
    param    u64       owner
    local    u64       p
    local    u64       d
    rettype  u64
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_lib.createavname
    store    u64       p                
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /3    &qq_resolve.resolvename
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       d                
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       14               
    jumpne   i64       #2793            
    load     u64 /1    &qq_decls.nproclocals
    incrto   i64 /1                     
    load     i64       qq_decls.nproclocals
    load     u64       d                
    load     i64       96               
    istorex  i32 /1                     
    load     i64       qq_decls.nproclocals
    load     u64       qq_pclgen.pprocentry
    load     i64       9                
    istorex  u8  /1                     
#2793: 
    load     u64       p                
    jumpret  u64       #2791            
#2791: 
    retfn    u64                        
endproc

proc qq_lib.storemode:
    param    u64       owner
    param    i64       m
    param    u64       p
    local    u64       q
    load     i64       m                
    load     u64       p                
    istore   i16                        
    load     i64       m                
    load     i64       0                
    jumplt   i64       #2796            
    jump               #2794            
#2796: 
    setcall  u64 /1/1                   
    load     i64       24               
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    store    u64       q                
    load     u64       owner            
    load     u64       q                
    load     i64       0                
    istorex  u64 /1                     
    load     u64       owner            
    load     u64       0                
    jumpne   u64       #2798            
    setcall      /1/1                   
    load     u64       "STOREMODE/OWNER=0"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#2798: 
    load     u64       p                
    load     u64       q                
    load     i64       8                
    istorex  u64 /1                     
    load     u64       qq_tables.userxmodelist
    load     u64       q                
    load     i64       16               
    istorex  u64 /1                     
    load     u64       q                
    store    u64       qq_tables.userxmodelist
#2794: 
    retproc                             
endproc

proc qq_lib.nextpoweroftwo:
    param    i64       x
    local    i64       a
    rettype  i64
    load     i64       x                
    load     i64       0                
    jumpne   i64       #2801            
    load     i64       0                
    jumpret  i64       #2799            
#2801: 
    load     i64       1                
    store    i64       a                
    jump               #2803            
#2802: 
    load     i64       1                
    load     u64 /1    &a               
    shlto    i64                        
#2803: 
    load     i64       a                
    load     i64       x                
    jumplt   i64       #2802            
    load     i64       a                
    jumpret  i64       #2799            
#2799: 
    retfn    i64                        
endproc

proc qq_lib.testelem:
    param    u64       p
    param    i64       n
    rettype  i64
    startmx                             
    load     u64       p                
    load     i64       n                
    load     i64       3                
    shr      i64                        
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       &qq_lib.bytemasks
    load     i64       n                
    load     i64       7                
    bitand   i64                        
    iloadx   u8  /1                     
    widen    i64/u8                     
    bitand   i64                        
    jumpf    i64       #2807            
    load     i64       1                
    resetmx  i64                        
    jump               #2806            
#2807: 
    load     i64       0                
    endmx    i64                        
#2806: 
    jumpret  i64       #2805            
#2805: 
    retfn    i64                        
endproc

proc qq_lib.setelem:
    param    u64       p
    param    i64       n
    load     u64       &qq_lib.bytemasks
    load     i64       n                
    load     i64       7                
    bitand   i64                        
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       p                
    load     i64       n                
    load     i64       3                
    shr      i64                        
    addpx    u8  /1                     
    bitorto  u8                         
    retproc                             
endproc

proc qq_lib.setelemblock:
    param    u64       p
    param    i64       a
    param    i64       b
    local    i64       ax
    local    i64       bx
    local    i64       nwords
    local    i64       nx
    local    i64       alast
    local    i64       bfirst
    local    u64       q
    local    i64       av_1
    local    i64       i
    load     i64       a                
    load     i64       b                
    jumple   i64       #2811            
    jump               #2809            
#2811: 
    load     i64       a                
    load     i64       -64              
    bitand   i64                        
    store    i64       ax               
    load     i64       b                
    load     i64       -64              
    bitand   i64                        
    load     i64       64               
    add      i64                        
    store    i64       bx               
    load     i64       ax               
    store    i64       nx               
    load     i64       -1               
    double                              
    store    i64       bfirst           
    store    i64       alast            
    load     i64       bx               
    load     i64       ax               
    sub      i64                        
    load     i64       64               
    idiv     i64                        
    store    i64       nwords           
    load     i64       nwords           
    load     i64       1                
    jumpne   i64       #2813            
    load     i64       ax               
    load     i64       a                
    jumpne   i64       #2816            
    load     i64       b                
    load     i64       bx               
    load     i64       1                
    sub      i64                        
    jumpeq   i64       #2815            
#2816: 
    load     i64       a                
    store    i64       i                
    load     i64       i                
    load     i64       b                
    jumpgt   i64       #2819            
#2817: 
    setcall      /2/1                   
    load     i64       i                
    setarg   i64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /2    &qq_lib.setelem  
    forup    i64 /1    #2817            
    opnd     i64       i                
    opnd     i64       b                
#2819: 
    jump               #2809            
#2815: 
    jump               #2812            
#2813: 
    load     i64       ax               
    load     i64       a                
    jumpeq   i64       #2821            
    load     u64 /1    &nwords          
    decrto   i64 /1                     
    load     i64       ax               
    load     i64       64               
    add      i64                        
    store    i64       nx               
    load     i64       nx               
    load     i64       1                
    sub      i64                        
    store    i64       alast            
#2821: 
    load     i64       b                
    load     i64       bx               
    load     i64       1                
    sub      i64                        
    jumpeq   i64       #2823            
    load     u64 /1    &nwords          
    decrto   i64 /1                     
    load     i64       b                
    load     i64       -64              
    bitand   i64                        
    store    i64       bfirst           
#2823: 
#2812: 
    load     i64       alast            
    load     i64       0                
    jumplt   i64       #2825            
    load     i64       a                
    store    i64       i                
    load     i64       i                
    load     i64       alast            
    jumpgt   i64       #2828            
#2826: 
    setcall      /2/1                   
    load     i64       i                
    setarg   i64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /2    &qq_lib.setelem  
    forup    i64 /1    #2826            
    opnd     i64       i                
    opnd     i64       alast            
#2828: 
#2825: 
    load     u64       p                
    load     i64       nx               
    load     i64       3                
    shr      i64                        
    addpx    u8  /1                     
    store    u64       q                
    load     i64       nwords           
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #2831            
#2829: 
    load     u64       -1               
    load     u64       q                
    istore   u64                        
    load     u64 /1    &q               
    incrto   u64 /8                     
    to       i64       #2829            
    opnd     i64       av_1             
#2831: 
    load     i64       bfirst           
    load     i64       0                
    jumplt   i64       #2833            
    load     i64       bfirst           
    store    i64       i                
    load     i64       i                
    load     i64       b                
    jumpgt   i64       #2836            
#2834: 
    setcall      /2/1                   
    load     i64       i                
    setarg   i64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /2    &qq_lib.setelem  
    forup    i64 /1    #2834            
    opnd     i64       i                
    opnd     i64       b                
#2836: 
#2833: 
#2809: 
    retproc                             
endproc

proc qq_lib.ispoweroftwo:
    param    i64       x
    local    i64       a
    local    i64       n
    local    i64       av_1
    rettype  i64
    load     i64       1                
    store    i64       a                
    load     i64       0                
    store    i64       n                
    load     i64       60               
    store    i64       av_1             
#2838: 
    load     u64 /1    &n               
    incrto   i64 /1                     
    load     i64       a                
    load     i64       1                
    shl      i64                        
    store    i64       a                
    load     i64       a                
    load     i64       x                
    jumpne   i64       #2842            
    load     i64       n                
    jumpret  i64       #2837            
#2842: 
    to       i64       #2838            
    opnd     i64       av_1             
    load     i64       0                
    jumpret  i64       #2837            
#2837: 
    retfn    i64                        
endproc

proc qq_lib.deleteunit:
    param    u64       p
    param    u64       q
    local    u64       r
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       r                
    load     u64       q                
    iload    mem:32                     
    load     u64       p                
    istore   mem:32                     
    load     u64       r                
    load     u64       p                
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_lib.skipsemi:
    jump               #2846            
#2845: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
#2846: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       4                
    jumpeq   i64       #2845            
    retproc                             
endproc

proc qq_lib.checksymbol:
    param    i64       symbol
    local    mem:100       str
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       symbol           
    jumpeq   i64       #2850            
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "# expected, not #"
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /2/1                   
    load     u64       "m"              
    setarg   u64 /2                     
    load     u64       &qq_tables.symbolnames
    load     i64       symbol           
    iloadx   u64 /8/-8                  
    setarg   u64 /1                     
    callp        /2    &msysc.m$print_u64
    setcall      /2/1                   
    load     u64       "m"              
    setarg   u64 /2                     
    load     u64       &qq_tables.symbolnames
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8/-8                  
    setarg   u64 /1                     
    callp        /2    &msysc.m$print_u64
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#2850: 
    retproc                             
endproc

proc qq_lib.skipsymbol:
    param    i64       symbol
    setcall      /1/1                   
    load     i64       symbol           
    setarg   i64 /1                     
    callp        /1    &qq_lib.checksymbol
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    retproc                             
endproc

proc qq_lib.pcnotmut:
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Not mutable"    
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
    retproc                             
endproc

proc qq_lib.getpcloffset:
    param    u64       p
    param    u64       q
    rettype  i64
    load     u64       p                
    load     u64       q                
    subp     i64 /1                     
    load     i64       32               
    idiv     i64                        
    jumpret  i64       #2853            
#2853: 
    retfn    i64                        
endproc

proc qq_lists.start:
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_vars.obj_new 
    store    u64       qq_lists.emptylist
    load     i64       1                
    load     u64       qq_lists.emptylist
    load     i64       6                
    istorex  i16 /1                     
    load     i64       0                
    load     u64       qq_lists.emptylist
    load     i64       5                
    istorex  u8  /1                     
    retproc                             
endproc

proc qq_lists.var_empty_list:
    param    i64       lower
    param    u64       dest
    local    u64       p
    setcall  u64 /3/1                   
    load     u64       0                
    setarg   u64 /3                     
    load     i64       lower            
    setarg   i64 /2                     
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /3    &qq_lists.obj_newlist
    load     u64       dest             
    load     i64       8                
    istorex  u64 /1                     
    load     i64       266              
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    retproc                             
endproc

proc qq_lists.var_make_list:
    param    u64       a
    param    u64       dest
    param    i64       n
    param    i64       lower
    local    u64       p
    local    u64       b
    local    i64       av_1
    setcall  u64 /3/1                   
    load     u64       0                
    setarg   u64 /3                     
    load     i64       lower            
    setarg   i64 /2                     
    load     i64       n                
    setarg   i64 /1                     
    callf    u64 /3    &qq_lists.obj_newlist
    store    u64       p                
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       b                
    load     i64       n                
    jumpf    i64       #2858            
    load     u64       a                
    jumpf    u64       #2858            
    load     i64       n                
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #2861            
#2859: 
    load     u64       a                
    iload    mem:16                     
    load     u64       b                
    istore   mem:16                     
    load     u64 /1    &a               
    incrto   u64 /16                    
    load     u64 /1    &b               
    incrto   u64 /16                    
    to       i64       #2859            
    opnd     i64       av_1             
#2861: 
#2858: 
    load     i64       266              
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     u64       p                
    load     u64       dest             
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_lists.obj_newlist:
    param    i64       n
    param    i64       lower
    param    u64       defval
    local    u64       p
    local    u64       a
    local    i64       av_1
    local    i64       av_2
    rettype  u64
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_vars.obj_new 
    store    u64       p                
    load     u64       1                
    load     u64       p                
    load     i64       4                
    addpx    u64 /1                     
    load     i64       1                
    storebit u8                         
    load     i64       lower            
    load     i64       -32768           
    jumplt   i64 /1    #2865            
    load     i64       32767            
    jumple   i64       #2864            
#2865: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "List LWB not 16-bit"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#2864: 
    load     i64       lower            
    load     u64       p                
    load     i64       6                
    istorex  i16 /1                     
    load     i64       n                
    load     u64       p                
    load     i64       16               
    istorex  i64 /1                     
    load     i64       0                
    load     u64       p                
    load     i64       5                
    istorex  u8  /1                     
    load     i64       n                
    jumpf    i64       #2867            
    setcall  u64 /1/1                   
    load     i64       n                
    load     i64       16               
    mul      i64                        
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    double                              
    store    u64       a                
    load     u64       p                
    load     i64       8                
    istorex  u64 /1                     
    load     i64       mlib.allocbytes  
    load     i64       16               
    idiv     i64                        
    load     u64       p                
    load     i64       24               
    istorex  i64 /1                     
    load     u64       defval           
    jumpf    u64       #2869            
    load     u64       defval           
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpeq   i64       #2869            
    load     i64       n                
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #2872            
#2870: 
    load     u64       defval           
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #2874            
    load     u64       defval           
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#2874: 
    load     u64       defval           
    iload    mem:16                     
    load     u64       a                
    istore   mem:16                     
    load     u64 /1    &a               
    incrto   u64 /16                    
    to       i64       #2870            
    opnd     i64       av_1             
#2872: 
    jump               #2868            
#2869: 
    load     i64       n                
    store    i64       av_2             
    load     i64       av_2             
    load     i64       0                
    jumple   i64       #2877            
#2875: 
    load     i64       0                
    load     u64       a                
    load     i64       0                
    istorex  u32 /1                     
    load     u64 /1    &a               
    incrto   u64 /16                    
    to       i64       #2875            
    opnd     i64       av_2             
#2877: 
#2868: 
#2867: 
    load     u64       p                
    jumpret  u64       #2862            
#2862: 
    retfn    u64                        
endproc

proc qq_lists.obj_free_list:
    param    u64       p
    local    u64       q
    local    mem:16       v
    local    i64       av_1
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #2881            
#2879: 
    load     u64       q                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #2883            
    setcall      /1/1                   
    load     u64       q                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#2883: 
    load     u64 /1    &q               
    incrto   u64 /16                    
    to       i64       #2879            
    opnd     i64       av_1             
#2881: 
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    jumpf    i64       #2885            
    setcall      /2/1                   
    load     u64       p                
    load     i64       24               
    iloadx   i64 /1                     
    load     i64       16               
    mul      i64                        
    setarg   i64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_free   
#2885: 
    setcall      /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callp        /1    &mlib.pcm_free32 
    retproc                             
endproc

proc qq_lists.var_getix_list:
    param    u64       a
    param    i64       index
    local    u64       p
    local    u64       q
    local    u64       offset
    local    i64       lower
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       q                
    load     i64       6                
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       lower            
    load     i64       index            
    load     i64       lower            
    sub      u64                        
    store    u64       offset           
    load     u64       offset           
    load     u64       q                
    load     i64       16               
    iloadx   u64 /1                     
    jumplt   u64       #2888            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "getlist[int] bounds"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#2888: 
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       offset           
    addpx    u64 /16                    
    iload    mem:16                     
    load     u64       a                
    istore   mem:16                     
    load     u64       a                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #2890            
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#2890: 
    retproc                             
endproc

proc qq_lists.var_getslice_list:
    param    u64       a
    param    i64       i
    param    i64       j
    local    mem:16       v
    local    mem:16       v2
    local    i64       alower
    local    u64       p
    local    u64       q
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       p                
    load     i64       6                
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       alower           
    load     i64       i                
    load     i64       alower           
    jumplt   i64       #2894            
    load     i64       j                
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       alower           
    add      i64                        
    load     i64       1                
    sub      i64                        
    jumpgt   i64       #2894            
    load     i64       i                
    load     i64       j                
    jumple   i64       #2893            
#2894: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "list/slice bounds"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#2893: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_vars.obj_new 
    store    u64       q                
    load     u64       q                
    load     u64       &v               
    load     i64       8                
    istorex  u64 /1                     
    load     i64       1                
    load     u64       q                
    load     i64       5                
    istorex  u8  /1                     
    load     u64       p                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    loadbit  i64                        
    load     u64       q                
    load     i64       4                
    addpx    u64 /1                     
    load     i64       1                
    storebit u8                         
    load     i64       1                
    load     u64       q                
    load     i64       6                
    istorex  i16 /1                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       i                
    addpx    u64 /16                    
    load     i64       alower           
    subpx    u64 /16                    
    load     u64       q                
    load     i64       8                
    istorex  u64 /1                     
    load     u64       p                
    load     i64       5                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #2896            
    load     i64       2                
    jumpeq   i64       #2897            
    jump               #2898            
#2896: 
    load     u64       p                
    load     i64       24               
    iloadx   u64 /1                     
    load     u64       q                
    load     i64       24               
    istorex  u64 /1                     
    setcall      /1/1                   
    load     u64       q                
    load     i64       24               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_vars.obj_shareu
    jump               #2895            
#2897: 
    load     u64       0                
    load     u64       q                
    load     i64       24               
    istorex  u64 /1                     
    load     i64       2                
    load     u64       q                
    load     i64       5                
    istorex  u8  /1                     
    jump               #2895            
#2898: 
    load     u64       p                
    load     u64       q                
    load     i64       24               
    istorex  u64 /1                     
    load     u64       p                
    incrto   u32 /1                     
#2895: 
    load     i64       j                
    load     i64       i                
    sub      i64                        
    load     i64       1                
    add      i64                        
    load     u64       q                
    load     i64       16               
    istorex  i64 /1                     
    load     u64       q                
    load     u64       a                
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_lists.var_getixref_list:
    param    u64       a
    param    i64       index
    local    u64       p
    local    u64       q
    local    u64       offset
    local    mem:16       v
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     i64       index            
    load     u64       q                
    load     i64       6                
    iloadx   i16 /1                     
    widen    i64/i16                    
    sub      u64                        
    store    u64       offset           
    load     u64       offset           
    load     u64       q                
    load     i64       16               
    iloadx   u64 /1                     
    jumplt   u64       #2901            
    load     u64       offset           
    load     i64       0                
    jumpge   i64       #2903            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "&list[int] lwb" 
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
    jump               #2902            
#2903: 
    load     u64       offset           
    load     u64       q                
    load     i64       16               
    iloadx   i64 /1                     
    jumpne   i64       #2904            
    load     u64       q                
    load     i64       5                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpeq   i64       #2906            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Can't extend slice/ext"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#2906: 
    load     i64       0                
    load     u64       &v               
    load     i64       0                
    istorex  u32 /1                     
    setcall      /2/1                   
    load     u64       &v               
    setarg   u64 /2                     
    load     u64       q                
    setarg   u64 /1                     
    callp        /2    &qq_lists.obj_append_list
    jump               #2902            
#2904: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "putlist[int] bounds"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#2902: 
#2901: 
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       offset           
    addpx    u64 /16                    
    store    u64       p                
    load     i64       14               
    load     u64       a                
    load     i64       0                
    istorex  u32 /1                     
    load     u64       p                
    load     u64       a                
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_lists.var_putix_list:
    param    u64       a
    param    i64       index
    param    u64       x
    local    u64       dest
    local    u64       q
    local    u64       offset
    local    i64       lower
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       q                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    loadbit  i64                        
    jumpt    u64       #2909            
    setcall      /0/1                   
    callp        /0    &qq_lib.pcnotmut 
#2909: 
    load     i64       index            
    load     u64       q                
    load     i64       6                
    iloadx   i16 /1                     
    widen    i64/i16                    
    sub      u64                        
    store    u64       offset           
    load     u64       offset           
    load     u64       q                
    load     i64       16               
    iloadx   u64 /1                     
    jumplt   u64       #2911            
    load     u64       offset           
    load     i64       0                
    jumpge   i64       #2913            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "putlist[int] lwb"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
    jump               #2912            
#2913: 
    load     u64       offset           
    load     u64       q                
    load     i64       16               
    iloadx   i64 /1                     
    jumpne   i64       #2914            
    load     u64       q                
    load     i64       5                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpeq   i64       #2916            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Can't extend slice/ext"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#2916: 
    setcall      /2/1                   
    load     u64       x                
    setarg   u64 /2                     
    load     u64       q                
    setarg   u64 /1                     
    callp        /2    &qq_lists.obj_append_list
    jump               #2907            
    jump               #2912            
#2914: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "putlist[int] bounds"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#2912: 
#2911: 
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       offset           
    addpx    u64 /16                    
    store    u64       dest             
    load     u64       dest             
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #2918            
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#2918: 
    load     u64       x                
    iload    mem:16                     
    load     u64       dest             
    istore   mem:16                     
#2907: 
    retproc                             
endproc

proc qq_lists.var_putslice_list:
    param    u64       a
    param    i64       i
    param    i64       j
    param    u64       x
    local    u64       r
    local    u64       s
    local    u64       p
    local    u64       q
    local    i64       length
    local    i64       sublength
    local    i64       av_1
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       p                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    loadbit  i64                        
    jumpt    u64       #2921            
    setcall      /0/1                   
    callp        /0    &qq_lib.pcnotmut 
#2921: 
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       length           
    load     i64       i                
    load     i64       1                
    jumplt   i64       #2924            
    load     i64       j                
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    jumpgt   i64       #2924            
    load     i64       i                
    load     i64       j                
    jumple   i64       #2923            
#2924: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "list/slice bounds"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#2923: 
    load     i64       j                
    load     i64       i                
    sub      i64                        
    load     i64       1                
    add      i64                        
    store    i64       sublength        
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       q                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       sublength        
    jumpge   i64       #2926            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "substr too short"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#2926: 
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       i                
    addpx    u64 /16                    
    load     i64       1                
    subpx    u64 /16                    
    store    u64       r                
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       s                
    load     i64       sublength        
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #2929            
#2927: 
    load     u64       s                
    iload    mem:16                     
    load     u64       r                
    istore   mem:16                     
    load     u64       r                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #2931            
    load     u64       r                
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#2931: 
    load     u64 /1    &r               
    incrto   u64 /16                    
    load     u64 /1    &s               
    incrto   u64 /16                    
    to       i64       #2927            
    opnd     i64       av_1             
#2929: 
    retproc                             
endproc

proc qq_lists.obj_append_list:
    param    u64       a
    param    u64       x
    local    i64       n
    load     u64       a                
    load     i64       5                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpeq   i64       #2934            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Can't extend slice"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#2934: 
    load     u64       a                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    loadbit  i64                        
    jumpt    u64       #2936            
    setcall      /0/1                   
    callp        /0    &qq_lib.pcnotmut 
#2936: 
    load     u64       a                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       1                
    add      i64                        
    store    i64       n                
    load     i64       n                
    load     u64       a                
    load     i64       24               
    iloadx   i64 /1                     
    jumple   i64       #2938            
    setcall      /2/1                   
    load     i64       n                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_lists.obj_resize_list
    jump               #2937            
#2938: 
    load     i64       n                
    load     u64       a                
    load     i64       16               
    istorex  i64 /1                     
#2937: 
    load     u64       x                
    jumpf    u64       #2940            
    load     u64       x                
    iload    mem:16                     
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       n                
    addpx    u64 /16                    
    load     i64       1                
    subpx    u64 /16                    
    istore   mem:16                     
#2940: 
    retproc                             
endproc

proc qq_lists.obj_resize_list:
    param    u64       p
    param    i64       n
    local    u64       q
    local    u32       allocated
    load     i64       n                
    load     u64       p                
    load     i64       24               
    iloadx   i64 /1                     
    jumpgt   i64       #2943            
    load     i64       n                
    load     u64       p                
    load     i64       16               
    istorex  i64 /1                     
    jump               #2942            
#2943: 
    setcall  u64 /1/1                   
    load     i64       n                
    load     i64       16               
    mul      i64                        
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    store    u64       q                
    load     i64       mlib.allocbytes  
    load     i64       16               
    idiv     i64                        
    store    u32       allocated        
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    jumpf    i64       #2945            
    setcall      /3/1                   
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       16               
    mul      u64                        
    setarg   u64 /3                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       q                
    setarg   u64 /1                     
    callp        /3    &memcpy          
    setcall      /2/1                   
    load     u64       p                
    load     i64       24               
    iloadx   i64 /1                     
    load     i64       16               
    mul      i64                        
    setarg   i64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_free   
#2945: 
    load     u64       q                
    load     u64       p                
    load     i64       8                
    istorex  u64 /1                     
    load     i64       n                
    load     u64       p                
    load     i64       16               
    istorex  i64 /1                     
    load     u32       allocated        
    widen    i64/u32                    
    load     u64       p                
    load     i64       24               
    istorex  i64 /1                     
#2942: 
    retproc                             
endproc

proc qq_lists.var_appendto_list:
    param    u64       a
    param    u64       x
    setcall      /2/1                   
    load     u64       x                
    setarg   u64 /2                     
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &qq_lists.obj_append_list
    retproc                             
endproc

proc qq_lists.var_dupl_list:
    param    u64       a
    local    u64       p
    local    u64       q
    local    u64       plist
    local    u64       qlist
    local    i64       av_1
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_vars.obj_new 
    store    u64       q                
    load     u64       p                
    iload    mem:32                     
    load     u64       q                
    istore   mem:32                     
    load     i64       1                
    load     u64       q                
    load     i64       0                
    istorex  u32 /1                     
    load     u64       1                
    load     u64       q                
    load     i64       4                
    addpx    u64 /1                     
    load     i64       1                
    storebit u8                         
    load     i64       0                
    load     u64       q                
    load     i64       5                
    istorex  u8  /1                     
    load     u64       q                
    load     u64       a                
    load     i64       8                
    istorex  u64 /1                     
    load     u64       q                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       0                
    jumpne   i64       #2949            
    jump               #2947            
#2949: 
    setcall  u64 /1/1                   
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       16               
    mul      i64                        
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    double                              
    load     u64       q                
    load     i64       8                
    istorex  u64 /1                     
    store    u64       qlist            
    load     i64       mlib.allocbytes  
    load     i64       16               
    idiv     i64                        
    load     u64       q                
    load     i64       24               
    istorex  i64 /1                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       plist            
    load     u64       q                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #2952            
#2950: 
    load     u64       plist            
    iload    mem:16                     
    load     u64       qlist            
    istore   mem:16                     
    load     u64       qlist            
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       12               
    jumpne   i64       #2954            
    load     u64       qlist            
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #2956            
    load     u64       qlist            
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#2956: 
    jump               #2953            
#2954: 
    load     u64       qlist            
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #2958            
    setcall      /1/1                   
    load     u64       qlist            
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_duplu
#2958: 
#2953: 
    load     u64 /1    &qlist           
    incrto   u64 /16                    
    load     u64 /1    &plist           
    incrto   u64 /16                    
    to       i64       #2950            
    opnd     i64       av_1             
#2952: 
#2947: 
    retproc                             
endproc

proc qq_lists.var_mul_list:
    param    u64       p
    param    i64       m
    local    i64       oldlength
    local    i64       newlength
    local    i64       n
    local    u64       q
    local    u64       r
    local    u64       a
    local    u64       b
    local    i64       av_1
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       q                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       oldlength        
    load     i64       oldlength        
    load     i64       m                
    mul      i64                        
    store    i64       newlength        
    load     i64       oldlength        
    load     i64       0                
    jumpne   i64       #2961            
    jump               #2959            
#2961: 
    load     i64       newlength        
    load     i64       0                
    jumpge   i64       #2963            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "list*int <0"    
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
    jump               #2962            
#2963: 
    load     i64       newlength        
    load     i64       0                
    jumpne   i64       #2964            
    setcall  u64 /3/1                   
    load     u64       0                
    setarg   u64 /3                     
    load     u64       q                
    load     i64       6                
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /2                     
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /3    &qq_lists.obj_newlist
    load     u64       p                
    load     i64       8                
    istorex  u64 /1                     
    jump               #2959            
#2964: 
#2962: 
    setcall  u64 /3/1                   
    load     u64       0                
    setarg   u64 /3                     
    load     u64       q                
    load     i64       6                
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /2                     
    load     i64       newlength        
    setarg   i64 /1                     
    callf    u64 /3    &qq_lists.obj_newlist
    store    u64       r                
    load     u64       r                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       a                
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       b                
    load     i64       0                
    store    i64       n                
    load     i64       newlength        
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #2967            
#2965: 
    load     u64       b                
    iload    mem:16                     
    load     u64       a                
    istore   mem:16                     
    load     u64       a                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #2969            
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#2969: 
    load     u64 /1    &a               
    incrto   u64 /16                    
    load     i64       oldlength        
    load     i64       1                
    jumple   i64       #2971            
    load     u64 /1    &b               
    incrto   u64 /16                    
    load     u64 /1    &n               
    incrload i64 /1                     
    load     i64       oldlength        
    jumpne   i64       #2973            
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       b                
    load     i64       0                
    store    i64       n                
#2973: 
#2971: 
    to       i64       #2965            
    opnd     i64       av_1             
#2967: 
    load     u64       r                
    load     u64       p                
    load     i64       8                
    istorex  u64 /1                     
#2959: 
    retproc                             
endproc

proc qq_lists.var_equal_list:
    param    u64       x
    param    u64       y
    local    i64       xlen
    local    i64       ylen
    local    i64       res
    local    u64       px
    local    u64       py
    local    u64       a
    local    u64       b
    local    i64       av_1
    rettype  i64
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       px               
    load     u64       y                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       py               
    load     u64       px               
    load     u64       py               
    jumpne   u64       #2976            
    load     i64       1                
    jumpret  i64       #2974            
#2976: 
    load     u64       px               
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       xlen             
    load     u64       py               
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       ylen             
    load     i64       xlen             
    load     i64       ylen             
    jumpeq   i64       #2978            
    load     i64       0                
    jumpret  i64       #2974            
#2978: 
    load     i64       xlen             
    load     i64       0                
    jumpne   i64       #2980            
    load     i64       1                
    jumpret  i64       #2974            
#2980: 
    load     u64       px               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       a                
    load     u64       py               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       b                
    load     i64       xlen             
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #2983            
#2981: 
    setcall  i64 /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /2    &qq_vars.var_equal
    load     i64       0                
    jumpne   i64       #2985            
    load     i64       0                
    jumpret  i64       #2974            
#2985: 
    load     u64 /1    &a               
    incrto   u64 /16                    
    load     u64 /1    &b               
    incrto   u64 /16                    
    to       i64       #2981            
    opnd     i64       av_1             
#2983: 
    load     i64       1                
    jumpret  i64       #2974            
#2974: 
    retfn    i64                        
endproc

proc qq_lists.var_concatto_list:
    param    u64       a
    param    u64       b
    local    u64       newptr
    local    u64       c
    local    u64       d
    local    i64       n
    local    i64       alen
    local    i64       blen
    local    i64       newlen
    local    i64       oldbytes
    local    i64       newbytes
    local    u64       v
    local    u64       pa
    local    u64       pb
    local    i64       av_1
    local    i64       av_2
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pa               
    load     u64       pa               
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    loadbit  i64                        
    jumpt    u64       #2988            
    setcall      /0/1                   
    callp        /0    &qq_lib.pcnotmut 
#2988: 
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pb               
    load     u64       pa               
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       alen             
    load     u64       pb               
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       blen             
    load     i64       alen             
    load     i64       0                
    jumpne   i64       #2990            
    load     i64       blen             
    jumpf    i64       #2992            
    setcall      /2/1                   
    load     i64       blen             
    setarg   i64 /2                     
    load     u64       pa               
    setarg   u64 /1                     
    callp        /2    &qq_lists.obj_resize_list
    load     u64       pa               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       d                
    setcall      /3/1                   
    load     i64       blen             
    load     i64       16               
    mul      u64                        
    setarg   u64 /3                     
    load     u64       pb               
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       d                
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     i64       blen             
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #2995            
#2993: 
    load     u64       d                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #2997            
    load     u64       d                
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#2997: 
    load     u64 /1    &d               
    incrto   u64 /16                    
    to       i64       #2993            
    opnd     i64       av_1             
#2995: 
#2992: 
    jump               #2989            
#2990: 
    load     i64       blen             
    jumpf    i64       #2998            
    load     i64       alen             
    load     i64       blen             
    add      i64                        
    store    i64       newlen           
    setcall      /2/1                   
    load     i64       newlen           
    setarg   i64 /2                     
    load     u64       pa               
    setarg   u64 /1                     
    callp        /2    &qq_lists.obj_resize_list
    load     u64       pa               
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       alen             
    addpx    u64 /16                    
    store    u64       d                
    setcall      /3/1                   
    load     i64       blen             
    load     i64       16               
    mul      u64                        
    setarg   u64 /3                     
    load     u64       pb               
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       d                
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     i64       blen             
    store    i64       av_2             
    load     i64       av_2             
    load     i64       0                
    jumple   i64       #3001            
#2999: 
    load     u64       d                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #3003            
    load     u64       d                
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#3003: 
    load     u64 /1    &d               
    incrto   u64 /16                    
    to       i64       #2999            
    opnd     i64       av_2             
#3001: 
#2998: 
#2989: 
    retproc                             
endproc

proc qq_lists.var_inx_list:
    param    u64       a
    param    u64       b
    local    i64       n
    local    i64       lowerm1
    local    u64       x
    local    i64       i
    rettype  i64
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       n                
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       6                
    iloadx   i16 /1                     
    widen    i64/i16                    
    load     i64       1                
    sub      i64                        
    store    i64       lowerm1          
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       x                
    load     i64       1                
    store    i64       i                
    load     i64       n                
    load     i64       1                
    jumplt   i64       #3007            
#3005: 
    setcall  i64 /2/1                   
    load     u64       x                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /2    &qq_vars.var_equal
    load     i64       1                
    jumpne   i64       #3009            
    load     i64       i                
    load     i64       lowerm1          
    add      i64                        
    jumpret  i64       #3004            
#3009: 
    load     u64 /1    &x               
    incrto   u64 /16                    
    forup    i64 /1    #3005            
    opnd     i64       i                
    opnd     i64       n                
#3007: 
    load     i64       -9223372036854775808
    jumpret  i64       #3004            
#3004: 
    retfn    i64                        
endproc

proc qq_modules.loadsp:
    param    u64       filename
    param    u64       source
    local    u64       sp
    local    mem:800       modnames
    local    mem:800       subnames
    local    i64       nmods
    local    i64       nsubs
    local    i64       firstmod
    local    i64       lastmod
    local    i64       issyslib
    local    u64       pm
    local    u64       d
    local    mem:300       path
    local    i64       i
    rettype  u64
    load     i64       0                
    store    i64       nmods            
    load     i64       0                
    store    i64       nsubs            
    load     i64       0                
    store    i64       issyslib         
    load     u64       source           
    jumpf    u64       #3012            
    setcall  u64 /2/1                   
    load     u64       source           
    setarg   u64 /2                     
    load     u64       filename         
    setarg   u64 /1                     
    callf    u64 /2    &qq_modules.loadstring
    store    u64       pm               
    load     u64       0                
    load     u64       &path            
    load     i64       1                
    istorex  u8  /1/-1                  
    jump               #3011            
#3012: 
    setcall  u64 /2                     
    setcall  u64 /1                     
    load     u64       filename         
    setarg   u64 /1                     
    callf    u64 /1    &mlib.extractbasefile
    setarg   u64 /2                     
    load     u64       &path            
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    load     u64       qq_cli.syslibname
    jumpf    u64       #3014            
    setcall  i64 /2                     
    setcall  u64 /1                     
    load     u64       qq_cli.syslibname
    setarg   u64 /1                     
    callf    u64 /1    &mlib.extractbasefile
    setarg   u64 /2                     
    load     u64       &path            
    setarg   u64 /1                     
    callf    i64 /2    &mlib.eqstring   
    jumpf    i64       #3014            
    load     i64       1                
    store    i64       issyslib         
#3014: 
    setcall  u64 /2/1                   
    load     i64       issyslib         
    setarg   i64 /2                     
    load     u64       filename         
    setarg   u64 /1                     
    callf    u64 /2    &qq_modules.loadsourcefile
    store    u64       pm               
    load     u64       pm               
    load     u64       0                
    jumpne   u64       #3016            
    setcall      /2/1                   
    load     u64       filename         
    setarg   u64 /2                     
    load     u64       "Can't load lead module: #"
    setarg   u64 /1                     
    callp        /2    &qq_lib.loaderror
#3016: 
    setcall  u64 /2/1                   
    load     u64       pm               
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       &path            
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
#3011: 
    load     i64       1                
    store    i64       i                
    load     i64       qq_decls.nsubprogs
    load     i64       1                
    jumplt   i64       #3019            
#3017: 
    setcall  i64 /2/1                   
    load     u64       &qq_decls.subprogs
    load     i64       i                
    iloadx   u64 /8/-8                  
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       pm               
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /2    &mlib.eqstring   
    jumpf    i64       #3021            
    setcall      /2/1                   
    load     u64       sp               
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       "Subprog already loaded: #"
    setarg   u64 /1                     
    callp        /2    &qq_lib.loaderror
#3021: 
    forup    i64 /1    #3017            
    opnd     i64       i                
    opnd     i64       qq_decls.nsubprogs
#3019: 
    setcall      /1/1                   
    load     u64       pm               
    setarg   u64 /1                     
    callp        /1    &qq_lex.startlex 
#3022: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall      /0/1                   
    callp        /0    &qq_lib.skipsemi 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       105              
    jumpeq   i64 /1    #3025            
    load     i64       106              
    jumpeq   i64 /1    #3026            
    load     i64       4                
    jumpeq   i64       #3027            
    jump               #3028            
#3025: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall      /1/1                   
    load     i64       69               
    setarg   i64 /1                     
    callp        /1    &qq_lib.checksymbol
    setcall  i64 /2/1                   
    load     u64       pm               
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /2    &mlib.eqstring   
    jumpt    i64       #3030            
    load     i64       nmods            
    load     i64       100              
    jumplt   i64       #3032            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Too many modules in header"
    setarg   u64 /1                     
    callp        /2    &qq_lib.loaderror
#3032: 
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   u64 /1                     
    load     u64       &modnames        
    load     u64 /1    &nmods           
    incrload i64 /1                     
    istorex  u64 /8/-8                  
#3030: 
    jump               #3024            
#3026: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall      /1/1                   
    load     i64       69               
    setarg   i64 /1                     
    callp        /1    &qq_lib.checksymbol
    load     i64       nsubs            
    load     i64       100              
    jumplt   i64       #3034            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Too many imports in header"
    setarg   u64 /1                     
    callp        /2    &qq_lib.loaderror
#3034: 
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   u64 /1                     
    load     u64       &subnames        
    load     u64 /1    &nsubs           
    incrload i64 /1                     
    istorex  u64 /8/-8                  
    jump               #3024            
#3027: 
    jump               #3024            
#3028: 
    jump               #3023            
#3024: 
    jump               #3022            
#3023: 
    load     i64       1                
    store    i64       i                
    load     i64       nsubs            
    load     i64       1                
    jumplt   i64       #3037            
#3035: 
    setcall  i64 /2/1                   
    load     u64       pm               
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       &subnames        
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /1                     
    callf    i64 /2    &mlib.eqstring   
    jumpf    i64       #3039            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Importing self" 
    setarg   u64 /1                     
    callp        /2    &qq_lib.loaderror
#3039: 
    setcall      /2                     
    load     u64       0                
    setarg   u64 /2                     
    setcall  u64 /2                     
    load     u64       &subnames        
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /2                     
    load     u64       ""               
    setarg   u64 /1                     
    callf    u64 /2    &qq_modules.getmodulefilename
    setarg   u64 /1                     
    callp        /2    &qq_cli.compile_sp
    forup    i64 /1    #3035            
    opnd     i64       i                
    opnd     i64       nsubs            
#3037: 
    load     i64       qq_decls.nsubprogs
    load     i64       30               
    jumplt   i64       #3041            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Too many subprogs"
    setarg   u64 /1                     
    callp        /2    &qq_lib.loaderror
#3041: 
    setcall  u64 /1/1                   
    load     i64       32               
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_allocz 
    store    u64       sp               
    load     u64       sp               
    load     u64       &qq_decls.subprogs
    load     u64 /1    &qq_decls.nsubprogs
    incrload i64 /1                     
    istorex  u64 /8/-8                  
    load     i64       qq_decls.nsubprogs
    load     u64       sp               
    load     i64       31               
    istorex  u8  /1                     
    load     i64       qq_decls.nmodules
    load     i64       1                
    add      i64                        
    store    i64       firstmod         
    load     i64       firstmod         
    load     i64       nmods            
    add      i64                        
    store    i64       lastmod          
    load     i64       lastmod          
    load     i64       200              
    jumple   i64       #3043            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Too many modules"
    setarg   u64 /1                     
    callp        /2    &qq_lib.loaderror
#3043: 
    load     i64       lastmod          
    store    i64       qq_decls.nmodules
    load     i64       qq_decls.nsubprogs
    load     u64       pm               
    load     i64       44               
    istorex  u8  /1                     
    load     i64       1                
    load     u64       pm               
    load     i64       45               
    istorex  u8  /1                     
    load     i64       firstmod         
    load     u64       pm               
    load     i64       46               
    istorex  i16 /1                     
    setcall  u64 /3                     
    load     i64       3                
    setarg   i64 /3                     
    setcall  u64 /1                     
    load     u64       pm               
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /1    &qq_lex.addnamestr
    setarg   u64 /2                     
    load     u64       qq_decls.stprogram
    setarg   u64 /1                     
    callf    u64 /3    &qq_names.createdupldef
    double                              
    store    u64       d                
    load     u64       pm               
    load     i64       88               
    istorex  u64 /1                     
    load     i64       firstmod         
    load     u64       d                
    load     i64       114              
    istorex  u8  /1                     
    load     u64       pm               
    load     i64       0                
    iloadx   u64 /1                     
    load     u64       sp               
    load     i64       0                
    istorex  u64 /1                     
    load     u64       pm               
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       sp               
    load     i64       8                
    istorex  u64 /1                     
    load     u64       pm               
    load     i64       16               
    iloadx   u64 /1                     
    load     u64       sp               
    load     i64       16               
    istorex  u64 /1                     
    load     i64       firstmod         
    load     u64       sp               
    load     i64       24               
    istorex  i16 /1                     
    load     i64       lastmod          
    load     u64       sp               
    load     i64       26               
    istorex  i16 /1                     
    load     i64       issyslib         
    load     u64       sp               
    load     i64       30               
    istorex  u8  /1                     
    load     u64       pm               
    load     u64       &qq_decls.modules
    load     i64       firstmod         
    istorex  u64 /8                     
    load     i64       1                
    store    i64       i                
    load     i64       nmods            
    load     i64       1                
    jumplt   i64       #3046            
#3044: 
    setcall  u64 /2                     
    load     i64       issyslib         
    setarg   i64 /2                     
    setcall  u64 /2                     
    load     u64       &modnames        
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /2                     
    load     u64       &path            
    setarg   u64 /1                     
    callf    u64 /2    &qq_modules.getmodulefilename
    setarg   u64 /1                     
    callf    u64 /2    &qq_modules.loadsourcefile
    store    u64       pm               
    load     u64       pm               
    jumpt    u64       #3048            
    setcall      /2/1                   
    load     u64       &modnames        
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /2                     
    load     u64       "Can't load: ##" 
    setarg   u64 /1                     
    callp        /2    &qq_lib.loaderror
#3048: 
    load     u64       pm               
    load     u64       &qq_decls.modules
    load     i64       firstmod         
    load     i64       i                
    add      i64                        
    istorex  u64 /8                     
    setcall  u64 /3                     
    load     i64       3                
    setarg   i64 /3                     
    setcall  u64 /1                     
    load     u64       pm               
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /1    &qq_lex.addnamestr
    setarg   u64 /2                     
    load     u64       qq_decls.stprogram
    setarg   u64 /1                     
    callf    u64 /3    &qq_names.createdupldef
    double                              
    store    u64       d                
    load     u64       pm               
    load     i64       88               
    istorex  u64 /1                     
    load     i64       qq_decls.nsubprogs
    load     u64       pm               
    load     i64       44               
    istorex  u8  /1                     
    load     i64       firstmod         
    load     i64       i                
    add      i64                        
    double                              
    load     u64       pm               
    load     i64       46               
    istorex  i16 /1                     
    load     u64       d                
    load     i64       114              
    istorex  u8  /1                     
    forup    i64 /1    #3044            
    opnd     i64       i                
    opnd     i64       nmods            
#3046: 
    load     u64       sp               
    jumpret  u64       #3010            
#3010: 
    retfn    u64                        
endproc

proc qq_modules.getmodulefilename:
    param    u64       path
    param    u64       name
    rettype  u64
    setcall  u64 /2/1                   
    load     u64       path             
    setarg   u64 /2                     
    load     u64       &qq_modules.getmodulefilename.str
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    setcall  u64 /2/1                   
    load     u64       name             
    setarg   u64 /2                     
    load     u64       &qq_modules.getmodulefilename.str
    setarg   u64 /1                     
    callf    u64 /2    &strcat          
    unload   u64                        
    setcall  u64 /2/1                   
    load     u64       ".q"             
    setarg   u64 /2                     
    load     u64       &qq_modules.getmodulefilename.str
    setarg   u64 /1                     
    callf    u64 /2    &strcat          
    unload   u64                        
    load     u64       &qq_modules.getmodulefilename.str
    jumpret  u64       #3049            
#3049: 
    retfn    u64                        
endproc

proc qq_modules.loadsourcefile:
    param    u64       filespec
    param    i64       issyslib
    local    u64       pm
    local    u64       s
    local    u64       basefilename
    local    mem:300       str
    rettype  u64
    setcall  u64 /1/1                   
    load     i64       120              
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_allocz 
    store    u64       pm               
    setcall  u64 /1/1                   
    load     u64       filespec         
    setarg   u64 /1                     
    callf    u64 /1    &mlib.extractbasefile
    store    u64       basefilename     
    setcall  u64 /1/1                   
    load     u64       filespec         
    setarg   u64 /1                     
    callf    u64 /1    &mlib.pcm_copyheapstring
    load     u64       pm               
    load     i64       16               
    istorex  u64 /1                     
    setcall  u64 /1                     
    setcall  u64 /1                     
    load     u64       filespec         
    setarg   u64 /1                     
    callf    u64 /1    &mlib.extractpath
    setarg   u64 /1                     
    callf    u64 /1    &mlib.pcm_copyheapstring
    load     u64       pm               
    load     i64       8                
    istorex  u64 /1                     
    setcall  u64 /1/1                   
    load     u64       basefilename     
    setarg   u64 /1                     
    callf    u64 /1    &mlib.pcm_copyheapstring
    load     u64       pm               
    load     i64       0                
    istorex  u64 /1                     
    load     i64       issyslib         
    load     u64       pm               
    load     i64       41               
    istorex  u8  /1                     
    load     i64       qq_decls.nqafiles
    jumpf    i64       #3052            
    setcall  i64 /1/1                   
    load     u64       pm               
    setarg   u64 /1                     
    callf    i64 /1    &qq_modules.loadqafile
    jumpf    i64       #3052            
    load     u64       pm               
    jumpret  u64       #3050            
#3052: 
    load     i64       issyslib         
    jumpf    i64       #3054            
    load     u8        qq_decls.usebundled
    jumpf    u8        #3054            
    load     i64       issyslib         
    load     u64       pm               
    load     i64       41               
    istorex  u8  /1                     
    setcall  i64 /1/1                   
    load     u64       pm               
    setarg   u64 /1                     
    callf    i64 /1    &qq_syslibs.loadsysmodule
    jumpt    i64       #3056            
    setcall      /2/1                   
    load     u64       filespec         
    setarg   u64 /2                     
    load     u64       "LS:Can't load syslib:"
    setarg   u64 /1                     
    callp        /2    &qq_lib.loaderror
#3056: 
    load     u64       pm               
    jumpret  u64       #3050            
#3054: 
    setcall  u64 /1/1                   
    load     u64       filespec         
    setarg   u64 /1                     
    callf    u64 /1    &mlib.readfile   
    store    u64       s                
    load     u64       s                
    jumpt    u64       #3058            
    setcall  u64 /2/1                   
    load     u64       "c:/m/libs/"     
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    setcall  u64 /2/1                   
    load     u64       basefilename     
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /2    &strcat          
    unload   u64                        
    setcall  u64 /2/1                   
    load     u64       ".q"             
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /2    &strcat          
    unload   u64                        
    setcall  u64 /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /1    &mlib.readfile   
    store    u64       s                
    load     u64       s                
    jumpt    u64       #3060            
    load     u64       0                
    jumpret  u64       #3050            
#3060: 
#3058: 
    load     u64       s                
    load     u64       pm               
    load     i64       24               
    istorex  u64 /1                     
    load     i64       mlib.rfsize      
    load     u64       pm               
    load     i64       32               
    istorex  i64 /1                     
    load     u64       0                
    load     u64       s                
    load     i64       mlib.rfsize      
    istorex  u8  /1                     
    load     u64       pm               
    jumpret  u64       #3050            
#3050: 
    retfn    u64                        
endproc

proc qq_modules.loadstring:
    param    u64       name
    param    u64       source
    local    u64       pm
    local    mem:16       str
    rettype  u64
    load     u64       name             
    load     u64       0                
    jumpne   u64       #3063            
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "S$"             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64 /1    &qq_modules.loadstring.nextstrname
    incrload i64 /1                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall  u64 /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /1    &mlib.pcm_copyheapstring
    store    u64       name             
#3063: 
    setcall  u64 /1/1                   
    load     i64       120              
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_allocz 
    store    u64       pm               
    load     u64       "<string>"       
    load     u64       pm               
    load     i64       16               
    istorex  u64 /1                     
    load     u64       ""               
    load     u64       pm               
    load     i64       8                
    istorex  u64 /1                     
    load     u64       name             
    load     u64       pm               
    load     i64       0                
    istorex  u64 /1                     
    load     u64       source           
    load     u64       pm               
    load     i64       24               
    istorex  u64 /1                     
    setcall  i64 /1/1                   
    load     u64       source           
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    load     u64       pm               
    load     i64       32               
    istorex  i64 /1                     
    load     u64       pm               
    jumpret  u64       #3061            
#3061: 
    retfn    u64                        
endproc

proc qq_modules.readfileline:
    param    u64       s
    local    mem:2048       str
    local    u64       t
    local    i64       n
    local    i64       c
    rettype  u64
    load     u64       &str             
    store    u64       t                
    load     i64       0                
    store    i64       n                
#3065: 
    load     u64 /1    &s               
    loadincr u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    double                              
    store    i64       c                
    load     i64       0                
    jumpeq   i64 /1    #3067            
    load     i64       10               
    jumpeq   i64       #3068            
    jump               #3069            
#3067: 
    load     u64 /1    &s               
    decrto   u64 /1                     
    jump               #3066            
    jump               #3065            
#3068: 
    jump               #3066            
    jump               #3065            
#3069: 
    load     i64       n                
    load     i64       2048             
    jumpge   i64       #3071            
    load     i64       c                
    load     u64 /1    &t               
    loadincr u64 /1                     
    istore   u8                         
#3071: 
    jump               #3065            
#3066: 
    load     u64       0                
    load     u64       t                
    istore   u8                         
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &msysc.m$read_strline
    load     u64       s                
    jumpret  u64       #3064            
#3064: 
    retfn    u64                        
endproc

proc qq_modules.findnextlineheader:
    param    u64       s
    local    i64       c
    rettype  u64
#3073: 
    load     u64 /1    &s               
    loadincr u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    double                              
    store    i64       c                
    load     i64       0                
    jumpeq   i64 /1    #3075            
    load     i64       10               
    jumpeq   i64       #3076            
    jump               #3077            
#3075: 
    load     u64       0                
    jumpret  u64       #3072            
    jump               #3073            
#3076: 
    load     u64       s                
    iload    u8                         
    widen    u64/u8                     
    load     u64       61               
    jumpne   u64       #3079            
    load     u64       s                
    load     i64       1                
    iloadx   u8  /1                     
    widen    u64/u8                     
    load     u64       61               
    jumpne   u64       #3079            
    load     u64       s                
    load     i64       2                
    iloadx   u8  /1                     
    widen    u64/u8                     
    load     u64       61               
    jumpne   u64       #3079            
    load     u64       s                
    load     i64       3                
    addpx    u64 /1                     
    jumpret  u64       #3072            
#3079: 
    jump               #3073            
#3077: 
    jump               #3073            
    load     u64       0                
    jumpret  u64       #3072            
#3072: 
    retfn    u64                        
endproc

proc qq_modules.loadqafile:
    param    u64       pm
    local    u64       file
    local    mem:300       filename
    local    i64       i
    rettype  i64
    setcall  u64 /2                     
    setcall  u64 /1                     
    load     u64       pm               
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /1    &mlib.extractfile
    setarg   u64 /2                     
    load     u64       &filename        
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    load     i64       1                
    store    i64       i                
    load     i64       qq_decls.nqafiles
    load     i64       1                
    jumplt   i64       #3083            
#3081: 
    setcall  i64 /2/1                   
    load     u64       &qq_decls.qafilenames
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /2                     
    load     u64       &filename        
    setarg   u64 /1                     
    callf    i64 /2    &mlib.eqstring   
    jumpf    i64       #3085            
    load     u64       &qq_decls.qatext 
    load     i64       i                
    iloadx   u64 /8/-8                  
    load     u64       pm               
    load     i64       24               
    istorex  u64 /1                     
    load     u64       &qq_decls.qasize 
    load     i64       i                
    iloadx   i64 /8/-8                  
    load     u64       pm               
    load     i64       32               
    istorex  i64 /1                     
    load     i64       1                
    jumpret  i64       #3080            
#3085: 
    forup    i64 /1    #3081            
    opnd     i64       i                
    opnd     i64       qq_decls.nqafiles
#3083: 
    load     i64       0                
    jumpret  i64       #3080            
#3080: 
    retfn    i64                        
endproc

proc qq_modules.readqabundle:
    local    mem:100       name
    local    u64       s
    local    u64       t
    local    i64       sys
    local    i64       support
    local    i64       i
    setcall  u64 /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       qq_cli.inputfile 
    setarg   u64 /1                     
    callf    u64 /2    &mlib.extractext 
    store    u64       s                
    setcall  u64 /1/1                   
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /1    &mlib.convlcstring
    unload   u64                        
    setcall  i64 /2/1                   
    load     u64       "qa"             
    setarg   u64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    i64 /2    &mlib.eqstring   
    jumpt    i64       #3088            
    jump               #3086            
#3088: 
    setcall  u64 /1/1                   
    load     u64       qq_cli.inputfile 
    setarg   u64 /1                     
    callf    u64 /1    &mlib.readfile   
    store    u64       s                
    load     u64       s                
    load     u64       0                
    jumpne   u64       #3090            
    setcall      /2/1                   
    load     u64       qq_cli.inputfile 
    setarg   u64 /2                     
    load     u64       "Can't find QA file ##"
    setarg   u64 /1                     
    callp        /2    &qq_lib.loaderror
#3090: 
    setcall  u64 /1                     
    setcall  u64 /2                     
    load     u64       "q"              
    setarg   u64 /2                     
    load     u64       qq_cli.inputfile 
    setarg   u64 /1                     
    callf    u64 /2    &mlib.changeext  
    setarg   u64 /1                     
    callf    u64 /1    &mlib.pcm_copyheapstring
    store    u64       qq_cli.inputfile 
    setcall  u64 /1/1                   
    load     u64       s                
    load     i64       3                
    addpx    u64 /1                     
    setarg   u64 /1                     
    callf    u64 /1    &qq_modules.readfileline
    store    u64       s                
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     i64       110              
    setarg   i64 /2                     
    load     u64       &name            
    setarg   u64 /1                     
    callp        /3    &msysc.readstr   
    setcall  i64 /2/1                   
    load     u64       "qa"             
    setarg   u64 /2                     
    load     u64       &name            
    setarg   u64 /1                     
    callf    i64 /2    &mlib.eqstring   
    jumpt    i64       #3092            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "QA: bad header" 
    setarg   u64 /1                     
    callp        /2    &qq_lib.loaderror
#3092: 
    load     u64 /1    &s               
    decrto   u64 /1                     
    setcall  u64 /1/1                   
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /1    &qq_modules.findnextlineheader
    store    u64       s                
#3093: 
    load     u64       s                
    load     u64       0                
    jumpne   u64       #3096            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Unexpected EOF in QA file"
    setarg   u64 /1                     
    callp        /2    &qq_lib.loaderror
    jump               #3094            
#3096: 
    setcall  u64 /1/1                   
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /1    &qq_modules.readfileline
    store    u64       s                
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     i64       110              
    setarg   i64 /2                     
    load     u64       &name            
    setarg   u64 /1                     
    callp        /3    &msysc.readstr   
    setcall      /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    i64 /1    &msysc.m$read_i64
    store    i64       sys              
    setcall      /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    i64 /1    &msysc.m$read_i64
    store    i64       support          
    setcall  i64 /2/1                   
    load     u64       "end"            
    setarg   u64 /2                     
    load     u64       &name            
    setarg   u64 /1                     
    callf    i64 /2    &mlib.eqstring   
    jumpf    i64       #3098            
    jump               #3094            
#3098: 
    load     i64       qq_decls.nqafiles
    load     i64       100              
    jumplt   i64       #3100            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Too many QA files"
    setarg   u64 /1                     
    callp        /2    &qq_lib.loaderror
#3100: 
    setcall  u64 /1/1                   
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /1    &qq_modules.findnextlineheader
    store    u64       t                
    load     u64       t                
    load     u64       0                
    jumpne   u64       #3102            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "QA error"       
    setarg   u64 /1                     
    callp        /2    &qq_lib.loaderror
#3102: 
    load     u64 /1    &qq_decls.nqafiles
    incrto   i64 /1                     
    setcall  u64 /1/1                   
    load     u64       &name            
    setarg   u64 /1                     
    callf    u64 /1    &mlib.pcm_copyheapstring
    load     u64       &qq_decls.qafilenames
    load     i64       qq_decls.nqafiles
    istorex  u64 /8/-8                  
    load     u64       t                
    load     u64       s                
    subp     i64 /1                     
    load     i64       3                
    sub      i64                        
    load     u64       &qq_decls.qasize 
    load     i64       qq_decls.nqafiles
    istorex  i64 /8/-8                  
    load     u64       s                
    load     u64       &qq_decls.qatext 
    load     i64       qq_decls.nqafiles
    istorex  u64 /8/-8                  
    load     u64       t                
    store    u64       s                
    jump               #3093            
#3094: 
    load     i64       1                
    store    i64       i                
    load     i64       qq_decls.nqafiles
    load     i64       1                
    jumplt   i64       #3105            
#3103: 
    load     u64       0                
    load     u64       &qq_decls.qatext 
    load     i64       i                
    iloadx   u64 /8/-8                  
    load     u64       &qq_decls.qasize 
    load     i64       i                
    iloadx   i64 /8/-8                  
    istorex  u8  /1                     
    forup    i64 /1    #3103            
    opnd     i64       i                
    opnd     i64       qq_decls.nqafiles
#3105: 
#3086: 
    retproc                             
endproc

proc qq_names.addglobalname:
    param    u64       name
    local    mem:16       oldlx
    local    u64       d
    rettype  u64
    load     mem:16       qq_decls.nextlx
    store    mem:16       oldlx         
    setcall  i64 /3                     
    setcall  i64 /1                     
    load     u64       name             
    setarg   u64 /1                     
    callf    i64 /1    &qq_lex.gethashvaluez
    setarg   i64 /3                     
    setcall  i64 /1                     
    load     u64       name             
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    setarg   i64 /2                     
    load     u64       name             
    setarg   u64 /1                     
    callf    i64 /3    &qq_lex.lookup   
    unload   i64                        
    load     u64       &qq_decls.nextlx 
    load     i64       0                
    iloadx   u64 /1                     
    store    u64       d                
    load     mem:16       oldlx         
    store    mem:16       qq_decls.nextlx
    load     u64       d                
    jumpret  u64       #3106            
#3106: 
    retfn    u64                        
endproc

proc qq_names.newstrec:
    local    u64       p
    rettype  u64
    setcall  u64 /1/1                   
    load     i64       128              
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    store    u64       p                
    setcall      /3/1                   
    load     u64       128              
    setarg   u64 /3                     
    load     i64       0                
    setarg   i32 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &memset          
    load     u64       p                
    jumpret  u64       #3107            
#3107: 
    retfn    u64                        
endproc

proc qq_names.addsymbol:
    param    u64       owner
    param    u64       d
    param    i64       id
    param    i64       isglobal
    local    u64       e
    local    u64       f
    rettype  u64
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_names.newstrec
    store    u64       e                
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    load     u64       e                
    load     i64       0                
    istorex  u64 /1                     
    load     u64       d                
    load     i64       126              
    iloadx   u8  /1                     
    load     u64       e                
    load     i64       126              
    istorex  u8  /1                     
    load     u64       owner            
    load     u64       e                
    load     i64       8                
    istorex  u64 /1                     
    load     i64       id               
    load     u64       e                
    load     i64       124              
    istorex  u8  /1                     
    startmx                             
    load     i64       id               
    load     i64       14               
    jumpeq   i64       #3109            
    load     i64       id               
    load     i64       15               
    jumpne   i64       #3110            
#3109: 
    load     i64       1                
    resetmx  i64                        
    jump               #3111            
#3110: 
    load     i64       0                
    endmx    i64                        
#3111: 
    load     u64       e                
    load     i64       120              
    addpx    u64 /1                     
    load     i64       9                
    storebit u16                        
    load     u64       qq_decls.currmodule
    jumpf    u64       #3113            
    load     u64       qq_decls.currmodule
    load     i64       46               
    iloadx   i16 /1                     
    load     u64       e                
    load     i64       114              
    istorex  u8  /1                     
#3113: 
    load     u64       d                
    load     u64       e                
    load     i64       48               
    istorex  u64 /1                     
    load     i64       isglobal         
    load     u64       e                
    load     i64       120              
    addpx    u64 /1                     
    load     i64       0                
    load     i64       1                
    storebf  u16                        
    load     u64       owner            
    jumpt    u64       #3115            
    load     u64       e                
    jumpret  u64       #3108            
#3115: 
    load     u64       owner            
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       5                
    jumpeq   i64 /1    #3117            
    load     i64       6                
    jumpeq   i64       #3117            
    load     u64       d                
    load     i64       40               
    iloadx   u64 /1                     
    load     u64       e                
    load     i64       40               
    istorex  u64 /1                     
    load     u64       e                
    load     u64       d                
    load     i64       40               
    istorex  u64 /1                     
    load     u64       e                
    load     i64       40               
    iloadx   u64 /1                     
    jumpf    u64       #3119            
    load     u64       e                
    load     i64       40               
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       owner            
    jumpne   u64       #3119            
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       e                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       "in"             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       owner            
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       "AS:Duplicate name"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3119: 
    jump               #3116            
#3117: 
    load     u64       owner            
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       f                
    jump               #3121            
#3120: 
    load     u64       f                
    load     i64       48               
    iloadx   u64 /1                     
    load     u64       e                
    load     i64       48               
    iloadx   u64 /1                     
    jumpne   u64       #3124            
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       e                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       "in"             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       owner            
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       "AS2:Duplicate name"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3124: 
    load     u64       f                
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       f                
#3121: 
    load     u64       f                
    jumpt    u64       #3120            
#3116: 
    load     u64       owner            
    load     i64       16               
    iloadx   u64 /1                     
    load     u64       0                
    jumpne   u64       #3126            
    load     u64       e                
    load     u64       owner            
    load     i64       16               
    istorex  u64 /1                     
    jump               #3125            
#3126: 
    load     u64       e                
    load     u64       owner            
    load     i64       24               
    iloadx   u64 /1                     
    load     i64       32               
    istorex  u64 /1                     
#3125: 
    load     u64       e                
    load     u64       owner            
    load     i64       24               
    istorex  u64 /1                     
    load     u64       e                
    jumpret  u64       #3108            
#3108: 
    retfn    u64                        
endproc

proc qq_names.addproc:
    param    u64       d
    local    u64       p
    setcall  u64 /1/1                   
    load     i64       16               
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_allocz 
    store    u64       p                
    load     u64       d                
    load     u64       p                
    load     i64       0                
    istorex  u64 /1                     
    load     u64       qq_decls.proclist
    load     u64       0                
    jumpne   u64       #3129            
    load     u64       p                
    store    u64       qq_decls.proclist
    jump               #3128            
#3129: 
    load     u64       p                
    load     u64       qq_decls.proclistx
    load     i64       8                
    istorex  u64 /1                     
#3128: 
    load     u64       p                
    store    u64       qq_decls.proclistx
    load     u64 /1    &qq_decls.nproclist
    incrto   i64 /1                     
    retproc                             
endproc

proc qq_names.newusertypex:
    param    u64       d
    param    u64       e
    local    i64       i
    rettype  i64
    load     i64       qq_tables.nuserxtypes
    load     i64       5000             
    jumplt   i64       #3132            
    setcall      /1/1                   
    load     u64       "Too many external user types"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3132: 
    load     u64 /1    &qq_tables.nuserxtypes
    incrto   i64 /1                     
    load     u64       d                
    load     u64       &qq_tables.ttnamedefx
    load     i64       qq_tables.nuserxtypes
    istorex  u64 /8                     
    load     u64       qq_decls.stcurrmodule
    load     i64       114              
    iloadx   u8  /1                     
    load     u64       &qq_tables.ttxmoduleno
    load     i64       qq_tables.nuserxtypes
    istorex  u8  /1                     
    load     i64       qq_tables.nuserxtypes
    neg      i64                        
    jumpret  i64       #3130            
#3130: 
    retfn    i64                        
endproc

proc qq_names.resolvedottedname:
    param    u64       owner
    param    u64       d
    local    u64       e
    rettype  u64
    load     u64       d                
    load     i64       40               
    iloadx   u64 /1                     
    store    u64       e                
    jump               #3135            
#3134: 
    load     u64       e                
    load     i64       40               
    iloadx   u64 /1                     
    store    u64       e                
#3135: 
    load     u64       e                
    jumpf    u64       #3137            
    load     u64       e                
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       owner            
    jumpne   u64       #3134            
#3137: 
    load     u64       e                
    jumpret  u64       #3133            
#3133: 
    retfn    u64                        
endproc

proc qq_names.addgenfield:
    param    u64       d
    local    i64       index
    local    u64       dgen
    local    u64       g
    load     u64       d                
    load     i64       48               
    iloadx   u64 /1                     
    store    u64       dgen             
    load     u64       dgen             
    load     i64       104              
    iloadx   i64 /1                     
    store    i64       index            
    load     i64       index            
    load     i64       0                
    jumpne   i64       #3140            
    load     i64       qq_decls.ngenfields
    load     i64       1000             
    jumplt   i64       #3142            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Too many genfields"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#3142: 
    load     u64 /1    &qq_decls.ngenfields
    incrload i64 /1                     
    double                              
    store    i64       index            
    load     u64       dgen             
    load     i64       104              
    istorex  i64 /1                     
#3140: 
    setcall  u64 /1/1                   
    load     i64       16               
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    store    u64       g                
    load     u64       d                
    load     u64       g                
    load     i64       0                
    istorex  u64 /1                     
    load     u64       &qq_decls.genfieldtable
    load     i64       index            
    iloadx   u64 /8/-8                  
    load     u64       g                
    load     i64       8                
    istorex  u64 /1                     
    load     u64       g                
    load     u64       &qq_decls.genfieldtable
    load     i64       index            
    istorex  u64 /8/-8                  
    retproc                             
endproc

proc qq_names.makereftype:
    param    i64       target
    param    u64       owner
    local    i64       newtype
    local    i64       i
    rettype  i64
    load     u64       owner            
    load     u64       0                
    jumpne   u64       #3145            
    load     i64       41               
    store    i64       i                
    load     i64       qq_tables.ntypes 
    load     i64       41               
    jumplt   i64       #3148            
#3146: 
    load     u64       &qq_tables.ttbasetype
    load     i64       i                
    iloadx   i16 /2                     
    widen    i64/i16                    
    load     i64       16               
    jumpne   i64       #3150            
    load     u64       &qq_tables.tttarget
    load     i64       i                
    iloadx   i16 /2                     
    widen    i64/i16                    
    load     i64       target           
    jumpne   i64       #3150            
    load     i64       i                
    jumpret  i64       #3143            
#3150: 
    forup    i64 /1    #3146            
    opnd     i64       i                
    opnd     i64       qq_tables.ntypes 
#3148: 
#3145: 
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_names.addanontype
    store    i64       newtype          
    load     i64       16               
    load     u64       &qq_tables.ttbasetype
    load     i64       newtype          
    istorex  i16 /2                     
    setcall      /3/1                   
    load     u64       &qq_tables.tttarget
    load     i64       newtype          
    addpx    i16 /2                     
    setarg   u64 /3                     
    load     i64       target           
    setarg   i64 /2                     
    load     u64       qq_decls.stcurrproc
    setarg   u64 /1                     
    callp        /3    &qq_lib.storemode
    load     i64       8                
    load     u64       &qq_tables.ttsize
    load     i64       newtype          
    istorex  i64 /8                     
    load     i64       64               
    load     u64       &qq_tables.ttbitwidth
    load     i64       newtype          
    istorex  u8  /1                     
    load     i64       newtype          
    jumpret  i64       #3143            
#3143: 
    retfn    i64                        
endproc

proc qq_names.makeaxtype:
    param    i64       target
    param    u64       plower
    param    u64       plength
    local    i64       newtype
    local    i64       length
    rettype  i64
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_names.addanontype
    store    i64       newtype          
    load     i64       7                
    load     u64       &qq_tables.ttbasetype
    load     i64       newtype          
    istorex  i16 /2                     
    setcall      /3/1                   
    load     u64       &qq_tables.tttarget
    load     i64       newtype          
    addpx    i16 /2                     
    setarg   u64 /3                     
    load     i64       target           
    setarg   i64 /2                     
    load     u64       qq_decls.stcurrproc
    setarg   u64 /1                     
    callp        /3    &qq_lib.storemode
    load     i64       1                
    load     u64       &qq_tables.ttlower
    load     i64       newtype          
    istorex  i64 /8                     
    load     u64       plength          
    load     u64       &qq_tables.ttlengthexpr
    load     i64       newtype          
    istorex  u64 /8                     
    load     u64       plower           
    load     u64       &qq_tables.ttlowerexpr
    load     i64       newtype          
    istorex  u64 /8                     
    load     i64       newtype          
    jumpret  i64       #3151            
#3151: 
    retfn    i64                        
endproc

proc qq_names.makestrtype:
    param    i64       m
    param    u64       pwidth
    local    i64       newtype
    rettype  i64
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_names.addanontype
    store    i64       newtype          
    load     i64       m                
    load     u64       &qq_tables.ttbasetype
    load     i64       newtype          
    istorex  i16 /2                     
    load     u64       pwidth           
    load     u64       &qq_tables.ttlengthexpr
    load     i64       newtype          
    istorex  u64 /8                     
    load     i64       1                
    load     u64       &qq_tables.ttlower
    load     i64       newtype          
    istorex  i64 /8                     
    load     u64       qq_decls.stcurrproc
    load     u64       &qq_tables.ttowner
    load     i64       newtype          
    istorex  u64 /8                     
    load     i64       newtype          
    jumpret  i64       #3152            
#3152: 
    retfn    i64                        
endproc

proc qq_names.addanontype:
    local    mem:32       str
    rettype  i64
    load     i64       qq_tables.ntypes 
    load     i64       250              
    jumplt   i64       #3155            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Too many types" 
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#3155: 
    load     u64 /1    &qq_tables.ntypes
    incrto   i64 /1                     
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "$T"             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     i64       qq_tables.ntypes 
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall  u64 /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /1    &mlib.pcm_copyheapstring
    load     u64       &qq_tables.ttname
    load     i64       qq_tables.ntypes 
    istorex  u64 /8                     
    load     u64       qq_decls.stcurrproc
    load     u64       &qq_tables.ttowner
    load     i64       qq_tables.ntypes 
    istorex  u64 /8                     
    load     i64       qq_tables.ntypes 
    jumpret  i64       #3153            
#3153: 
    retfn    i64                        
endproc

proc qq_names.createusertype:
    param    u64       d
    param    i64       m
    setcall      /3/1                   
    load     u64       d                
    load     i64       116              
    addpx    u64 /1                     
    setarg   u64 /3                     
    load     i64       m                
    setarg   i64 /2                     
    load     u64       qq_decls.stcurrproc
    setarg   u64 /1                     
    callp        /3    &qq_lib.storemode
    load     i64       m                
    load     i64       40               
    jumple   i64       #3158            
    load     u64       &qq_tables.ttnamedef
    load     i64       m                
    iloadx   u64 /8                     
    load     u64       0                
    jumpne   u64       #3158            
    load     u64       d                
    load     u64       &qq_tables.ttnamedef
    load     i64       m                
    istorex  u64 /8                     
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    load     u64       &qq_tables.ttname
    load     i64       m                
    istorex  u64 /8                     
    load     u64       d                
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       &qq_tables.ttowner
    load     i64       m                
    istorex  u64 /8                     
#3158: 
    retproc                             
endproc

proc qq_names.getalignment:
    param    i64       m
    local    i64       a
    rettype  i64
    load     u64       &qq_tables.ttbasetype
    load     i64       m                
    iloadx   i16 /2                     
    widen    i64/i16                    
    load     i64       7                
    jumpeq   i64 /1    #3161            
    load     i64       13               
    jumpeq   i64       #3162            
    jump               #3163            
#3161: 
    setcall  i64 /1/1                   
    load     u64       &qq_tables.tttarget
    load     i64       m                
    iloadx   i16 /2                     
    widen    i64/i16                    
    setarg   i64 /1                     
    callf    i64 /1    &qq_names.getalignment
    jumpret  i64       #3159            
    jump               #3160            
#3162: 
    jump               #3160            
#3163: 
#3160: 
    load     u64       &qq_tables.ttsize
    load     i64       m                
    iloadx   i64 /8                     
    store    i64       a                
    load     i64       a                
    load     i64       1                
    jumpeq   i64 /1    #3165            
    load     i64       2                
    jumpeq   i64 /1    #3165            
    load     i64       4                
    jumpeq   i64 /1    #3165            
    load     i64       8                
    jumpeq   i64       #3165            
    jump               #3166            
#3165: 
    load     i64       a                
    jumpret  i64       #3159            
    jump               #3164            
#3166: 
#3164: 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       &qq_tables.ttname
    load     i64       m                
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     i64       a                
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Getalign not 1248"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
    load     i64       0                
    jumpret  i64       #3159            
#3159: 
    retfn    i64                        
endproc

proc qq_names.duplfield:
    param    u64       p
    param    u64       q
    load     u64       p                
    load     i64       88               
    iloadx   u64 /1                     
    jumpf    u64       #3169            
    setcall      /1/1                   
    load     u64       "DUPLFIELD"      
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3169: 
    load     u64       p                
    load     i64       80               
    iloadx   u64 /1                     
    load     u64       q                
    load     i64       80               
    istorex  u64 /1                     
    load     u64       p                
    load     i64       96               
    iloadx   i32 /1                     
    load     u64       q                
    load     i64       96               
    istorex  i32 /1                     
    load     u64       p                
    load     i64       108              
    iloadx   i16 /1                     
    load     u64       q                
    load     i64       108              
    istorex  i16 /1                     
    retproc                             
endproc

proc qq_names.writesig:
    param    u64       d
    param    u64       dev
    local    u64       e
    local    i64       n
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "# #("           
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    startmx                             
    load     u64       d                
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       4                
    loadbit  i64                        
    jumpf    u64       #3172            
    load     u64       "function"       
    resetmx  u64                        
    jump               #3171            
#3172: 
    load     u64       "proc"           
    endmx    u64                        
#3171: 
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     u64       d                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       e                
    load     i64       0                
    store    i64       n                
    jump               #3176            
#3173: 
    load     u64       e                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       15               
    jumpne   i64       #3178            
    load     u64 /1    &n               
    incrto   i64 /1                     
    load     u64       e                
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       7                
    loadbit  i64                        
    jumpf    u64       #3180            
    load     u64       e                
    load     i64       88               
    iloadx   u64 /1                     
    jumpf    u64       #3180            
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "#=#"            
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       e                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1                     
    setcall  u64 /1                     
    load     u64       e                
    load     i64       88               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /1    &qq_lib.strexpr  
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #3179            
#3180: 
    load     u64       e                
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       7                
    loadbit  i64                        
    jumpf    u64       #3181            
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "?"              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64       e                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #3179            
#3181: 
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       e                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
#3179: 
    load     i64       n                
    load     u64       d                
    load     i64       104              
    iloadx   i16 /1                     
    widen    i64/i16                    
    jumpge   i64       #3183            
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       ", "             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
#3183: 
#3178: 
    load     u64       e                
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       e                
#3176: 
    load     u64       e                
    jumpt    u64       #3173            
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       ")\t[#]"         
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       d                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    retproc                             
endproc

proc qq_names.createdupldef:
    param    u64       owner
    param    u64       symptr
    param    i64       id
    local    u64       p
    local    u64       q
    rettype  u64
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_names.newstrec
    store    u64       p                
    load     u64       symptr           
    load     i64       0                
    iloadx   u64 /1                     
    load     u64       p                
    load     i64       0                
    istorex  u64 /1                     
    load     u64       symptr           
    load     i64       126              
    iloadx   u8  /1                     
    load     u64       p                
    load     i64       126              
    istorex  u8  /1                     
    load     i64       69               
    load     u64       p                
    load     i64       123              
    istorex  u8  /1                     
    load     u64       owner            
    load     u64       p                
    load     i64       8                
    istorex  u64 /1                     
    load     i64       id               
    load     u64       p                
    load     i64       124              
    istorex  u8  /1                     
    load     u64       symptr           
    load     i64       40               
    iloadx   u64 /1                     
    load     u64       p                
    load     i64       40               
    istorex  u64 /1                     
    load     u64       p                
    load     u64       symptr           
    load     i64       40               
    istorex  u64 /1                     
    load     u64       owner            
    jumpf    u64       #3186            
    load     u64       owner            
    load     i64       16               
    iloadx   u64 /1                     
    load     u64       0                
    jumpne   u64       #3188            
    load     u64       p                
    double                              
    load     u64       owner            
    load     i64       24               
    istorex  u64 /1                     
    load     u64       owner            
    load     i64       16               
    istorex  u64 /1                     
    jump               #3187            
#3188: 
    load     u64       p                
    load     u64       owner            
    load     i64       24               
    iloadx   u64 /1                     
    load     i64       32               
    istorex  u64 /1                     
    load     u64       p                
    load     u64       owner            
    load     i64       24               
    istorex  u64 /1                     
#3187: 
#3186: 
    load     u64       p                
    jumpret  u64       #3184            
#3184: 
    retfn    u64                        
endproc

proc qq_packed.var_loadpacked:
    param    u64       p
    param    i64       t
    param    u64       dest
    param    u64       ownerobj
    local    i64       length
    local    u64       q
    local    u64       r
    local    u64       pp
    local    u64       s
    local    u64       ss
    local    i64       av_1
    load     i64       1                
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     u64       &qq_tables.ttbasetype
    load     i64       t                
    iloadx   i16 /2                     
    widen    i64/i16                    
    switch   i64 /23/37  #3191          
    opnd     i64       #3192            
#3191: 
    swlabel            #3193            
    swlabel            #3194            
    swlabel            #3195            
    swlabel            #3196            
    swlabel            #3197            
    swlabel            #3198            
    swlabel            #3199            
    swlabel            #3200            
    swlabel            #3202            
    swlabel            #3201            
    swlabel            #3192            
    swlabel            #3192            
    swlabel            #3192            
    swlabel            #3203            
    swlabel            #3206            
    endsw                               
#3193: 
    load     u64       p                
    iload    i8                         
    widen    i64/i8                     
    load     u64       dest             
    load     i64       8                
    istorex  i64 /1                     
    jump               #3190            
#3194: 
    load     u64       p                
    iload    i16                        
    widen    i64/i16                    
    load     u64       dest             
    load     i64       8                
    istorex  i64 /1                     
    jump               #3190            
#3195: 
    load     u64       p                
    iload    i32                        
    widen    i64/i32                    
    load     u64       dest             
    load     i64       8                
    istorex  i64 /1                     
    jump               #3190            
#3196: 
    load     u64       p                
    iload    i64                        
    load     u64       dest             
    load     i64       8                
    istorex  i64 /1                     
    jump               #3190            
#3197: 
    load     u64       p                
    iload    u8                         
    widen    i64/u8                     
    load     u64       dest             
    load     i64       8                
    istorex  i64 /1                     
    jump               #3190            
#3198: 
    load     u64       p                
    iload    u16                        
    widen    i64/u16                    
    load     u64       dest             
    load     i64       8                
    istorex  i64 /1                     
    jump               #3190            
#3199: 
    load     u64       p                
    iload    u32                        
    widen    i64/u32                    
    load     u64       dest             
    load     i64       8                
    istorex  i64 /1                     
    jump               #3190            
#3200: 
    load     i64       1                
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     u64       p                
    iload    u64                        
    load     u64       dest             
    load     i64       8                
    istorex  u64 /1                     
    jump               #3190            
#3201: 
    load     i64       2                
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     u64       p                
    iload    r64                        
    load     u64       dest             
    load     i64       8                
    istorex  r64 /1                     
    jump               #3190            
#3202: 
    load     i64       2                
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     u64       p                
    iload    r32                        
    fwiden   r64/r32                    
    load     u64       dest             
    load     i64       8                
    istorex  r64 /1                     
    jump               #3190            
#3203: 
    load     i64       265              
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     u64       &qq_tables.ttlength
    load     i64       t                
    iloadx   i64 /8                     
    store    i64       length           
    load     i64       length           
    load     i64       2                
    jumplt   i64       #3205            
    setcall  i64 /2/1                   
    load     i64       length           
    setarg   i64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callf    i64 /2    &qq_packed.getfslength
    store    i64       length           
    jump               #3204            
#3205: 
    load     i64       1                
    store    i64       length           
#3204: 
    setcall  u64 /2/1                   
    load     i64       length           
    setarg   i64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callf    u64 /2    &qq_strings.obj_make_strslicexobj
    store    u64       s                
    load     u64       s                
    load     u64       dest             
    load     i64       8                
    istorex  u64 /1                     
    jump               #3190            
#3206: 
    load     i64       265              
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     u64       p                
    store    u64       ss               
    load     u64       &qq_tables.ttlength
    load     i64       t                
    iloadx   i64 /8                     
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #3209            
#3207: 
    load     u64       ss               
    iload    u8                         
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #3211            
    jump               #3209            
#3211: 
    load     u64 /1    &ss              
    incrto   u64 /1                     
    to       i64       #3207            
    opnd     i64       av_1             
#3209: 
    setcall  u64 /2/1                   
    load     u64       ss               
    load     u64       p                
    subp     i64 /1                     
    setarg   i64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callf    u64 /2    &qq_strings.obj_make_strslicexobj
    store    u64       s                
    load     u64       s                
    load     u64       dest             
    load     i64       8                
    istorex  u64 /1                     
    jump               #3190            
#3192: 
    load     u64       &qq_tables.ttbasetype
    load     i64       t                
    iloadx   i16 /2                     
    widen    i64/i16                    
    load     i64       16               
    jumpeq   i64 /1    #3213            
    load     i64       13               
    jumpeq   i64 /1    #3214            
    load     i64       7                
    jumpeq   i64       #3215            
    jump               #3216            
#3213: 
    load     i64       16               
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     u64       p                
    iload    u64                        
    load     u64       dest             
    load     i64       8                
    istorex  u64 /1                     
    load     u64       &qq_tables.tttarget
    load     i64       t                
    iloadx   i16 /2                     
    widen    i64/i16                    
    load     u64       dest             
    load     i64       4                
    istorex  u32 /1                     
    jump               #3212            
#3214: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_vars.obj_new 
    store    u64       s                
    load     u64       1                
    load     u64       s                
    load     i64       4                
    addpx    u64 /1                     
    load     i64       1                
    storebit u8                         
    load     u64       p                
    load     u64       s                
    load     i64       8                
    istorex  u64 /1                     
    load     u64       s                
    load     u64       dest             
    load     i64       8                
    istorex  u64 /1                     
    load     i64       269              
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     i64       t                
    load     u64       s                
    load     i64       6                
    istorex  u16 /1                     
    load     u64       ownerobj         
    jumpf    u64       #3218            
    load     i64       1                
    load     u64       s                
    load     i64       5                
    istorex  u8  /1                     
    load     u64       ownerobj         
    load     u64       s                
    load     i64       24               
    istorex  u64 /1                     
    load     u64       ownerobj         
    incrto   u32 /1                     
    jump               #3217            
#3218: 
    load     i64       2                
    load     u64       s                
    load     i64       5                
    istorex  u8  /1                     
#3217: 
    jump               #3212            
#3215: 
    setcall  u64 /3/1                   
    load     u64       &qq_tables.ttlength
    load     i64       t                
    iloadx   i64 /8                     
    setarg   i64 /3                     
    load     u64       &qq_tables.ttlower
    load     i64       t                
    iloadx   i64 /8                     
    setarg   i64 /2                     
    load     u64       &qq_tables.tttarget
    load     i64       t                
    iloadx   i16 /2                     
    widen    i64/i16                    
    setarg   i64 /1                     
    callf    u64 /3    &qq_arrays.obj_newarray
    store    u64       s                
    load     u64       1                
    load     u64       s                
    load     i64       4                
    addpx    u64 /1                     
    load     i64       1                
    storebit u8                         
    load     u64       p                
    load     u64       s                
    load     i64       8                
    istorex  u64 /1                     
    load     u64       s                
    load     u64       dest             
    load     i64       8                
    istorex  u64 /1                     
    load     i64       263              
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     i64       t                
    load     u64       s                
    load     i64       6                
    istorex  u16 /1                     
    load     u64       ownerobj         
    jumpf    u64       #3220            
    load     i64       1                
    load     u64       s                
    load     i64       5                
    istorex  u8  /1                     
    load     u64       ownerobj         
    load     u64       s                
    load     i64       24               
    istorex  u64 /1                     
    load     u64       ownerobj         
    incrto   u32 /1                     
    jump               #3219            
#3220: 
    load     i64       2                
    load     u64       s                
    load     i64       5                
    istorex  u8  /1                     
#3219: 
    jump               #3212            
#3216: 
    setcall      /3/1                   
    load     i64       t                
    setarg   i64 /3                     
    load     u64       &qq_tables.ttbasetype
    load     i64       t                
    iloadx   i16 /2                     
    widen    i64/i16                    
    setarg   i64 /2                     
    load     u64       "loadpacked"     
    setarg   u64 /1                     
    callp        /3    &qq_runaux.pcmxtypestt
#3212: 
#3190: 
    retproc                             
endproc

proc qq_packed.var_storepacked:
    param    u64       p
    param    u64       q
    param    i64       t
    local    i64       plength
    local    i64       qlength
    local    i64       s
    local    i64       sbase
    local    i64       tbase
    local    u64       qa
    load     u64       q                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    double                              
    store    i64       sbase            
    store    i64       s                
    load     u64       &qq_tables.ttbasetype
    load     i64       t                
    iloadx   i16 /2                     
    widen    i64/i16                    
    store    i64       tbase            
    load     i64       sbase            
    load     i64       1                
    jumpeq   i64 /1    #3223            
    load     i64       16               
    jumpeq   i64 /1    #3223            
    load     i64       2                
    jumpeq   i64 /1    #3224            
    load     i64       9                
    jumpeq   i64 /1    #3225            
    load     i64       13               
    jumpeq   i64 /1    #3226            
    load     i64       7                
    jumpeq   i64       #3227            
    jump               #3228            
#3223: 
    load     i64       tbase            
    switch   i64 /16/32  #3230          
    opnd     i64       #3231            
#3230: 
    swlabel            #3235            
    swlabel            #3231            
    swlabel            #3231            
    swlabel            #3231            
    swlabel            #3231            
    swlabel            #3231            
    swlabel            #3231            
    swlabel            #3232            
    swlabel            #3233            
    swlabel            #3234            
    swlabel            #3235            
    swlabel            #3232            
    swlabel            #3233            
    swlabel            #3234            
    swlabel            #3235            
    swlabel            #3236            
    swlabel            #3237            
    endsw                               
#3232: 
    load     u64       q                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       p                
    istore   u8                         
    jump               #3221            
    jump               #3229            
#3233: 
    load     u64       q                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       p                
    istore   u16                        
    jump               #3221            
    jump               #3229            
#3234: 
    load     u64       q                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       p                
    istore   i32                        
    jump               #3221            
    jump               #3229            
#3235: 
    load     u64       q                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       p                
    istore   i64                        
    jump               #3221            
    jump               #3229            
#3236: 
    load     u64       q                
    load     i64       8                
    iloadx   i64 /1                     
    float    r32/i64                    
    load     u64       p                
    istore   r32                        
    jump               #3221            
    jump               #3229            
#3237: 
    load     u64       q                
    load     i64       8                
    iloadx   i64 /1                     
    float    r64/i64                    
    load     u64       p                
    istore   r64                        
    jump               #3221            
    jump               #3229            
#3231: 
#3229: 
    jump               #3222            
#3224: 
    load     i64       tbase            
    load     i64       25               
    jumpeq   i64 /1    #3239            
    load     i64       29               
    jumpeq   i64 /1    #3239            
    load     i64       26               
    jumpeq   i64 /1    #3240            
    load     i64       30               
    jumpeq   i64 /1    #3240            
    load     i64       31               
    jumpeq   i64 /1    #3241            
    load     i64       32               
    jumpeq   i64 /1    #3242            
    load     i64       24               
    jumpeq   i64 /1    #3243            
    load     i64       28               
    jumpeq   i64       #3243            
    jump               #3244            
#3239: 
    load     u64       q                
    load     i64       8                
    iloadx   r64 /1                     
    fix      i64/r64                    
    load     u64       p                
    istore   i32                        
    jump               #3221            
    jump               #3238            
#3240: 
    load     u64       q                
    load     i64       8                
    iloadx   r64 /1                     
    fix      i64/r64                    
    load     u64       p                
    istore   i64                        
    jump               #3221            
    jump               #3238            
#3241: 
    load     u64       q                
    load     i64       8                
    iloadx   r64 /1                     
    fnarrow  r32/r64                    
    load     u64       p                
    istore   r32                        
    jump               #3221            
    jump               #3238            
#3242: 
    load     u64       q                
    load     i64       8                
    iloadx   r64 /1                     
    load     u64       p                
    istore   r64                        
    jump               #3221            
    jump               #3238            
#3243: 
    load     u64       q                
    load     i64       8                
    iloadx   r64 /1                     
    fix      i64/r64                    
    load     u64       p                
    istore   i16                        
    jump               #3221            
    jump               #3238            
#3244: 
#3238: 
    jump               #3222            
#3225: 
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       qa               
    load     u64       &qq_tables.ttlength
    load     i64       t                
    iloadx   i64 /8                     
    store    i64       plength          
    load     u64       qa               
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       qlength          
    load     i64       tbase            
    load     i64       36               
    jumpeq   i64 /1    #3246            
    load     i64       37               
    jumpeq   i64       #3247            
    jump               #3248            
#3246: 
    load     i64       t                
    load     i64       tbase            
    jumpne   i64       #3250            
    load     i64       qlength          
    load     i64       1                
    jumpeq   i64       #3252            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Str not len 1"  
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#3252: 
    load     u64       qa               
    load     i64       8                
    iloadx   u64 /1                     
    iload    u8                         
    load     u64       p                
    istore   u8                         
    jump               #3221            
#3250: 
    load     i64       qlength          
    load     i64       plength          
    jumple   i64       #3254            
    load     i64       plength          
    store    i64       qlength          
#3254: 
    setcall      /3/1                   
    load     i64       qlength          
    setarg   u64 /3                     
    load     u64       qa               
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &memcpy          
    setcall      /3/1                   
    load     i64       qlength          
    setarg   i64 /3                     
    load     i64       plength          
    setarg   i64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_packed.setfslength
    jump               #3221            
    jump               #3245            
#3247: 
    load     i64       qlength          
    load     i64       plength          
    jumplt   i64       #3256            
    setcall      /3/1                   
    load     i64       plength          
    setarg   u64 /3                     
    load     u64       qa               
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     i64       0                
    load     u64       p                
    load     i64       plength          
    addpx    u64 /1                     
    load     i64       1                
    subpx    u64 /1                     
    istore   u8                         
    jump               #3255            
#3256: 
    setcall      /3/1                   
    load     i64       qlength          
    setarg   u64 /3                     
    load     u64       qa               
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     i64       0                
    load     u64       p                
    load     i64       qlength          
    istorex  u8  /1                     
#3255: 
    jump               #3221            
    jump               #3245            
#3248: 
#3245: 
    jump               #3222            
#3226: 
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    store    i64       s                
    load     i64       s                
    load     i64       t                
    jumpeq   i64       #3258            
    setcall      /3/1                   
    load     i64       t                
    setarg   i64 /3                     
    load     i64       s                
    setarg   i64 /2                     
    load     u64       "spack struct"   
    setarg   u64 /1                     
    callp        /3    &qq_runaux.pcmxtypestt
#3258: 
    setcall      /3/1                   
    load     u64       &qq_tables.ttsize
    load     i64       t                
    iloadx   u64 /8                     
    setarg   u64 /3                     
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &memcpy          
    jump               #3221            
    jump               #3222            
#3227: 
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    store    i64       s                
    load     i64       s                
    load     i64       t                
    jumpeq   i64       #3260            
    setcall      /3/1                   
    load     i64       t                
    setarg   i64 /3                     
    load     i64       s                
    setarg   i64 /2                     
    load     u64       "spack array"    
    setarg   u64 /1                     
    callp        /3    &qq_runaux.pcmxtypestt
#3260: 
    setcall      /3/1                   
    load     u64       &qq_tables.ttsize
    load     i64       t                
    iloadx   u64 /8                     
    setarg   u64 /3                     
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &memcpy          
    jump               #3221            
    jump               #3222            
#3228: 
#3222: 
    setcall      /3/1                   
    load     i64       t                
    setarg   i64 /3                     
    load     i64       s                
    setarg   i64 /2                     
    load     u64       "storepacked (source->dest)"
    setarg   u64 /1                     
    callp        /3    &qq_runaux.pcmxtypestt
#3221: 
    retproc                             
endproc

proc qq_packed.setfslength:
    param    u64       s
    param    i64       m
    param    i64       n
    load     i64       m                
    load     i64       n                
    jumpne   i64       #3263            
    jump               #3262            
#3263: 
    load     i64       n                
    load     i64       m                
    load     i64       1                
    sub      i64                        
    jumpne   i64       #3264            
    load     u64       0                
    load     u64       s                
    load     i64       m                
    addpx    u64 /1                     
    load     i64       1                
    subpx    u64 /1                     
    istore   u8                         
    jump               #3262            
#3264: 
    load     u64       0                
    load     u64       s                
    load     i64       m                
    addpx    u64 /1                     
    load     i64       2                
    subpx    u64 /1                     
    istore   u8                         
    load     i64       n                
    load     u64       s                
    load     i64       m                
    addpx    u64 /1                     
    load     i64       1                
    subpx    u64 /1                     
    istore   u8                         
#3262: 
    retproc                             
endproc

proc qq_packed.getfslength:
    param    u64       s
    param    i64       m
    rettype  i64
    load     i64       m                
    load     i64       1                
    sub      i64                        
    load     u64 /1    &s               
    addpxto  u64 /1                     
    startmx                             
    load     u64       s                
    load     i64       1                
    subpx    u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #3267            
    load     u64       s                
    iload    u8                         
    widen    i64/u8                     
    resetmx  i64                        
    jump               #3266            
#3267: 
    load     u64       s                
    iload    u8                         
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #3268            
    load     i64       m                
    load     i64       1                
    sub      i64                        
    resetmx  i64                        
    jump               #3266            
#3268: 
    load     i64       m                
    endmx    i64                        
#3266: 
    jumpret  i64       #3265            
#3265: 
    retfn    i64                        
endproc

proc qq_packed.var_make_struct:
    param    u64       a
    param    u64       dest
    param    i64       n
    param    i64       rectype
    local    u64       d
    local    u64       r
    local    u64       p
    local    u64       b
    local    i64       m
    local    u64       q
    local    i64       av_1
    setcall  u64 /1/1                   
    load     i64       rectype          
    setarg   i64 /1                     
    callf    u64 /1    &qq_packed.obj_new_struct
    store    u64       p                
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       b                
    load     u64       &qq_tables.ttlength
    load     i64       rectype          
    iloadx   i64 /8                     
    store    i64       m                
    load     u64       &qq_tables.ttnamedef
    load     i64       rectype          
    iloadx   u64 /8                     
    store    u64       d                
    load     u64       d                
    load     i64       88               
    iloadx   u64 /1                     
    store    u64       r                
    load     i64       n                
    load     i64       m                
    jumpge   i64       #3271            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Too few elements"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
    jump               #3270            
#3271: 
    load     i64       n                
    load     i64       m                
    jumple   i64       #3272            
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "N="             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     i64       n                
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       "M="             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     i64       m                
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Too many elements"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#3272: 
#3270: 
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     i64       n                
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #3275            
#3273: 
    setcall      /3/1                   
    load     u64       r                
    iload    u64                        
    load     i64       116              
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       q                
    setarg   u64 /1                     
    callp        /3    &qq_packed.var_storepacked
    load     u64       &qq_tables.ttsize
    load     u64       r                
    iload    u64                        
    load     i64       116              
    iloadx   i16 /1                     
    widen    i64/i16                    
    iloadx   i64 /8                     
    load     u64 /1    &q               
    addpxto  u64 /1                     
    load     u64 /1    &r               
    incrto   u64 /8                     
    load     u64 /1    &a               
    incrto   u64 /16                    
    to       i64       #3273            
    opnd     i64       av_1             
#3275: 
    load     i64       269              
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     i64       rectype          
    load     u64       p                
    load     i64       6                
    istorex  u16 /1                     
    load     u64       p                
    load     u64       dest             
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_packed.obj_new_struct:
    param    i64       m
    local    u64       p
    local    i64       size
    rettype  u64
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_vars.obj_new 
    store    u64       p                
    load     u64       1                
    load     u64       p                
    load     i64       4                
    addpx    u64 /1                     
    load     i64       1                
    storebit u8                         
    load     i64       m                
    load     u64       p                
    load     i64       6                
    istorex  u16 /1                     
    load     u64       &qq_tables.ttsize
    load     i64       m                
    iloadx   i64 /8                     
    store    i64       size             
    load     i64       size             
    jumpf    i64       #3278            
    setcall  u64 /1/1                   
    load     i64       size             
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_allocz 
    load     u64       p                
    load     i64       8                
    istorex  u64 /1                     
#3278: 
    load     u64       p                
    jumpret  u64       #3276            
#3276: 
    retfn    u64                        
endproc

proc qq_packed.var_dupl_struct:
    param    u64       a
    local    u64       p
    local    u64       q
    local    i64       size
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       &qq_tables.ttsize
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i64 /8                     
    store    i64       size             
    setcall  u64 /1/1                   
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    setarg   i64 /1                     
    callf    u64 /1    &qq_packed.obj_new_struct
    store    u64       q                
    load     u64       q                
    load     u64       a                
    load     i64       8                
    istorex  u64 /1                     
    setcall      /3/1                   
    load     i64       size             
    setarg   u64 /3                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &memcpy          
    retproc                             
endproc

proc qq_packed.obj_free_struct:
    param    u64       p
    setcall      /2/1                   
    load     u64       &qq_tables.ttsize
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i64 /8                     
    setarg   i64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_free   
    setcall      /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callp        /1    &mlib.pcm_free32 
    retproc                             
endproc

proc qq_packed.var_equal_struct:
    param    u64       x
    param    u64       y
    rettype  i64
    setcall  i64 /3/1                   
    load     u64       &qq_tables.ttsize
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   i64 /8                     
    setarg   i64 /3                     
    load     u64       y                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /3    &mlib.eqbytes    
    jumpret  i64       #3281            
#3281: 
    retfn    i64                        
endproc

proc qq_packed.var_getix_struct:
    param    u64       a
    param    i64       index
    local    u64       d
    local    u64       r
    local    mem:16       v
    local    u64       p
    local    i64       elemtype
    load     u64       a                
    iload    mem:16                     
    store    mem:16       v             
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     i64       index            
    load     i64       1                
    jumplt   i64       #3285            
    load     i64       index            
    load     u64       &qq_tables.ttlength
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   i64 /8                     
    jumple   i64       #3284            
#3285: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "struct[int] bounds"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#3284: 
    load     u64       &qq_tables.ttnamedef
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   u64 /8                     
    store    u64       d                
    load     u64       d                
    load     i64       88               
    iloadx   u64 /1                     
    load     i64       index            
    addpx    u64 /8                     
    load     i64       1                
    subpx    u64 /8                     
    store    u64       r                
    setcall      /4/1                   
    load     u64       0                
    setarg   u64 /4                     
    load     u64       a                
    setarg   u64 /3                     
    load     u64       r                
    iload    u64                        
    load     i64       116              
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       r                
    iload    u64                        
    load     i64       108              
    iloadx   i16 /1                     
    widen    i64/i16                    
    addpx    u64 /1                     
    setarg   u64 /1                     
    callp        /4    &qq_packed.var_loadpacked
    retproc                             
endproc

proc qq_parse.parsemodule:
    param    u64       pm
    local    u64       p
    load     u64       pm               
    load     i64       43               
    iloadx   u8  /1                     
    jumpf    u8        #3288            
    jump               #3286            
#3288: 
    load     u64       pm               
    store    u64       qq_decls.currmodule
    load     u64       qq_decls.currmodule
    load     i64       88               
    iloadx   u64 /1                     
    store    u64       qq_decls.stcurrmodule
    setcall      /1/1                   
    load     u64       qq_decls.currmodule
    setarg   u64 /1                     
    callp        /1    &qq_lex.startlex 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       qq_decls.stcurrmodule
    store    u64       qq_decls.stcurrproc
    setcall  u64 /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_parse.readsunit
    store    u64       p                
    load     u64       p                
    double                              
    load     u64       pm               
    load     i64       48               
    istorex  u64 /1                     
    load     u64       qq_decls.stcurrmodule
    load     i64       88               
    istorex  u64 /1                     
    setcall      /0/1                   
    callp        /0    &qq_lib.skipsemi 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64 /1    #3290            
    load     i64       62               
    jumpeq   i64       #3291            
    jump               #3292            
#3290: 
    setcall      /1/1                   
    load     u64       "Comma seq not allowed"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
    jump               #3289            
#3291: 
    jump               #3289            
#3292: 
    setcall      /1/1                   
    load     u64       "EOF"            
    setarg   u64 /1                     
    callp        /1    &qq_lex.ps       
    setcall      /1/1                   
    load     u64       "Bad symbol at eof"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3289: 
#3286: 
    retproc                             
endproc

proc qq_parse.readexpression:
    local    u64       p
    rettype  u64
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readterm2
    store    u64       p                
    load     u64       &qq_tables.exprendset
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u8  /1                     
    jumpf    u8        #3295            
    load     u64       p                
    jumpret  u64       #3293            
#3295: 
    startmx                             
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       6                
    jumpne   i64       #3297            
    setcall  u64 /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.readassignment
    resetmx  u64                        
    jump               #3296            
#3297: 
    setcall  u64 /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.readorterms
    endmx    u64                        
#3296: 
    jumpret  u64       #3293            
#3293: 
    retfn    u64                        
endproc

proc qq_parse.readassignment:
    param    u64       p
    local    i64       pos
    local    i64       isdeep
    local    u64       q
    local    u64       r
    rettype  u64
    load     u64       &qq_tables.exprendset
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u8  /1                     
    jumpf    u8        #3300            
    load     u64       p                
    jumpret  u64       #3298            
#3300: 
    setcall  u64 /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.readorterms
    store    u64       p                
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       6                
    jumpne   i64       #3302            
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       isdeep           
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       pos              
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /3                     
    setcall  u64 /1                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readterm2
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.readassignment
    setarg   u64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     i64       2                
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
    load     i64       isdeep           
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
    load     i64       pos              
    load     u64       p                
    load     i64       4                
    istorex  i32 /1                     
#3302: 
    load     u64       p                
    jumpret  u64       #3298            
#3298: 
    retfn    u64                        
endproc

proc qq_parse.readorterms:
    param    u64       p
    local    i64       pos
    local    u64       q
    local    u64       r
    rettype  u64
    load     u64       &qq_tables.exprendset
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u8  /1                     
    jumpf    u8        #3305            
    load     u64       p                
    jumpret  u64       #3303            
#3305: 
    setcall  u64 /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.readandterms
    store    u64       p                
    jump               #3307            
#3306: 
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       pos              
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       6                
    jumpne   i64       #3310            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /3                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readexpression
    setarg   u64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     i64       81               
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
    load     i64       pos              
    load     u64       p                
    load     i64       4                
    istorex  i32 /1                     
    jump               #3308            
#3310: 
    setcall  u64 /3                     
    setcall  u64 /1                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readterm2
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.readandterms
    setarg   u64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     i64       73               
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
    load     i64       pos              
    load     u64       p                
    load     i64       4                
    istorex  i32 /1                     
#3307: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       30               
    jumpeq   i64       #3306            
#3308: 
    jump               #3312            
#3311: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readterm2
    double                              
    store    u64       r                
    store    u64       q                
    load     u64       q                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       26               
    jumpne   i64       #3315            
    load     u64       q                
    load     i64       24               
    iloadx   u64 /1                     
    store    u64       r                
    jump               #3319            
#3316: 
    load     u64       r                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       r                
#3319: 
    load     u64       r                
    load     i64       8                
    iloadx   u64 /1                     
    jumpt    u64       #3316            
    load     u64       p                
    load     u64       r                
    load     i64       8                
    istorex  u64 /1                     
    load     u64       q                
    store    u64       p                
    jump               #3314            
#3315: 
    setcall  u64 /3/1                   
    load     u64       p                
    setarg   u64 /3                     
    load     u64       q                
    setarg   u64 /2                     
    load     i64       26               
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
#3314: 
#3312: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       8                
    jumpeq   i64       #3311            
    load     u64       p                
    jumpret  u64       #3303            
#3303: 
    retfn    u64                        
endproc

proc qq_parse.readandterms:
    param    u64       p
    local    i64       pos
    rettype  u64
    setcall  u64 /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.readcmpterms
    store    u64       p                
    jump               #3322            
#3321: 
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       pos              
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       6                
    jumpne   i64       #3325            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /3                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readexpression
    setarg   u64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     i64       80               
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
    load     i64       pos              
    load     u64       p                
    load     i64       4                
    istorex  i32 /1                     
    jump               #3323            
#3325: 
    setcall  u64 /3                     
    setcall  u64 /1                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readterm2
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.readcmpterms
    setarg   u64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     i64       72               
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
    load     i64       pos              
    load     u64       p                
    load     i64       4                
    istorex  i32 /1                     
#3322: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       29               
    jumpeq   i64       #3321            
#3323: 
    load     u64       p                
    jumpret  u64       #3320            
#3320: 
    retfn    u64                        
endproc

proc qq_parse.readcmpterms:
    param    u64       p
    local    i64       pos
    local    i64       n
    local    u64       px
    local    u64       q
    local    u32       conds
    rettype  u64
    setcall  u64 /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.readinterms
    store    u64       p                
    load     u64       &qq_tables.cmpopset
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u8  /1                     
    jumpt    u8        #3328            
    load     u64       p                
    jumpret  u64       #3326            
#3328: 
    load     u64       &conds           
    clear    u32                        
    load     u64       p                
    store    u64       px               
    setcall  u64 /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     i64       38               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
    load     i64       0                
    store    i64       n                
    jump               #3330            
#3329: 
    load     u64 /1    &n               
    incrto   i64 /1                     
    load     i64       n                
    load     i64       4                
    jumple   i64       #3333            
    setcall      /1/1                   
    load     u64       "cmpchain: Too many items"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3333: 
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    load     u64       &conds           
    load     i64       n                
    istorex  u8  /1/-1                  
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       pos              
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /1                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readterm2
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.readinterms
    store    u64       q                
    load     u64       q                
    load     u64       px               
    load     i64       8                
    istorex  u64 /1                     
    load     u64       q                
    store    u64       px               
    load     i64       pos              
    load     u64       q                
    load     i64       4                
    istorex  i32 /1                     
#3330: 
    load     u64       &qq_tables.cmpopset
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u8  /1                     
    jumpt    u8        #3329            
    load     i64       n                
    load     i64       1                
    jumpne   i64       #3335            
    load     i64       71               
    load     u64       p                
    load     i64       0                
    istorex  u8  /1                     
    load     u64       &conds           
    load     i64       1                
    iloadx   u8  /1/-1                  
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       p                
    load     i64       24               
    istorex  u64 /1                     
    load     u64       0                
    load     u64       q                
    load     i64       8                
    istorex  u64 /1                     
    jump               #3334            
#3335: 
    load     u32       conds            
    load     u64       p                
    load     i64       24               
    istorex  u32 /1                     
#3334: 
    load     u64       p                
    jumpret  u64       #3326            
#3326: 
    retfn    u64                        
endproc

proc qq_parse.readinterms:
    param    u64       p
    local    i64       pos
    local    i64       tag
    local    i64       flag
    rettype  u64
    setcall  u64 /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.readrangeterm
    store    u64       p                
#3337: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       39               
    jumpeq   i64 /1    #3339            
    load     i64       40               
    jumpeq   i64       #3339            
    jump               #3340            
#3339: 
    startmx                             
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       39               
    jumpne   i64       #3342            
    load     i64       76               
    resetmx  i64                        
    jump               #3341            
#3342: 
    load     i64       77               
    endmx    i64                        
#3341: 
    store    i64       tag              
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       flag             
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       pos              
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /3                     
    setcall  u64 /1                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readterm2
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.readrangeterm
    setarg   u64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     i64       tag              
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
    load     i64       flag             
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
    load     i64       pos              
    load     u64       p                
    load     i64       4                
    istorex  i32 /1                     
    jump               #3337            
#3340: 
    jump               #3338            
    jump               #3337            
#3338: 
    load     u64       p                
    jumpret  u64       #3336            
#3336: 
    retfn    u64                        
endproc

proc qq_parse.readrangeterm:
    param    u64       p
    local    i64       pos
    rettype  u64
    setcall  u64 /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.readaddterms
    store    u64       p                
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       20               
    jumpne   i64       #3345            
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       pos              
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /3                     
    setcall  u64 /1                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readterm2
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.readaddterms
    setarg   u64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     i64       87               
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
    load     i64       pos              
    load     u64       p                
    load     i64       4                
    istorex  i32 /1                     
#3345: 
    load     u64       p                
    jumpret  u64       #3343            
#3343: 
    retfn    u64                        
endproc

proc qq_parse.readaddterms:
    param    u64       p
    local    i64       pos
    local    i64       opc
    local    i64       a
    local    i64       b
    local    i64       tag
    local    u64       q
    rettype  u64
    setcall  u64 /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.readmulterms
    store    u64       p                
    jump               #3348            
#3347: 
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       opc              
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       19               
    jumpne   i64       #3351            
    load     i64       119              
    store    i64       opc              
#3351: 
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       pos              
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       6                
    jumpne   i64       #3353            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     i64       opc              
    load     i64       119              
    jumpne   i64       #3355            
    load     i64       84               
    store    i64       tag              
    jump               #3354            
#3355: 
    load     i64       opc              
    load     i64       118              
    jumpne   i64       #3356            
    load     i64       85               
    store    i64       tag              
    jump               #3354            
#3356: 
    load     i64       79               
    store    i64       tag              
#3354: 
    setcall  u64 /3                     
    setcall  u64 /1                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readterm2
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.readassignment
    setarg   u64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     i64       tag              
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
    load     i64       opc              
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
    load     i64       pos              
    load     u64       p                
    load     i64       4                
    istorex  i32 /1                     
    jump               #3349            
#3353: 
    setcall  u64 /1                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readterm2
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.readmulterms
    store    u64       q                
    setcall  u64 /3/1                   
    load     u64       q                
    setarg   u64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     i64       63               
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
    load     i64       opc              
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
    load     i64       pos              
    load     u64       p                
    load     i64       4                
    istorex  i32 /1                     
#3348: 
    load     u64       &qq_tables.addopset
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u8  /1                     
    jumpt    u8        #3347            
#3349: 
    load     u64       p                
    jumpret  u64       #3346            
#3346: 
    retfn    u64                        
endproc

proc qq_parse.readmulterms:
    param    u64       p
    local    i64       pos
    local    i64       opc
    local    i64       a
    local    i64       b
    local    u64       q
    rettype  u64
    setcall  u64 /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.readpowerterms
    store    u64       p                
    jump               #3359            
#3358: 
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       opc              
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       pos              
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       6                
    jumpne   i64       #3362            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /3                     
    setcall  u64 /1                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readterm2
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.readassignment
    setarg   u64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     i64       79               
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
    load     i64       opc              
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
    load     i64       pos              
    load     u64       p                
    load     i64       4                
    istorex  i32 /1                     
    jump               #3360            
#3362: 
    setcall  u64 /3                     
    setcall  u64 /1                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readterm2
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.readpowerterms
    setarg   u64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     i64       63               
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
    load     i64       opc              
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
    load     i64       pos              
    load     u64       p                
    load     i64       4                
    istorex  i32 /1                     
#3359: 
    load     u64       &qq_tables.mulopset
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u8  /1                     
    jumpt    u8        #3358            
#3360: 
    load     u64       p                
    jumpret  u64       #3357            
#3357: 
    retfn    u64                        
endproc

proc qq_parse.readpowerterms:
    param    u64       p
    local    i64       pos
    rettype  u64
    jump               #3365            
#3364: 
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       pos              
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /3                     
    setcall  u64 /1                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readterm2
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.readpowerterms
    setarg   u64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     i64       63               
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
    load     i64       121              
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
    load     i64       pos              
    load     u64       p                
    load     i64       4                
    istorex  i32 /1                     
#3365: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       41               
    jumpeq   i64       #3364            
    load     u64       p                
    jumpret  u64       #3363            
#3363: 
    retfn    u64                        
endproc

proc qq_parse.readterm2:
    local    u64       p
    local    i64       pos
    rettype  u64
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       pos              
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readterm
    store    u64       p                
    setcall  u64 /2/1                   
    load     i64       pos              
    setarg   i64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callf    u64 /2    &qq_parse.readtermsuffix
    store    u64       p                
    load     u64       p                
    jumpret  u64       #3367            
#3367: 
    retfn    u64                        
endproc

proc qq_parse.readtermsuffix:
    param    u64       p
    param    i64       pos
    local    u64       q
    local    u64       r
    local    u64       pbyte
    local    u64       a
    local    i64       opc
    local    i64       oldipl
    local    i64       shift
    local    i64       t
    local    i64       nparams
    rettype  u64
#3369: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       9                
    jumpeq   i64 /1    #3371            
    load     i64       15               
    jumpeq   i64 /1    #3372            
    load     i64       11               
    jumpeq   i64 /1    #3373            
    load     i64       2                
    jumpeq   i64 /1    #3374            
    load     i64       13               
    jumpeq   i64 /1    #3375            
    load     i64       5                
    jumpeq   i64 /1    #3376            
    load     i64       60               
    jumpeq   i64       #3377            
    jump               #3378            
#3371: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       &nparams         
    setarg   u64 /1                     
    callf    u64 /2    &qq_parse.readslist
    store    u64       q                
    setcall      /1/1                   
    load     i64       10               
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
    setcall  u64 /3/1                   
    load     u64       q                
    setarg   u64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     i64       26               
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
    setcall  u64 /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.readcondsuffix
    store    u64       p                
    jump               #3369            
#3372: 
    setcall  u64 /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     i64       51               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3369            
#3373: 
    setcall  u64 /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callf    u64 /2    &qq_parse.readindex
    store    u64       p                
    jump               #3369            
#3374: 
    setcall  u64 /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.readdotsuffix
    store    u64       p                
    jump               #3369            
#3375: 
    setcall  u64 /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.readkeyindex
    store    u64       p                
    jump               #3369            
#3376: 
    load     i64       qq_parse.listtype
    load     i64       331808391504     
    jumpeq   i64 /1    #3380            
    load     i64       1413695812       
    jumpeq   i64       #3381            
    jump               #3382            
#3380: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /3                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readexpression
    setarg   u64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     i64       3                
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
    jump               #3379            
#3381: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /3                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readexpression
    setarg   u64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     i64       4                
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
    jump               #3379            
#3382: 
    jump               #3370            
#3379: 
    jump               #3369            
#3377: 
    setcall  u64 /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     i64       61               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3369            
#3378: 
    jump               #3370            
    jump               #3369            
#3370: 
    load     i64       pos              
    load     u64       p                
    load     i64       4                
    istorex  i32 /1                     
    load     u64       p                
    jumpret  u64       #3368            
#3368: 
    retfn    u64                        
endproc

proc qq_parse.readterm:
    local    u64       p
    local    u64       q
    local    u64       r
    local    u64       pbyte
    local    u64       a
    local    i64       oldipl
    local    i64       opc
    local    i64       oldinrp
    local    i64       pos
    local    i64       shift
    local    i64       t
    local    i64       nparams
    local    i64       length
    local    u8       flag
    local    u64       s
    local    mem:20       ustr
    rettype  u64
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       pos              
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    switch   i64 /2/132  #3385          
    opnd     i64       #3386            
#3385: 
    swlabel            #3454            
    swlabel            #3386            
    swlabel            #3386            
    swlabel            #3386            
    swlabel            #3386            
    swlabel            #3386            
    swlabel            #3386            
    swlabel            #3395            
    swlabel            #3386            
    swlabel            #3431            
    swlabel            #3386            
    swlabel            #3480            
    swlabel            #3386            
    swlabel            #3439            
    swlabel            #3386            
    swlabel            #3386            
    swlabel            #3471            
    swlabel            #3439            
    swlabel            #3386            
    swlabel            #3386            
    swlabel            #3401            
    swlabel            #3404            
    swlabel            #3428            
    swlabel            #3428            
    swlabel            #3428            
    swlabel            #3428            
    swlabel            #3428            
    swlabel            #3428            
    swlabel            #3428            
    swlabel            #3428            
    swlabel            #3428            
    swlabel            #3428            
    swlabel            #3428            
    swlabel            #3428            
    swlabel            #3432            
    swlabel            #3428            
    swlabel            #3428            
    swlabel            #3428            
    swlabel            #3428            
    swlabel            #3428            
    swlabel            #3386            
    swlabel            #3428            
    swlabel            #3428            
    swlabel            #3428            
    swlabel            #3428            
    swlabel            #3428            
    swlabel            #3428            
    swlabel            #3417            
    swlabel            #3412            
    swlabel            #3417            
    swlabel            #3412            
    swlabel            #3412            
    swlabel            #3412            
    swlabel            #3427            
    swlabel            #3435            
    swlabel            #3428            
    swlabel            #3386            
    swlabel            #3386            
    swlabel            #3424            
    swlabel            #3386            
    swlabel            #3386            
    swlabel            #3388            
    swlabel            #3391            
    swlabel            #3389            
    swlabel            #3392            
    swlabel            #3390            
    swlabel            #3386            
    swlabel            #3387            
    swlabel            #3396            
    swlabel            #3386            
    swlabel            #3460            
    swlabel            #3386            
    swlabel            #3386            
    swlabel            #3386            
    swlabel            #3386            
    swlabel            #3386            
    swlabel            #3386            
    swlabel            #3386            
    swlabel            #3461            
    swlabel            #3462            
    swlabel            #3386            
    swlabel            #3386            
    swlabel            #3463            
    swlabel            #3464            
    swlabel            #3386            
    swlabel            #3465            
    swlabel            #3466            
    swlabel            #3467            
    swlabel            #3386            
    swlabel            #3469            
    swlabel            #3470            
    swlabel            #3468            
    swlabel            #3459            
    swlabel            #3462            
    swlabel            #3471            
    swlabel            #3438            
    swlabel            #3472            
    swlabel            #3386            
    swlabel            #3386            
    swlabel            #3386            
    swlabel            #3386            
    swlabel            #3386            
    swlabel            #3386            
    swlabel            #3386            
    swlabel            #3386            
    swlabel            #3386            
    swlabel            #3386            
    swlabel            #3386            
    swlabel            #3386            
    swlabel            #3386            
    swlabel            #3386            
    swlabel            #3386            
    swlabel            #3454            
    swlabel            #3386            
    swlabel            #3386            
    swlabel            #3473            
    swlabel            #3386            
    swlabel            #3474            
    swlabel            #3386            
    swlabel            #3444            
    swlabel            #3445            
    swlabel            #3479            
    swlabel            #3386            
    swlabel            #3455            
    swlabel            #3456            
    swlabel            #3475            
    swlabel            #3386            
    swlabel            #3476            
    swlabel            #3477            
    swlabel            #3478            
    swlabel            #3428            
    endsw                               
#3387: 
    setcall  u64 /1/1                   
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /1    &qq_lib.createname
    store    u64       p                
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    load     u64       p                
    load     i64       4                
    istorex  i32 /1                     
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3384            
#3388: 
    setcall  u64 /1/1                   
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callf    u64 /1    &qq_lib.createintunit
    store    u64       p                
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3384            
#3389: 
    setcall  u64 /1/1                   
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   r64 /1                     
    setarg   r64 /1                     
    callf    u64 /1    &qq_lib.createrealunit
    store    u64       p                
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3384            
#3390: 
    setcall  u64 /2/1                   
    load     i64       -1               
    setarg   i64 /2                     
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /2    &qq_lib.createstringunit
    store    u64       p                
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3384            
#3391: 
    setcall  u64 /2/1                   
    load     i64       -1               
    setarg   i64 /2                     
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /2    &qq_lib.createstringunit
    store    u64       p                
    load     i64       44               
    load     u64       p                
    load     i64       0                
    istorex  u8  /1                     
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3384            
#3392: 
    setcall  i64 /1/1                   
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    store    i64       length           
    load     i64       0                
    load     u64       &ustr            
    load     i64       0                
    istorex  i64 /1                     
    load     i64       length           
    load     i64       8                
    jumple   i64       #3394            
    setcall      /1/1                   
    load     u64       "char const too long"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3394: 
    setcall      /3/1                   
    load     i64       length           
    setarg   u64 /3                     
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       &ustr            
    setarg   u64 /1                     
    callp        /3    &memcpy          
    setcall  u64 /1/1                   
    load     u64       &ustr            
    load     i64       0                
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callf    u64 /1    &qq_lib.createintunit
    store    u64       p                
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3384            
#3395: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readlbrack
    store    u64       p                
    jump               #3384            
#3396: 
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #3398            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       2                
    jumpne   i64       #3400            
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       108              
    jumpne   i64       #3400            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /1/1                   
    load     i64       34               
    setarg   i64 /1                     
    callf    u64 /1    &qq_lib.createunit0
    store    u64       p                
    load     i64       0                
    load     u64       p                
    load     i64       24               
    istorex  i16 /1                     
    jump               #3399            
#3400: 
    setcall  u64 /1/1                   
    load     i64       53               
    setarg   i64 /1                     
    callf    u64 /1    &qq_lib.createunit0
    store    u64       p                
#3399: 
    jump               #3397            
#3398: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readcast
    store    u64       p                
#3397: 
    jump               #3384            
#3401: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.checkoperator
    store    u64       p                
    load     u64       p                
    jumpt    u64       #3403            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readterm2
    store    u64       p                
#3403: 
    jump               #3384            
#3404: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.checkoperator
    store    u64       p                
    load     u64       p                
    jumpt    u64       #3406            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       6                
    jumpne   i64       #3408            
    load     i64       75               
    store    i64       opc              
    jump               #3409            
#3408: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readterm2
    store    u64       p                
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       41               
    jumpne   i64       #3411            
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    neg      i64                        
    load     u64       p                
    load     i64       16               
    istorex  i64 /1                     
    jump               #3410            
#3411: 
    setcall  u64 /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     i64       62               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
    load     i64       75               
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
#3410: 
#3406: 
    jump               #3384            
#3412: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.checkoperator
    store    u64       p                
    load     u64       p                
    jumpt    u64       #3414            
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       opc              
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       6                
    jumpne   i64       #3416            
! qq_parse.readterm.dounaryto:
#3409: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /2                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readterm2
    setarg   u64 /2                     
    load     i64       78               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
    load     i64       opc              
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
    jump               #3415            
#3416: 
    setcall  u64 /2                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readterm2
    setarg   u64 /2                     
    load     i64       62               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
    load     i64       opc              
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
#3415: 
#3414: 
    jump               #3384            
#3417: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.checkoperator
    store    u64       p                
    load     u64       p                
    jumpt    u64       #3419            
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       opc              
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       6                
    jumpne   i64       #3421            
    startmx                             
    load     i64       opc              
    load     i64       74               
    jumpne   i64       #3423            
    load     i64       82               
    resetmx  i64                        
    jump               #3422            
#3423: 
    load     i64       83               
    endmx    i64                        
#3422: 
    store    i64       opc              
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
#3421: 
    setcall  u64 /2                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readterm2
    setarg   u64 /2                     
    load     i64       opc              
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
#3419: 
    jump               #3384            
#3424: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.checkoperator
    store    u64       p                
    load     u64       p                
    jumpt    u64       #3426            
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       opc              
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /2                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readterm2
    setarg   u64 /2                     
    load     i64       60               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
    load     i64       opc              
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
#3426: 
    jump               #3384            
#3427: 
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       opc              
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /2                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readterm2
    setarg   u64 /2                     
    load     i64       64               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
    load     i64       opc              
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
    jump               #3384            
#3428: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.checkoperator
    double                              
    store    u64       p                
    jumpt    u64       #3430            
    setcall      /1/1                   
    load     u64       "Operator?"      
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3430: 
    jump               #3384            
#3431: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readset
    store    u64       p                
    jump               #3384            
#3432: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.checkoperator
    double                              
    store    u64       p                
    jumpf    u64       #3434            
    jump               #3433            
#3434: 
    setcall  u64 /2/1                   
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     i64       63               
    setarg   i64 /1                     
    callf    u64 /2    &qq_parse.readpair
    store    u64       p                
#3433: 
    jump               #3384            
#3435: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.checkoperator
    double                              
    store    u64       p                
    jumpf    u64       #3437            
    jump               #3436            
#3437: 
    setcall  u64 /2/1                   
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     i64       65               
    setarg   i64 /1                     
    callf    u64 /2    &qq_parse.readpair
    store    u64       p                
#3436: 
    jump               #3384            
#3438: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readsprint
    store    u64       p                
    jump               #3384            
#3439: 
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    store    u8        flag             
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /2                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readterm2
    setarg   u64 /2                     
    load     i64       52               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
    load     u8        flag             
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       26               
    jumpne   i64       #3441            
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    load     i64       24               
    iloadx   u64 /1                     
    jumpf    u64       #3443            
    setcall      /1/1                   
    load     u64       "Params not allowed"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3443: 
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   u64 /1                     
    load     u64       p                
    load     i64       16               
    istorex  u64 /1                     
#3441: 
    jump               #3384            
#3444: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readcompilervar
    store    u64       p                
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3384            
#3445: 
    load     i64       qq_parse.intabledata
    jumpf    i64       #3447            
    load     u64       qq_parse.tabledataname
    load     u64       0                
    jumpne   u64       #3449            
    setcall      /1/1                   
    load     u64       "$:No enum"      
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3449: 
    load     u64       qq_parse.tabledataname
    store    u64       s                
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       22               
    jumpne   i64       #3451            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall      /1/1                   
    load     i64       63               
    setarg   i64 /1                     
    callp        /1    &qq_lib.checksymbol
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   i64 /1                     
    load     u64 /1    &s               
    addpxto  u64 /1                     
#3451: 
    setcall  u64 /2/1                   
    load     i64       -1               
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /2    &qq_lib.createstringunit
    store    u64       p                
    jump               #3446            
#3447: 
    load     i64       qq_parse.ndollar 
    load     i64       0                
    jumpgt   i64       #3453            
    setcall      /1/1                   
    load     u64       "[$] No array"   
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3453: 
    setcall  u64 /2/1                   
    load     u64       &qq_parse.dollarstack
    load     i64       qq_parse.ndollar 
    iloadx   u64 /8/-8                  
    setarg   u64 /2                     
    load     i64       66               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
    load     i64       89               
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
#3446: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3384            
#3454: 
    setcall      /1/1                   
    load     i64       69               
    setarg   i64 /1                     
    callp        /1    &qq_parse.lexchecksymbol
    setcall  u64 /1/1                   
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /1    &qq_lib.createname
    store    u64       p                
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    load     u64       p                
    load     i64       4                
    istorex  i32 /1                     
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3384            
#3455: 
    setcall  u64 /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       37               
    setarg   i64 /1                     
    callf    u64 /2    &qq_parse.readpair
    store    u64       p                
    jump               #3384            
#3456: 
    setcall      /1/1                   
    load     i64       9                
    setarg   i64 /1                     
    callp        /1    &qq_parse.lexchecksymbol
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       p                
    setcall      /1/1                   
    load     i64       3                
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       q                
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       10               
    jumpne   i64       #3458            
    load     u64       q                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       87               
    jumpne   i64       #3458            
    load     u64       q                
    load     i64       24               
    iloadx   u64 /1                     
    store    u64       r                
    load     u64       q                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       q                
    jump               #3457            
#3458: 
    setcall      /1/1                   
    load     i64       3                
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       r                
    setcall      /1/1                   
    load     i64       10               
    setarg   i64 /1                     
    callp        /1    &qq_lib.checksymbol
#3457: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /3/1                   
    load     u64       q                
    setarg   u64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     i64       63               
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       q                
    load     i64       117              
    load     u64       q                
    load     i64       1                
    istorex  u8  /1                     
    setcall  u64 /3/1                   
    load     u64       r                
    setarg   u64 /3                     
    load     u64       q                
    setarg   u64 /2                     
    load     i64       63               
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
    load     i64       116              
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
    jump               #3384            
#3459: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readgoto
    store    u64       p                
    jump               #3384            
#3460: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readif 
    store    u64       p                
    jump               #3384            
#3461: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readunless
    store    u64       p                
    jump               #3384            
#3462: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readswitchcase
    store    u64       p                
    jump               #3384            
#3463: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readfor
    store    u64       p                
    jump               #3384            
#3464: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readto 
    store    u64       p                
    jump               #3384            
#3465: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readdo 
    store    u64       p                
    jump               #3384            
#3466: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readwhile
    store    u64       p                
    jump               #3384            
#3467: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readrepeat
    store    u64       p                
    jump               #3384            
#3468: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readloopcontrol
    store    u64       p                
    jump               #3384            
#3469: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readreturn
    store    u64       p                
    jump               #3384            
#3470: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readstop
    store    u64       p                
    jump               #3384            
#3471: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readprint
    store    u64       p                
    jump               #3384            
#3472: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readread
    store    u64       p                
    jump               #3384            
#3473: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readtry
    store    u64       p                
    jump               #3384            
#3474: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /2                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readexpression
    setarg   u64 /2                     
    load     i64       25               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
    jump               #3384            
#3475: 
    setcall  u64 /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       29               
    setarg   i64 /1                     
    callf    u64 /2    &qq_parse.readpair
    store    u64       p                
    jump               #3384            
#3476: 
    setcall  u64 /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       0                
    setarg   u64 /1                     
    callf    u64 /2    &qq_parse.readhostparams
    store    u64       p                
    jump               #3384            
#3477: 
    setcall  u64 /1/1                   
    load     i64       28               
    setarg   i64 /1                     
    callf    u64 /1    &qq_lib.createunit0
    store    u64       p                
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3384            
#3478: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /2                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readterm2
    setarg   u64 /2                     
    load     i64       45               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
    jump               #3384            
#3479: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /2                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readexpression
    setarg   u64 /2                     
    load     i64       33               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
    jump               #3384            
#3480: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readlambda
    store    u64       p                
    jump               #3384            
#3386: 
! qq_parse.readterm.error:
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /2/1                   
    load     u64       "d"              
    setarg   u64 /2                     
    load     u64       &qq_tables.symbolnames
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8/-8                  
    setarg   u64 /1                     
    callp        /2    &msysc.m$print_u64
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       "readterm?"      
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3384: 
    load     i64       pos              
    load     u64       p                
    load     i64       4                
    istorex  i32 /1                     
    load     u64       p                
    jumpret  u64       #3383            
#3383: 
    retfn    u64                        
endproc

proc qq_parse.readsunit:
    param    i64       inwhile
    local    i64       lineno
    local    i64       m
    local    i64       globalflag
    local    i64       staticflag
    local    u64       ulist
    local    u64       ulistx
    local    u64       p
    local    u64       q
    local    u64       r
    local    u64       stname
    rettype  u64
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       lineno           
    load     u64       0                
    double                              
    store    u64       ulistx           
    store    u64       ulist            
    load     i64       0                
    store    i64       globalflag       
    load     i64       0                
    store    i64       staticflag       
#3483: 
    jump               #3487            
#3486: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
#3487: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       4                
    jumpeq   i64       #3486            
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    switch   i64 /4/124  #3490          
    opnd     i64       #3491            
#3490: 
    swlabel            #3523            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3510            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3510            
    swlabel            #3524            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3510            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3509            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3511            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3510            
    swlabel            #3510            
    swlabel            #3510            
    swlabel            #3510            
    swlabel            #3510            
    swlabel            #3491            
    swlabel            #3510            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3510            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3516            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3510            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3496            
    swlabel            #3496            
    swlabel            #3491            
    swlabel            #3505            
    swlabel            #3505            
    swlabel            #3491            
    swlabel            #3519            
    swlabel            #3519            
    swlabel            #3507            
    swlabel            #3504            
    swlabel            #3491            
    swlabel            #3497            
    swlabel            #3508            
    swlabel            #3491            
    swlabel            #3501            
    swlabel            #3493            
    swlabel            #3492            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3510            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3491            
    swlabel            #3506            
    endsw                               
#3492: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     i64       1                
    store    i64       staticflag       
    jump               #3483            
    jump               #3489            
#3493: 
    load     i64       globalflag       
    jumpf    i64       #3495            
    setcall      /1/1                   
    load     u64       "global global?" 
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3495: 
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       globalflag       
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3483            
    jump               #3489            
#3496: 
    setcall      /1/1                   
    load     i64       globalflag       
    setarg   i64 /1                     
    callp        /1    &qq_parse.readprocdef
    load     i64       0                
    store    i64       globalflag       
    jump               #3489            
#3497: 
    setcall  u64 /2/1                   
    load     i64       staticflag       
    setarg   i64 /2                     
    load     i64       globalflag       
    setarg   i64 /1                     
    callf    u64 /2    &qq_parse.readvardef
    store    u64       q                
    jump               #3499            
#3498: 
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       r                
    load     u64       0                
    load     u64       q                
    load     i64       8                
    istorex  u64 /1                     
    setcall      /3/1                   
    load     u64       q                
    setarg   u64 /3                     
    load     u64       &ulistx          
    setarg   u64 /2                     
    load     u64       &ulist           
    setarg   u64 /1                     
    callp        /3    &qq_lib.addlistunit
    load     u64       r                
    store    u64       q                
#3499: 
    load     u64       q                
    jumpt    u64       #3498            
    load     i64       0                
    double                              
    store    i64       staticflag       
    store    i64       globalflag       
    jump               #3489            
#3501: 
    load     i64       staticflag       
    jumpf    i64       #3503            
    setcall      /1/1                   
    load     u64       "static?"        
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3503: 
    setcall      /1/1                   
    load     i64       globalflag       
    setarg   i64 /1                     
    callp        /1    &qq_parse.readconstdef
    load     i64       0                
    store    i64       globalflag       
    jump               #3489            
#3504: 
    setcall      /1/1                   
    load     i64       globalflag       
    setarg   i64 /1                     
    callp        /1    &qq_parse.readtypedef
    load     i64       0                
    store    i64       globalflag       
    jump               #3489            
#3505: 
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     i64       globalflag       
    setarg   i64 /1                     
    callp        /2    &qq_parse.readrecorddef
    load     i64       0                
    store    i64       globalflag       
    jump               #3489            
#3506: 
    setcall      /1/1                   
    load     i64       globalflag       
    setarg   i64 /1                     
    callp        /1    &qq_parse.readtabledef
    load     i64       0                
    store    i64       globalflag       
    jump               #3489            
#3507: 
    setcall      /0/1                   
    callp        /0    &qq_parse.readimportdll
    jump               #3489            
#3508: 
    setcall      /1/1                   
    load     i64       globalflag       
    setarg   i64 /1                     
    callp        /1    &qq_parse.readmacrodef
    load     i64       0                
    store    i64       globalflag       
    jump               #3489            
#3509: 
    jump               #3485            
    jump               #3489            
#3510: 
    jump               #3485            
    jump               #3489            
#3511: 
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       5                
    jumpeq   i64       #3513            
    jump               #3514            
#3513: 
    setcall  u64 /2                     
    setcall  u64 /1                     
    setcall  u64 /4                     
    load     i64       0                
    setarg   i64 /4                     
    load     i64       17               
    setarg   i64 /3                     
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       qq_decls.stcurrproc
    setarg   u64 /1                     
    callf    u64 /4    &qq_names.addsymbol
    setarg   u64 /1                     
    callf    u64 /1    &qq_lib.createname
    setarg   u64 /2                     
    load     i64       1                
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     i64       4                
    load     u64       &qq_decls.lx     
    load     i64       12               
    istorex  u8  /1                     
    setcall      /3/1                   
    load     u64       p                
    setarg   u64 /3                     
    load     u64       &ulistx          
    setarg   u64 /2                     
    load     u64       &ulist           
    setarg   u64 /1                     
    callp        /3    &qq_lib.addlistunit
    jump               #3512            
#3514: 
    jump               #3515            
#3512: 
    jump               #3489            
#3516: 
    load     i64       inwhile          
    jumpf    i64       #3518            
    jump               #3485            
#3518: 
    jump               #3515            
    jump               #3489            
#3519: 
#3520: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       4                
    jumpne   i64       #3520            
    jump               #3489            
#3523: 
    jump               #3489            
#3524: 
    jump               #3515            
    jump               #3489            
#3491: 
! qq_parse.readsunit.doexec:
#3515: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       p                
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       39               
    jumpne   i64       #3526            
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       69               
    jumpne   i64       #3526            
    setcall      /1/1                   
    load     u64       "Possibly var/let needed"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3526: 
    setcall      /3/1                   
    load     u64       p                
    setarg   u64 /3                     
    load     u64       &ulistx          
    setarg   u64 /2                     
    load     u64       &ulist           
    setarg   u64 /1                     
    callp        /3    &qq_lib.addlistunit
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       87               
    jumpne   i64       #3528            
    jump               #3485            
#3528: 
#3489: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       4                
    jumpeq   i64       #3483            
#3485: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       10               
    jumpeq   i64 /1    #3530            
    load     i64       73               
    jumpeq   i64 /1    #3530            
    load     i64       74               
    jumpeq   i64 /1    #3530            
    load     i64       75               
    jumpeq   i64 /1    #3530            
    load     i64       90               
    jumpeq   i64 /1    #3530            
    load     i64       83               
    jumpeq   i64 /1    #3530            
    load     i64       87               
    jumpeq   i64 /1    #3530            
    load     i64       7                
    jumpeq   i64 /1    #3530            
    load     i64       76               
    jumpeq   i64 /1    #3530            
    load     i64       77               
    jumpeq   i64 /1    #3530            
    load     i64       118              
    jumpeq   i64 /1    #3530            
    load     i64       79               
    jumpeq   i64 /1    #3530            
    load     i64       14               
    jumpeq   i64 /1    #3530            
    load     i64       3                
    jumpeq   i64 /1    #3530            
    load     i64       16               
    jumpeq   i64 /1    #3530            
    load     i64       62               
    jumpeq   i64       #3530            
    jump               #3531            
#3530: 
    jump               #3529            
#3531: 
    setcall      /1/1                   
    load     u64       "Readsunit: \";\" expected, or bad unit starter"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3529: 
    startmx                             
    load     u64       ulist            
    load     u64       0                
    jumpeq   u64       #3534            
    load     u64       ulist            
    load     i64       8                
    iloadx   u64 /1                     
    jumpf    u64       #3533            
#3534: 
    setcall  u64 /2/1                   
    load     u64       ulist            
    setarg   u64 /2                     
    load     i64       6                
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    resetmx  u64                        
    jump               #3532            
#3533: 
    load     u64       ulist            
    endmx    u64                        
#3532: 
    jumpret  u64       #3482            
#3482: 
    retfn    u64                        
endproc

proc qq_parse.checkequals:
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       43               
    jumpeq   i64       #3537            
    setcall      /1/1                   
    load     u64       "\"=\" expected" 
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3537: 
    retproc                             
endproc

proc qq_parse.readindex:
    param    u64       p
    param    i64       dot
    local    u64       q
    local    u64       plower
    local    u64       pupper
    rettype  u64
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
#3539: 
    load     i64       qq_parse.ndollar 
    load     i64       10               
    jumplt   i64       #3542            
    setcall      /1/1                   
    load     u64       "Too many nested a[$]"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3542: 
    load     u64       p                
    load     u64       &qq_parse.dollarstack
    load     u64 /1    &qq_parse.ndollar
    incrload i64 /1                     
    istorex  u64 /8/-8                  
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       q                
    load     u64 /1    &qq_parse.ndollar
    decrto   i64 /1                     
    setcall  u64 /3/1                   
    load     u64       q                
    setarg   u64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    startmx                             
    load     i64       dot              
    jumpf    i64       #3544            
    load     i64       48               
    resetmx  i64                        
    jump               #3543            
#3544: 
    load     i64       47               
    endmx    i64                        
#3543: 
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64       #3546            
    jump               #3540            
#3546: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3539            
#3540: 
    setcall      /1/1                   
    load     i64       12               
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
    load     u64       p                
    jumpret  u64       #3538            
#3538: 
    retfn    u64                        
endproc

proc qq_parse.readdotsuffix:
    param    u64       p
    local    u64       q
    local    i64       t
    local    u8       flag
    rettype  u64
    jump               #3549            
#3548: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       11               
    jumpeq   i64 /1    #3552            
    load     i64       69               
    jumpeq   i64 /1    #3553            
    load     i64       57               
    jumpeq   i64 /1    #3554            
    load     i64       108              
    jumpeq   i64 /1    #3555            
    load     i64       36               
    jumpeq   i64 /1    #3556            
    load     i64       59               
    jumpeq   i64 /1    #3557            
    load     i64       58               
    jumpeq   i64 /1    #3558            
    load     i64       122              
    jumpeq   i64       #3559            
    jump               #3560            
#3552: 
    setcall  u64 /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callf    u64 /2    &qq_parse.readindex
    store    u64       p                
    jump               #3551            
#3553: 
    setcall  u64 /3                     
    setcall  u64 /1                     
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /1    &qq_lib.createname
    setarg   u64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     i64       46               
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3551            
#3554: 
! qq_parse.readdotsuffix.doprop:
#3561: 
    setcall  u64 /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     i64       66               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3551            
#3555: 
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       34               
    jumpeq   i64       #3563            
    load     i64       1                
    store    u8        flag             
! qq_parse.readdotsuffix.dogettype:
#3564: 
    setcall  u64 /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     i64       68               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
    load     u8        flag             
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
#3563: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3551            
#3556: 
    startmx                             
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       116              
    jumpne   i64       #3566            
    load     i64       95               
    resetmx  i64                        
    jump               #3565            
#3566: 
    load     i64       96               
    endmx    i64                        
#3565: 
    load     u64       &qq_decls.lx     
    load     i64       13               
    istorex  u8  /1                     
    jump               #3561            
    jump               #3551            
#3557: 
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       98               
    jumpeq   i64 /1    #3568            
    load     i64       101              
    jumpeq   i64       #3569            
    jump               #3570            
#3568: 
    load     i64       0                
    store    u8        flag             
    jump               #3564            
    jump               #3567            
#3569: 
    load     i64       2                
    store    u8        flag             
    jump               #3564            
    jump               #3567            
#3570: 
    setcall  u64 /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     i64       70               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       118              
    setne    i64                        
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
#3567: 
    jump               #3551            
#3558: 
    setcall  u64 /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     i64       69               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       p                
    load     i64       24               
    istorex  i16 /1                     
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3551            
#3559: 
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       39               
    jumpeq   i64 /1    #3572            
    load     i64       46               
    jumpeq   i64       #3572            
    setcall      /1/1                   
    load     u64       "...name.$ needed"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3572: 
    setcall  u64 /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     i64       40               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3551            
#3560: 
    setcall      /1/1                   
    load     u64       "Unknown dot suffix"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3551: 
#3549: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       2                
    jumpeq   i64       #3548            
    load     u64       p                
    jumpret  u64       #3547            
#3547: 
    retfn    u64                        
endproc

proc qq_parse.readslist:
    param    u64       nparams
    param    i64       ftrailing
    local    u64       ulist
    local    u64       ulistx
    local    i64       oldinparamlist
    local    i64       donulls
    rettype  u64
    load     u64       0                
    double                              
    store    u64       ulistx           
    store    u64       ulist            
    load     i64       0                
    load     u64       nparams          
    istore   i64                        
    setcall      /0/1                   
    callp        /0    &qq_lib.skipsemi 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       10               
    jumpne   i64       #3575            
    load     u64       ulist            
    jumpret  u64       #3573            
#3575: 
    setcall      /1/1                   
    load     i64       331808391504     
    setarg   i64 /1                     
    callp        /1    &qq_parse.pushlisttype
    load     i64       1                
    store    i64       donulls          
#3576: 
    setcall      /0/1                   
    callp        /0    &qq_lib.skipsemi 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64 /1    #3579            
    load     i64       10               
    jumpeq   i64       #3580            
    jump               #3581            
#3579: 
    setcall      /1/1                   
    load     u64       "null comma expr not allowed"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
    jump               #3578            
#3580: 
    jump               #3577            
    jump               #3578            
#3581: 
    setcall      /3                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readexpression
    setarg   u64 /3                     
    load     u64       &ulistx          
    setarg   u64 /2                     
    load     u64       &ulist           
    setarg   u64 /1                     
    callp        /3    &qq_lib.addlistunit
    load     u64       nparams          
    incrto   i64 /1                     
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpne   i64       #3583            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       10               
    jumpne   i64       #3585            
    load     u64       nparams          
    iload    i64                        
    load     i64       1                
    jumpne   i64       #3588            
    load     i64       ftrailing        
    jumpt    i64       #3587            
#3588: 
    setcall      /1/1                   
    load     u64       "Trailing comma" 
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3587: 
    jump               #3577            
#3585: 
    jump               #3582            
#3583: 
    setcall      /0/1                   
    callp        /0    &qq_lib.skipsemi 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       10               
    jumpne   i64       #3590            
    jump               #3577            
#3590: 
    setcall      /1/1                   
    load     u64       "SLIST?"         
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3582: 
#3578: 
    jump               #3576            
#3577: 
    setcall      /0/1                   
    callp        /0    &qq_parse.poplisttype
    load     u64       ulist            
    jumpret  u64       #3573            
#3573: 
    retfn    u64                        
endproc

proc qq_parse.readcondsuffix:
    param    u64       p
    rettype  u64
    startmx                             
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       83               
    jumpeq   i64 /1    #3593            
    load     i64       80               
    jumpeq   i64       #3594            
    jump               #3595            
#3593: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /3                     
    setcall  u64 /2                     
    load     u64       p                
    setarg   u64 /2                     
    load     i64       6                
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    setarg   u64 /3                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readexpression
    setarg   u64 /2                     
    load     i64       7                
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    resetmx  u64                        
    jump               #3592            
#3594: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /3                     
    setcall  u64 /2                     
    load     u64       p                
    setarg   u64 /2                     
    load     i64       6                
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    setarg   u64 /3                     
    setcall  u64 /2                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readexpression
    setarg   u64 /2                     
    load     i64       74               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    setarg   u64 /2                     
    load     i64       7                
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    resetmx  u64                        
    jump               #3592            
#3595: 
    load     u64       p                
    endmx    u64                        
#3592: 
    jumpret  u64       #3591            
#3591: 
    retfn    u64                        
endproc

proc qq_parse.readkeyindex:
    param    u64       p
    local    u64       q
    rettype  u64
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       q                
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpne   i64       #3598            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    load     u64       q                
    load     i64       8                
    istorex  u64 /1                     
#3598: 
    setcall  u64 /3/1                   
    load     u64       q                
    setarg   u64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     i64       49               
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
    setcall      /1/1                   
    load     i64       14               
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
    load     u64       p                
    jumpret  u64       #3596            
#3596: 
    retfn    u64                        
endproc

proc qq_parse.readlbrack:
    local    u64       ulist
    local    u64       ulistx
    local    u64       p
    local    u64       q
    local    u64       r
    local    i64       oldirp
    local    i64       length
    local    i64       lower
    local    i64       lowerseen
    local    i64       elemtype
    local    i64       opc
    rettype  u64
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       0                
    double                              
    store    u64       ulistx           
    store    u64       ulist            
    load     i64       0                
    store    i64       length           
    load     i64       1                
    store    i64       lower            
    load     i64       0                
    store    i64       lowerseen        
    load     i64       0                
    store    i64       elemtype         
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       70               
    jumpne   i64       #3601            
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       5                
    jumpne   i64       #3601            
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       elemtype         
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
#3601: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       63               
    jumpne   i64       #3603            
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       5                
    jumpne   i64       #3603            
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   i64 /1                     
    store    i64       lower            
    load     i64       1                
    store    i64       lowerseen        
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
#3603: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       10               
    jumpeq   i64       #3605            
    jump               #3606            
#3605: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /1/1                   
    load     i64       88               
    setarg   i64 /1                     
    callf    u64 /1    &qq_lib.createunit0
    store    u64       p                
    load     i64       0                
    load     u64       p                
    load     i64       24               
    istorex  i32 /1                     
    load     i64       lower            
    load     u64       p                
    load     i64       28               
    istorex  i32 /1                     
    load     i64       elemtype         
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
    load     u64       p                
    jumpret  u64       #3599            
    jump               #3604            
#3606: 
    load     u64       &qq_tables.binopset
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u8  /1                     
    jumpt    u8        #3609            
    load     u64       &qq_tables.unaryopset
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u8  /1                     
    jumpt    u8        #3609            
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       57               
    jumpne   i64       #3608            
#3609: 
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       10               
    jumpne   i64       #3608            
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       19               
    jumpne   i64       #3611            
    load     i64       119              
    store    i64       opc              
    jump               #3610            
#3611: 
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       opc              
#3610: 
! qq_parse.readlbrack.doopc:
#3612: 
    setcall  u64 /1/1                   
    load     i64       5                
    setarg   i64 /1                     
    callf    u64 /1    &qq_lib.createunit0
    store    u64       p                
    load     i64       opc              
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall      /1/1                   
    load     i64       10               
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
    load     u64       p                
    jumpret  u64       #3599            
    jump               #3607            
#3608: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       132              
    jumpeq   i64 /1    #3614            
    load     i64       39               
    jumpeq   i64 /1    #3615            
    load     i64       40               
    jumpeq   i64       #3616            
    jump               #3617            
#3614: 
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       45               
    jumpeq   i64 /1    #3619            
    load     i64       23899            
    jumpeq   i64       #3620            
    jump               #3621            
#3619: 
    load     i64       75               
    store    i64       opc              
    jump               #3618            
#3620: 
    load     i64       130              
    store    i64       opc              
    jump               #3618            
#3621: 
    load     i64       0                
    store    i64       opc              
#3618: 
    jump               #3612            
    jump               #3613            
#3615: 
    load     i64       113              
    store    i64       opc              
    jump               #3612            
    jump               #3613            
#3616: 
    load     i64       114              
    store    i64       opc              
    jump               #3612            
    jump               #3613            
#3617: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       p                
#3613: 
#3607: 
#3604: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       10               
    jumpeq   i64 /1    #3623            
    load     i64       3                
    jumpeq   i64 /1    #3624            
    load     i64       16               
    jumpeq   i64 /1    #3625            
    load     i64       4                
    jumpeq   i64       #3626            
    jump               #3627            
#3623: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     i64       lowerseen        
    jumpf    i64       #3629            
    setcall  u64 /3                     
    load     u64       p                
    setarg   u64 /3                     
    setcall  u64 /1                     
    load     i64       lower            
    setarg   i64 /1                     
    callf    u64 /1    &qq_lib.createintunit
    setarg   u64 /2                     
    load     i64       4                
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
#3629: 
    load     u64       p                
    jumpret  u64       #3599            
    jump               #3622            
#3624: 
    load     i64       1                
    store    i64       length           
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       10               
    jumpne   i64       #3631            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     i64       88               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
    load     i64       length           
    load     u64       p                
    load     i64       24               
    istorex  i32 /1                     
    load     i64       lower            
    load     u64       p                
    load     i64       28               
    istorex  i32 /1                     
    load     i64       elemtype         
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
    load     u64       p                
    jumpret  u64       #3599            
#3631: 
    load     u64       p                
    double                              
    store    u64       ulistx           
    store    u64       ulist            
#3632: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       10               
    jumpne   i64       #3636            
    jump               #3634            
#3636: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpne   i64       #3638            
    setcall      /1/1                   
    load     u64       ", , null expr not allowed"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3638: 
    setcall      /3                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readexpression
    setarg   u64 /3                     
    load     u64       &ulistx          
    setarg   u64 /2                     
    load     u64       &ulist           
    setarg   u64 /1                     
    callp        /3    &qq_lib.addlistunit
    load     u64 /1    &length          
    incrto   i64 /1                     
    setcall      /0/1                   
    callp        /0    &qq_lib.skipsemi 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64       #3632            
#3634: 
    setcall      /1/1                   
    load     i64       10               
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
    setcall  u64 /2/1                   
    load     u64       ulist            
    setarg   u64 /2                     
    load     i64       88               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
    load     i64       length           
    load     u64       p                
    load     i64       24               
    istorex  i32 /1                     
    load     i64       lower            
    load     u64       p                
    load     i64       28               
    istorex  i32 /1                     
    load     i64       elemtype         
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
    load     u64       p                
    jumpret  u64       #3599            
    jump               #3622            
#3625: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       q                
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       16               
    jumpeq   i64 /1    #3640            
    load     i64       10               
    jumpeq   i64       #3641            
    jump               #3642            
#3640: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_parse.readsunit
    store    u64       r                
    setcall      /1/1                   
    load     i64       10               
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
    load     u64       r                
    load     u64       q                
    load     i64       8                
    istorex  u64 /1                     
    setcall  u64 /3/1                   
    load     u64       q                
    setarg   u64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     i64       7                
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    jumpret  u64       #3599            
    jump               #3639            
#3641: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /3/1                   
    load     u64       q                
    setarg   u64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     i64       7                
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    jumpret  u64       #3599            
    jump               #3639            
#3642: 
#3639: 
    setcall      /3/1                   
    load     u64       q                
    setarg   u64 /3                     
    load     u64       &ulistx          
    setarg   u64 /2                     
    load     u64       &ulist           
    setarg   u64 /1                     
    callp        /3    &qq_lib.addlistunit
    setcall      /1/1                   
    load     i64       3                
    setarg   i64 /1                     
    callp        /1    &qq_lib.checksymbol
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       16               
    jumpeq   i64       #3644            
#3645: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall      /3                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readexpression
    setarg   u64 /3                     
    load     u64       &ulistx          
    setarg   u64 /2                     
    load     u64       &ulist           
    setarg   u64 /1                     
    callp        /3    &qq_lib.addlistunit
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64       #3645            
    setcall      /1/1                   
    load     i64       16               
    setarg   i64 /1                     
    callp        /1    &qq_lib.checksymbol
    jump               #3643            
#3644: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
#3643: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       r                
    setcall      /1/1                   
    load     i64       10               
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
    load     u64       r                
    load     u64       p                
    load     i64       8                
    istorex  u64 /1                     
    setcall  u64 /3/1                   
    load     u64       ulist            
    setarg   u64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     i64       8                
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    jumpret  u64       #3599            
    jump               #3622            
#3626: 
    load     u64       p                
    double                              
    store    u64       ulistx           
    store    u64       ulist            
#3648: 
    setcall      /0/1                   
    callp        /0    &qq_lib.skipsemi 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       10               
    jumpne   i64       #3652            
    jump               #3650            
#3652: 
    setcall      /3                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readexpression
    setarg   u64 /3                     
    load     u64       &ulistx          
    setarg   u64 /2                     
    load     u64       &ulist           
    setarg   u64 /1                     
    callp        /3    &qq_lib.addlistunit
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       4                
    jumpeq   i64       #3648            
#3650: 
    setcall      /1/1                   
    load     i64       10               
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
    setcall  u64 /1/1                   
    load     u64       ulist            
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.makeblock
    jumpret  u64       #3599            
    jump               #3622            
#3627: 
    setcall      /1/1                   
    load     u64       "(x ..."         
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3622: 
    load     u64       0                
    jumpret  u64       #3599            
#3599: 
    retfn    u64                        
endproc

proc qq_parse.readif:
    local    i64       line
    local    i64       kwd
    local    i64       lineno
    local    u64       pthen
    local    u64       pcond
    local    u64       plist
    local    u64       plistx
    local    u64       pelse
    local    u64       p
    local    u64       pelsif
    rettype  u64
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       line             
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       kwd              
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_parse.readsunit
    store    u64       pcond            
    setcall      /0/1                   
    callp        /0    &qq_lib.skipsemi 
    setcall      /1/1                   
    load     i64       73               
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
    setcall  u64 /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_parse.readsunit
    store    u64       pthen            
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       74               
    jumpeq   i64 /1    #3655            
    load     i64       75               
    jumpeq   i64 /1    #3656            
    load     i64       76               
    jumpeq   i64 /1    #3657            
    load     i64       77               
    jumpeq   i64       #3657            
    jump               #3658            
#3655: 
    load     i64       72               
    load     u64       &qq_decls.lx     
    load     i64       12               
    istorex  u8  /1                     
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readif 
    store    u64       pelse            
    jump               #3654            
#3656: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_parse.readsunit
    store    u64       pelse            
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     i64       0                
    setarg   i64 /2                     
    load     i64       kwd              
    setarg   i64 /1                     
    callp        /3    &qq_parse.checkend
    jump               #3654            
#3657: 
    load     i64       kwd              
    load     u64       &qq_decls.lx     
    load     i64       12               
    istorex  u8  /1                     
    setcall  u64 /1                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readswitchcase
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.makeblock
    store    u64       pelse            
    jump               #3654            
#3658: 
    load     u64       0                
    store    u64       pelse            
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     i64       0                
    setarg   i64 /2                     
    load     i64       kwd              
    setarg   i64 /1                     
    callp        /3    &qq_parse.checkend
#3654: 
    load     u64       pelse            
    load     u64       pthen            
    load     i64       8                
    istorex  u64 /1                     
    setcall  u64 /3/1                   
    load     u64       pthen            
    setarg   u64 /3                     
    load     u64       pcond            
    setarg   u64 /2                     
    load     i64       7                
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
    load     i64       line             
    load     u64       p                
    load     i64       4                
    istorex  i32 /1                     
    load     u64       p                
    jumpret  u64       #3653            
#3653: 
    retfn    u64                        
endproc

proc qq_parse.checkend:
    param    i64       endkwd1
    param    i64       endkwd2
    param    i64       startline
    local    mem:256       str
    setcall      /0/1                   
    callp        /0    &qq_lib.skipsemi 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       79               
    jumpeq   i64       #3661            
    setcall      /1/1                   
    load     u64       "'End' expected" 
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3661: 
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    jumpf    u8        #3663            
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       endkwd1          
    jumpeq   i64 /1    #3666            
    load     i64       endkwd2          
    jumpne   i64       #3665            
#3666: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3659            
    jump               #3664            
#3665: 
! qq_parse.checkend.error:
#3667: 
    setcall  u64 /2/1                   
    load     u64       "Mismatched end "
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    load     i64       startline        
    jumpf    i64       #3669            
    setcall      /1                     
    load     u64       &str             
    setcall  i64 /1                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    addpx    u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       " (from line #)" 
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     i64       startline        
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
#3669: 
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3664: 
#3663: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       endkwd1          
    jumpeq   i64 /1    #3672            
    load     i64       endkwd2          
    jumpne   i64       #3671            
#3672: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3670            
#3671: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       4                
    jumpeq   i64       #3673            
    jump               #3667            
#3673: 
#3670: 
#3659: 
    retproc                             
endproc

proc qq_parse.readunless:
    local    i64       line
    local    u64       pcond
    local    u64       pthen
    local    u64       pelse
    local    u64       p
    rettype  u64
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       line             
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_parse.readsunit
    store    u64       pcond            
    setcall      /1/1                   
    load     i64       73               
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
    setcall  u64 /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_parse.readsunit
    store    u64       pthen            
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       75               
    jumpne   i64       #3676            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_parse.readsunit
    store    u64       pelse            
    jump               #3675            
#3676: 
    load     u64       0                
    store    u64       pelse            
#3675: 
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     i64       0                
    setarg   i64 /2                     
    load     i64       80               
    setarg   i64 /1                     
    callp        /3    &qq_parse.checkend
    load     u64       pelse            
    load     u64       pthen            
    load     i64       8                
    istorex  u64 /1                     
    setcall  u64 /3                     
    load     u64       pthen            
    setarg   u64 /3                     
    setcall  u64 /2                     
    load     u64       pcond            
    setarg   u64 /2                     
    load     i64       74               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    setarg   u64 /2                     
    load     i64       7                
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
    load     i64       line             
    load     u64       p                
    load     i64       4                
    istorex  i32 /1                     
    load     u64       p                
    jumpret  u64       #3674            
#3674: 
    retfn    u64                        
endproc

proc qq_parse.readwhile:
    local    i64       pos
    local    u64       pcond
    local    u64       pbody
    local    u64       p
    rettype  u64
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       pos              
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /1/1                   
    load     i64       1                
    setarg   i64 /1                     
    callf    u64 /1    &qq_parse.readsunit
    store    u64       pcond            
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpne   i64       #3679            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /1/1                   
    load     i64       1                
    setarg   i64 /1                     
    callf    u64 /1    &qq_parse.readsunit
    load     u64       pcond            
    load     i64       8                
    istorex  u64 /1                     
#3679: 
    setcall      /1/1                   
    load     i64       87               
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
    setcall  u64 /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_parse.readsunit
    store    u64       pbody            
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     i64       87               
    setarg   i64 /2                     
    load     i64       88               
    setarg   i64 /1                     
    callp        /3    &qq_parse.checkend
    setcall  u64 /3/1                   
    load     u64       pbody            
    setarg   u64 /3                     
    load     u64       pcond            
    setarg   u64 /2                     
    load     i64       21               
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
    load     i64       pos              
    load     u64       p                
    load     i64       4                
    istorex  i32 /1                     
    load     u64       p                
    jumpret  u64       #3677            
#3677: 
    retfn    u64                        
endproc

proc qq_parse.readrepeat:
    local    i64       pos
    local    u64       pbody
    local    u64       pcond
    local    u64       p
    rettype  u64
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       pos              
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_parse.readsunit
    store    u64       pbody            
    setcall      /1/1                   
    load     i64       90               
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       pcond            
    setcall  u64 /3/1                   
    load     u64       pcond            
    setarg   u64 /3                     
    load     u64       pbody            
    setarg   u64 /2                     
    load     i64       22               
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
    load     i64       pos              
    load     u64       p                
    load     i64       4                
    istorex  i32 /1                     
    load     u64       p                
    jumpret  u64       #3680            
#3680: 
    retfn    u64                        
endproc

proc qq_parse.readfor:
    local    i64       line
    local    i64       opc
    local    i64       down
    local    i64       isforeach
    local    u64       pstep
    local    u64       pvar
    local    u64       pcond
    local    u64       pfrom
    local    u64       pto
    local    u64       pelse
    local    u64       pbody
    local    u64       p
    local    u64       plist
    local    u64       pvar2
    rettype  u64
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       line             
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       isforeach        
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readterm2
    store    u64       pvar             
    load     u64       pvar             
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       39               
    jumpeq   i64       #3683            
    setcall      /1/1                   
    load     u64       "For: name expected"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
    jump               #3682            
#3683: 
    load     i64       1                
    load     u64       pvar             
    load     i64       16               
    iloadx   u64 /1                     
    load     i64       122              
    istorex  u8  /1                     
#3682: 
    load     i64       15               
    store    i64       opc              
    load     u64       0                
    store    u64       pstep            
    load     u64       0                
    store    u64       pcond            
    load     u64       0                
    store    u64       pvar2            
    load     i64       0                
    store    i64       down             
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpne   i64       #3685            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readterm2
    store    u64       pvar2            
#3685: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       39               
    jumpne   i64       #3687            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       plist            
    load     u64       plist            
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       87               
    jumpeq   i64 /1    #3689            
    load     i64       67               
    jumpeq   i64       #3690            
    jump               #3691            
#3689: 
    load     u64       plist            
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pfrom            
    load     u64       plist            
    load     i64       24               
    iloadx   u64 /1                     
    store    u64       pto              
    jump               #3688            
#3690: 
    load     i64       1                
    load     u64       plist            
    load     i64       1                
    istorex  u8  /1                     
    load     i64       16               
    store    i64       opc              
    jump               #3688            
#3691: 
    load     i64       17               
    store    i64       opc              
#3688: 
    jump               #3686            
#3687: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       6                
    jumpne   i64       #3693            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       pfrom            
    jump               #3692            
#3693: 
    setcall  u64 /1/1                   
    load     i64       1                
    setarg   i64 /1                     
    callf    u64 /1    &qq_lib.createintunit
    store    u64       pfrom            
#3692: 
    setcall      /1/1                   
    load     i64       85               
    setarg   i64 /1                     
    callp        /1    &qq_lib.checksymbol
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    seteq    i64                        
    store    i64       down             
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       pto              
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       86               
    jumpne   i64       #3695            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       pstep            
    load     u64       pstep            
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       41               
    jumpeq   i64       #3697            
    setcall      /1/1                   
    load     u64       "BY needs int constant"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3697: 
    load     u64       pstep            
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       0                
    jumpge   i64       #3699            
    setcall      /1/1                   
    load     u64       "Step must be positive"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
    jump               #3698            
#3699: 
    load     u64       pstep            
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       0                
    jumpne   i64       #3700            
    setcall      /1/1                   
    load     u64       "Zero step"      
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3700: 
#3698: 
    load     u64       pstep            
    load     i64       16               
    iloadx   i64 /1                     
    abs      i64                        
    load     u64       pstep            
    load     i64       16               
    istorex  i64 /1                     
    load     u64       pstep            
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       1                
    jumpne   i64       #3702            
    load     u64       0                
    store    u64       pstep            
#3702: 
#3695: 
#3686: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       83               
    jumpne   i64       #3704            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       pcond            
#3704: 
    setcall      /1/1                   
    load     i64       87               
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
    setcall  u64 /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_parse.readsunit
    store    u64       pbody            
    load     u64       pcond            
    load     u64       0                
    jumpeq   u64       #3706            
    setcall  u64 /1                     
    setcall  u64 /3                     
    load     u64       pbody            
    setarg   u64 /3                     
    load     u64       pcond            
    setarg   u64 /2                     
    load     i64       7                
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.makeblock
    store    u64       pbody            
#3706: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       75               
    jumpne   i64       #3708            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_parse.readsunit
    store    u64       pelse            
    load     u64       pelse            
    load     u64       pbody            
    load     i64       8                
    istorex  u64 /1                     
    jump               #3707            
#3708: 
    load     u64       0                
    store    u64       pelse            
#3707: 
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     i64       87               
    setarg   i64 /2                     
    load     i64       84               
    setarg   i64 /1                     
    callp        /3    &qq_parse.checkend
    load     i64       opc              
    load     i64       17               
    jumpeq   i64 /1    #3710            
    load     i64       16               
    jumpeq   i64       #3711            
    jump               #3712            
#3710: 
    load     u64       plist            
    load     u64       pvar             
    load     i64       8                
    istorex  u64 /1                     
    load     u64       pvar2            
    load     u64       plist            
    load     i64       8                
    istorex  u64 /1                     
    setcall  u64 /3/1                   
    load     u64       pbody            
    setarg   u64 /3                     
    load     u64       pvar             
    setarg   u64 /2                     
    load     i64       opc              
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
    jump               #3709            
#3711: 
    load     u64       plist            
    load     u64       pvar             
    load     i64       8                
    istorex  u64 /1                     
    setcall  u64 /3/1                   
    load     u64       pbody            
    setarg   u64 /3                     
    load     u64       pvar             
    setarg   u64 /2                     
    load     i64       opc              
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
    jump               #3709            
#3712: 
    load     u64       pfrom            
    load     u64       pvar             
    load     i64       8                
    istorex  u64 /1                     
    load     u64       pto              
    load     u64       pfrom            
    load     i64       8                
    istorex  u64 /1                     
    load     u64       pstep            
    load     u64       pto              
    load     i64       8                
    istorex  u64 /1                     
    setcall  u64 /3/1                   
    load     u64       pbody            
    setarg   u64 /3                     
    load     u64       pvar             
    setarg   u64 /2                     
    load     i64       opc              
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
#3709: 
    load     i64       down             
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
    load     i64       isforeach        
    jumpf    i64       #3714            
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       17               
    jumpne   i64       #3716            
    load     i64       18               
    load     u64       p                
    load     i64       0                
    istorex  u8  /1                     
    jump               #3715            
#3716: 
    setcall      /1/1                   
    load     u64       "Foreach?"       
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3715: 
#3714: 
    load     i64       line             
    load     u64       p                
    load     i64       4                
    istorex  i32 /1                     
    load     u64       pvar2            
    jumpf    u64       #3718            
    load     i64       opc              
    load     i64       17               
    jumpeq   i64       #3718            
    setcall      /1/1                   
    load     u64       "for i, j not allowed"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3718: 
    load     u64       p                
    jumpret  u64       #3681            
#3681: 
    retfn    u64                        
endproc

proc qq_parse.readdo:
    local    u64       p
    local    i64       line
    rettype  u64
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       line             
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_parse.readsunit
    store    u64       p                
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     i64       0                
    setarg   i64 /2                     
    load     i64       87               
    setarg   i64 /1                     
    callp        /3    &qq_parse.checkend
    setcall  u64 /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     i64       19               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
    load     i64       line             
    load     u64       p                
    load     i64       4                
    istorex  i32 /1                     
    load     u64       p                
    jumpret  u64       #3719            
#3719: 
    retfn    u64                        
endproc

proc qq_parse.readto:
    local    i64       line
    local    i64       id
    local    u64       p
    local    u64       pcount
    local    u64       pbody
    rettype  u64
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       line             
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       pcount           
    setcall      /1/1                   
    load     i64       87               
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
    setcall  u64 /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_parse.readsunit
    store    u64       pbody            
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     i64       87               
    setarg   i64 /2                     
    load     i64       85               
    setarg   i64 /1                     
    callp        /3    &qq_parse.checkend
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_lib.createavname
    load     u64       pcount           
    load     i64       8                
    istorex  u64 /1                     
    setcall  u64 /3/1                   
    load     u64       pbody            
    setarg   u64 /3                     
    load     u64       pcount           
    setarg   u64 /2                     
    load     i64       20               
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
    load     i64       line             
    load     u64       p                
    load     i64       4                
    istorex  i32 /1                     
    load     u64       p                
    jumpret  u64       #3720            
#3720: 
    retfn    u64                        
endproc

proc qq_parse.makeblock:
    param    u64       p
    rettype  u64
    setcall  u64 /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     i64       6                
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    jumpret  u64       #3721            
#3721: 
    retfn    u64                        
endproc

proc qq_parse.readvardef:
    param    i64       isglobal
    param    i64       isstatic
    local    i64       nvars
    local    i64       varid
    local    i64       opc
    local    u64       d
    local    u64       ulist
    local    u64       ulistx
    local    u64       p
    rettype  u64
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       qq_decls.stcurrproc
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       5                
    jumpeq   i64 /1    #3725            
    load     i64       6                
    jumpne   i64       #3724            
#3725: 
    startmx                             
    load     i64       isstatic         
    jumpf    i64       #3727            
    load     i64       13               
    resetmx  i64                        
    jump               #3726            
#3727: 
    load     i64       14               
    endmx    i64                        
#3726: 
    store    i64       varid            
    jump               #3723            
#3724: 
    load     i64       13               
    store    i64       varid            
#3723: 
    load     i64       0                
    store    i64       nvars            
    load     u64       0                
    double                              
    store    u64       ulistx           
    store    u64       ulist            
    jump               #3729            
#3728: 
    load     u64 /1    &nvars           
    incrto   i64 /1                     
    setcall  u64 /4/1                   
    load     i64       isglobal         
    setarg   i64 /4                     
    load     i64       varid            
    setarg   i64 /3                     
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       qq_decls.stcurrproc
    setarg   u64 /1                     
    callf    u64 /4    &qq_names.addsymbol
    store    u64       d                
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       6                
    jumpeq   i64 /1    #3732            
    load     i64       43               
    jumpeq   i64       #3733            
    jump               #3734            
#3732: 
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       opc              
    load     i64       varid            
    load     i64       13               
    jumpne   i64       #3736            
    load     u64       qq_decls.stcurrproc
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       5                
    jumpeq   i64 /1    #3739            
    load     i64       6                
    jumpne   i64       #3738            
#3739: 
    setcall      /1/1                   
    load     u64       "Need '=' for static in proc"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3738: 
#3736: 
    load     i64       opc              
    load     i64       2                
    add      u64                        
    load     u64       d                
    load     i64       120              
    addpx    u64 /1                     
    load     i64       11               
    load     i64       12               
    storebf  u16                        
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    load     u64       d                
    load     i64       88               
    istorex  u64 /1                     
    load     i64       varid            
    load     i64       14               
    jumpne   i64       #3741            
    setcall  u64 /3                     
    load     u64       d                
    load     i64       88               
    iloadx   u64 /1                     
    setarg   u64 /3                     
    setcall  u64 /1                     
    load     u64       d                
    setarg   u64 /1                     
    callf    u64 /1    &qq_lib.createname
    setarg   u64 /2                     
    load     i64       2                
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
    load     i64       opc              
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
    setcall      /3/1                   
    load     u64       p                
    setarg   u64 /3                     
    load     u64       &ulistx          
    setarg   u64 /2                     
    load     u64       &ulist           
    setarg   u64 /1                     
    callp        /3    &qq_lib.addlistunit
#3741: 
    jump               #3731            
#3733: 
    load     i64       varid            
    load     i64       13               
    jumpeq   i64       #3743            
    setcall      /1/1                   
    load     u64       "Need ':=' for non-static"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3743: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       1                
    load     u64       d                
    load     i64       120              
    addpx    u64 /1                     
    load     i64       11               
    load     i64       12               
    storebf  u16                        
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    load     u64       d                
    load     i64       88               
    istorex  u64 /1                     
    jump               #3731            
#3734: 
#3731: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64       #3745            
    jump               #3730            
#3745: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
#3729: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       69               
    jumpeq   i64       #3728            
#3730: 
    load     i64       nvars            
    load     i64       0                
    jumpne   i64       #3747            
    setcall      /1/1                   
    load     u64       "No vars declared"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3747: 
    load     u64       ulist            
    jumpret  u64       #3722            
#3722: 
    retfn    u64                        
endproc

proc qq_parse.readconstdef:
    param    i64       isglobal
    local    i64       nvars
    local    u64       d
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     i64       0                
    store    i64       nvars            
    jump               #3750            
#3749: 
    load     u64 /1    &nvars           
    incrto   i64 /1                     
    setcall  u64 /4/1                   
    load     i64       isglobal         
    setarg   i64 /4                     
    load     i64       18               
    setarg   i64 /3                     
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       qq_decls.stcurrproc
    setarg   u64 /1                     
    callf    u64 /4    &qq_names.addsymbol
    store    u64       d                
    setcall      /1/1                   
    load     i64       43               
    setarg   i64 /1                     
    callp        /1    &qq_parse.lexchecksymbol
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    load     u64       d                
    load     i64       88               
    istorex  u64 /1                     
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64       #3753            
    jump               #3751            
#3753: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
#3750: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       69               
    jumpeq   i64       #3749            
#3751: 
    load     i64       nvars            
    load     i64       0                
    jumpne   i64       #3755            
    setcall      /1/1                   
    load     u64       "No consts declared"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3755: 
    retproc                             
endproc

proc qq_parse.readreturn:
    local    u64       p
    local    u64       q
    local    u64       r
    rettype  u64
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       0                
    store    u64       q                
    load     u64       &qq_tables.exprstarterset
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u8  /1                     
    jumpf    u8        #3758            
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       q                
#3758: 
    setcall  u64 /2/1                   
    load     u64       q                
    setarg   u64 /2                     
    load     i64       32               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
    setcall  u64 /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.readcondsuffix
    jumpret  u64       #3756            
#3756: 
    retfn    u64                        
endproc

proc qq_parse.readprint:
    local    i64       opc
    local    i64       flags
    local    i64       fshowname
    local    i64       length
    local    u64       pformat
    local    u64       pdev
    local    u64       printlist
    local    u64       printlistx
    local    u64       p
    local    u64       q
    local    u64       expr
    local    u64       s
    rettype  u64
    setcall      /1/1                   
    load     i64       362090680912     
    setarg   i64 /1                     
    callp        /1    &qq_parse.pushlisttype
    load     i64       54               
    store    i64       opc              
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       flags            
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       18               
    jumpne   i64       #3761            
    load     i64       1                
    store    i64       flags            
    jump               #3760            
#3761: 
    load     i64       flags            
    load     i64       2                
    bitand   i64                        
    jumpf    i64       #3762            
    load     i64       55               
    store    i64       opc              
#3762: 
#3760: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       0                
    double                              
    store    u64       printlistx       
    store    u64       printlist        
    load     u64       0                
    double                              
    store    u64       pdev             
    store    u64       pformat          
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       17               
    jumpne   i64       #3764            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       pdev             
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpne   i64       #3766            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3765            
#3766: 
    jump               #3767            
#3765: 
#3764: 
    load     i64       opc              
    load     i64       55               
    jumpne   i64       #3769            
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       pformat          
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpne   i64       #3771            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3770            
#3771: 
    jump               #3767            
#3770: 
#3769: 
    load     u64       &qq_tables.exprstarterset
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u8  /1                     
    jumpt    u8        #3773            
    jump               #3767            
#3773: 
#3774: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64 /1    #3777            
    load     i64       122              
    jumpeq   i64       #3778            
    jump               #3779            
#3777: 
    setcall      /3                     
    setcall  u64 /1                     
    load     i64       56               
    setarg   i64 /1                     
    callf    u64 /1    &qq_lib.createunit0
    setarg   u64 /3                     
    load     u64       &printlistx      
    setarg   u64 /2                     
    load     u64       &printlist       
    setarg   u64 /1                     
    callp        /3    &qq_lib.addlistunit
    jump               #3776            
#3778: 
    setcall      /3                     
    setcall  u64 /1                     
    load     i64       57               
    setarg   i64 /1                     
    callf    u64 /1    &qq_lib.createunit0
    setarg   u64 /3                     
    load     u64       &printlistx      
    setarg   u64 /2                     
    load     u64       &printlist       
    setarg   u64 /1                     
    callp        /3    &qq_lib.addlistunit
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3776            
#3779: 
    load     i64       0                
    store    i64       fshowname        
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       43               
    jumpne   i64       #3781            
    load     i64       1                
    store    i64       fshowname        
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
#3781: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       p                
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       5                
    jumpne   i64       #3783            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /3                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readexpression
    setarg   u64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     i64       58               
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
#3783: 
    load     i64       fshowname        
    jumpf    i64       #3785            
    setcall  u64 /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callf    u64 /1    &qq_lib.strexpr  
    store    u64       expr             
    setcall      /3/1                   
    load     i64       -1               
    setarg   i64 /3                     
    load     u64       "="              
    setarg   u64 /2                     
    load     u64       expr             
    setarg   u64 /1                     
    callp        /3    &mlib.strbuffer_add
    load     u64       expr             
    load     i64       0                
    iloadx   u64 /1                     
    store    u64       s                
    setcall      /2/1                   
    load     u64       expr             
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    setarg   i64 /2                     
    load     u64       expr             
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &mlib.iconvucn   
    setcall      /3                     
    setcall  u64 /2                     
    load     u64       expr             
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /2    &qq_lib.createstringunit
    double                              
    store    u64       q                
    setarg   u64 /3                     
    load     u64       &printlistx      
    setarg   u64 /2                     
    load     u64       &printlist       
    setarg   u64 /1                     
    callp        /3    &qq_lib.addlistunit
#3785: 
    setcall      /3/1                   
    load     u64       p                
    setarg   u64 /3                     
    load     u64       &printlistx      
    setarg   u64 /2                     
    load     u64       &printlist       
    setarg   u64 /1                     
    callp        /3    &qq_lib.addlistunit
#3776: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64       #3787            
    jump               #3775            
#3787: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3774            
#3775: 
! qq_parse.readprint.finish:
#3767: 
    load     i64       flags            
    load     i64       1                
    bitand   i64                        
    jumpt    i64       #3789            
    load     i64       opc              
    load     i64       54               
    jumpne   i64       #3793            
    load     u64       printlist        
    load     u64       0                
    jumpeq   u64       #3792            
#3793: 
    load     i64       opc              
    load     i64       55               
    jumpne   i64       #3791            
    load     u64       printlist        
    load     u64       0                
    jumpne   u64       #3791            
    load     u64       pformat          
    load     u64       0                
    jumpne   u64       #3791            
#3792: 
    setcall      /1/1                   
    load     u64       "No print items" 
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3791: 
#3789: 
    setcall      /0/1                   
    callp        /0    &qq_parse.poplisttype
    load     i64       opc              
    load     i64       55               
    jumpne   i64       #3795            
    load     u64       pformat          
    load     u64       0                
    jumpne   u64       #3797            
    setcall      /1/1                   
    load     u64       "No fmt str"     
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3797: 
    load     u64       pformat          
    load     u64       0                
    jumpne   u64       #3799            
    setcall  u64 /1/1                   
    load     u64       pformat          
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.makeblock
    store    u64       pformat          
#3799: 
    load     u64       printlist        
    load     u64       pformat          
    load     i64       8                
    istorex  u64 /1                     
    setcall  u64 /3/1                   
    load     u64       pformat          
    setarg   u64 /3                     
    load     u64       pdev             
    setarg   u64 /2                     
    load     i64       opc              
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
    jump               #3794            
#3795: 
    setcall  u64 /3/1                   
    load     u64       printlist        
    setarg   u64 /3                     
    load     u64       pdev             
    setarg   u64 /2                     
    load     i64       opc              
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
#3794: 
    load     i64       flags            
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
    load     u64       p                
    jumpret  u64       #3759            
#3759: 
    retfn    u64                        
endproc

proc qq_parse.readread:
    local    i64       opc
    local    i64       flags
    local    u64       pformat
    local    u64       pdev
    local    u64       readlist
    local    u64       readlistx
    local    u64       p
    rettype  u64
    setcall      /1/1                   
    load     i64       362090680912     
    setarg   i64 /1                     
    callp        /1    &qq_parse.pushlisttype
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       flags            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       0                
    double                              
    store    u64       readlistx        
    store    u64       readlist         
    load     u64       0                
    double                              
    store    u64       pdev             
    store    u64       pformat          
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       17               
    jumpne   i64       #3802            
    load     i64       opc              
    load     i64       59               
    jumpne   i64       #3804            
    setcall      /1/1                   
    load     u64       "@ on read"      
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3804: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       pdev             
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpne   i64       #3806            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3805            
#3806: 
    jump               #3807            
#3805: 
#3802: 
    load     u64       &qq_tables.exprstarterset
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u8  /1                     
    jumpt    u8        #3809            
    jump               #3807            
#3809: 
#3810: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       p                
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       5                
    jumpne   i64       #3813            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /3                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readexpression
    setarg   u64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     i64       58               
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
#3813: 
    setcall      /3/1                   
    load     u64       p                
    setarg   u64 /3                     
    load     u64       &readlistx       
    setarg   u64 /2                     
    load     u64       &readlist        
    setarg   u64 /1                     
    callp        /3    &qq_lib.addlistunit
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64       #3815            
    jump               #3811            
#3815: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3810            
#3811: 
! qq_parse.readread.finish:
#3807: 
    load     i64       opc              
    load     i64       59               
    jumpne   i64       #3817            
    load     u64       readlist         
    load     u64       0                
    jumpne   u64       #3817            
    setcall      /1/1                   
    load     u64       "No read items"  
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3817: 
    setcall      /0/1                   
    callp        /0    &qq_parse.poplisttype
    setcall  u64 /3/1                   
    load     u64       readlist         
    setarg   u64 /3                     
    load     u64       pdev             
    setarg   u64 /2                     
    load     i64       59               
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
    load     i64       flags            
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
    load     u64       p                
    jumpret  u64       #3800            
#3800: 
    retfn    u64                        
endproc

proc qq_parse.readloopcontrol:
    local    i64       opc
    local    u64       p
    rettype  u64
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       opc              
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       69               
    jumpne   i64       #3820            
    setcall  i64 /2/1                   
    load     u64       "all"            
    setarg   u64 /2                     
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /2    &mlib.eqstring   
    jumpf    i64       #3820            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /2                     
    setcall  u64 /1                     
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_lib.createintunit
    setarg   u64 /2                     
    load     i64       50               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
    jump               #3819            
#3820: 
    load     u64       &qq_tables.exprstarterset
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u8  /1                     
    jumpf    u8        #3821            
    setcall  u64 /2                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readintunit
    setarg   u64 /2                     
    load     i64       50               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
    jump               #3819            
#3821: 
    setcall  u64 /2                     
    setcall  u64 /1                     
    load     i64       1                
    setarg   i64 /1                     
    callf    u64 /1    &qq_lib.createintunit
    setarg   u64 /2                     
    load     i64       50               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
#3819: 
    load     i64       opc              
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
    setcall  u64 /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.readcondsuffix
    jumpret  u64       #3818            
#3818: 
    retfn    u64                        
endproc

proc qq_parse.readintunit:
    local    u64       p
    rettype  u64
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       p                
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       41               
    jumpeq   i64       #3824            
    setcall      /1/1                   
    load     u64       "int expr needed"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3824: 
    load     u64       p                
    jumpret  u64       #3822            
#3822: 
    retfn    u64                        
endproc

proc qq_parse.readswitchcase:
    local    i64       pos
    local    i64       kwd
    local    i64       opc
    local    i64       lineno
    local    i64       rangeused
    local    i64       nwhen
    local    u64       pexpr
    local    u64       pwhenlist
    local    u64       pwhenlistx
    local    u64       pwhen
    local    u64       pwhenx
    local    u64       pelse
    local    u64       p
    local    u64       pthen
    local    u64       pwhenthen
    local    u64       q
    rettype  u64
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       pos              
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       kwd              
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       opc              
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall      /0/1                   
    callp        /0    &qq_lib.skipsemi 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       83               
    jumpne   i64       #3827            
    load     i64       kwd              
    load     i64       95               
    jumpne   i64       #3829            
    setcall      /1/1                   
    load     u64       "switch expr missing"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3829: 
    setcall  u64 /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_lib.createunit0
    store    u64       pexpr            
    jump               #3826            
#3827: 
    setcall  u64 /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_parse.readsunit
    store    u64       pexpr            
#3826: 
    load     u64       0                
    double                              
    store    u64       pwhenlistx       
    store    u64       pwhenlist        
    load     i64       0                
    store    i64       rangeused        
    load     i64       0                
    store    i64       nwhen            
    setcall      /0/1                   
    callp        /0    &qq_lib.skipsemi 
    jump               #3831            
#3830: 
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       pos              
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       0                
    double                              
    store    u64       pwhenx           
    store    u64       pwhen            
#3833: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       p                
    load     u64 /1    &nwhen           
    incrto   i64 /1                     
    load     i64       pos              
    load     u64       p                
    load     i64       4                
    istorex  i32 /1                     
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       87               
    jumpne   i64       #3836            
    load     i64       1                
    store    i64       rangeused        
#3836: 
    setcall      /3/1                   
    load     u64       p                
    setarg   u64 /3                     
    load     u64       &pwhenx          
    setarg   u64 /2                     
    load     u64       &pwhen           
    setarg   u64 /1                     
    callp        /3    &qq_lib.addlistunit
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64       #3838            
    jump               #3834            
#3838: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3833            
#3834: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       73               
    jumpeq   i64       #3840            
    setcall      /1/1                   
    load     i64       7                
    setarg   i64 /1                     
    callp        /1    &qq_lib.checksymbol
#3840: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_parse.readsunit
    store    u64       pthen            
    setcall  u64 /3/1                   
    load     u64       pthen            
    setarg   u64 /3                     
    load     u64       pwhen            
    setarg   u64 /2                     
    load     i64       9                
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       pwhenthen        
    load     i64       pos              
    load     u64       pwhenthen        
    load     i64       4                
    istorex  i32 /1                     
    setcall      /3/1                   
    load     u64       pwhenthen        
    setarg   u64 /3                     
    load     u64       &pwhenlistx      
    setarg   u64 /2                     
    load     u64       &pwhenlist       
    setarg   u64 /1                     
    callp        /3    &qq_lib.addlistunit
#3831: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       83               
    jumpeq   i64       #3830            
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       75               
    jumpeq   i64 /1    #3842            
    load     i64       74               
    jumpeq   i64 /1    #3843            
    load     i64       76               
    jumpeq   i64 /1    #3844            
    load     i64       77               
    jumpeq   i64       #3844            
    jump               #3845            
#3842: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_parse.readsunit
    store    u64       pelse            
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     i64       0                
    setarg   i64 /2                     
    load     i64       kwd              
    setarg   i64 /1                     
    callp        /3    &qq_parse.checkend
    jump               #3841            
#3843: 
    load     i64       kwd              
    load     u64       &qq_decls.lx     
    load     i64       12               
    istorex  u8  /1                     
    setcall  u64 /1                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readif 
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.makeblock
    store    u64       pelse            
    jump               #3841            
#3844: 
    load     i64       kwd              
    load     u64       &qq_decls.lx     
    load     i64       12               
    istorex  u8  /1                     
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readswitchcase
    store    u64       pelse            
    jump               #3841            
#3845: 
    load     u64       0                
    store    u64       pelse            
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     i64       0                
    setarg   i64 /2                     
    load     i64       kwd              
    setarg   i64 /1                     
    callp        /3    &qq_parse.checkend
#3841: 
    load     u64       pelse            
    load     u64       pexpr            
    load     i64       8                
    istorex  u64 /1                     
    setcall  u64 /3/1                   
    load     u64       pwhenlist        
    setarg   u64 /3                     
    load     u64       pexpr            
    setarg   u64 /2                     
    load     i64       opc              
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
    load     i64       pos              
    load     u64       p                
    load     i64       4                
    istorex  i32 /1                     
    load     u64       p                
    jumpret  u64       #3825            
#3825: 
    retfn    u64                        
endproc

proc qq_parse.readgoto:
    rettype  u64
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /1                     
    setcall  u64 /2                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readexpression
    setarg   u64 /2                     
    load     i64       30               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.readcondsuffix
    jumpret  u64       #3846            
#3846: 
    retfn    u64                        
endproc

proc qq_parse.readstop:
    local    u64       p
    local    i64       i
    rettype  u64
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_tables.exprstarterset
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u8  /1                     
    jumpf    u8        #3849            
    setcall  u64 /2                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readexpression
    setarg   u64 /2                     
    load     i64       31               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
    jump               #3848            
#3849: 
    setcall  u64 /2                     
    setcall  u64 /1                     
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_lib.createintunit
    setarg   u64 /2                     
    load     i64       31               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
#3848: 
    setcall  u64 /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callf    u64 /1    &qq_parse.readcondsuffix
    jumpret  u64       #3847            
#3847: 
    retfn    u64                        
endproc

proc qq_parse.readcast:
    local    u64       p
    local    i64       t
    local    i64       opc
    local    i64       pclop
    rettype  u64
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       t                
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     i64       t                
    load     i64       4                
    jumpne   i64       #3852            
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       9                
    jumpne   i64       #3852            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       p                
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       4                
    jumpeq   i64 /1    #3855            
    load     i64       3                
    jumpne   i64       #3854            
#3855: 
    setcall      /1/1                   
    load     u64       "MAKERANGELEN"   
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
    jump               #3853            
#3854: 
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       87               
    jumpne   i64       #3856            
    jump               #3853            
#3856: 
    setcall      /1/1                   
    load     u64       "need a..b or a:n"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3853: 
    setcall      /1/1                   
    load     i64       10               
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
    load     u64       p                
    jumpret  u64       #3850            
#3852: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       17               
    jumpeq   i64 /1    #3858            
    load     i64       9                
    jumpeq   i64       #3858            
    jump               #3859            
#3858: 
    jump               #3857            
#3859: 
    setcall  u64 /1/1                   
    load     i64       34               
    setarg   i64 /1                     
    callf    u64 /1    &qq_lib.createunit0
    store    u64       p                
    load     i64       t                
    load     u64       p                
    load     i64       24               
    istorex  i16 /1                     
    load     u64       p                
    jumpret  u64       #3850            
#3857: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       17               
    jumpne   i64       #3861            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     i64       36               
    store    i64       opc              
    load     i64       100              
    store    i64       pclop            
    jump               #3860            
#3861: 
    load     i64       35               
    store    i64       opc              
    load     i64       99               
    store    i64       pclop            
#3860: 
    setcall      /1/1                   
    load     i64       9                
    setarg   i64 /1                     
    callp        /1    &qq_lib.checksymbol
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readterm
    store    u64       p                
    setcall  u64 /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     i64       opc              
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
    load     i64       pclop            
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
    setcall      /3/1                   
    load     u64       p                
    load     i64       24               
    addpx    u64 /1                     
    setarg   u64 /3                     
    load     i64       t                
    setarg   i64 /2                     
    load     u64       qq_decls.stcurrproc
    setarg   u64 /1                     
    callp        /3    &qq_lib.storemode
    load     u64       p                
    jumpret  u64       #3850            
#3850: 
    retfn    u64                        
endproc

proc qq_parse.readset:
    local    i64       length
    local    i64       nkeyvalues
    local    i64       oldinparamlist
    local    u64       p
    local    u64       ulist
    local    u64       ulistx
    rettype  u64
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       12               
    jumpeq   i64 /1    #3864            
    load     i64       5                
    jumpeq   i64       #3865            
    jump               #3866            
#3864: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     i64       89               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    jumpret  u64       #3862            
    jump               #3863            
#3865: 
    setcall      /1/1                   
    load     i64       12               
    setarg   i64 /1                     
    callp        /1    &qq_parse.lexchecksymbol
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     i64       90               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    jumpret  u64       #3862            
    jump               #3863            
#3866: 
#3863: 
    setcall      /1/1                   
    load     i64       1413695812       
    setarg   i64 /1                     
    callp        /1    &qq_parse.pushlisttype
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       p                
    load     i64       1                
    store    i64       length           
    load     i64       0                
    store    i64       nkeyvalues       
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       4                
    jumpne   i64       #3868            
    load     u64 /1    &nkeyvalues      
    incrto   i64 /1                     
#3868: 
    load     u64       p                
    double                              
    store    u64       ulistx           
    store    u64       ulist            
    jump               #3870            
#3869: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       12               
    jumpne   i64       #3873            
    jump               #3871            
#3873: 
    setcall      /3                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readexpression
    double                              
    store    u64       p                
    setarg   u64 /3                     
    load     u64       &ulistx          
    setarg   u64 /2                     
    load     u64       &ulist           
    setarg   u64 /1                     
    callp        /3    &qq_lib.addlistunit
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       4                
    jumpne   i64       #3875            
    load     u64 /1    &nkeyvalues      
    incrto   i64 /1                     
#3875: 
    load     u64 /1    &length          
    incrto   i64 /1                     
    setcall      /0/1                   
    callp        /0    &qq_lib.skipsemi 
#3870: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64       #3869            
#3871: 
    setcall      /1/1                   
    load     i64       12               
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
    load     i64       nkeyvalues       
    jumpf    i64       #3877            
    load     i64       length           
    load     i64       nkeyvalues       
    jumple   i64       #3879            
    setcall      /1/1                   
    load     u64       "dict: mixed elements"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3879: 
    setcall  u64 /2/1                   
    load     u64       ulist            
    setarg   u64 /2                     
    load     i64       90               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
    jump               #3876            
#3877: 
    setcall  u64 /2/1                   
    load     u64       ulist            
    setarg   u64 /2                     
    load     i64       89               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
#3876: 
    load     i64       length           
    load     u64       p                
    load     i64       24               
    istorex  i32 /1                     
    setcall      /0/1                   
    callp        /0    &qq_parse.poplisttype
    load     u64       p                
    jumpret  u64       #3862            
#3862: 
    retfn    u64                        
endproc

proc qq_parse.readtabledef:
    param    i64       isglobal
    local    i64       i
    local    i64       ncols
    local    i64       nrows
    local    i64       enums
    local    i64       nextenumvalue
    local    i64       startline
    local    i64       firstvalue
    local    i64       ltype
    local    i64       lower
    local    u8       commas
    local    u8       semis
    local    u64       ulist
    local    u64       ulistx
    local    u64       plower
    local    u64       p
    local    mem:160       varnames
    local    mem:160       plist
    local    mem:160       plistx
    local    u64       d
    local    u64       nameptr
    load     i64       0                
    store    u8        commas           
    load     i64       0                
    store    u8        semis            
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       enums            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     i64       1                
    double                              
    store    i64       nextenumvalue    
    store    i64       firstvalue       
    load     i64       0                
    store    i64       nrows            
    load     i64       0                
    store    i64       ncols            
    jump               #3882            
#3881: 
    load     u64 /1    &ncols           
    incrload i64 /1                     
    load     i64       20               
    jumple   i64       #3885            
    setcall      /1/1                   
    load     u64       "tabledata/too many columns"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3885: 
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    load     u64       &varnames        
    load     i64       ncols            
    istorex  u64 /8/-8                  
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpne   i64       #3887            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3886            
#3887: 
    jump               #3883            
#3886: 
#3882: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       69               
    jumpeq   i64       #3881            
#3883: 
    setcall      /0/1                   
    callp        /0    &qq_parse.checkequals
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall      /0/1                   
    callp        /0    &qq_lib.skipsemi 
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       startline        
    setcall      /0/1                   
    callp        /0    &qq_lib.skipsemi 
    load     i64       1                
    store    i64       i                
    load     i64       ncols            
    load     i64       1                
    jumplt   i64       #3890            
#3888: 
    load     u64       0                
    double                              
    load     u64       &plistx          
    load     i64       i                
    istorex  u64 /8/-8                  
    load     u64       &plist           
    load     i64       i                
    istorex  u64 /8/-8                  
    forup    i64 /1    #3888            
    opnd     i64       i                
    opnd     i64       ncols            
#3890: 
    load     u64       0                
    double                              
    store    u64       ulistx           
    store    u64       ulist            
    load     i64       1                
    store    i64       qq_parse.intabledata
#3891: 
    setcall      /0/1                   
    callp        /0    &qq_lib.skipsemi 
    load     i64       ncols            
    load     i64       0                
    jumple   i64       #3894            
    setcall      /1/1                   
    load     i64       9                
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
#3894: 
    load     u64 /1    &nrows           
    incrload i64 /1                     
    load     i64       500              
    jumple   i64       #3896            
    setcall      /1/1                   
    load     u64       "tabledata:too many rows"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3896: 
    load     i64       enums            
    jumpf    i64       #3898            
    setcall      /1/1                   
    load     i64       69               
    setarg   i64 /1                     
    callp        /1    &qq_lib.checksymbol
    setcall  u64 /4/1                   
    load     i64       isglobal         
    setarg   i64 /4                     
    load     i64       19               
    setarg   i64 /3                     
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       qq_decls.stcurrproc
    setarg   u64 /1                     
    callf    u64 /4    &qq_names.addsymbol
    store    u64       d                
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       43               
    jumpeq   i64       #3900            
    jump               #3901            
#3900: 
    load     i64       nrows            
    load     i64       1                
    jumple   i64       #3903            
    setcall      /1/1                   
    load     u64       "tabledata '=' not 1st"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3903: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       p                
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       41               
    jumpne   i64       #3905            
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    double                              
    store    i64       nextenumvalue    
    store    i64       firstvalue       
    jump               #3904            
#3905: 
    setcall      /1/1                   
    load     u64       "TABLEDATA: COMPLEX ENUM VAL"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3904: 
    jump               #3899            
#3901: 
#3899: 
    load     u64 /1    &nextenumvalue   
    loadincr i64 /1                     
    load     u64       d                
    load     i64       96               
    istorex  i32 /1                     
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    store    u64       qq_parse.tabledataname
    load     i64       ncols            
    jumpf    i64       #3907            
    setcall      /1/1                   
    load     i64       3                
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
#3907: 
#3898: 
    load     i64       1                
    store    i64       i                
    load     i64       ncols            
    load     i64       1                
    jumplt   i64       #3910            
#3908: 
    setcall      /3                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readexpression
    setarg   u64 /3                     
    load     u64       &plistx          
    load     i64       i                
    addpx    u64 /8/-8                  
    setarg   u64 /2                     
    load     u64       &plist           
    load     i64       i                
    addpx    u64 /8/-8                  
    setarg   u64 /1                     
    callp        /3    &qq_lib.addlistunit
    load     i64       i                
    load     i64       ncols            
    jumpne   i64       #3912            
    setcall      /1/1                   
    load     i64       10               
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
    jump               #3911            
#3912: 
    setcall      /1/1                   
    load     i64       3                
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
#3911: 
    forup    i64 /1    #3908            
    opnd     i64       i                
    opnd     i64       ncols            
#3910: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64       #3914            
    jump               #3915            
#3914: 
    load     u64 /1    &commas          
    incrto   u8  /1                     
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       79               
    jumpne   i64       #3917            
    jump               #3892            
#3917: 
    jump               #3913            
#3915: 
    setcall      /0/1                   
    callp        /0    &qq_lib.skipsemi 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       79               
    jumpne   i64       #3919            
    jump               #3892            
#3919: 
    load     u64 /1    &semis           
    incrto   u8  /1                     
#3913: 
    jump               #3891            
#3892: 
    load     u8        semis            
    jumpf    u8        #3921            
    load     u8        commas           
    jumpf    u8        #3921            
    setcall      /1/1                   
    load     u64       "mixed commas"   
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3921: 
    load     i64       0                
    store    i64       qq_parse.intabledata
    setcall      /0/1                   
    callp        /0    &qq_lib.skipsemi 
    setcall      /3/1                   
    load     i64       startline        
    setarg   i64 /3                     
    load     i64       0                
    setarg   i64 /2                     
    load     i64       124              
    setarg   i64 /1                     
    callp        /3    &qq_parse.checkend
    load     i64       nrows            
    load     i64       0                
    jumpne   i64       #3923            
    setcall      /1/1                   
    load     u64       "No table data"  
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3923: 
    load     i64       1                
    store    i64       i                
    load     i64       ncols            
    load     i64       1                
    jumplt   i64       #3926            
#3924: 
    setcall  u64 /4/1                   
    load     i64       isglobal         
    setarg   i64 /4                     
    load     i64       13               
    setarg   i64 /3                     
    load     u64       &varnames        
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /2                     
    load     u64       qq_decls.stcurrproc
    setarg   u64 /1                     
    callf    u64 /4    &qq_names.addsymbol
    store    u64       d                
    setcall  u64 /2/1                   
    load     u64       &plist           
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /2                     
    load     i64       88               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    double                              
    load     u64       d                
    load     i64       88               
    istorex  u64 /1                     
    store    u64       p                
    load     i64       nrows            
    load     u64       p                
    load     i64       24               
    istorex  i32 /1                     
    load     i64       firstvalue       
    load     u64       p                
    load     i64       28               
    istorex  i32 /1                     
    forup    i64 /1    #3924            
    opnd     i64       i                
    opnd     i64       ncols            
#3926: 
    retproc                             
endproc

proc qq_parse.readtry:
    local    u64       ptry
    local    u64       pexceptlist
    local    u64       pexceptlistx
    local    u64       px
    local    u64       q
    local    u64       exlist
    local    u64       exlistx
    rettype  u64
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_parse.readsunit
    store    u64       ptry             
    load     u64       0                
    double                              
    store    u64       pexceptlistx     
    store    u64       pexceptlist      
    jump               #3929            
#3928: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       0                
    double                              
    store    u64       exlistx          
    store    u64       exlist           
#3931: 
    setcall      /3                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readexpression
    setarg   u64 /3                     
    load     u64       &exlistx         
    setarg   u64 /2                     
    load     u64       &exlist          
    setarg   u64 /1                     
    callp        /3    &qq_lib.addlistunit
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64       #3934            
    jump               #3932            
#3934: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3931            
#3932: 
    setcall      /1/1                   
    load     i64       73               
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
    setcall  u64 /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_parse.readsunit
    store    u64       px               
    setcall      /3                     
    setcall  u64 /3                     
    load     u64       px               
    setarg   u64 /3                     
    load     u64       exlist           
    setarg   u64 /2                     
    load     i64       24               
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    setarg   u64 /3                     
    load     u64       &pexceptlistx    
    setarg   u64 /2                     
    load     u64       &pexceptlist     
    setarg   u64 /1                     
    callp        /3    &qq_lib.addlistunit
#3929: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       118              
    jumpeq   i64       #3928            
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     i64       0                
    setarg   i64 /2                     
    load     i64       117              
    setarg   i64 /1                     
    callp        /3    &qq_parse.checkend
    setcall  u64 /3/1                   
    load     u64       pexceptlist      
    setarg   u64 /3                     
    load     u64       ptry             
    setarg   u64 /2                     
    load     i64       23               
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    jumpret  u64       #3927            
#3927: 
    retfn    u64                        
endproc

proc qq_parse.readsprint:
    local    i64       opc
    local    i64       flags
    local    i64       isfprint
    local    u64       pformat
    local    u64       pdev
    local    u64       printlist
    local    u64       printlistx
    local    u64       p
    rettype  u64
    setcall      /1/1                   
    load     i64       362090680912     
    setarg   i64 /1                     
    callp        /1    &qq_parse.pushlisttype
    load     i64       54               
    store    i64       opc              
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       flags            
    setcall      /1/1                   
    load     i64       9                
    setarg   i64 /1                     
    callp        /1    &qq_parse.lexchecksymbol
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     i64       flags            
    load     i64       2                
    bitand   i64                        
    store    i64       isfprint         
    load     i64       flags            
    load     i64       2                
    bitand   i64                        
    jumpf    i64       #3937            
    load     i64       55               
    store    i64       opc              
#3937: 
    load     u64       0                
    double                              
    store    u64       printlistx       
    store    u64       printlist        
    load     u64       0                
    double                              
    store    u64       pdev             
    store    u64       pformat          
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       17               
    jumpne   i64       #3939            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       pdev             
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpne   i64       #3941            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3940            
#3941: 
    jump               #3942            
#3940: 
#3939: 
    load     i64       isfprint         
    jumpf    i64       #3944            
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       pformat          
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpne   i64       #3946            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3945            
#3946: 
    jump               #3942            
#3945: 
#3944: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       10               
    jumpne   i64       #3948            
    jump               #3942            
#3948: 
#3949: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpne   i64       #3952            
    setcall      /3                     
    setcall  u64 /1                     
    load     i64       56               
    setarg   i64 /1                     
    callf    u64 /1    &qq_lib.createunit0
    setarg   u64 /3                     
    load     u64       &printlistx      
    setarg   u64 /2                     
    load     u64       &printlist       
    setarg   u64 /1                     
    callp        /3    &qq_lib.addlistunit
    jump               #3951            
#3952: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       p                
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       5                
    jumpne   i64       #3954            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /3                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readexpression
    setarg   u64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     i64       58               
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
#3954: 
    setcall      /3/1                   
    load     u64       p                
    setarg   u64 /3                     
    load     u64       &printlistx      
    setarg   u64 /2                     
    load     u64       &printlist       
    setarg   u64 /1                     
    callp        /3    &qq_lib.addlistunit
#3951: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64       #3956            
    jump               #3950            
#3956: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3949            
#3950: 
    setcall      /1/1                   
    load     i64       10               
    setarg   i64 /1                     
    callp        /1    &qq_lib.checksymbol
! qq_parse.readsprint.finish:
#3942: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     i64       opc              
    load     i64       54               
    jumpeq   i64       #3959            
    load     i64       opc              
    load     i64       55               
    jumpne   i64       #3958            
#3959: 
    load     u64       printlist        
    load     u64       0                
    jumpne   u64       #3958            
    setcall      /1/1                   
    load     u64       "No print items" 
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3958: 
    setcall      /0/1                   
    callp        /0    &qq_parse.poplisttype
    load     i64       isfprint         
    jumpf    i64       #3961            
    load     u64       pformat          
    load     u64       0                
    jumpne   u64       #3963            
    setcall      /1/1                   
    load     u64       "No fmt str"     
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3963: 
    load     u64       printlist        
    load     u64       pformat          
    load     i64       8                
    istorex  u64 /1                     
    setcall  u64 /3/1                   
    load     u64       pformat          
    setarg   u64 /3                     
    load     u64       pdev             
    setarg   u64 /2                     
    load     i64       opc              
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
    jump               #3960            
#3961: 
    setcall  u64 /3/1                   
    load     u64       printlist        
    setarg   u64 /3                     
    load     u64       pdev             
    setarg   u64 /2                     
    load     i64       opc              
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
#3960: 
    load     i64       flags            
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
    load     u64       p                
    jumpret  u64       #3935            
#3935: 
    retfn    u64                        
endproc

proc qq_parse.readsread:
    local    i64       opc
    local    u64       pformat
    local    u64       pdev
    local    u64       p
    local    u64       readlist
    local    u64       readlistx
    rettype  u64
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "SREAD"          
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     i64       362090680912     
    setarg   i64 /1                     
    callp        /1    &qq_parse.pushlisttype
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       opc              
    setcall      /1/1                   
    load     i64       9                
    setarg   i64 /1                     
    callp        /1    &qq_parse.lexchecksymbol
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       0                
    double                              
    store    u64       readlistx        
    store    u64       readlist         
    load     u64       0                
    double                              
    store    u64       pdev             
    store    u64       pformat          
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       17               
    jumpne   i64       #3966            
    load     i64       opc              
    load     i64       59               
    jumpne   i64       #3968            
    setcall      /1/1                   
    load     u64       "@ on read"      
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3968: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       pdev             
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpne   i64       #3970            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3969            
#3970: 
    jump               #3971            
#3969: 
#3966: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       10               
    jumpne   i64       #3973            
    jump               #3971            
#3973: 
#3974: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       p                
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       5                
    jumpne   i64       #3977            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /3                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readexpression
    setarg   u64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     i64       58               
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
#3977: 
    setcall      /3/1                   
    load     u64       p                
    setarg   u64 /3                     
    load     u64       &readlistx       
    setarg   u64 /2                     
    load     u64       &readlist        
    setarg   u64 /1                     
    callp        /3    &qq_lib.addlistunit
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64       #3979            
    jump               #3975            
#3979: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #3974            
#3975: 
    setcall      /1/1                   
    load     i64       10               
    setarg   i64 /1                     
    callp        /1    &qq_lib.checksymbol
! qq_parse.readsread.finish:
#3971: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     i64       opc              
    load     i64       59               
    jumpne   i64       #3981            
    load     u64       readlist         
    load     u64       0                
    jumpne   u64       #3981            
    setcall      /1/1                   
    load     u64       "No read items"  
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3981: 
    setcall      /0/1                   
    callp        /0    &qq_parse.poplisttype
    setcall  u64 /3/1                   
    load     u64       readlist         
    setarg   u64 /3                     
    load     u64       pdev             
    setarg   u64 /2                     
    load     i64       opc              
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    jumpret  u64       #3964            
#3964: 
    retfn    u64                        
endproc

proc qq_parse.readimportdll:
    local    mem:256       str
    local    u64       stproc
    local    u64       d
    local    u64       stname
    local    i64       startpos
    local    i64       isfunc
    local    i64       isnew
    local    i64       libtype
    local    i64       i
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       libtype          
    setcall      /1/1                   
    load     i64       69               
    setarg   i64 /1                     
    callp        /1    &qq_parse.lexchecksymbol
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    store    u64       stname           
    setcall      /1/1                   
    load     i64       43               
    setarg   i64 /1                     
    callp        /1    &qq_parse.lexchecksymbol
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     i64       1                
    store    i64       isnew            
    load     u64       stname           
    load     i64       40               
    iloadx   u64 /1                     
    store    u64       d                
    load     i64       1                
    store    i64       i                
    load     i64       qq_decls.nlibfiles
    load     i64       1                
    jumplt   i64       #3985            
#3983: 
    setcall  i64 /2/1                   
    load     u64       stname           
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       &qq_decls.libtable
    load     i64       i                
    iloadx   u64 /8/-8                  
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /2    &mlib.eqstring   
    jumpf    i64       #3987            
    load     u64       &qq_decls.libtable
    load     i64       i                
    iloadx   u64 /8/-8                  
    store    u64       stname           
    load     i64       0                
    store    i64       isnew            
    jump               #3985            
#3987: 
    forup    i64 /1    #3983            
    opnd     i64       i                
    opnd     i64       qq_decls.nlibfiles
#3985: 
    load     i64       isnew            
    jumpf    i64       #3989            
    setcall  u64 /4/1                   
    load     i64       0                
    setarg   i64 /4                     
    load     i64       4                
    setarg   i64 /3                     
    load     u64       stname           
    setarg   u64 /2                     
    load     u64       0                
    setarg   u64 /1                     
    callf    u64 /4    &qq_names.addsymbol
    store    u64       stname           
    load     i64       qq_decls.nlibfiles
    load     i64       50               
    jumplt   i64       #3991            
    setcall      /1/1                   
    load     u64       "Too many DLL libs"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3991: 
    load     u64       stname           
    load     u64       &qq_decls.libtable
    load     u64 /1    &qq_decls.nlibfiles
    incrload i64 /1                     
    istorex  u64 /8/-8                  
    load     i64       libtype          
    load     u64       &qq_decls.libtypes
    load     i64       qq_decls.nlibfiles
    istorex  u8  /1/-1                  
    load     i64       qq_decls.nlibfiles
    load     u64       stname           
    load     i64       96               
    istorex  i32 /1                     
#3989: 
    load     u64       stname           
    load     i64       96               
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       qq_parse.currdllindex
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       startpos         
#3992: 
    setcall      /0/1                   
    callp        /0    &qq_lib.skipsemi 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       99               
    jumpeq   i64 /1    #3995            
    load     i64       100              
    jumpeq   i64 /1    #3995            
    load     i64       108              
    jumpeq   i64 /1    #3996            
    load     i64       79               
    jumpeq   i64       #3997            
    jump               #3998            
#3995: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       100              
    seteq    i64                        
    store    i64       isfunc           
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       69               
    jumpeq   i64 /1    #4000            
    load     i64       67               
    jumpeq   i64       #4001            
    jump               #4002            
#4000: 
    setcall  u64 /4/1                   
    load     i64       1                
    setarg   i64 /4                     
    load     i64       7                
    setarg   i64 /3                     
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       qq_decls.stcurrproc
    setarg   u64 /1                     
    callf    u64 /4    &qq_names.addsymbol
    store    u64       stproc           
    jump               #3999            
#4001: 
    setcall  u64 /2/1                   
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    setcall  u64 /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /1    &mlib.convlcstring
    unload   u64                        
    setcall  u64 /4                     
    load     i64       1                
    setarg   i64 /4                     
    load     i64       7                
    setarg   i64 /3                     
    setcall  u64 /1                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /1    &qq_names.addglobalname
    setarg   u64 /2                     
    load     u64       qq_decls.stcurrproc
    setarg   u64 /1                     
    callf    u64 /4    &qq_names.addsymbol
    store    u64       stproc           
    setcall  u64 /1/1                   
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /1    &mlib.pcm_copyheapstring
    load     u64       stproc           
    load     i64       80               
    istorex  u64 /1                     
    jump               #3999            
#4002: 
    setcall      /1/1                   
    load     u64       "fn name expected"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#3999: 
    load     i64       isfunc           
    load     u64       stproc           
    load     i64       120              
    addpx    u64 /1                     
    load     i64       4                
    storebit u16                        
    load     u64       1                
    load     u64       stproc           
    load     i64       120              
    addpx    u64 /1                     
    load     i64       2                
    storebit u16                        
    load     i64       qq_decls.ndllprocs
    load     i64       2000             
    jumplt   i64       #4004            
    setcall      /1/1                   
    load     u64       "Too many DLL procs"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#4004: 
    load     u64       stproc           
    load     u64       &qq_decls.dllproctable
    load     u64 /1    &qq_decls.ndllprocs
    incrload i64 /1                     
    istorex  u64 /8/-8                  
    load     i64       qq_parse.currdllindex
    load     u64       &qq_decls.dllproclibindex
    load     i64       qq_decls.ndllprocs
    istorex  u8  /1/-1                  
    load     i64       qq_decls.ndllprocs
    load     u64       stproc           
    load     i64       96               
    istorex  i32 /1                     
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       69               
    jumpne   i64       #4006            
    setcall  i64 /2/1                   
    load     u64       "as"             
    setarg   u64 /2                     
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /2    &mlib.eqstring   
    jumpf    i64       #4006            
    setcall      /1/1                   
    load     i64       69               
    setarg   i64 /1                     
    callp        /1    &qq_parse.lexchecksymbol
    setcall  u64 /4/1                   
    load     i64       1                
    setarg   i64 /4                     
    load     i64       20               
    setarg   i64 /3                     
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       stproc           
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /4    &qq_names.addsymbol
    store    u64       d                
    load     u64       stproc           
    load     u64       d                
    load     i64       56               
    istorex  u64 /1                     
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
#4006: 
    setcall      /1/1                   
    load     u64       stproc           
    setarg   u64 /1                     
    callp        /1    &qq_parse.readffiparams
    jump               #3994            
#3996: 
    setcall      /1/1                   
    load     i64       1                
    setarg   i64 /1                     
    callp        /1    &qq_parse.readtypedef
    jump               #3994            
#3997: 
    jump               #3993            
    jump               #3994            
#3998: 
    setcall      /2/1                   
    load     i64       8                
    setarg   i64 /2                     
    load     u64       qq_decls.stcurrproc
    setarg   u64 /1                     
    callp        /2    &qq_parse.readpackvars
#3994: 
    jump               #3992            
#3993: 
    setcall      /3/1                   
    load     i64       startpos         
    setarg   i64 /3                     
    load     i64       0                
    setarg   i64 /2                     
    load     i64       107              
    setarg   i64 /1                     
    callp        /3    &qq_parse.checkend
    retproc                             
endproc

proc qq_parse.readffiparams:
    param    u64       stproc
    local    i64       pret
    local    i64       ptype
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       9                
    jumpne   i64       #4009            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       10               
    jumpne   i64       #4011            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #4010            
#4011: 
    setcall  i64 /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     i64       0                
    setarg   i64 /1                     
    callf    i64 /2    &qq_parse.readtypespec
    store    i64       ptype            
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64 /1    #4014            
    load     i64       10               
    jumpne   i64       #4013            
#4014: 
    setcall      /2/1                   
    load     i64       ptype            
    setarg   i64 /2                     
    load     u64       stproc           
    setarg   u64 /1                     
    callp        /2    &qq_parse.readtypeparams
    jump               #4012            
#4013: 
    setcall      /2/1                   
    load     i64       ptype            
    setarg   i64 /2                     
    load     u64       stproc           
    setarg   u64 /1                     
    callp        /2    &qq_parse.readtypenameparams
#4012: 
#4010: 
#4009: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       5                
    jumpeq   i64 /1    #4017            
    load     i64       7                
    jumpne   i64       #4016            
#4017: 
    load     u64       stproc           
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       4                
    loadbit  i64                        
    jumpt    u64       #4019            
    setcall      /1/1                   
    load     u64       "Return type for proc?"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#4019: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
#4016: 
    load     i64       0                
    store    i64       pret             
    load     u64       stproc           
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       4                
    loadbit  i64                        
    jumpf    u64       #4021            
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       4                
    jumpne   i64       #4023            
    setcall      /1/1                   
    load     u64       "Return type missing"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#4023: 
    setcall  i64 /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     i64       0                
    setarg   i64 /1                     
    callf    i64 /2    &qq_parse.readtypespec
    store    i64       pret             
#4021: 
    setcall      /3/1                   
    load     u64       stproc           
    load     i64       116              
    addpx    u64 /1                     
    setarg   u64 /3                     
    load     i64       pret             
    setarg   i64 /2                     
    load     u64       stproc           
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &qq_lib.storemode
    retproc                             
endproc

proc qq_parse.readtypeparams:
    param    u64       stproc
    param    i64       ptype
    local    mem:32       str
    local    i64       nparams
    local    u64       stname
    load     i64       0                
    store    i64       nparams          
#4025: 
    load     u64 /1    &nparams         
    incrto   i64 /1                     
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "$"              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     i64       nparams          
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall  u64 /4                     
    load     i64       0                
    setarg   i64 /4                     
    load     i64       16               
    setarg   i64 /3                     
    setcall  u64 /1                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /1    &qq_names.addglobalname
    setarg   u64 /2                     
    load     u64       stproc           
    setarg   u64 /1                     
    callf    u64 /4    &qq_names.addsymbol
    store    u64       stname           
    setcall      /3/1                   
    load     u64       stname           
    load     i64       116              
    addpx    u64 /1                     
    setarg   u64 /3                     
    load     i64       ptype            
    setarg   i64 /2                     
    load     u64       stproc           
    setarg   u64 /1                     
    callp        /3    &qq_lib.storemode
    load     u64       stproc           
    load     i64       104              
    addpx    u64 /1                     
    incrto   i16 /1                     
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpne   i64       #4028            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       21               
    jumpne   i64       #4030            
    load     u64       1                
    load     u64       stproc           
    load     i64       120              
    addpx    u64 /1                     
    load     i64       8                
    storebit u16                        
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #4026            
#4030: 
    setcall  i64 /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     i64       0                
    setarg   i64 /1                     
    callf    i64 /2    &qq_parse.readtypespec
    store    i64       ptype            
    jump               #4027            
#4028: 
    jump               #4026            
#4027: 
    jump               #4025            
#4026: 
    setcall      /1/1                   
    load     i64       10               
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
    retproc                             
endproc

proc qq_parse.readtypenameparams:
    param    u64       stproc
    param    i64       ptype
    local    u64       stname
    setcall      /1/1                   
    load     i64       69               
    setarg   i64 /1                     
    callp        /1    &qq_lib.checksymbol
    setcall  u64 /4/1                   
    load     i64       0                
    setarg   i64 /4                     
    load     i64       16               
    setarg   i64 /3                     
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       stproc           
    setarg   u64 /1                     
    callf    u64 /4    &qq_names.addsymbol
    store    u64       stname           
    setcall      /3/1                   
    load     u64       stname           
    load     i64       116              
    addpx    u64 /1                     
    setarg   u64 /3                     
    load     i64       ptype            
    setarg   i64 /2                     
    load     u64       stproc           
    setarg   u64 /1                     
    callp        /3    &qq_lib.storemode
    load     u64       stproc           
    load     i64       104              
    addpx    u64 /1                     
    incrto   i16 /1                     
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
#4032: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       43               
    jumpne   i64       #4035            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    load     u64       stname           
    load     i64       88               
    istorex  u64 /1                     
    load     u64       1                
    load     u64       stname           
    load     i64       120              
    addpx    u64 /1                     
    load     i64       7                
    storebit u16                        
#4035: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64       #4037            
    jump               #4038            
#4037: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       21               
    jumpne   i64       #4040            
    load     u64       1                
    load     u64       stproc           
    load     i64       120              
    addpx    u64 /1                     
    load     i64       8                
    storebit u16                        
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #4033            
#4040: 
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_parse.istypestarter
    jumpf    i64       #4042            
    setcall  i64 /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     i64       0                
    setarg   i64 /1                     
    callf    i64 /2    &qq_parse.readtypespec
    store    i64       ptype            
#4042: 
    setcall      /1/1                   
    load     i64       69               
    setarg   i64 /1                     
    callp        /1    &qq_lib.checksymbol
    setcall  u64 /4/1                   
    load     i64       0                
    setarg   i64 /4                     
    load     i64       16               
    setarg   i64 /3                     
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       stproc           
    setarg   u64 /1                     
    callf    u64 /4    &qq_names.addsymbol
    store    u64       stname           
    setcall      /3/1                   
    load     u64       stname           
    load     i64       116              
    addpx    u64 /1                     
    setarg   u64 /3                     
    load     i64       ptype            
    setarg   i64 /2                     
    load     u64       stproc           
    setarg   u64 /1                     
    callp        /3    &qq_lib.storemode
    load     u64       stproc           
    load     i64       104              
    addpx    u64 /1                     
    incrto   i16 /1                     
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #4036            
#4038: 
    jump               #4033            
#4036: 
    jump               #4032            
#4033: 
    setcall      /1/1                   
    load     i64       10               
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
    retproc                             
endproc

proc qq_parse.readrecorddef:
    param    i64       isglobal
    param    u64       d
    local    i64       kwd
    local    i64       baseclass
    local    i64       m
    local    i64       startline
    local    i64       caligned
    local    u8       lbopening
    local    u64       nameptr
    load     i64       0                
    store    u8        lbopening        
    load     i64       0                
    store    i64       baseclass        
    load     u64       d                
    jumpf    u64       #4045            
    load     i64       108              
    store    i64       kwd              
    jump               #4046            
#4045: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       kwd              
    setcall      /1/1                   
    load     i64       69               
    setarg   i64 /1                     
    callp        /1    &qq_parse.lexchecksymbol
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    store    u64       nameptr          
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       9                
    jumpne   i64       #4048            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  i64 /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     i64       0                
    setarg   i64 /1                     
    callf    i64 /2    &qq_parse.readtypespec
    store    i64       baseclass        
    setcall      /1/1                   
    load     i64       10               
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
#4048: 
    setcall      /0/1                   
    callp        /0    &qq_parse.checkequals
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /4/1                   
    load     i64       isglobal         
    setarg   i64 /4                     
    startmx                             
    load     i64       kwd              
    load     i64       102              
    jumpne   i64       #4050            
    load     i64       9                
    resetmx  i64                        
    jump               #4049            
#4050: 
    load     i64       10               
    endmx    i64                        
#4049: 
    setarg   i64 /3                     
    load     u64       nameptr          
    setarg   u64 /2                     
    load     u64       qq_decls.stcurrproc
    setarg   u64 /1                     
    callf    u64 /4    &qq_names.addsymbol
    store    u64       d                
    load     i64       baseclass        
    jumpf    i64       #4052            
    load     i64       baseclass        
    load     i64       0                
    jumple   i64       #4054            
    setcall      /1/1                   
    load     u64       "baseclass?"     
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#4054: 
    load     i64       qq_decls.nbaseclasses
    load     i64       255              
    jumplt   i64       #4056            
    setcall      /1/1                   
    load     u64       "Too many base classes"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#4056: 
    load     u64 /1    &qq_decls.nbaseclasses
    incrto   i64 /1                     
    setcall      /3/1                   
    load     u64       &qq_decls.baseclasstable
    load     i64       qq_decls.nbaseclasses
    addpx    i16 /2                     
    setarg   u64 /3                     
    load     i64       baseclass        
    setarg   i64 /2                     
    load     u64       qq_decls.stcurrproc
    setarg   u64 /1                     
    callp        /3    &qq_lib.storemode
    load     i64       qq_decls.nbaseclasses
    load     u64       d                
    load     i64       110              
    istorex  i16 /1                     
    load     u64       d                
    load     u64       &qq_decls.baseclassdef
    load     i64       qq_decls.nbaseclasses
    istorex  u64 /8                     
#4052: 
! qq_parse.readrecorddef.gotname:
#4046: 
    setcall      /0/1                   
    callp        /0    &qq_lib.skipsemi 
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       startline        
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       9                
    jumpne   i64       #4058            
    load     i64       1                
    store    u8        lbopening        
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
#4058: 
    load     i64       kwd              
    load     i64       102              
    jumpne   i64       #4060            
    setcall  i64 /1/1                   
    load     u64       d                
    setarg   u64 /1                     
    callf    i64 /1    &qq_parse.readrecordbody
    store    i64       m                
    jump               #4059            
#4060: 
    load     i64       0                
    store    i64       caligned         
    setcall  i64 /2/1                   
    load     i64       caligned         
    setarg   i64 /2                     
    load     u64       d                
    setarg   u64 /1                     
    callf    i64 /2    &qq_parse.readstructbody
    store    i64       m                
#4059: 
    load     u8        lbopening        
    jumpf    u8        #4062            
    setcall      /1/1                   
    load     i64       10               
    setarg   i64 /1                     
    callp        /1    &qq_lib.checksymbol
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #4061            
#4062: 
    setcall      /3/1                   
    load     i64       startline        
    setarg   i64 /3                     
    load     i64       0                
    setarg   i64 /2                     
    load     i64       102              
    setarg   i64 /1                     
    callp        /3    &qq_parse.checkend
#4061: 
    retproc                             
endproc

proc qq_parse.readrecordbody:
    param    u64       owner
    local    u64       oldstcurrproc
    local    u64       e
    local    i64       m
    local    i64       nfields
    rettype  i64
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_names.addanontype
    store    i64       m                
    load     u64       qq_decls.stcurrproc
    store    u64       oldstcurrproc    
    load     u64       owner            
    store    u64       qq_decls.stcurrproc
#4064: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       113              
    jumpeq   i64 /1    #4066            
    load     i64       110              
    jumpeq   i64 /1    #4067            
    load     i64       100              
    jumpeq   i64 /1    #4068            
    load     i64       99               
    jumpeq   i64 /1    #4068            
    load     i64       102              
    jumpeq   i64 /1    #4069            
    load     i64       108              
    jumpeq   i64 /1    #4070            
    load     i64       79               
    jumpeq   i64 /1    #4071            
    load     i64       10               
    jumpeq   i64 /1    #4071            
    load     i64       14               
    jumpeq   i64 /1    #4071            
    load     i64       62               
    jumpeq   i64 /1    #4072            
    load     i64       4                
    jumpeq   i64       #4073            
    jump               #4074            
#4066: 
    setcall      /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callp        /1    &qq_parse.readconstdef
    jump               #4064            
#4067: 
    setcall      /1/1                   
    load     u64       owner            
    setarg   u64 /1                     
    callp        /1    &qq_parse.readrecordfields
    jump               #4064            
#4068: 
    setcall      /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callp        /1    &qq_parse.readprocdef
    jump               #4064            
#4069: 
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     i64       0                
    setarg   i64 /1                     
    callp        /2    &qq_parse.readrecorddef
    jump               #4064            
#4070: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall      /1/1                   
    load     u64       "CLASS TYPE"     
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
    jump               #4064            
#4071: 
    jump               #4065            
    jump               #4064            
#4072: 
    setcall      /1/1                   
    load     u64       "Class eof?"     
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
    jump               #4065            
    jump               #4064            
#4073: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #4064            
#4074: 
    setcall      /1/1                   
    load     u64       "Unknown record field decl"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
    jump               #4064            
#4065: 
    load     u64       owner            
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       e                
    load     i64       0                
    store    i64       nfields          
    jump               #4078            
#4075: 
    load     u64       e                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       11               
    jumpne   i64       #4080            
    load     u64       e                
    load     i64       80               
    iloadx   u64 /1                     
    jumpt    u64       #4080            
    load     u64 /1    &nfields         
    incrto   i64 /1                     
#4080: 
    load     u64       e                
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       e                
#4078: 
    load     u64       e                
    jumpt    u64       #4075            
    load     i64       nfields          
    load     u64       owner            
    load     i64       104              
    istorex  i16 /1                     
    load     u64       owner            
    load     i64       16               
    iloadx   u64 /1                     
    load     u64       &qq_tables.ttfields
    load     i64       m                
    istorex  u64 /8                     
    load     i64       nfields          
    load     u64       &qq_tables.ttlength
    load     i64       m                
    istorex  i64 /8                     
    load     i64       1                
    load     u64       &qq_tables.ttlower
    load     i64       m                
    istorex  i64 /8                     
    load     i64       12               
    load     u64       &qq_tables.ttbasetype
    load     i64       m                
    istorex  i16 /2                     
    setcall      /2/1                   
    load     i64       m                
    setarg   i64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_names.createusertype
    load     u64       owner            
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       e                
    jump               #4082            
#4081: 
    setcall      /1/1                   
    load     u64       e                
    setarg   u64 /1                     
    callp        /1    &qq_names.addgenfield
    load     u64       e                
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       e                
#4082: 
    load     u64       e                
    jumpt    u64       #4081            
    load     i64       16               
    load     u64       owner            
    load     i64       104              
    iloadx   i16 /1                     
    widen    i64/i16                    
    mul      i64                        
    load     u64       &qq_tables.ttsize
    load     i64       m                
    istorex  i64 /8                     
    load     u64       oldstcurrproc    
    store    u64       qq_decls.stcurrproc
    load     i64       m                
    jumpret  i64       #4063            
#4063: 
    retfn    i64                        
endproc

proc qq_parse.readrecordfields:
    param    u64       owner
    local    i64       nvars
    local    i64       offset
    local    i64       index
    local    u64       d
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     i64       0                
    store    i64       nvars            
    load     u64       owner            
    load     i64       104              
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       index            
    load     u64       owner            
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       d                
    load     i64       0                
    store    i64       offset           
    jump               #4088            
#4085: 
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       11               
    jumpne   i64       #4090            
    load     u64       d                
    load     i64       80               
    iloadx   u64 /1                     
    jumpt    u64       #4090            
    load     i64       16               
    load     u64 /1    &offset          
    addto    i64                        
#4090: 
    load     u64       d                
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       d                
#4088: 
    load     u64       d                
    jumpt    u64       #4085            
    jump               #4092            
#4091: 
    load     u64 /1    &nvars           
    incrto   i64 /1                     
    setcall  u64 /4/1                   
    load     i64       0                
    setarg   i64 /4                     
    load     i64       11               
    setarg   i64 /3                     
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       qq_decls.stcurrproc
    setarg   u64 /1                     
    callf    u64 /4    &qq_names.addsymbol
    store    u64       d                
    load     u64       0                
    load     u64       d                
    load     i64       80               
    istorex  u64 /1                     
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       17               
    jumpne   i64       #4095            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readatfield
    load     u64       d                
    load     i64       80               
    istorex  u64 /1                     
    load     u64       d                
    load     i64       80               
    iloadx   u64 /1                     
    load     i64       108              
    iloadx   i16 /1                     
    load     u64       d                
    load     i64       108              
    istorex  i16 /1                     
    load     u64       d                
    load     i64       80               
    iloadx   u64 /1                     
    load     i64       96               
    iloadx   i32 /1                     
    load     u64       d                
    load     i64       96               
    istorex  i32 /1                     
    jump               #4094            
#4095: 
    load     i64       offset           
    load     u64       d                
    load     i64       108              
    istorex  i16 /1                     
    load     i64       16               
    load     u64 /1    &offset          
    addto    i64                        
    load     u64 /1    &index           
    incrload i64 /1                     
    load     u64       d                
    load     i64       96               
    istorex  i32 /1                     
#4094: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64       #4097            
    jump               #4093            
#4097: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
#4092: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       69               
    jumpeq   i64       #4091            
#4093: 
    load     i64       nvars            
    load     i64       0                
    jumpne   i64       #4099            
    setcall      /1/1                   
    load     u64       "No fields"      
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#4099: 
    retproc                             
endproc

proc qq_parse.readstructbody:
    param    u64       owner
    param    i64       caligned
    local    i64       m
    local    i64       ngroups
    local    i64       nvars
    local    i64       t
    local    u64       d
    local    u64       e
    rettype  i64
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_names.addanontype
    store    i64       m                
    load     i64       0                
    store    i64       ngroups          
#4101: 
    setcall      /0/1                   
    callp        /0    &qq_lib.skipsemi 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       103              
    jumpeq   i64 /1    #4104            
    load     i64       104              
    jumpeq   i64 /1    #4105            
    load     i64       79               
    jumpeq   i64 /1    #4106            
    load     i64       10               
    jumpeq   i64       #4107            
    jump               #4108            
#4104: 
    load     u64 /1    &ngroups         
    incrto   i64 /1                     
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall      /2/1                   
    load     i64       24               
    setarg   i64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_parse.addstructflag
    jump               #4103            
#4105: 
    load     u64 /1    &ngroups         
    incrto   i64 /1                     
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall      /2/1                   
    load     i64       25               
    setarg   i64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_parse.addstructflag
    jump               #4103            
#4106: 
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       103              
    jumpeq   i64 /1    #4111            
    load     i64       104              
    jumpne   i64       #4110            
#4111: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
#4110: 
! qq_parse.readstructbody.doend:
#4112: 
    load     i64       ngroups          
    jumpf    i64       #4114            
    load     u64 /1    &ngroups         
    decrto   i64 /1                     
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall      /2/1                   
    load     i64       26               
    setarg   i64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_parse.addstructflag
    jump               #4113            
#4114: 
    jump               #4102            
#4113: 
    jump               #4103            
#4107: 
    jump               #4112            
    jump               #4103            
#4108: 
    setcall      /2/1                   
    load     i64       12               
    setarg   i64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_parse.readpackvars
#4103: 
    jump               #4101            
#4102: 
    load     u64       owner            
    load     i64       16               
    iloadx   u64 /1                     
    load     u64       &qq_tables.ttfields
    load     i64       m                
    istorex  u64 /8                     
    load     u64       owner            
    load     i64       104              
    iloadx   i16 /1                     
    widen    i64/i16                    
    load     u64       &qq_tables.ttlength
    load     i64       m                
    istorex  i64 /8                     
    load     i64       1                
    load     u64       &qq_tables.ttlower
    load     i64       m                
    istorex  i64 /8                     
    load     i64       caligned         
    load     u64       &qq_tables.ttcaligned
    load     i64       m                
    istorex  u8  /1                     
    load     i64       13               
    load     u64       &qq_tables.ttbasetype
    load     i64       m                
    istorex  i16 /2                     
    setcall      /2/1                   
    load     i64       m                
    setarg   i64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_names.createusertype
    load     u64       owner            
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       e                
    jump               #4116            
#4115: 
    load     u64       e                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       24               
    jumpeq   i64 /1    #4119            
    load     i64       25               
    jumpeq   i64 /1    #4119            
    load     i64       26               
    jumpeq   i64       #4119            
    jump               #4120            
#4119: 
    jump               #4118            
#4120: 
    setcall      /1/1                   
    load     u64       e                
    setarg   u64 /1                     
    callp        /1    &qq_names.addgenfield
#4118: 
    load     u64       e                
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       e                
#4116: 
    load     u64       e                
    jumpt    u64       #4115            
    load     i64       m                
    jumpret  i64       #4100            
#4100: 
    retfn    i64                        
endproc

proc qq_parse.addstructflag:
    param    u64       owner
    param    i64       id
    local    mem:32       str
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "$$#"            
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64 /1    &qq_parse.addstructflag.structseqno
    incrload i64 /1                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall  u64 /4                     
    load     i64       0                
    setarg   i64 /4                     
    load     i64       id               
    setarg   i64 /3                     
    setcall  u64 /1                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /1    &qq_names.addglobalname
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callf    u64 /4    &qq_names.addsymbol
    unload   u64                        
    retproc                             
endproc

proc qq_parse.readprocdef:
    param    i64       isglobal
    local    i64       kwd
    local    i64       startline
    local    i64       nparams
    local    i64       shortfun
    local    u64       pcode
    local    u64       d
    local    u64       oldstcurrproc
    local    mem:256       str
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       kwd              
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       shortfun         
    setcall      /1/1                   
    load     i64       69               
    setarg   i64 /1                     
    callp        /1    &qq_parse.lexchecksymbol
    load     u64       qq_decls.stcurrproc
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       5                
    jumpeq   i64 /1    #4125            
    load     i64       6                
    jumpne   i64       #4124            
#4125: 
    setcall      /1/1                   
    load     u64       "Nested proc"    
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#4124: 
    load     u64       qq_decls.stcurrproc
    store    u64       oldstcurrproc    
    setcall  u64 /4/1                   
    load     i64       isglobal         
    setarg   i64 /4                     
    load     i64       5                
    setarg   i64 /3                     
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       qq_decls.stcurrproc
    setarg   u64 /1                     
    callf    u64 /4    &qq_names.addsymbol
    double                              
    store    u64       d                
    store    u64       qq_decls.stcurrproc
    setcall      /1/1                   
    load     u64       d                
    setarg   u64 /1                     
    callp        /1    &qq_names.addproc
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     i64       0                
    load     u64       d                
    load     i64       116              
    istorex  i16 /1                     
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       9                
    jumpne   i64       #4127            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       10               
    jumpeq   i64       #4129            
    setcall      /1/1                   
    load     u64       d                
    setarg   u64 /1                     
    callp        /1    &qq_parse.readparams
    jump               #4128            
#4129: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
#4128: 
#4127: 
    setcall      /0/1                   
    callp        /0    &qq_parse.checkequals
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       startline        
    load     i64       shortfun         
    jumpt    i64       #4131            
    setcall  u64 /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_parse.readsunit
    load     u64       d                
    load     i64       88               
    istorex  u64 /1                     
    setcall      /3/1                   
    load     i64       startline        
    setarg   i64 /3                     
    load     i64       0                
    setarg   i64 /2                     
    load     i64       kwd              
    setarg   i64 /1                     
    callp        /3    &qq_parse.checkend
    jump               #4130            
#4131: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    load     u64       d                
    load     i64       88               
    istorex  u64 /1                     
    setcall      /1/1                   
    load     i64       4                
    setarg   i64 /1                     
    callp        /1    &qq_lib.checksymbol
#4130: 
    setcall  i64 /2/1                   
    load     u64       "start"          
    setarg   u64 /2                     
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /2    &mlib.eqstring   
    jumpf    i64       #4133            
    load     u64       d                
    load     u64       qq_decls.currmodule
    load     i64       104              
    istorex  u64 /1                     
    jump               #4132            
#4133: 
    setcall  i64 /2/1                   
    load     u64       "main"           
    setarg   u64 /2                     
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /2    &mlib.eqstring   
    jumpf    i64       #4134            
    load     u64       d                
    load     u64       qq_decls.currmodule
    load     i64       112              
    istorex  u64 /1                     
#4134: 
#4132: 
    load     i64       kwd              
    load     i64       100              
    seteq    i64                        
    load     u64       qq_decls.stcurrproc
    load     i64       120              
    addpx    u64 /1                     
    load     i64       4                
    storebit u16                        
    load     u64       oldstcurrproc    
    store    u64       qq_decls.stcurrproc
    retproc                             
endproc

proc qq_parse.readatfield:
    local    u64       p
    local    u64       d
    rettype  u64
    setcall      /1/1                   
    load     i64       69               
    setarg   i64 /1                     
    callp        /1    &qq_lib.checksymbol
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    store    u64       d                
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       qq_decls.stcurrproc
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       p                
    jump               #4137            
#4136: 
    setcall  i64 /2/1                   
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       p                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /2    &mlib.eqstring   
    jumpf    i64       #4140            
    load     u64       p                
    jumpret  u64       #4135            
#4140: 
    load     u64       p                
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       p                
#4137: 
    load     u64       p                
    jumpt    u64       #4136            
    setcall      /2/1                   
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       "Can't find @ field"
    setarg   u64 /1                     
    callp        /2    &qq_lib.serror_s 
    load     u64       0                
    jumpret  u64       #4135            
#4135: 
    retfn    u64                        
endproc

proc qq_parse.istypestarter:
    rettype  i64
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       70               
    jumpeq   i64 /1    #4143            
    load     i64       109              
    jumpeq   i64 /1    #4143            
    load     i64       110              
    jumpeq   i64 /1    #4143            
    load     i64       11               
    jumpeq   i64       #4143            
    jump               #4144            
#4143: 
    load     i64       1                
    jumpret  i64       #4141            
    jump               #4142            
#4144: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       69               
    jumpne   i64       #4146            
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       69               
    jumpne   i64       #4148            
    load     i64       1                
    jumpret  i64       #4141            
#4148: 
#4146: 
#4142: 
    load     i64       0                
    jumpret  i64       #4141            
#4141: 
    retfn    i64                        
endproc

proc qq_parse.readmacrodef:
    param    i64       isglobal
    local    u64       stmacro
    local    u64       stname
    local    u64       owner
    setcall      /1/1                   
    load     i64       69               
    setarg   i64 /1                     
    callp        /1    &qq_parse.lexchecksymbol
    setcall  u64 /4/1                   
    load     i64       isglobal         
    setarg   i64 /4                     
    load     i64       22               
    setarg   i64 /3                     
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       qq_decls.stcurrproc
    setarg   u64 /1                     
    callf    u64 /4    &qq_names.addsymbol
    store    u64       stmacro          
    load     u64       stmacro          
    store    u64       owner            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       9                
    jumpne   i64       #4151            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       10               
    jumpeq   i64       #4153            
#4154: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       69               
    jumpeq   i64       #4157            
    jump               #4158            
#4157: 
    setcall  u64 /4/1                   
    load     i64       0                
    setarg   i64 /4                     
    load     i64       23               
    setarg   i64 /3                     
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callf    u64 /4    &qq_names.addsymbol
    store    u64       stname           
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    load     u64       stname           
    load     i64       48               
    istorex  u64 /1                     
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       10               
    jumpne   i64       #4160            
    jump               #4155            
#4160: 
    setcall      /1/1                   
    load     i64       3                
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
    jump               #4156            
#4158: 
    setcall      /1/1                   
    load     u64       "macro def params"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#4156: 
    jump               #4154            
#4155: 
#4153: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
#4151: 
    setcall      /0/1                   
    callp        /0    &qq_parse.checkequals
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    load     u64       stmacro          
    load     i64       88               
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_parse.readhostparams:
    param    u64       lhs
    param    i64       isfn
    local    i64       fnindex
    local    i64       nargs
    local    u64       p
    local    u64       q
    rettype  u64
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       fnindex          
    setcall      /1/1                   
    load     i64       9                
    setarg   i64 /1                     
    callp        /1    &qq_parse.lexchecksymbol
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       &nargs           
    setarg   u64 /1                     
    callf    u64 /2    &qq_parse.readslist
    store    u64       q                
    setcall      /1/1                   
    load     i64       10               
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
    load     u64       lhs              
    jumpf    u64       #4163            
    load     u64       q                
    load     u64       lhs              
    load     i64       8                
    istorex  u64 /1                     
    load     u64       lhs              
    store    u64       q                
#4163: 
    setcall  u64 /2/1                   
    load     u64       q                
    setarg   u64 /2                     
    load     i64       27               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    store    u64       p                
    load     i64       fnindex          
    load     u64       p                
    load     i64       24               
    istorex  i64 /1                     
    load     u64       p                
    jumpret  u64       #4161            
#4161: 
    retfn    u64                        
endproc

proc qq_parse.pushlisttype:
    param    i64       ltype
    load     i64       qq_parse.nlisttype
    load     i64       20               
    jumplt   i64       #4166            
    setcall      /1/1                   
    load     u64       "listtype overflow"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#4166: 
    load     i64       qq_parse.listtype
    load     u64       &qq_parse.listtypestack
    load     u64 /1    &qq_parse.nlisttype
    incrload i64 /1                     
    istorex  i64 /8/-8                  
    load     i64       ltype            
    store    i64       qq_parse.listtype
    retproc                             
endproc

proc qq_parse.poplisttype:
    load     u64       &qq_parse.listtypestack
    load     u64 /1    &qq_parse.nlisttype
    loaddecr i64 /1                     
    iloadx   i64 /8/-8                  
    store    i64       qq_parse.listtype
    retproc                             
endproc

proc qq_parse.readcompilervar:
    local    mem:100       str
    local    mem:36       tm
    rettype  u64
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #4170            
    load     i64       2                
    jumpeq   i64 /1    #4171            
    load     i64       4                
    jumpeq   i64 /1    #4172            
    load     i64       3                
    jumpeq   i64 /1    #4173            
    load     i64       5                
    jumpeq   i64 /1    #4174            
    load     i64       6                
    jumpeq   i64 /1    #4175            
    load     i64       7                
    jumpeq   i64       #4176            
    jump               #4177            
#4170: 
    setcall  u64 /1/1                   
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    load     i64       0                
    load     i64       23               
    loadbf   i64                        
    setarg   i64 /1                     
    callf    u64 /1    &qq_lib.createintunit
    jumpret  u64       #4168            
    jump               #4169            
#4171: 
    setcall  u64 /2                     
    setcall  u64 /2                     
    load     u64       0                
    setarg   u64 /2                     
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    load     i64       0                
    load     i64       23               
    loadbf   i64                        
    setarg   i64 /1                     
    callf    u64 /2    &msysc.strint    
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    jump               #4169            
#4172: 
    setcall  u64 /2/1                   
    load     u64       qq_decls.currmodule
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    jump               #4169            
#4173: 
    setcall  u64 /2/1                   
    load     u64       qq_decls.currmodule
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    jump               #4169            
#4174: 
    setcall  u64 /2/1                   
    startmx                             
    load     u64       qq_decls.stcurrproc
    jumpf    u64       #4179            
    load     u64       qq_decls.stcurrproc
    load     i64       0                
    iloadx   u64 /1                     
    resetmx  u64                        
    jump               #4178            
#4179: 
    load     u64       "<none>"         
    endmx    u64                        
#4178: 
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    jump               #4169            
#4175: 
    setcall      /1/1                   
    load     u64       &tm              
    setarg   u64 /1                     
    callp        /1    &mlinux.os_getsystime
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "#-#-#"          
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       &tm              
    load     i64       12               
    iloadx   i32 /1                     
    widen    i64/i32                    
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       &qq_parse.readcompilervar.monthnames
    load     u64       &tm              
    load     i64       4                
    iloadx   i32 /1                     
    widen    i64/i32                    
    iloadx   u64 /8/-8                  
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /2/1                   
    load     u64       "4"              
    setarg   u64 /2                     
    load     u64       &tm              
    load     i64       0                
    iloadx   i32 /1                     
    widen    i64/i32                    
    setarg   i64 /1                     
    callp        /2    &msysc.m$print_i64
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #4169            
#4176: 
    setcall      /1/1                   
    load     u64       &tm              
    setarg   u64 /1                     
    callp        /1    &mlinux.os_getsystime
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "#:#:#"          
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /2/1                   
    load     u64       "2"              
    setarg   u64 /2                     
    load     u64       &tm              
    load     i64       16               
    iloadx   i32 /1                     
    widen    i64/i32                    
    setarg   i64 /1                     
    callp        /2    &msysc.m$print_i64
    setcall      /2/1                   
    load     u64       "z2"             
    setarg   u64 /2                     
    load     u64       &tm              
    load     i64       20               
    iloadx   i32 /1                     
    widen    i64/i32                    
    setarg   i64 /1                     
    callp        /2    &msysc.m$print_i64
    setcall      /2/1                   
    load     u64       "z2"             
    setarg   u64 /2                     
    load     u64       &tm              
    load     i64       24               
    iloadx   i32 /1                     
    widen    i64/i32                    
    setarg   i64 /1                     
    callp        /2    &msysc.m$print_i64
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #4169            
#4177: 
    setcall      /1/1                   
    load     u64       "compiler var not impl"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#4169: 
    setcall  u64 /2                     
    load     i64       -1               
    setarg   i64 /2                     
    setcall  u64 /1                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /1    &mlib.pcm_copyheapstring
    setarg   u64 /1                     
    callf    u64 /2    &qq_lib.createstringunit
    jumpret  u64       #4168            
#4168: 
    retfn    u64                        
endproc

proc qq_parse.readpair:
    param    i64       tag
    param    i64       pclop
    local    u64       p
    local    u64       a
    local    u64       b
    rettype  u64
    setcall      /1/1                   
    load     i64       9                
    setarg   i64 /1                     
    callp        /1    &qq_parse.lexchecksymbol
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       a                
    setcall      /1/1                   
    load     i64       3                
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       b                
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpne   i64       #4182            
    load     i64       tag              
    load     i64       37               
    jumpne   i64       #4182            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    load     u64       b                
    load     i64       8                
    istorex  u64 /1                     
#4182: 
    setcall      /1/1                   
    load     i64       10               
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
    setcall  u64 /3/1                   
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     i64       tag              
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       p                
    load     i64       pclop            
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
    load     u64       p                
    jumpret  u64       #4180            
#4180: 
    retfn    u64                        
endproc

proc qq_parse.lexchecksymbol:
    param    i64       symbol
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall      /1/1                   
    load     i64       symbol           
    setarg   i64 /1                     
    callp        /1    &qq_lib.checksymbol
    retproc                             
endproc

proc qq_parse.readtypedef:
    param    i64       isglobal
    local    i64       ptype
    local    u64       d
    setcall      /1/1                   
    load     i64       69               
    setarg   i64 /1                     
    callp        /1    &qq_parse.lexchecksymbol
    setcall  u64 /4/1                   
    load     i64       isglobal         
    setarg   i64 /4                     
    load     i64       10               
    setarg   i64 /3                     
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       qq_decls.stcurrproc
    setarg   u64 /1                     
    callf    u64 /4    &qq_names.addsymbol
    store    u64       d                
    setcall      /1/1                   
    load     i64       43               
    setarg   i64 /1                     
    callp        /1    &qq_parse.lexchecksymbol
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       102              
    jumpne   i64       #4186            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     i64       9                
    load     u64       d                
    load     i64       124              
    istorex  u8  /1                     
    setcall      /2/1                   
    load     u64       d                
    setarg   u64 /2                     
    load     i64       isglobal         
    setarg   i64 /1                     
    callp        /2    &qq_parse.readrecorddef
    jump               #4184            
#4186: 
    setcall  i64 /2/1                   
    load     u64       d                
    setarg   u64 /2                     
    load     i64       0                
    setarg   i64 /1                     
    callf    i64 /2    &qq_parse.readtypespec
    store    i64       ptype            
    setcall      /2/1                   
    load     i64       ptype            
    setarg   i64 /2                     
    load     u64       d                
    setarg   u64 /1                     
    callp        /2    &qq_names.createusertype
#4184: 
    retproc                             
endproc

proc qq_parse.readtypespec:
    param    i64       allowvar
    param    u64       owner
    local    i64       flags
    local    i64       arraycode
    local    i64       oldipl
    local    i64       a
    local    i64       b
    local    i64       t
    local    i64       startline
    local    i64       caligned
    local    u64       d
    local    mem:80       lowerdims
    local    mem:80       lengthdims
    local    i64       ndims
    local    u64       x
    local    u64       lowerx
    local    u64       upperx
    local    u64       lengthx
    local    i64       i
    rettype  i64
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       11               
    jumpeq   i64 /1    #4189            
    load     i64       109              
    jumpeq   i64 /1    #4190            
    load     i64       69               
    jumpeq   i64 /1    #4191            
    load     i64       70               
    jumpeq   i64 /1    #4192            
    load     i64       102              
    jumpeq   i64 /1    #4193            
    load     i64       103              
    jumpeq   i64       #4194            
    jump               #4195            
#4189: 
! qq_parse.readtypespec.dolsq:
#4196: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     i64       0                
    store    i64       ndims            
    setcall      /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callp        /1    &qq_parse.pushlisttype
#4197: 
    load     u64       0                
    double                              
    store    u64       lengthx          
    store    u64       lowerx           
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       12               
    jumpeq   i64       #4201            
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpne   i64       #4200            
#4201: 
    jump               #4199            
#4200: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       87               
    jumpne   i64       #4203            
    load     u64       x                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       lowerx           
    load     u64       x                
    load     i64       24               
    iloadx   u64 /1                     
    store    u64       upperx           
    load     u64       lowerx           
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       41               
    jumpne   i64       #4205            
    load     u64       upperx           
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       41               
    jumpne   i64       #4205            
    setcall  u64 /1/1                   
    load     u64       upperx           
    load     i64       16               
    iloadx   i64 /1                     
    load     u64       lowerx           
    load     i64       16               
    iloadx   i64 /1                     
    sub      i64                        
    load     i64       1                
    add      i64                        
    setarg   i64 /1                     
    callf    u64 /1    &qq_lib.createintunit
    store    u64       lengthx          
    jump               #4204            
#4205: 
    setcall  u64 /3/1                   
    load     u64       lowerx           
    setarg   u64 /3                     
    load     u64       upperx           
    setarg   u64 /2                     
    load     i64       63               
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       lengthx          
    load     i64       102              
    load     u64       lengthx          
    load     i64       1                
    istorex  u8  /1                     
    setcall  u64 /3                     
    setcall  u64 /1                     
    load     i64       1                
    setarg   i64 /1                     
    callf    u64 /1    &qq_lib.createintunit
    setarg   u64 /3                     
    load     u64       lengthx          
    setarg   u64 /2                     
    load     i64       63               
    setarg   i64 /1                     
    callf    u64 /3    &qq_lib.createunit2
    store    u64       lengthx          
    load     i64       101              
    load     u64       lengthx          
    load     i64       1                
    istorex  u8  /1                     
#4204: 
    jump               #4202            
#4203: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       12               
    jumpeq   i64 /1    #4207            
    load     i64       3                
    jumpeq   i64 /1    #4207            
    load     i64       5                
    jumpeq   i64       #4208            
    jump               #4209            
#4207: 
    load     u64       x                
    store    u64       lengthx          
    jump               #4206            
#4208: 
    load     u64       x                
    store    u64       lowerx           
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64       #4211            
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       12               
    jumpeq   i64       #4211            
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    store    u64       lengthx          
#4211: 
    jump               #4206            
#4209: 
#4206: 
#4202: 
#4199: 
    load     u64       lowerx           
    load     u64       &lowerdims       
    load     u64 /1    &ndims           
    incrload i64 /1                     
    istorex  u64 /8/-8                  
    load     u64       lengthx          
    load     u64       &lengthdims      
    load     i64       ndims            
    istorex  u64 /8/-8                  
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64       #4213            
    jump               #4198            
#4213: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #4197            
#4198: 
    setcall      /1/1                   
    load     i64       12               
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
    setcall      /0/1                   
    callp        /0    &qq_parse.poplisttype
    setcall  i64 /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     i64       0                
    setarg   i64 /1                     
    callf    i64 /2    &qq_parse.readtypespec
    store    i64       t                
    load     i64       ndims            
    store    i64       i                
    load     i64       i                
    load     i64       1                
    jumplt   i64       #4216            
#4214: 
    setcall  i64 /3/1                   
    load     u64       &lengthdims      
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /3                     
    load     u64       &lowerdims       
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /2                     
    load     i64       t                
    setarg   i64 /1                     
    callf    i64 /3    &qq_names.makeaxtype
    store    i64       t                
    fordown  i64 /1    #4214            
    opnd     i64       i                
    opnd     i64       1                
#4216: 
    load     i64       t                
    jumpret  i64       #4187            
    jump               #4188            
#4190: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       70               
    jumpne   i64       #4218            
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #4218            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  i64 /2/1                   
    load     u64       owner            
    setarg   u64 /2                     
    load     i64       0                
    setarg   i64 /1                     
    callf    i64 /2    &qq_names.makereftype
    jumpret  i64       #4187            
    jump               #4217            
#4218: 
    setcall  i64 /2                     
    load     u64       owner            
    setarg   u64 /2                     
    setcall  i64 /2                     
    load     u64       0                
    setarg   u64 /2                     
    load     i64       0                
    setarg   i64 /1                     
    callf    i64 /2    &qq_parse.readtypespec
    setarg   i64 /1                     
    callf    i64 /2    &qq_names.makereftype
    jumpret  i64       #4187            
#4217: 
    jump               #4188            
#4191: 
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    store    u64       d                
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       2                
    jumpne   i64       #4220            
    setcall      /1/1                   
    load     i64       69               
    setarg   i64 /1                     
    callp        /1    &qq_parse.lexchecksymbol
    setcall  i64 /2/1                   
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       d                
    setarg   u64 /1                     
    callf    i64 /2    &qq_names.newusertypex
    store    i64       t                
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     i64       t                
    jumpret  i64       #4187            
    jump               #4219            
#4220: 
    setcall  i64 /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       d                
    setarg   u64 /1                     
    callf    i64 /2    &qq_names.newusertypex
    jumpret  i64       #4187            
#4219: 
    jump               #4188            
#4192: 
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       37               
    jumpeq   i64 /1    #4222            
    load     i64       36               
    jumpeq   i64 /1    #4223            
    load     i64       11               
    jumpeq   i64       #4224            
    jump               #4225            
#4222: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       24               
    jumpne   i64       #4227            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  i64 /2                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readexpression
    setarg   u64 /2                     
    load     i64       37               
    setarg   i64 /1                     
    callf    i64 /2    &qq_names.makestrtype
    jumpret  i64       #4187            
    jump               #4226            
#4227: 
    load     i64       38               
    jumpret  i64       #4187            
#4226: 
    jump               #4221            
#4223: 
    setcall      /1/1                   
    load     i64       24               
    setarg   i64 /1                     
    callp        /1    &qq_parse.lexchecksymbol
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  i64 /2                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_parse.readexpression
    setarg   u64 /2                     
    load     i64       36               
    setarg   i64 /1                     
    callf    i64 /2    &qq_names.makestrtype
    jumpret  i64       #4187            
    jump               #4221            
#4224: 
    setcall      /1/1                   
    load     i64       11               
    setarg   i64 /1                     
    callp        /1    &qq_parse.lexchecksymbol
    jump               #4196            
    jump               #4221            
#4225: 
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       t                
    load     i64       t                
    load     i64       1                
    jumpeq   i64 /1    #4229            
    load     i64       2                
    jumpeq   i64       #4230            
    jump               #4231            
#4229: 
    load     i64       26               
    store    i64       t                
    jump               #4228            
#4230: 
    load     i64       32               
    store    i64       t                
    jump               #4228            
#4231: 
#4228: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     i64       t                
    jumpret  i64       #4187            
#4221: 
    jump               #4188            
#4193: 
    load     u64       owner            
    load     u64       0                
    jumpne   u64       #4233            
    setcall      /1/1                   
    load     u64       "anon record"    
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#4233: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       startline        
    setcall  i64 /1/1                   
    load     u64       owner            
    setarg   u64 /1                     
    callf    i64 /1    &qq_parse.readrecordbody
    store    i64       t                
    setcall      /3/1                   
    load     i64       startline        
    setarg   i64 /3                     
    load     i64       0                
    setarg   i64 /2                     
    load     i64       102              
    setarg   i64 /1                     
    callp        /3    &qq_parse.checkend
    load     i64       t                
    jumpret  i64       #4187            
    jump               #4188            
#4194: 
    load     u64       owner            
    load     u64       0                
    jumpne   u64       #4235            
    setcall      /1/1                   
    load     u64       "anon struct"    
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#4235: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     i64       0                
    store    i64       caligned         
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       116              
    jumpne   i64       #4237            
    load     i64       1                
    store    i64       caligned         
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
#4237: 
    load     u64       &qq_decls.lx     
    load     i64       8                
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       startline        
    setcall  i64 /2/1                   
    load     i64       caligned         
    setarg   i64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callf    i64 /2    &qq_parse.readstructbody
    store    i64       t                
    setcall      /3/1                   
    load     i64       startline        
    setarg   i64 /3                     
    load     i64       0                
    setarg   i64 /2                     
    load     i64       103              
    setarg   i64 /1                     
    callp        /3    &qq_parse.checkend
    load     i64       t                
    jumpret  i64       #4187            
    jump               #4188            
#4195: 
    setcall      /1/1                   
    load     u64       "Type expected"  
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#4188: 
    load     i64       t                
    jumpret  i64       #4187            
#4187: 
    retfn    i64                        
endproc

proc qq_parse.readparams:
    param    u64       stproc
    local    i64       isbyref
    local    i64       isoptional
    local    u64       d
    load     i64       0                
    double                              
    store    i64       isoptional       
    store    i64       isbyref          
#4239: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       19               
    jumpne   i64       #4242            
    load     u64 /1    &isbyref         
    incrto   i64 /1                     
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
#4242: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       18               
    jumpne   i64       #4244            
    load     u64 /1    &isoptional      
    incrto   i64 /1                     
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
#4244: 
    setcall      /1/1                   
    load     i64       69               
    setarg   i64 /1                     
    callp        /1    &qq_lib.checksymbol
    setcall  u64 /4/1                   
    load     i64       0                
    setarg   i64 /4                     
    load     i64       15               
    setarg   i64 /3                     
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       stproc           
    setarg   u64 /1                     
    callf    u64 /4    &qq_names.addsymbol
    store    u64       d                
    load     u64       stproc           
    load     i64       104              
    addpx    u64 /1                     
    incrto   i16 /1                     
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       43               
    jumpne   i64       #4246            
    load     i64       1                
    store    i64       isoptional       
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_parse.readexpression
    load     u64       d                
    load     i64       88               
    istorex  u64 /1                     
#4246: 
    load     i64       isbyref          
    jumpf    i64       #4248            
    load     i64       isoptional       
    jumpf    i64       #4248            
    setcall      /1/1                   
    load     u64       "Mixed byref/optional"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#4248: 
    load     i64       isbyref          
    load     u64       d                
    load     i64       120              
    addpx    u64 /1                     
    load     i64       5                
    storebit u16                        
    load     i64       isoptional       
    load     u64       d                
    load     i64       120              
    addpx    u64 /1                     
    load     i64       7                
    storebit u16                        
    load     i64       0                
    double                              
    store    i64       isoptional       
    store    i64       isbyref          
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpne   i64       #4250            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       21               
    jumpne   i64       #4252            
    load     u64       1                
    load     u64       stproc           
    load     i64       120              
    addpx    u64 /1                     
    load     i64       8                
    storebit u16                        
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #4240            
#4252: 
    jump               #4249            
#4250: 
    jump               #4240            
#4249: 
    jump               #4239            
#4240: 
    setcall      /1/1                   
    load     i64       10               
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
    retproc                             
endproc

proc qq_parse.checkoperator:
    local    u64       p
    local    i64       opc
    rettype  u64
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64 /1    #4256            
    load     i64       10               
    jumpeq   i64 /1    #4256            
    load     i64       4                
    jumpne   i64       #4255            
#4256: 
    setcall  u64 /1/1                   
    load     i64       5                
    setarg   i64 /1                     
    callf    u64 /1    &qq_lib.createunit0
    store    u64       p                
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       132              
    jumpne   i64       #4258            
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       45               
    jumpeq   i64 /1    #4260            
    load     i64       23899            
    jumpeq   i64       #4261            
    jump               #4262            
#4260: 
    load     i64       75               
    store    i64       opc              
    jump               #4259            
#4261: 
    load     i64       130              
    store    i64       opc              
    jump               #4259            
#4262: 
    load     i64       0                
    store    i64       opc              
#4259: 
    load     i64       opc              
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
    jump               #4257            
#4258: 
    load     u64       &qq_tables.cmpopset
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u8  /1                     
    jumpf    u8        #4263            
    setcall      /1/1                   
    load     u64       "(CMP OP) NOT READY"
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
    jump               #4257            
#4263: 
    load     u64       &qq_decls.lx     
    load     i64       13               
    iloadx   u8  /1                     
    load     u64       p                
    load     i64       1                
    istorex  u8  /1                     
#4257: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       p                
    jumpret  u64       #4253            
#4255: 
    load     u64       0                
    jumpret  u64       #4253            
#4253: 
    retfn    u64                        
endproc

proc qq_parse.readlambda:
    local    u64       p
    local    mem:800       params
    local    u64       oldstcurrproc
    local    u64       stproc
    local    u64       d
    local    mem:20       str
    local    i64       nparams
    local    u8       byref
    rettype  u64
    load     u64       qq_decls.stcurrproc
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       5                
    jumpeq   i64 /1    #4266            
    load     i64       6                
    jumpeq   i64       #4267            
    jump               #4268            
#4266: 
    jump               #4265            
#4267: 
    setcall      /1/1                   
    load     u64       "Nested {}"      
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
    jump               #4265            
#4268: 
    setcall      /1/1                   
    load     u64       "{} not in fn"   
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#4265: 
    load     u64       qq_decls.stcurrproc
    store    u64       oldstcurrproc    
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "$F"             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64 /1    &qq_parse.nextlambdaindex
    incrload i64 /1                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall  u64 /4                     
    load     i64       0                
    setarg   i64 /4                     
    load     i64       6                
    setarg   i64 /3                     
    setcall  u64 /1                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /1    &qq_lex.addnamestr
    setarg   u64 /2                     
    load     u64       qq_decls.stcurrproc
    setarg   u64 /1                     
    callf    u64 /4    &qq_names.addsymbol
    store    u64       stproc           
    load     u64       stproc           
    store    u64       qq_decls.stcurrproc
    setcall      /1/1                   
    load     u64       stproc           
    setarg   u64 /1                     
    callp        /1    &qq_names.addproc
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     i64       0                
    store    i64       nparams          
    load     i64       0                
    store    u8        byref            
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       19               
    jumpne   i64       #4270            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     i64       1                
    store    u8        byref            
#4270: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       69               
    jumpne   i64       #4272            
    load     u64       &qq_decls.nextlx 
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64 /1    #4273            
    load     i64       5                
    jumpne   i64       #4272            
#4273: 
#4274: 
    setcall      /1/1                   
    load     i64       69               
    setarg   i64 /1                     
    callp        /1    &qq_lib.checksymbol
    setcall  u64 /4/1                   
    load     i64       0                
    setarg   i64 /4                     
    load     i64       15               
    setarg   i64 /3                     
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       stproc           
    setarg   u64 /1                     
    callf    u64 /4    &qq_names.addsymbol
    store    u64       d                
    load     u64       d                
    load     u64       &params          
    load     u64 /1    &nparams         
    incrload i64 /1                     
    istorex  u64 /8/-8                  
    load     u8        byref            
    widen    u64/u8                     
    load     u64       d                
    load     i64       120              
    addpx    u64 /1                     
    load     i64       5                
    storebit u16                        
    load     i64       0                
    store    u8        byref            
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64       #4277            
    jump               #4275            
#4277: 
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    jump               #4274            
#4275: 
    setcall      /1/1                   
    load     i64       5                
    setarg   i64 /1                     
    callp        /1    &qq_lib.checksymbol
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
#4272: 
    load     i64       nparams          
    load     u64       stproc           
    load     i64       104              
    istorex  i16 /1                     
    load     u64       1                
    load     u64       stproc           
    load     i64       120              
    addpx    u64 /1                     
    load     i64       4                
    storebit u16                        
    setcall  u64 /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_parse.readsunit
    load     u64       stproc           
    load     i64       88               
    istorex  u64 /1                     
    setcall      /1/1                   
    load     i64       14               
    setarg   i64 /1                     
    callp        /1    &qq_lib.skipsymbol
    setcall  u64 /1/1                   
    load     u64       stproc           
    setarg   u64 /1                     
    callf    u64 /1    &qq_lib.createname
    store    u64       p                
    load     u64       oldstcurrproc    
    store    u64       qq_decls.stcurrproc
    load     u64       p                
    jumpret  u64       #4264            
#4264: 
    retfn    u64                        
endproc

proc qq_parse.readpackvars:
    param    u64       owner
    param    i64       id
    local    i64       t
    local    i64       nvars
    local    u64       d
    setcall  i64 /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     i64       0                
    setarg   i64 /1                     
    callf    i64 /2    &qq_parse.readtypespec
    store    i64       t                
    load     i64       0                
    store    i64       nvars            
    jump               #4280            
#4279: 
    load     u64 /1    &nvars           
    incrto   i64 /1                     
    setcall  u64 /4/1                   
    load     i64       0                
    setarg   i64 /4                     
    load     i64       id               
    setarg   i64 /3                     
    load     u64       &qq_decls.lx     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callf    u64 /4    &qq_names.addsymbol
    store    u64       d                
    setcall      /3/1                   
    load     u64       d                
    load     i64       116              
    addpx    u64 /1                     
    setarg   u64 /3                     
    load     i64       t                
    setarg   i64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /3    &qq_lib.storemode
    setcall      /0/1                   
    callp        /0    &qq_lex.lex      
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64       #4283            
    jump               #4281            
#4283: 
    setcall      /1/1                   
    load     i64       69               
    setarg   i64 /1                     
    callp        /1    &qq_parse.lexchecksymbol
#4280: 
    load     u64       &qq_decls.lx     
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       69               
    jumpeq   i64       #4279            
#4281: 
    load     i64       nvars            
    load     i64       0                
    jumpne   i64       #4285            
    setcall      /1/1                   
    load     u64       "bad decl?"      
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#4285: 
    retproc                             
endproc

proc qq_pclgen.evalunit:
    param    u64       p
    param    i64       res
    local    u64       a
    local    u64       b
    local    u64       d
    local    i64       procflag
    local    i64       index
    local    i64       av_1
    local    i64       i
    load     u64       p                
    load     i64       4                
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       qq_decls.qpos    
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       a                
    load     u64       p                
    load     i64       24               
    iloadx   u64 /1                     
    store    u64       b                
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    switch   i64 /0/90  #4288           
    opnd     i64       #4289            
#4288: 
    swlabel            #4292            
    swlabel            #4335            
    swlabel            #4322            
    swlabel            #4289            
    swlabel            #4357            
    swlabel            #4399            
    swlabel            #4309            
    swlabel            #4324            
    swlabel            #4343            
    swlabel            #4289            
    swlabel            #4340            
    swlabel            #4340            
    swlabel            #4341            
    swlabel            #4341            
    swlabel            #4289            
    swlabel            #4325            
    swlabel            #4326            
    swlabel            #4327            
    swlabel            #4327            
    swlabel            #4339            
    swlabel            #4323            
    swlabel            #4328            
    swlabel            #4329            
    swlabel            #4350            
    swlabel            #4289            
    swlabel            #4402            
    swlabel            #4319            
    swlabel            #4321            
    swlabel            #4401            
    swlabel            #4342            
    swlabel            #4330            
    swlabel            #4347            
    swlabel            #4320            
    swlabel            #4404            
    swlabel            #4398            
    swlabel            #4396            
    swlabel            #4397            
    swlabel            #4358            
    swlabel            #4289            
    swlabel            #4294            
    swlabel            #4306            
    swlabel            #4290            
    swlabel            #4291            
    swlabel            #4293            
    swlabel            #4318            
    swlabel            #4289            
    swlabel            #4382            
    swlabel            #4385            
    swlabel            #4386            
    swlabel            #4387            
    swlabel            #4338            
    swlabel            #4390            
    swlabel            #4391            
    swlabel            #4403            
    swlabel            #4344            
    swlabel            #4345            
    swlabel            #4289            
    swlabel            #4289            
    swlabel            #4289            
    swlabel            #4346            
    swlabel            #4400            
    swlabel            #4400            
    swlabel            #4371            
    swlabel            #4359            
    swlabel            #4409            
    swlabel            #4412            
    swlabel            #4371            
    swlabel            #4289            
    swlabel            #4405            
    swlabel            #4380            
    swlabel            #4381            
    swlabel            #4408            
    swlabel            #4351            
    swlabel            #4352            
    swlabel            #4378            
    swlabel            #4379            
    swlabel            #4406            
    swlabel            #4407            
    swlabel            #4374            
    swlabel            #4364            
    swlabel            #4289            
    swlabel            #4289            
    swlabel            #4289            
    swlabel            #4289            
    swlabel            #4375            
    swlabel            #4375            
    swlabel            #4289            
    swlabel            #4356            
    swlabel            #4353            
    swlabel            #4354            
    swlabel            #4355            
    endsw                               
#4290: 
    setcall      /2/1                   
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     i64       14               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_int
    jump               #4287            
#4291: 
    setcall      /2/1                   
    load     u64       p                
    load     i64       16               
    iloadx   r64 /1                     
    setarg   r64 /2                     
    load     i64       17               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_real
    jump               #4287            
#4292: 
    jump               #4287            
#4293: 
    setcall      /1/1                   
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_pclgen.pushstring
    jump               #4287            
#4294: 
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       d                
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       15               
    jumpeq   i64 /1    #4296            
    load     i64       14               
    jumpeq   i64 /1    #4297            
    load     i64       13               
    jumpeq   i64 /1    #4297            
    load     i64       17               
    jumpeq   i64       #4298            
    jump               #4299            
#4296: 
    setcall      /2/1                   
    load     u64       d                
    setarg   u64 /2                     
    load     i64       7                
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    load     u64       d                
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       5                
    loadbit  i64                        
    jumpf    u64       #4301            
    setcall      /1/1                   
    load     i64       22               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
#4301: 
    jump               #4295            
#4297: 
    setcall      /2/1                   
    load     u64       d                
    setarg   u64 /2                     
    load     i64       7                
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    jump               #4295            
#4298: 
    load     u64       d                
    load     i64       80               
    iloadx   i64 /1                     
    load     i64       0                
    jumpne   i64       #4303            
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    load     u64       d                
    load     i64       80               
    istorex  i64 /1                     
#4303: 
    load     i64       res              
    jumpt    i64       #4305            
    setcall      /2/1                   
    load     u64       d                
    load     i64       80               
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     i64       30               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_lab
    jump               #4286            
    jump               #4304            
#4305: 
    setcall      /2/1                   
    load     u64       d                
    load     i64       80               
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     i64       11               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_lab
#4304: 
    jump               #4295            
#4299: 
    setcall      /2/1                   
    load     u64       d                
    setarg   u64 /2                     
    load     i64       21               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
#4295: 
    jump               #4287            
#4306: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       39               
    jumpne   i64       #4308            
    setcall      /2/1                   
    load     u64       a                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     i64       21               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    jump               #4307            
#4308: 
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       ".$ name expected"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4307: 
    jump               #4287            
#4309: 
    load     u64       a                
    jumpf    u64       #4311            
    jump               #4313            
#4312: 
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       a                
#4313: 
    load     u64       a                
    jumpf    u64       #4315            
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    jumpt    u64       #4312            
#4315: 
    load     u64       a                
    jumpf    u64       #4317            
    setcall      /2/1                   
    load     i64       res              
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
#4317: 
    jump               #4310            
#4311: 
#4310: 
    jump               #4287            
#4318: 
    setcall      /1/1                   
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_pclgen.pushstring
    setcall      /1/1                   
    load     i64       69               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    jump               #4287            
#4319: 
    setcall      /5/1                   
    load     u64       &procflag        
    setarg   u64 /5                     
    load     i64       res              
    setarg   i64 /4                     
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /5    &qq_pclgen.do_call
    jump               #4287            
#4320: 
    setcall      /3/1                   
    load     i64       res              
    setarg   i64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_pclgen.do_return
    jump               #4287            
#4321: 
    setcall      /3/1                   
    load     i64       res              
    setarg   i64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_pclgen.do_callhost
    jump               #4287            
#4322: 
    setcall      /4/1                   
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /4                     
    load     i64       res              
    setarg   i64 /3                     
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /4    &qq_pclgen.do_assign
    jump               #4287            
#4323: 
    setcall      /3/1                   
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_pclgen.do_to 
    jump               #4287            
#4324: 
    setcall      /5/1                   
    load     i64       res              
    setarg   i64 /5                     
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /4                     
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /5    &qq_pclgen.do_if 
    jump               #4287            
#4325: 
    setcall      /3/1                   
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_pclgen.do_for
    jump               #4287            
#4326: 
    setcall      /3/1                   
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_pclgen.do_forx
    jump               #4287            
#4327: 
    setcall      /3/1                   
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_pclgen.do_forall
    jump               #4287            
#4328: 
    setcall      /3/1                   
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_pclgen.do_while
    jump               #4287            
#4329: 
    setcall      /3/1                   
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_pclgen.do_repeat
    jump               #4287            
#4330: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       39               
    jumpne   i64       #4332            
    load     u64       a                
    load     i64       16               
    iloadx   u64 /1                     
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       17               
    jumpne   i64       #4332            
    load     u64       a                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       d                
    load     u64       d                
    load     i64       80               
    iloadx   i64 /1                     
    load     i64       0                
    jumpne   i64       #4334            
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    load     u64       d                
    load     i64       80               
    istorex  i64 /1                     
#4334: 
    setcall      /2/1                   
    load     u64       d                
    load     i64       80               
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     i64       30               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_lab
    jump               #4331            
#4332: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       31               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
#4331: 
    jump               #4287            
#4335: 
    load     u64       a                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       d                
    setcall      /1/1                   
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_pcllib.gencomment
    load     u64       d                
    load     i64       80               
    iloadx   i64 /1                     
    load     i64       0                
    jumpne   i64       #4337            
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.definelabel
    load     u64       d                
    load     i64       80               
    istorex  i64 /1                     
    jump               #4336            
#4337: 
    load     u64       d                
    load     i64       80               
    iloadx   i64 /1                     
    store    i64       index            
    setcall      /1/1                   
    load     i64       index            
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
#4336: 
    jump               #4287            
#4338: 
    setcall      /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callp        /1    &qq_pclgen.do_loop
    jump               #4287            
#4339: 
    setcall      /2/1                   
    load     u64       a                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.do_do 
    jump               #4287            
#4340: 
    setcall      /4/1                   
    load     i64       res              
    setarg   i64 /4                     
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /4    &qq_pclgen.do_case
    jump               #4287            
#4341: 
    setcall      /4/1                   
    load     i64       res              
    setarg   i64 /4                     
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /4    &qq_pclgen.do_switch
    jump               #4287            
#4342: 
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_pclgen.evalref
    setcall      /1/1                   
    load     u64       b                
    setarg   u64 /1                     
    callp        /1    &qq_pclgen.evalref
    setcall      /1/1                   
    load     i64       28               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    jump               #4287            
#4343: 
    setcall      /3/1                   
    load     i64       res              
    setarg   i64 /3                     
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /3    &qq_pclgen.do_select
    jump               #4287            
#4344: 
    setcall      /3/1                   
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_pclgen.do_print
    jump               #4287            
#4345: 
    setcall      /4/1                   
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /4                     
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /4    &qq_pclgen.do_fprint
    jump               #4287            
#4346: 
    setcall      /3/1                   
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_pclgen.do_read
    jump               #4287            
#4347: 
    load     u64       a                
    jumpf    u64       #4349            
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    jump               #4348            
#4349: 
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       14               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_int
#4348: 
    setcall      /1/1                   
    load     i64       60               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    jump               #4287            
#4350: 
    setcall      /3/1                   
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_pclgen.do_try
    jump               #4287            
#4351: 
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.do_andl
    jump               #4287            
#4352: 
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.do_orl
    jump               #4287            
#4353: 
    setcall      /2/1                   
    load     u64       p                
    load     i64       24               
    iloadx   i32 /1                     
    widen    i64/i32                    
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.do_pushlist
    setcall      /3/1                   
    load     u64       p                
    load     i64       28               
    iloadx   i32 /1                     
    widen    i64/i32                    
    setarg   i64 /3                     
    load     u64       p                
    load     i64       24               
    iloadx   i32 /1                     
    widen    i64/i32                    
    setarg   i64 /2                     
    load     i64       61               
    setarg   i64 /1                     
    callp        /3    &qq_pcllib.genpc_xy
    jump               #4287            
#4354: 
    setcall      /2/1                   
    load     u64       p                
    load     i64       24               
    iloadx   i32 /1                     
    widen    i64/i32                    
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.do_pushlist
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     u64       p                
    load     i64       24               
    iloadx   i32 /1                     
    widen    i64/i32                    
    setarg   i64 /2                     
    load     i64       66               
    setarg   i64 /1                     
    callp        /3    &qq_pcllib.genpc_xy
    jump               #4287            
#4355: 
    setcall      /2/1                   
    load     u64       p                
    load     i64       24               
    iloadx   i32 /1                     
    widen    i64/i32                    
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.do_makedict
    jump               #4287            
#4356: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       b                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       67               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    jump               #4287            
#4357: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       b                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    jump               #4287            
#4358: 
    setcall      /3/1                   
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_pclgen.do_map
    jump               #4287            
#4359: 
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       105              
    jumpeq   i64 /1    #4361            
    load     i64       106              
    jumpeq   i64       #4362            
    jump               #4363            
#4361: 
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.do_idiv
    jump               #4360            
#4362: 
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.do_irem
    jump               #4360            
#4363: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       b                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
#4360: 
    jump               #4287            
#4364: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       b                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_pclgen.evalref
    setcall      /1/1                   
    load     i64       122              
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    load     i64       1                
    store    i64       i                
    load     i64       11               
    store    i64       av_1             
    load     i64       av_1             
    load     i64       1                
    jumplt   i64       #4368            
#4365: 
    load     u64       &qq_pcltabs.bintotable
    load     i64       i                
    addpx    mem:24 /24/-24             
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    jumpne   i64       #4370            
    load     i64       i                
    load     u64       qq_pcllib.pccurr 
    load     i64       16               
    istorex  u8  /1                     
    jump               #4367            
#4370: 
    forup    i64 /1    #4365            
    opnd     i64       i                
    opnd     i64       av_1             
#4368: 
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "No binto entry" 
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4367: 
    jump               #4287            
#4371: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       90               
    jumpne   i64       #4373            
    load     i64       1                
    load     u64       qq_pcllib.pccurr 
    load     i64       9                
    istorex  u8  /1                     
#4373: 
    jump               #4287            
#4374: 
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_pclgen.evalref
    setcall      /1/1                   
    load     i64       85               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    load     u64       qq_pcllib.pccurr 
    load     i64       16               
    istorex  u8  /1                     
    jump               #4287            
#4375: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       b                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_pclgen.evalref
    setcall      /1/1                   
    startmx                             
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       84               
    jumpne   i64       #4377            
    load     i64       126              
    resetmx  i64                        
    jump               #4376            
#4377: 
    load     i64       125              
    endmx    i64                        
#4376: 
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    jump               #4287            
#4378: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       77               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    jump               #4287            
#4379: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       79               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    jump               #4287            
#4380: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       97               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    load     u64       p                
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    load     u64       qq_pcllib.pccurr 
    load     i64       16               
    istorex  i32 /1                     
    jump               #4287            
#4381: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       98               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    load     u64       qq_pcllib.pccurr 
    load     i64       9                
    istorex  u8  /1                     
    jump               #4287            
#4382: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    load     u64       b                
    load     i64       16               
    iloadx   u64 /1                     
    load     i64       104              
    iloadx   i64 /1                     
    load     i64       0                
    jumpne   i64       #4384            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       ".m?"            
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4384: 
    setcall      /2/1                   
    load     u64       b                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     i64       127              
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    jump               #4287            
#4385: 
    setcall      /3/1                   
    load     i64       130              
    setarg   i64 /3                     
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /3    &qq_pclgen.do_bin
    jump               #4287            
#4386: 
    setcall      /3/1                   
    load     i64       136              
    setarg   i64 /3                     
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /3    &qq_pclgen.do_bin
    jump               #4287            
#4387: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       b                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    jumpf    u64       #4389            
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    jump               #4388            
#4389: 
    setcall      /1/1                   
    load     i64       15               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
#4388: 
    setcall      /1/1                   
    load     i64       133              
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    jump               #4287            
#4390: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       22               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    jump               #4287            
#4391: 
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpne   i64       #4393            
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       51               
    jumpne   i64       #4395            
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    jump               #4394            
#4395: 
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_pclgen.evalref
#4394: 
    jump               #4392            
#4393: 
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_pclgen.evalref
    setcall      /1/1                   
    load     i64       29               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
#4392: 
    jump               #4287            
#4396: 
    setcall      /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callp        /1    &qq_pclgen.do_convert
    jump               #4287            
#4397: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     u64       p                
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /2                     
    load     i64       100              
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_int
    jump               #4287            
#4398: 
    setcall      /2/1                   
    load     u64       p                
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /2                     
    load     i64       19               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_int
    jump               #4287            
#4399: 
    setcall      /2/1                   
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     i64       20               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_int
    jump               #4287            
#4400: 
    setcall      /3/1                   
    load     i64       res              
    setarg   i64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_pclgen.do_incr
    jump               #4287            
#4401: 
    setcall      /1/1                   
    load     i64       16               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    jump               #4287            
#4402: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       141              
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    jump               #4287            
#4403: 
    setcall      /1/1                   
    load     i64       15               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    jump               #4287            
#4404: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     i64       58               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_n
    jump               #4287            
#4405: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     i64       92               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_n
    jump               #4287            
#4406: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       b                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       113              
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    load     u64       qq_pcllib.pccurr 
    load     i64       9                
    istorex  u8  /1                     
    jump               #4287            
#4407: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       b                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       114              
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    load     u64       qq_pcllib.pccurr 
    load     i64       9                
    istorex  u8  /1                     
    jump               #4287            
#4408: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       b                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     i64       115              
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_n
    jump               #4287            
#4409: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       2                
    jumpne   i64       #4411            
    setcall      /1/1                   
    load     i64       82               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    jump               #4410            
#4411: 
    setcall      /1/1                   
    load     i64       83               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    load     u64       qq_pcllib.pccurr 
    load     i64       16               
    istorex  u8  /1                     
#4410: 
    jump               #4287            
#4412: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       b                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       84               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    load     u64       qq_pcllib.pccurr 
    load     i64       16               
    istorex  u8  /1                     
    jump               #4287            
#4289: 
    setcall      /3/1                   
    load     u64       p                
    setarg   u64 /3                     
    load     u64       &qq_tables.jtagnames
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /2                     
    load     u64       "UNSUPPORTED TAG:"
    setarg   u64 /1                     
    callp        /3    &qq_lib.gerror_s 
#4287: 
    load     u64       &qq_tables.jhasvalue
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpeq   i64 /1    #4414            
    load     i64       1                
    jumpeq   i64       #4415            
    jump               #4416            
#4414: 
    load     i64       res              
    jumpf    i64       #4418            
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       54               
    jumpeq   i64 /1    #4422            
    load     i64       55               
    jumpne   i64       #4421            
#4422: 
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       4                
    bitand   i64                        
    jumpt    i64       #4420            
#4421: 
    setcall      /3/1                   
    load     u64       0                
    setarg   u64 /3                     
    load     u64       &qq_tables.jtagnames
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /2                     
    load     u64       "Value expected:"
    setarg   u64 /1                     
    callp        /3    &qq_lib.gerror_s 
#4420: 
#4418: 
    jump               #4413            
#4415: 
    load     i64       res              
    jumpt    i64       #4424            
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       26               
    jumpne   i64       #4426            
    load     i64       procflag         
    load     i64       1                
    jumpne   i64       #4426            
    jump               #4425            
#4426: 
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       60               
    jumpeq   i64 /1    #4428            
    load     i64       61               
    jumpne   i64       #4427            
#4428: 
    jump               #4425            
#4427: 
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       27               
    jumpne   i64       #4429            
    load     u64       &qq_tables.hostisfn
    load     u64       p                
    load     i64       24               
    iloadx   i64 /1                     
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #4429            
    jump               #4425            
#4429: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     i64       58               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_n
#4425: 
#4424: 
    jump               #4413            
#4416: 
#4413: 
#4286: 
    retproc                             
endproc

proc qq_pclgen.gencodemodule:
    param    u64       sp
    param    i64       moduleno
    local    mem:800       anonprocs
    local    i64       nanonprocs
    local    u64       d
    local    u64       e
    local    i64       lab
    local    i64       a
    local    i64       b
    local    u64       pm
    local    u64       pc
    local    u64       pctarget
    local    u64       labelmap
    local    i64       av_1
    local    i64       av_2
    local    i64       i
    load     i64       0                
    store    i64       nanonprocs       
    load     u64       sp               
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       a                
    load     u64       sp               
    load     i64       26               
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       b                
    load     u64       &qq_decls.modules
    load     i64       moduleno         
    iloadx   u64 /8                     
    store    u64       pm               
    load     u64       pm               
    store    u64       qq_decls.currmodule
    load     u64       qq_decls.currmodule
    load     i64       88               
    iloadx   u64 /1                     
    double                              
    store    u64       qq_decls.stcurrmodule
    store    u64       qq_decls.stcurrproc
    setcall      /1/1                   
    load     u64       pm               
    load     i64       32               
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.resetpcl
    setcall      /1/1                   
    load     u64       "Module data init code:"
    setarg   u64 /1                     
    callp        /1    &qq_pcllib.gencomment
    load     i64       0                
    store    i64       qq_decls.qpos    
    load     i64       moduleno         
    load     u64       &qq_decls.qpos   
    load     i64       24               
    load     i64       31               
    storebf  i64                        
    load     i64       moduleno         
    load     i64       a                
    jumpne   i64       #4432            
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab              
    setcall      /2/1                   
    load     i64       lab              
    setarg   i64 /2                     
    load     i64       30               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_lab
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     i64       60               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_n
    load     u64       qq_pcllib.pccurr 
    store    u64       qq_decls.stopseq 
    load     u64       qq_pcllib.pccurr 
    load     i64       1                
    addpx    u64 /32                    
    store    u64       qq_decls.raiseseq
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       14               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_int
    setcall      /1/1                   
    load     i64       141              
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    setcall      /1/1                   
    load     i64       lab              
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
#4432: 
    load     u64       qq_decls.stcurrmodule
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       d                
    jump               #4434            
#4433: 
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       13               
    jumpne   i64       #4437            
    load     u64       d                
    load     i64       88               
    iloadx   u64 /1                     
    jumpf    u64       #4437            
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       d                
    load     i64       88               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    load     u64       d                
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       11               
    load     i64       12               
    loadbf   i64                        
    load     i64       3                
    jumpne   i64       #4439            
    setcall      /1/1                   
    load     i64       27               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
#4439: 
    setcall      /2/1                   
    load     u64       d                
    setarg   u64 /2                     
    load     i64       24               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    jump               #4436            
#4437: 
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       5                
    jumpne   i64       #4440            
    load     u64       d                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       e                
    jump               #4442            
#4441: 
    load     u64       e                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       13               
    jumpne   i64       #4445            
    load     u64       e                
    load     i64       88               
    iloadx   u64 /1                     
    jumpf    u64       #4445            
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       e                
    load     i64       88               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     u64       e                
    setarg   u64 /2                     
    load     i64       24               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    jump               #4444            
#4445: 
    load     u64       e                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       6                
    jumpne   i64       #4446            
    load     i64       nanonprocs       
    load     i64       100              
    jumplt   i64       #4448            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Too many anons" 
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4448: 
    load     u64       e                
    load     u64       &anonprocs       
    load     u64 /1    &nanonprocs      
    incrload i64 /1                     
    istorex  u64 /8/-8                  
#4446: 
#4444: 
    load     u64       e                
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       e                
#4442: 
    load     u64       e                
    jumpt    u64       #4441            
#4440: 
#4436: 
    load     u64       d                
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       d                
#4434: 
    load     u64       d                
    jumpt    u64       #4433            
    load     i64       moduleno         
    load     i64       a                
    jumpne   i64       #4450            
    load     i64       b                
    store    i64       i                
    load     i64       a                
    load     i64       1                
    add      i64                        
    store    i64       av_1             
    load     i64       i                
    load     i64       av_1             
    jumplt   i64       #4453            
#4451: 
    setcall      /2/1                   
    load     u64       &qq_decls.modules
    load     i64       i                
    iloadx   u64 /8                     
    load     i64       88               
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     i64       54               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    fordown  i64 /1    #4451            
    opnd     i64       i                
    opnd     i64       av_1             
#4453: 
    load     i64       b                
    store    i64       i                
    load     i64       a                
    load     i64       1                
    add      i64                        
    store    i64       av_2             
    load     i64       i                
    load     i64       av_2             
    jumplt   i64       #4456            
#4454: 
    load     u64       &qq_decls.modules
    load     i64       i                
    iloadx   u64 /8                     
    load     i64       104              
    iloadx   u64 /1                     
    jumpf    u64       #4458            
    setcall      /2/1                   
    load     u64       &qq_decls.modules
    load     i64       i                
    iloadx   u64 /8                     
    load     i64       104              
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     i64       50               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
#4458: 
    fordown  i64 /1    #4454            
    opnd     i64       i                
    opnd     i64       av_2             
#4456: 
    load     u64       qq_decls.currmodule
    load     i64       104              
    iloadx   u64 /1                     
    jumpf    u64       #4460            
    setcall      /2/1                   
    load     u64       qq_decls.currmodule
    load     i64       104              
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     i64       50               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
#4460: 
    load     u64       qq_decls.currmodule
    load     i64       112              
    iloadx   u64 /1                     
    jumpf    u64       #4462            
    setcall      /2/1                   
    load     u64       qq_decls.currmodule
    load     i64       112              
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     i64       50               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
#4462: 
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       qq_decls.stcurrmodule
    load     i64       88               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       14               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_int
    setcall      /1/1                   
    load     i64       60               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    jump               #4449            
#4450: 
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       qq_decls.stcurrmodule
    load     i64       88               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       55               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
#4449: 
    setcall      /1/1                   
    load     u64       "Procs:"         
    setarg   u64 /1                     
    callp        /1    &qq_pcllib.gencomment
    load     u64       qq_decls.stcurrmodule
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       d                
    jump               #4464            
#4463: 
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    switch   i64 /5/22  #4467           
    opnd     i64       #4468            
#4467: 
    swlabel            #4469            
    swlabel            #4469            
    swlabel            #4482            
    swlabel            #4485            
    swlabel            #4471            
    swlabel            #4481            
    swlabel            #4468            
    swlabel            #4468            
    swlabel            #4470            
    swlabel            #4468            
    swlabel            #4468            
    swlabel            #4468            
    swlabel            #4480            
    swlabel            #4478            
    swlabel            #4479            
    swlabel            #4483            
    swlabel            #4468            
    swlabel            #4484            
    endsw                               
#4469: 
    setcall      /1/1                   
    load     u64       d                
    setarg   u64 /1                     
    callp        /1    &qq_pclgen.do_procdef
    jump               #4466            
#4470: 
    jump               #4466            
#4471: 
    load     u64       d                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       e                
    jump               #4475            
#4472: 
    load     u64       e                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       5                
    jumpne   i64       #4477            
    setcall      /1/1                   
    load     u64       e                
    setarg   u64 /1                     
    callp        /1    &qq_pclgen.do_procdef
#4477: 
    load     u64       e                
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       e                
#4475: 
    load     u64       e                
    jumpt    u64       #4472            
    jump               #4466            
#4478: 
    jump               #4466            
#4479: 
    jump               #4466            
#4480: 
    jump               #4466            
#4481: 
    jump               #4466            
#4482: 
    jump               #4466            
#4483: 
    jump               #4466            
#4484: 
    jump               #4466            
#4485: 
    jump               #4466            
#4468: 
    setcall      /3/1                   
    load     u64       0                
    setarg   u64 /3                     
    load     u64       &qq_tables.namenames
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /2                     
    load     u64       "?Module def:"   
    setarg   u64 /1                     
    callp        /3    &qq_lib.gerror_s 
#4466: 
    load     u64       d                
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       d                
#4464: 
    load     u64       d                
    jumpt    u64       #4463            
    load     i64       1                
    store    i64       i                
    load     i64       nanonprocs       
    load     i64       1                
    jumplt   i64       #4488            
#4486: 
    setcall      /1/1                   
    load     u64       &anonprocs       
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /1                     
    callp        /1    &qq_pclgen.do_procdef
    forup    i64 /1    #4486            
    opnd     i64       i                
    opnd     i64       nanonprocs       
#4488: 
    setcall      /1/1                   
    load     i64       5                
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    setcall  u64 /1/1                   
    load     i64       qq_pcllib.nextlabelno
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_allocz 
    store    u64       labelmap         
    load     u64       qq_pcllib.pcstart
    store    u64       pc               
    jump               #4492            
#4489: 
    load     u64       &qq_pcltabs.pclopnd
    load     u64       pc               
    load     i64       8                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       6                
    jumpne   i64       #4494            
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       lab              
    load     u64       qq_pcllib.labelpctable
    load     i64       lab              
    iloadx   u64 /8/-8                  
    store    u64       pctarget         
    load     u64       pctarget         
    load     u64       0                
    jumpne   u64       #4496            
    setcall      /3                     
    load     u64       0                
    setarg   u64 /3                     
    setcall  u64 /2                     
    load     u64       0                
    setarg   u64 /2                     
    load     i64       lab              
    setarg   i64 /1                     
    callf    u64 /2    &msysc.strint    
    setarg   u64 /2                     
    load     u64       "Lab undef:"     
    setarg   u64 /1                     
    callp        /3    &qq_lib.gerror_s 
#4496: 
    load     i64       1                
    load     u64       labelmap         
    load     i64       lab              
    istorex  u8  /1/-1                  
    load     u64       pctarget         
    load     u64       pc               
    load     i64       16               
    istorex  u64 /1                     
#4494: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
#4492: 
    load     u64       pc               
    load     u64       qq_pcllib.pccurr 
    jumple   u64       #4489            
    load     i64       1                
    store    i64       i                
    load     i64       qq_pcllib.nextlabelno
    load     i64       1                
    jumplt   i64       #4499            
#4497: 
    load     u64       labelmap         
    load     i64       i                
    iloadx   u8  /1/-1                  
    jumpf    u8        #4501            
    load     u64       1                
    load     u64       qq_pcllib.labelpctable
    load     i64       i                
    iloadx   u64 /8/-8                  
    load     i64       11               
    addpx    u64 /1                     
    load     i64       0                
    storebit u8                         
#4501: 
    forup    i64 /1    #4497            
    opnd     i64       i                
    opnd     i64       qq_pcllib.nextlabelno
#4499: 
    setcall      /2/1                   
    load     i64       qq_pcllib.nextlabelno
    setarg   i64 /2                     
    load     u64       labelmap         
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_free   
    load     u64       qq_pcllib.pcstart
    load     u64       pm               
    load     i64       56               
    istorex  u64 /1                     
    load     u64       qq_pcllib.pccurr 
    load     u64       pm               
    load     i64       64               
    istorex  u64 /1                     
    setcall  i64 /2/1                   
    load     u64       qq_pcllib.pcstart
    setarg   u64 /2                     
    load     u64       qq_pcllib.pccurr 
    setarg   u64 /1                     
    callf    i64 /2    &qq_lib.getpcloffset
    load     i64       1                
    add      i64                        
    load     u64       pm               
    load     i64       72               
    istorex  i64 /1                     
    load     u64       qq_pcllib.pcsourcestart
    load     u64       pm               
    load     i64       80               
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_pclgen.do_procdef:
    param    u64       p
    local    i64       nfreevars
    local    i64       nnofreevars
    local    i64       isfunc
    local    u64       oldcurrproc
    load     u64       qq_decls.stcurrproc
    store    u64       oldcurrproc      
    load     u64       p                
    store    u64       qq_decls.stcurrproc
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       qq_pclgen.retindex
    load     u64       p                
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       4                
    loadbit  i64                        
    store    i64       isfunc           
    setcall      /3/1                   
    load     u64       &nnofreevars     
    setarg   u64 /3                     
    load     u64       &nfreevars       
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_pclgen.genprocentry
    load     u64       p                
    load     i64       88               
    iloadx   u64 /1                     
    load     u64       0                
    jumpne   u64       #4504            
    setcall      /3/1                   
    load     u64       0                
    setarg   u64 /3                     
    load     u64       p                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       "Empty proc body"
    setarg   u64 /1                     
    callp        /3    &qq_lib.gerror_s 
    jump               #4503            
#4504: 
    setcall      /2/1                   
    load     i64       isfunc           
    setarg   i64 /2                     
    load     u64       p                
    load     i64       88               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    load     i64       isfunc           
    jumpf    i64       #4506            
    setcall  i64 /1/1                   
    load     u64       p                
    load     i64       88               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /1    &qq_pclgen.checkblockreturn
    jumpt    i64       #4508            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Func: return value missing"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4508: 
#4506: 
#4503: 
    setcall      /1/1                   
    load     i64       qq_pclgen.retindex
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    setcall      /3/1                   
    load     i64       isfunc           
    setarg   i64 /3                     
    load     i64       nnofreevars      
    setarg   i64 /2                     
    load     i64       nfreevars        
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.genprocexit
    setcall      /1/1                   
    load     i64       4                
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    load     u64       qq_pclgen.pprocentry
    load     i64       9                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #4510            
    load     u64 /1    &qq_pclgen.pprocentry
    incrto   u64 /32                    
#4510: 
    load     u64       qq_pclgen.pprocentry
    load     u64       p                
    load     i64       80               
    istorex  u64 /1                     
    load     u64       oldcurrproc      
    store    u64       qq_decls.stcurrproc
    retproc                             
endproc

proc qq_pclgen.genprocentry:
    param    u64       p
    param    u64       nfreevars
    param    u64       nnofreevars
    local    mem:200       str
    local    i64       n
    local    u64       d
    setcall      /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     i64       2                
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    load     i64       0                
    double                              
    store    i64       qq_decls.nproclocals
    store    i64       qq_pclgen.nprocparams
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       d                
    jump               #4513            
#4512: 
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       14               
    jumpeq   i64 /1    #4516            
    load     i64       15               
    jumpeq   i64       #4517            
    jump               #4518            
#4516: 
    load     u64 /1    &qq_decls.nproclocals
    incrto   i64 /1                     
    load     i64       qq_decls.nproclocals
    load     u64       d                
    load     i64       96               
    istorex  i32 /1                     
    jump               #4515            
#4517: 
    load     u64 /1    &qq_pclgen.nprocparams
    incrto   i64 /1                     
    jump               #4515            
#4518: 
#4515: 
    load     u64       d                
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       d                
#4513: 
    load     u64       d                
    jumpt    u64       #4512            
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       d                
    load     i64       qq_pclgen.nprocparams
    store    i64       n                
    jump               #4522            
#4519: 
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       15               
    jumpeq   i64       #4524            
    jump               #4525            
#4524: 
    load     u64 /1    &n               
    decrto   i64 /1                     
    load     i64       n                
    load     i64       1                
    add      i64                        
    neg      i64                        
    load     u64       d                
    load     i64       96               
    istorex  i32 /1                     
    jump               #4523            
#4525: 
#4523: 
    load     u64       d                
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       d                
#4522: 
    load     u64       d                
    jumpt    u64       #4519            
    load     i64       qq_pclgen.nprocparams
    load     i64       1                
    add      i64                        
    neg      i64                        
    store    i64       qq_pclgen.retvaloffset
    setcall      /2/1                   
    load     i64       qq_decls.nproclocals
    setarg   i64 /2                     
    load     i64       3                
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_n
    load     u64       qq_pcllib.pccurr 
    store    u64       qq_pclgen.pprocentry
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       d                
    jump               #4527            
#4526: 
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       14               
    jumpeq   i64       #4530            
    jump               #4531            
#4530: 
    load     u64       d                
    load     i64       88               
    iloadx   u64 /1                     
    jumpf    u64       #4533            
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       d                
    load     i64       88               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    load     u64       d                
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       11               
    load     i64       12               
    loadbf   i64                        
    load     i64       3                
    jumpne   i64       #4535            
    setcall      /1/1                   
    load     i64       27               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
#4535: 
    setcall      /2/1                   
    load     u64       d                
    setarg   u64 /2                     
    load     i64       24               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
#4533: 
    jump               #4529            
#4531: 
#4529: 
    load     u64       d                
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       d                
#4527: 
    load     u64       d                
    jumpt    u64       #4526            
    retproc                             
endproc

proc qq_pclgen.genprocexit:
    param    i64       nfree
    param    i64       nnofree
    param    i64       isfunc
    local    i64       offset
    load     i64       isfunc           
    jumpf    i64       #4538            
    load     i64       qq_pclgen.nprocparams
    load     i64       1                
    add      i64                        
    neg      i64                        
    load     i64       16               
    mul      i64                        
    store    i64       offset           
    setcall      /3/1                   
    load     i64       offset           
    setarg   i64 /3                     
    load     i64       qq_decls.nproclocals
    setarg   i64 /2                     
    load     i64       53               
    setarg   i64 /1                     
    callp        /3    &qq_pcllib.genpc_xy
    load     i64       qq_pclgen.nprocparams
    load     u64       qq_pcllib.pccurr 
    load     i64       9                
    istorex  u8  /1                     
    jump               #4537            
#4538: 
    setcall      /2/1                   
    load     i64       qq_pclgen.nprocparams
    setarg   i64 /2                     
    load     i64       52               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_n
    load     i64       qq_decls.nproclocals
    load     u64       qq_pcllib.pccurr 
    load     i64       12               
    istorex  i16 /1                     
#4537: 
    retproc                             
endproc

proc qq_pclgen.evalref:
    param    u64       p
    local    u64       a
    local    u64       b
    local    u64       c
    local    u64       d
    local    i64       lab1
    local    i64       lab2
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       a                
    load     u64       p                
    load     i64       24               
    iloadx   u64 /1                     
    store    u64       b                
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       39               
    jumpeq   i64 /1    #4541            
    load     i64       46               
    jumpeq   i64 /1    #4542            
    load     i64       47               
    jumpeq   i64 /1    #4543            
    load     i64       48               
    jumpeq   i64 /1    #4544            
    load     i64       49               
    jumpeq   i64 /1    #4545            
    load     i64       51               
    jumpeq   i64 /1    #4546            
    load     i64       7                
    jumpeq   i64       #4547            
    jump               #4548            
#4541: 
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       d                
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       5                
    jumpeq   i64 /1    #4551            
    load     i64       7                
    jumpne   i64       #4550            
#4551: 
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "^ not allowed"  
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4550: 
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       15               
    jumpne   i64       #4553            
    load     u64       d                
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       5                
    loadbit  i64                        
    jumpf    u64       #4553            
    setcall      /2/1                   
    load     u64       d                
    setarg   u64 /2                     
    load     i64       7                
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    jump               #4552            
#4553: 
    setcall      /2/1                   
    load     u64       d                
    setarg   u64 /2                     
    load     i64       9                
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
#4552: 
    jump               #4540            
#4542: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    load     u64       b                
    load     i64       16               
    iloadx   u64 /1                     
    load     i64       104              
    iloadx   i64 /1                     
    load     i64       0                
    jumpne   i64       #4555            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       ".m2?"           
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4555: 
    setcall      /2/1                   
    load     u64       b                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     i64       129              
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    jump               #4540            
#4543: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       b                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       132              
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    jump               #4540            
#4544: 
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_pclgen.evalref
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       b                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       138              
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    jump               #4540            
#4545: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       b                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    jumpf    u64       #4557            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Def val not allowed"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4557: 
    setcall      /1/1                   
    load     i64       135              
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    jump               #4540            
#4546: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    jump               #4540            
#4547: 
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab1             
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab2             
    setcall      /3/1                   
    load     i64       lab1             
    setarg   i64 /3                     
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     i64       33               
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.genjumpcond
    setcall      /1/1                   
    load     u64       p                
    load     i64       24               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_pclgen.evalref
    setcall      /1/1                   
    load     i64       lab2             
    setarg   i64 /1                     
    callp        /1    &qq_pclgen.genjumpl
    setcall      /1/1                   
    load     i64       lab1             
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    setcall      /1/1                   
    load     u64       p                
    load     i64       24               
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_pclgen.evalref
    setcall      /1/1                   
    load     i64       lab2             
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    jump               #4540            
#4548: 
    setcall      /3/1                   
    load     u64       0                
    setarg   u64 /3                     
    load     u64       &qq_tables.jtagnames
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /2                     
    load     u64       "evalref"        
    setarg   u64 /1                     
    callp        /3    &qq_lib.gerror_s 
#4540: 
    retproc                             
endproc

proc qq_pclgen.genjumpcond:
    param    i64       opc
    param    u64       p
    param    i64       lab
    local    u64       q
    local    u64       r
    local    u64       s
    local    i64       oldpos
    local    i64       lab2
    local    i64       i
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       p                
    load     i64       24               
    iloadx   u64 /1                     
    store    u64       r                
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       72               
    jumpeq   i64 /1    #4560            
    load     i64       73               
    jumpeq   i64 /1    #4561            
    load     i64       74               
    jumpeq   i64 /1    #4562            
    load     i64       75               
    jumpeq   i64 /1    #4563            
    load     i64       6                
    jumpeq   i64 /1    #4564            
    load     i64       71               
    jumpeq   i64 /1    #4565            
    load     i64       38               
    jumpeq   i64       #4566            
    jump               #4567            
#4560: 
    load     i64       opc              
    load     i64       33               
    jumpeq   i64 /1    #4569            
    load     i64       32               
    jumpeq   i64       #4570            
    jump               #4571            
#4569: 
    setcall      /3/1                   
    load     i64       lab              
    setarg   i64 /3                     
    load     u64       q                
    setarg   u64 /2                     
    load     i64       33               
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.genjumpcond
    setcall      /3/1                   
    load     i64       lab              
    setarg   i64 /3                     
    load     u64       r                
    setarg   u64 /2                     
    load     i64       33               
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.genjumpcond
    jump               #4568            
#4570: 
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab2             
    setcall      /3/1                   
    load     i64       lab2             
    setarg   i64 /3                     
    load     u64       q                
    setarg   u64 /2                     
    load     i64       33               
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.genjumpcond
    setcall      /3/1                   
    load     i64       lab              
    setarg   i64 /3                     
    load     u64       r                
    setarg   u64 /2                     
    load     i64       32               
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.genjumpcond
    setcall      /1/1                   
    load     i64       lab2             
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    jump               #4568            
#4571: 
#4568: 
    jump               #4559            
#4561: 
    load     i64       opc              
    load     i64       33               
    jumpeq   i64 /1    #4573            
    load     i64       32               
    jumpeq   i64       #4574            
    jump               #4575            
#4573: 
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab2             
    setcall      /3/1                   
    load     i64       lab2             
    setarg   i64 /3                     
    load     u64       q                
    setarg   u64 /2                     
    load     i64       32               
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.genjumpcond
    setcall      /3/1                   
    load     i64       lab              
    setarg   i64 /3                     
    load     u64       r                
    setarg   u64 /2                     
    load     i64       33               
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.genjumpcond
    setcall      /1/1                   
    load     i64       lab2             
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    jump               #4572            
#4574: 
    setcall      /3/1                   
    load     i64       lab              
    setarg   i64 /3                     
    load     u64       q                
    setarg   u64 /2                     
    load     i64       32               
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.genjumpcond
    setcall      /3/1                   
    load     i64       lab              
    setarg   i64 /3                     
    load     u64       r                
    setarg   u64 /2                     
    load     i64       32               
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.genjumpcond
    jump               #4572            
#4575: 
#4572: 
    jump               #4559            
#4562: 
    load     i64       opc              
    load     i64       33               
    jumpeq   i64 /1    #4577            
    load     i64       32               
    jumpeq   i64       #4578            
    jump               #4579            
#4577: 
    setcall      /3/1                   
    load     i64       lab              
    setarg   i64 /3                     
    load     u64       q                
    setarg   u64 /2                     
    load     i64       32               
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.genjumpcond
    jump               #4576            
#4578: 
    setcall      /3/1                   
    load     i64       lab              
    setarg   i64 /3                     
    load     u64       q                
    setarg   u64 /2                     
    load     i64       33               
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.genjumpcond
    jump               #4576            
#4579: 
#4576: 
    jump               #4559            
#4563: 
    setcall      /3/1                   
    load     i64       lab              
    setarg   i64 /3                     
    load     u64       q                
    setarg   u64 /2                     
    load     i64       opc              
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.genjumpcond
    jump               #4559            
#4564: 
    jump               #4581            
#4580: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       q                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
#4581: 
    load     u64       q                
    jumpf    u64       #4583            
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    jumpt    u64       #4580            
#4583: 
    setcall      /3/1                   
    load     i64       lab              
    setarg   i64 /3                     
    load     u64       q                
    setarg   u64 /2                     
    load     i64       opc              
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.genjumpcond
    jump               #4559            
#4565: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       q                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       r                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /3/1                   
    load     i64       lab              
    setarg   i64 /3                     
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     i64       opc              
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.gcomparejump
    jump               #4559            
#4566: 
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       r                
    load     i64       1                
    store    i64       i                
    load     i64       opc              
    load     i64       33               
    jumpne   i64       #4585            
    jump               #4587            
#4586: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       q                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       r                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /3/1                   
    load     i64       lab              
    setarg   i64 /3                     
    load     u64       &qq_tables.revconds
    load     u64       p                
    load     i64       24               
    addpx    u64 /1                     
    load     i64       i                
    iloadx   u8  /1/-1                  
    widen    i64/u8                     
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     i64       32               
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.gcomparejump
    load     u64 /1    &i               
    incrto   i64 /1                     
    load     u64       r                
    store    u64       q                
    load     u64       r                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       r                
#4587: 
    load     u64       r                
    jumpt    u64       #4586            
    jump               #4584            
#4585: 
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab2             
    jump               #4590            
#4589: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       q                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       r                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    load     u64       r                
    load     i64       8                
    iloadx   u64 /1                     
    jumpf    u64       #4593            
    setcall      /3/1                   
    load     i64       lab2             
    setarg   i64 /3                     
    load     u64       &qq_tables.revconds
    load     u64       p                
    load     i64       24               
    addpx    u64 /1                     
    load     i64       i                
    iloadx   u8  /1/-1                  
    widen    i64/u8                     
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     i64       32               
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.gcomparejump
    jump               #4592            
#4593: 
    setcall      /3/1                   
    load     i64       lab              
    setarg   i64 /3                     
    load     u64       p                
    load     i64       24               
    addpx    u64 /1                     
    load     i64       i                
    iloadx   u8  /1/-1                  
    widen    i64/u8                     
    setarg   i64 /2                     
    load     i64       32               
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.gcomparejump
#4592: 
    load     u64 /1    &i               
    incrto   i64 /1                     
    load     u64       r                
    store    u64       q                
    load     u64       r                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       r                
#4590: 
    load     u64       r                
    jumpt    u64       #4589            
    setcall      /1/1                   
    load     i64       lab2             
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
#4584: 
    jump               #4559            
#4567: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     i64       lab              
    setarg   i64 /2                     
    load     i64       opc              
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_lab
#4559: 
    load     i64       oldpos           
    store    i64       qq_decls.qpos    
    retproc                             
endproc

proc qq_pclgen.gcomparejump:
    param    i64       opc
    param    i64       cond
    param    i64       lab
    load     i64       opc              
    load     i64       33               
    jumpne   i64       #4596            
    load     u64       &qq_tables.revconds
    load     i64       cond             
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       cond             
#4596: 
    setcall      /2/1                   
    load     i64       lab              
    setarg   i64 /2                     
    load     i64       34               
    load     i64       cond             
    add      i64                        
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_lab
    retproc                             
endproc

proc qq_pclgen.genjumpl:
    param    i64       lab
    setcall      /2/1                   
    load     i64       lab              
    setarg   i64 /2                     
    load     i64       30               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_lab
    retproc                             
endproc

proc qq_pclgen.stacklooplabels:
    param    i64       a
    param    i64       b
    param    i64       c
    load     i64       qq_pclgen.loopindex
    load     i64       20               
    jumplt   i64       #4600            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Too many nested loops"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4600: 
    load     u64 /1    &qq_pclgen.loopindex
    incrto   i64 /1                     
    load     i64       a                
    load     u64       &qq_pclgen.loopstack
    load     i64       qq_pclgen.loopindex
    addpx    mem:32 /32/-32             
    load     i64       1                
    istorex  i64 /8/-8                  
    load     i64       b                
    load     u64       &qq_pclgen.loopstack
    load     i64       qq_pclgen.loopindex
    addpx    mem:32 /32/-32             
    load     i64       2                
    istorex  i64 /8/-8                  
    load     i64       c                
    load     u64       &qq_pclgen.loopstack
    load     i64       qq_pclgen.loopindex
    addpx    mem:32 /32/-32             
    load     i64       3                
    istorex  i64 /8/-8                  
    retproc                             
endproc

proc qq_pclgen.unstacklooplabels:
    load     u64 /1    &qq_pclgen.loopindex
    decrto   i64 /1                     
    retproc                             
endproc

proc qq_pclgen.findlooplabel:
    param    i64       k
    param    i64       n
    local    i64       i
    rettype  i64
    load     i64       n                
    load     i64       0                
    jumpne   i64       #4604            
    load     i64       1                
    store    i64       i                
    jump               #4603            
#4604: 
    load     i64       qq_pclgen.loopindex
    load     i64       n                
    load     i64       1                
    sub      i64                        
    sub      i64                        
    store    i64       i                
#4603: 
    load     i64       i                
    load     i64       1                
    jumplt   i64       #4607            
    load     i64       i                
    load     i64       qq_pclgen.loopindex
    jumple   i64       #4606            
#4607: 
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Bad loop index" 
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4606: 
    load     u64       &qq_pclgen.trylevelstack
    load     i64       i                
    iloadx   i64 /8/-8                  
    store    i64       qq_pclgen.looptrylevel
    load     u64       &qq_pclgen.loopstack
    load     i64       i                
    addpx    mem:32 /32/-32             
    load     i64       k                
    iloadx   i64 /8/-8                  
    jumpret  i64       #4602            
#4602: 
    retfn    i64                        
endproc

proc qq_pclgen.do_assign:
    param    u64       a
    param    u64       b
    param    i64       res
    param    i64       deepcopy
    local    u64       q
    local    i64       n
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    swapstk      /1/2                   
    jumpne   i64 /1    #4610            
    load     i64       88               
    jumpne   i64       #4610            
    load     i64       res              
    jumpf    i64       #4612            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "mult/ass::="    
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4612: 
    setcall      /4/1                   
    load     i64       res              
    setarg   i64 /4                     
    load     i64       deepcopy         
    setarg   i64 /3                     
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /4    &qq_pclgen.do_multassign
    jump               #4608            
#4610: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       b                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    load     i64       deepcopy         
    jumpf    i64       #4614            
    setcall      /1/1                   
    load     i64       27               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
#4614: 
    setcall      /2/1                   
    load     i64       res              
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.do_store
#4608: 
    retproc                             
endproc

proc qq_pclgen.do_bin:
    param    u64       a
    param    u64       b
    param    i64       opc
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       b                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       opc              
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    retproc                             
endproc

proc qq_pclgen.do_binref:
    param    u64       a
    param    u64       b
    param    i64       opc
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_pclgen.evalref
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       b                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       opc              
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    retproc                             
endproc

proc qq_pclgen.do_unary:
    param    u64       a
    param    i64       opc
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       opc              
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    retproc                             
endproc

proc qq_pclgen.do_unaryref:
    param    u64       a
    param    i64       opc
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_pclgen.evalref
    setcall      /1/1                   
    load     i64       opc              
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    retproc                             
endproc

proc qq_pclgen.do_pushlist:
    param    u64       a
    param    i64       n
    jump               #4623            
#4620: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       a                
#4623: 
    load     u64       a                
    jumpt    u64       #4620            
    retproc                             
endproc

proc qq_pclgen.do_makedict:
    param    u64       a
    param    i64       n
    local    i64       av_1
    load     i64       n                
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #4627            
#4625: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       4                
    jumpne   i64       #4629            
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    load     i64       24               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    jump               #4628            
#4629: 
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "dict not key:val"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4628: 
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       a                
    to       i64       #4625            
    opnd     i64       av_1             
#4627: 
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     i64       n                
    setarg   i64 /2                     
    load     i64       68               
    setarg   i64 /1                     
    callp        /3    &qq_pcllib.genpc_xy
    retproc                             
endproc

proc qq_pclgen.do_call:
    param    u64       p
    param    u64       a
    param    u64       b
    param    i64       res
    param    u64       procflag
    local    i64       nargs
    local    i64       nsimple
    local    i64       isfunc
    local    i64       kwdindex
    local    u64       d
    local    u64       c
    local    mem:800       arglist
    local    i64       i
    load     i64       1                
    store    i64       isfunc           
    load     i64       0                
    double                              
    store    i64       nsimple          
    store    i64       nargs            
    load     i64       0                
    store    i64       kwdindex         
    load     u64       b                
    store    u64       c                
    jump               #4632            
#4631: 
    load     u64       c                
    load     u64       &arglist         
    load     u64 /1    &nargs           
    incrload i64 /1                     
    istorex  u64 /8/-8                  
    load     u64       c                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       41               
    jumpeq   i64 /1    #4636            
    load     i64       42               
    jumpne   i64       #4635            
#4636: 
    load     u64 /1    &nsimple         
    incrto   i64 /1                     
#4635: 
    load     u64       c                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpne   i64       #4638            
    load     i64       kwdindex         
    load     i64       0                
    jumpne   i64       #4640            
    load     i64       nargs            
    store    i64       kwdindex         
#4640: 
    jump               #4637            
#4638: 
    load     i64       kwdindex         
    jumpf    i64       #4641            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Non-kwd follows kwd arg"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4641: 
#4637: 
    load     u64       c                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       c                
#4632: 
    load     u64       c                
    jumpt    u64       #4631            
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       39               
    jumpeq   i64 /1    #4643            
    load     i64       46               
    jumpeq   i64       #4644            
    jump               #4645            
#4643: 
    load     u64       a                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       d                
! qq_pclgen.do_call.retry:
#4646: 
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       5                
    jumpeq   i64 /1    #4648            
    load     i64       6                
    jumpeq   i64 /1    #4648            
    load     i64       7                
    jumpeq   i64 /1    #4649            
    load     i64       20               
    jumpeq   i64 /1    #4650            
    load     i64       13               
    jumpeq   i64 /1    #4651            
    load     i64       14               
    jumpeq   i64 /1    #4651            
    load     i64       15               
    jumpeq   i64       #4651            
    jump               #4652            
#4648: 
    load     u64       d                
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       4                
    loadbit  i64                        
    jumpf    u64       #4654            
    setcall      /1/1                   
    load     i64       15               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    setcall  i64 /4/1                   
    load     i64       kwdindex         
    setarg   i64 /4                     
    load     i64       nargs            
    setarg   i64 /3                     
    load     u64       &arglist         
    setarg   u64 /2                     
    load     u64       d                
    setarg   u64 /1                     
    callf    i64 /4    &qq_pclgen.pushparams
    store    i64       nargs            
    setcall      /2/1                   
    load     u64       d                
    setarg   u64 /2                     
    load     i64       50               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    jump               #4653            
#4654: 
    load     i64       0                
    store    i64       isfunc           
    setcall  i64 /4/1                   
    load     i64       kwdindex         
    setarg   i64 /4                     
    load     i64       nargs            
    setarg   i64 /3                     
    load     u64       &arglist         
    setarg   u64 /2                     
    load     u64       d                
    setarg   u64 /1                     
    callf    i64 /4    &qq_pclgen.pushparams
    store    i64       nargs            
    setcall      /2/1                   
    load     u64       d                
    setarg   u64 /2                     
    load     i64       50               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
#4653: 
    load     i64       nargs            
    load     u64       qq_pcllib.pccurr 
    load     i64       9                
    istorex  u8  /1                     
    jump               #4647            
#4649: 
    load     u64       d                
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       4                
    loadbit  i64                        
    jumpt    u64       #4656            
    load     i64       0                
    store    i64       isfunc           
    jump               #4655            
#4656: 
    setcall      /1/1                   
    load     i64       15               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
#4655: 
    setcall  i64 /4/1                   
    load     i64       kwdindex         
    setarg   i64 /4                     
    load     i64       nargs            
    setarg   i64 /3                     
    load     u64       &arglist         
    setarg   u64 /2                     
    load     u64       d                
    setarg   u64 /1                     
    callf    i64 /4    &qq_pclgen.pushparams
    store    i64       nargs            
    setcall      /2/1                   
    load     u64       d                
    setarg   u64 /2                     
    load     i64       56               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    load     i64       nargs            
    load     u64       qq_pcllib.pccurr 
    load     i64       9                
    istorex  u8  /1                     
    jump               #4647            
#4650: 
    load     u64       d                
    load     i64       56               
    iloadx   u64 /1                     
    store    u64       d                
    jump               #4646            
    jump               #4647            
#4651: 
    jump               #4657            
    jump               #4647            
#4652: 
    setcall      /3/1                   
    load     u64       0                
    setarg   u64 /3                     
    load     u64       &qq_tables.namenames
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /2                     
    load     u64       "CAN'T CALL:"    
    setarg   u64 /1                     
    callp        /3    &qq_lib.gerror_s 
#4647: 
    jump               #4642            
#4644: 
    load     i64       kwdindex         
    jumpf    i64       #4659            
    jump               #4657            
#4659: 
    setcall      /1/1                   
    load     i64       15               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    setcall      /1/1                   
    load     u64       a                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_pclgen.evalref
    load     i64       1                
    store    i64       i                
    load     i64       nargs            
    load     i64       1                
    jumplt   i64       #4662            
#4660: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       &arglist         
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    forup    i64 /1    #4660            
    opnd     i64       i                
    opnd     i64       nargs            
#4662: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     u64 /1    &nargs           
    incrload i64 /1                     
    setarg   i64 /2                     
    load     i64       51               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_n
    jump               #4642            
#4645: 
! qq_pclgen.do_call.docallptr:
#4657: 
    load     i64       kwdindex         
    jumpf    i64       #4664            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Kwd params not allowed for fnptr"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4664: 
    setcall      /1/1                   
    load     i64       15               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    load     i64       1                
    store    i64       i                
    load     i64       nargs            
    load     i64       1                
    jumplt   i64       #4667            
#4665: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       &arglist         
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    forup    i64 /1    #4665            
    opnd     i64       i                
    opnd     i64       nargs            
#4667: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     i64       nargs            
    setarg   i64 /2                     
    load     i64       51               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_n
#4642: 
    load     i64       res              
    jumpf    i64       #4669            
    load     i64       isfunc           
    jumpt    i64       #4669            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Func ret value expected"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4669: 
    load     i64       isfunc           
    toboolf  i64/i64                    
    load     u64       procflag         
    istore   i64                        
    retproc                             
endproc

proc qq_pclgen.pushparams:
    param    u64       d
    param    u64       arglist
    param    i64       nargs
    param    i64       kwdindex
    local    i64       nparams
    local    i64       extra
    local    i64       n
    local    mem:800       paramlist
    local    mem:100       byreflist
    local    u64       e
    local    u64       p
    local    i64       i
    rettype  i64
    load     u64       d                
    load     i64       104              
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       nparams          
    load     u64       d                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       e                
    load     i64       0                
    store    i64       n                
    jump               #4672            
#4671: 
    load     u64 /1    &n               
    incrto   i64 /1                     
    load     u64       e                
    load     u64       &paramlist       
    load     i64       n                
    istorex  u64 /8/-8                  
    load     u64       e                
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       5                
    loadbit  i64                        
    load     u64       &byreflist       
    load     i64       n                
    istorex  u8  /1/-1                  
    load     u64       e                
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       e                
#4672: 
    load     u64       e                
    jumpt    u64       #4671            
    load     i64       kwdindex         
    jumpf    i64       #4675            
    setcall      /4/1                   
    load     i64       kwdindex         
    setarg   i64 /4                     
    load     i64       nargs            
    setarg   i64 /3                     
    load     u64       arglist          
    setarg   u64 /2                     
    load     u64       d                
    setarg   u64 /1                     
    callp        /4    &qq_pclgen.pushkwdparams
    load     u64       d                
    load     i64       104              
    iloadx   i16 /1                     
    widen    i64/i16                    
    jumpret  i64       #4670            
#4675: 
    load     i64       0                
    store    i64       extra            
    startmx                             
    load     i64       nargs            
    load     i64       nparams          
    jumpne   i64       #4677            
    load     i64       1                
    store    i64       i                
    load     i64       nargs            
    load     i64       1                
    jumplt   i64       #4680            
#4678: 
    setcall      /2/1                   
    load     u64       &byreflist       
    load     i64       i                
    iloadx   u8  /1/-1                  
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       arglist          
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalparam
    forup    i64 /1    #4678            
    opnd     i64       i                
    opnd     i64       nargs            
#4680: 
    load     i64       nargs            
    resetmx  i64                        
    jump               #4676            
#4677: 
    load     i64       nargs            
    load     i64       nparams          
    jumpge   i64       #4681            
    load     i64       1                
    store    i64       i                
    load     i64       nargs            
    load     i64       1                
    jumplt   i64       #4684            
#4682: 
    setcall      /2/1                   
    load     u64       &byreflist       
    load     i64       i                
    iloadx   u8  /1/-1                  
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       arglist          
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalparam
    forup    i64 /1    #4682            
    opnd     i64       i                
    opnd     i64       nargs            
#4684: 
    load     i64       nargs            
    load     i64       1                
    add      i64                        
    store    i64       i                
    load     i64       i                
    load     i64       nparams          
    jumpgt   i64       #4687            
#4685: 
    load     u64       &paramlist       
    load     i64       i                
    iloadx   u64 /8/-8                  
    store    u64       p                
    load     u64       p                
    load     i64       88               
    iloadx   u64 /1                     
    jumpt    u64       #4689            
    load     u64       p                
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       7                
    loadbit  i64                        
    jumpt    u64       #4689            
    setcall      /3                     
    load     u64       0                
    setarg   u64 /3                     
    setcall  u64 /2                     
    load     u64       0                
    setarg   u64 /2                     
    load     i64       i                
    setarg   i64 /1                     
    callf    u64 /2    &msysc.strint    
    setarg   u64 /2                     
    load     u64       "Param not optional:"
    setarg   u64 /1                     
    callp        /3    &qq_lib.gerror_s 
#4689: 
    load     u64       p                
    load     i64       88               
    iloadx   u64 /1                     
    jumpf    u64       #4691            
    load     u64       &byreflist       
    load     i64       i                
    iloadx   u8  /1/-1                  
    jumpf    u8        #4693            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "byref with default val"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4693: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       p                
    load     i64       88               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    jump               #4690            
#4691: 
    setcall      /1/1                   
    load     i64       15               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
#4690: 
    forup    i64 /1    #4685            
    opnd     i64       i                
    opnd     i64       nparams          
#4687: 
    load     i64       nparams          
    resetmx  i64                        
    jump               #4676            
#4681: 
    load     i64       1                
    store    i64       i                
    load     i64       nparams          
    load     i64       1                
    jumplt   i64       #4696            
#4694: 
    setcall      /2/1                   
    load     u64       &byreflist       
    load     i64       i                
    iloadx   u8  /1/-1                  
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       arglist          
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalparam
    forup    i64 /1    #4694            
    opnd     i64       i                
    opnd     i64       nparams          
#4696: 
    load     u64       d                
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       8                
    loadbit  i64                        
    jumpt    u64       #4698            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Too many args"  
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4698: 
    load     i64       nparams          
    load     i64       1                
    add      i64                        
    store    i64       i                
    load     i64       i                
    load     i64       nargs            
    jumpgt   i64       #4701            
#4699: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       arglist          
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    forup    i64 /1    #4699            
    opnd     i64       i                
    opnd     i64       nargs            
#4701: 
    load     i64       nargs            
    endmx    i64                        
#4676: 
    jumpret  i64       #4670            
#4670: 
    retfn    i64                        
endproc

proc qq_pclgen.evalparam:
    param    u64       a
    param    i64       byref
    load     i64       byref            
    jumpf    i64       #4704            
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_pclgen.evalref
    jump               #4703            
#4704: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
#4703: 
    retproc                             
endproc

proc qq_pclgen.pushkwdparams:
    param    u64       d
    param    u64       arglist
    param    i64       nargs
    param    i64       kwdindex
    local    i64       nparams
    local    i64       i
    local    i64       j
    local    i64       k
    local    mem:800       paramlist
    local    mem:100       byreflist
    local    mem:800       keyunits
    local    u64       p
    local    u64       q
    local    u64       e
    local    i64       av_1
    load     u64       d                
    load     i64       104              
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       nparams          
    load     u64       d                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       e                
    load     i64       1                
    store    i64       i                
    load     i64       nparams          
    load     i64       1                
    jumplt   i64       #4708            
#4706: 
    load     u64       e                
    load     u64       &paramlist       
    load     i64       i                
    istorex  u64 /8/-8                  
    load     u64       e                
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       5                
    loadbit  i64                        
    load     u64       &byreflist       
    load     i64       i                
    istorex  u8  /1/-1                  
    load     u64       e                
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       e                
    forup    i64 /1    #4706            
    opnd     i64       i                
    opnd     i64       nparams          
#4708: 
    load     i64       nargs            
    load     i64       nparams          
    jumple   i64       #4710            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Too many args"  
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4710: 
    load     i64       kwdindex         
    store    i64       i                
    load     i64       i                
    load     i64       nparams          
    jumpgt   i64       #4713            
#4711: 
    load     u64       0                
    load     u64       &keyunits        
    load     i64       i                
    istorex  u64 /8/-8                  
    forup    i64 /1    #4711            
    opnd     i64       i                
    opnd     i64       nparams          
#4713: 
    load     i64       1                
    store    i64       i                
    load     i64       kwdindex         
    load     i64       1                
    sub      i64                        
    store    i64       av_1             
    load     i64       av_1             
    load     i64       1                
    jumplt   i64       #4716            
#4714: 
    setcall      /2/1                   
    load     u64       &byreflist       
    load     i64       i                
    iloadx   u8  /1/-1                  
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       arglist          
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalparam
    forup    i64 /1    #4714            
    opnd     i64       i                
    opnd     i64       av_1             
#4716: 
    load     i64       kwdindex         
    store    i64       i                
    load     i64       i                
    load     i64       nargs            
    jumpgt   i64       #4719            
#4717: 
    load     u64       arglist          
    load     i64       i                
    iloadx   u64 /8/-8                  
    store    u64       p                
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       q                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       39               
    jumpeq   i64       #4721            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "kwd not a name" 
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4721: 
    load     u64       q                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       e                
    load     i64       0                
    store    i64       k                
    load     i64       1                
    store    i64       j                
    load     i64       nparams          
    load     i64       1                
    jumplt   i64       #4724            
#4722: 
    setcall  i64 /2/1                   
    load     u64       &paramlist       
    load     i64       j                
    iloadx   u64 /8/-8                  
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       e                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /2    &mlib.eqstring   
    jumpf    i64       #4726            
    load     i64       j                
    store    i64       k                
    jump               #4724            
#4726: 
    forup    i64 /1    #4722            
    opnd     i64       j                
    opnd     i64       nparams          
#4724: 
    load     i64       k                
    load     i64       0                
    jumpne   i64       #4728            
    setcall      /3/1                   
    load     u64       0                
    setarg   u64 /3                     
    load     u64       e                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       "Can't find kwd param:"
    setarg   u64 /1                     
    callp        /3    &qq_lib.gerror_s 
#4728: 
    load     i64       k                
    load     i64       kwdindex         
    jumpge   i64       #4730            
    setcall      /3/1                   
    load     u64       0                
    setarg   u64 /3                     
    load     u64       e                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       "Kwd arg already positional:"
    setarg   u64 /1                     
    callp        /3    &qq_lib.gerror_s 
#4730: 
    load     u64       &keyunits        
    load     i64       k                
    iloadx   u64 /8/-8                  
    jumpf    u64       #4732            
    setcall      /3/1                   
    load     u64       0                
    setarg   u64 /3                     
    load     u64       e                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       "Repeating kwd arg:"
    setarg   u64 /1                     
    callp        /3    &qq_lib.gerror_s 
#4732: 
    load     u64       p                
    load     i64       24               
    iloadx   u64 /1                     
    load     u64       &keyunits        
    load     i64       k                
    istorex  u64 /8/-8                  
    forup    i64 /1    #4717            
    opnd     i64       i                
    opnd     i64       nargs            
#4719: 
    load     i64       kwdindex         
    store    i64       i                
    load     i64       i                
    load     i64       nparams          
    jumpgt   i64       #4735            
#4733: 
    load     u64       &keyunits        
    load     i64       i                
    iloadx   u64 /8/-8                  
    load     u64       0                
    jumpne   u64       #4737            
    load     u64       &paramlist       
    load     i64       i                
    iloadx   u64 /8/-8                  
    load     i64       88               
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       q                
    load     u64       0                
    jumpne   u64       #4739            
    load     u64       &paramlist       
    load     i64       i                
    iloadx   u64 /8/-8                  
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       7                
    loadbit  i64                        
    jumpt    u64       #4739            
    setcall      /3                     
    load     u64       0                
    setarg   u64 /3                     
    setcall  u64 /2                     
    load     u64       0                
    setarg   u64 /2                     
    load     i64       i                
    setarg   i64 /1                     
    callf    u64 /2    &msysc.strint    
    setarg   u64 /2                     
    load     u64       "Param not optional:"
    setarg   u64 /1                     
    callp        /3    &qq_lib.gerror_s 
#4739: 
    load     u64       q                
    load     u64       &keyunits        
    load     i64       i                
    istorex  u64 /8/-8                  
#4737: 
    forup    i64 /1    #4733            
    opnd     i64       i                
    opnd     i64       nparams          
#4735: 
    load     i64       kwdindex         
    store    i64       i                
    load     i64       i                
    load     i64       nparams          
    jumpgt   i64       #4742            
#4740: 
    load     u64       &keyunits        
    load     i64       i                
    iloadx   u64 /8/-8                  
    jumpf    u64       #4744            
    setcall      /2/1                   
    load     u64       &byreflist       
    load     i64       i                
    iloadx   u8  /1/-1                  
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       &keyunits        
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalparam
    jump               #4743            
#4744: 
    load     u64       &byreflist       
    load     i64       i                
    iloadx   u8  /1/-1                  
    jumpf    u8        #4745            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "byref param not optional"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
    jump               #4743            
#4745: 
    setcall      /1/1                   
    load     i64       15               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
#4743: 
    forup    i64 /1    #4740            
    opnd     i64       i                
    opnd     i64       nparams          
#4742: 
    retproc                             
endproc

proc qq_pclgen.do_if:
    param    u64       p
    param    u64       a
    param    u64       b
    param    u64       pelse
    param    i64       res
    local    i64       lab1
    local    i64       lab2
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab1             
    load     u64       pelse            
    jumpt    u64       #4749            
    load     i64       res              
    jumpf    i64       #4748            
#4749: 
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab2             
#4748: 
    setcall      /3/1                   
    load     i64       lab1             
    setarg   i64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     i64       33               
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.genjumpcond
    setcall      /2/1                   
    load     i64       res              
    setarg   i64 /2                     
    load     u64       b                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    load     u64       pelse            
    jumpt    u64       #4752            
    load     i64       res              
    jumpf    i64       #4751            
#4752: 
    setcall      /1/1                   
    load     i64       lab2             
    setarg   i64 /1                     
    callp        /1    &qq_pclgen.genjumpl
    setcall      /1/1                   
    load     i64       lab1             
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    load     u64       pelse            
    jumpf    u64       #4754            
    setcall      /2/1                   
    load     i64       res              
    setarg   i64 /2                     
    load     u64       pelse            
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    jump               #4753            
#4754: 
    setcall      /1/1                   
    load     i64       15               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
#4753: 
    setcall      /1/1                   
    load     i64       lab2             
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    jump               #4750            
#4751: 
    setcall      /1/1                   
    load     i64       lab1             
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
#4750: 
    retproc                             
endproc

proc qq_pclgen.do_do:
    param    u64       p
    param    u64       a
    local    i64       lab_abc
    local    i64       lab_d
    local    i64       lab_test
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.definelabel
    store    i64       lab_abc          
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab_d            
    setcall      /3/1                   
    load     i64       lab_d            
    setarg   i64 /3                     
    load     i64       lab_abc          
    setarg   i64 /2                     
    load     i64       lab_abc          
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.stacklooplabels
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       lab_abc          
    setarg   i64 /1                     
    callp        /1    &qq_pclgen.genjumpl
    setcall      /1/1                   
    load     i64       lab_d            
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    setcall      /0/1                   
    callp        /0    &qq_pclgen.unstacklooplabels
    retproc                             
endproc

proc qq_pclgen.do_loop:
    param    u64       p
    local    i64       n
    local    i64       index
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       index            
    load     i64       index            
    load     i64       0                
    jumpne   i64       #4758            
    load     i64       qq_pclgen.loopindex
    store    i64       index            
#4758: 
    setcall  i64 /2/1                   
    load     i64       index            
    setarg   i64 /2                     
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /1                     
    callf    i64 /2    &qq_pclgen.findlooplabel
    store    i64       n                
    load     i64       n                
    load     i64       0                
    jumpne   i64       #4760            
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "BAD LOOP"       
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #4759            
#4760: 
    setcall      /1/1                   
    load     i64       n                
    setarg   i64 /1                     
    callp        /1    &qq_pclgen.genjumpl
#4759: 
    retproc                             
endproc

proc qq_pclgen.do_to:
    param    u64       p
    param    u64       pcount
    param    u64       pbody
    local    i64       lab_b
    local    i64       lab_c
    local    i64       lab_d
    local    u64       temp
    local    u64       pav
    load     u64       pcount           
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pav              
    load     u64       pav              
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       temp             
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       pcount           
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     u64       temp             
    setarg   u64 /2                     
    load     i64       24               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab_b            
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab_c            
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab_d            
    setcall      /3/1                   
    load     i64       lab_d            
    setarg   i64 /3                     
    load     i64       lab_c            
    setarg   i64 /2                     
    load     i64       lab_b            
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.stacklooplabels
    load     u64       pcount           
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       41               
    jumpeq   i64       #4763            
    setcall      /2/1                   
    load     u64       temp             
    setarg   u64 /2                     
    load     i64       7                
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       14               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_int
    setcall      /2/1                   
    load     i64       lab_d            
    setarg   i64 /2                     
    load     i64       37               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_lab
    jump               #4762            
#4763: 
    load     u64       pcount           
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       0                
    jumpgt   i64       #4764            
    setcall      /2/1                   
    load     i64       lab_d            
    setarg   i64 /2                     
    load     i64       30               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_lab
#4764: 
#4762: 
    setcall      /1/1                   
    load     i64       lab_b            
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       pbody            
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       lab_c            
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    setcall      /2/1                   
    load     i64       lab_b            
    setarg   i64 /2                     
    load     i64       44               
    load     u64       temp             
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       9                
    loadbit  i64                        
    add      i64                        
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_lab
    setcall      /2/1                   
    load     u64       temp             
    setarg   u64 /2                     
    load     i64       7                
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    setcall      /1/1                   
    load     i64       lab_d            
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    setcall      /0/1                   
    callp        /0    &qq_pclgen.unstacklooplabels
    retproc                             
endproc

proc qq_pclgen.do_while:
    param    u64       p
    param    u64       pcond
    param    u64       pbody
    local    i64       lab_b
    local    i64       lab_c
    local    i64       lab_d
    local    i64       lab_incr
    local    u64       pincr
    load     u64       pcond            
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pincr            
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab_b            
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab_c            
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab_d            
    load     u64       pincr            
    jumpf    u64       #4767            
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab_incr         
    jump               #4766            
#4767: 
    load     i64       lab_c            
    store    i64       lab_incr         
#4766: 
    setcall      /3/1                   
    load     i64       lab_d            
    setarg   i64 /3                     
    load     i64       lab_c            
    setarg   i64 /2                     
    load     i64       lab_b            
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.stacklooplabels
    setcall      /1/1                   
    load     i64       lab_incr         
    setarg   i64 /1                     
    callp        /1    &qq_pclgen.genjumpl
    setcall      /1/1                   
    load     i64       lab_b            
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       pbody            
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       lab_c            
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    load     u64       pincr            
    jumpf    u64       #4769            
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       pincr            
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       lab_incr         
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
#4769: 
    setcall      /3/1                   
    load     i64       lab_b            
    setarg   i64 /3                     
    load     u64       pcond            
    setarg   u64 /2                     
    load     i64       32               
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.genjumpcond
    setcall      /1/1                   
    load     i64       lab_d            
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    load     u64 /1    &qq_pclgen.loopindex
    decrto   i64 /1                     
    retproc                             
endproc

proc qq_pclgen.do_repeat:
    param    u64       p
    param    u64       a
    param    u64       b
    local    i64       lab_b
    local    i64       lab_c
    local    i64       lab_d
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.definelabel
    store    i64       lab_b            
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab_c            
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab_d            
    setcall      /3/1                   
    load     i64       lab_d            
    setarg   i64 /3                     
    load     i64       lab_c            
    setarg   i64 /2                     
    load     i64       lab_b            
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.stacklooplabels
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       lab_c            
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       41               
    jumpne   i64       #4773            
    load     u64       b                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       0                
    jumpeq   i64       #4772            
#4773: 
    setcall      /3/1                   
    load     i64       lab_b            
    setarg   i64 /3                     
    load     u64       b                
    setarg   u64 /2                     
    load     i64       33               
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.genjumpcond
#4772: 
    setcall      /1/1                   
    load     i64       lab_d            
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    load     u64 /1    &qq_pclgen.loopindex
    decrto   i64 /1                     
    retproc                             
endproc

proc qq_pclgen.do_for:
    param    u64       p
    param    u64       pvar
    param    u64       pbody
    local    u64       pfrom
    local    u64       pto
    local    u64       pstep
    local    u64       pelse
    local    u64       plimit
    local    u64       pautovar
    local    u64       dvar
    local    u64       limitvar
    local    i64       lab_b
    local    i64       lab_c
    local    i64       lab_d
    local    i64       lab_e
    local    i64       opc
    local    i64       oldqpos
    local    i64       step
    local    i64       fromval
    local    i64       limit
    local    i64       jumpinto
    load     u64       pvar             
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pfrom            
    load     u64       pfrom            
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pto              
    load     u64       pto              
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pstep            
    load     u64       0                
    store    u64       pautovar         
    load     u64       pstep            
    jumpf    u64       #4776            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "By N not implem"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4776: 
    load     u64       pbody            
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pelse            
    load     u64       pvar             
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       dvar             
    load     u64       pto              
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       41               
    jumpeq   i64 /1    #4780            
    load     i64       39               
    jumpne   i64       #4779            
#4780: 
    load     u64       pto              
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       39               
    jumpne   i64       #4778            
    load     u64       pto              
    load     i64       16               
    iloadx   u64 /1                     
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       9                
    loadbit  i64                        
    load     u64       dvar             
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       9                
    loadbit  i64                        
    jumpeq   u64       #4778            
#4779: 
    setcall  u64 /1/1                   
    load     u64       qq_decls.stcurrproc
    setarg   u64 /1                     
    callf    u64 /1    &qq_lib.createavnamex
    store    u64       pautovar         
#4778: 
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #4782            
    load     i64       -1               
    store    i64       step             
    jump               #4781            
#4782: 
    load     i64       1                
    store    i64       step             
#4781: 
    load     i64       1                
    store    i64       jumpinto         
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab_b            
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab_c            
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab_d            
    startmx                             
    load     u64       pelse            
    jumpf    u64       #4784            
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    resetmx  i64                        
    jump               #4783            
#4784: 
    load     i64       lab_d            
    endmx    i64                        
#4783: 
    store    i64       lab_e            
    setcall      /3/1                   
    load     i64       lab_d            
    setarg   i64 /3                     
    load     i64       lab_c            
    setarg   i64 /2                     
    load     i64       lab_b            
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.stacklooplabels
    load     u64       pfrom            
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       41               
    jumpne   i64       #4786            
    load     u64       pfrom            
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       fromval          
    load     u64       pto              
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       41               
    jumpne   i64       #4788            
    load     u64       pto              
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       limit            
    load     i64       step             
    load     i64       -1               
    jumpne   i64       #4792            
    load     i64       fromval          
    load     i64       limit            
    jumpge   i64       #4791            
#4792: 
    load     i64       step             
    load     i64       1                
    jumpne   i64       #4790            
    load     i64       fromval          
    load     i64       limit            
    jumpgt   i64       #4790            
#4791: 
    load     i64       0                
    store    i64       jumpinto         
#4790: 
#4788: 
    load     i64       jumpinto         
    jumpf    i64       #4794            
    load     i64       step             
    load     i64       0                
    jumpge   i64       #4796            
    load     u64 /1    &fromval         
    incrto   i64 /1                     
    jump               #4795            
#4796: 
    load     u64 /1    &fromval         
    decrto   i64 /1                     
#4795: 
    load     i64       fromval          
    load     u64       pfrom            
    load     i64       16               
    istorex  i64 /1                     
#4794: 
    setcall      /2/1                   
    load     u64       pfrom            
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     i64       14               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_int
    setcall      /2/1                   
    load     u64       dvar             
    setarg   u64 /2                     
    load     i64       12               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    jump               #4785            
#4786: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       pfrom            
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     u64       dvar             
    setarg   u64 /2                     
    load     i64       12               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    setcall      /2/1                   
    load     u64       dvar             
    setarg   u64 /2                     
    load     i64       71               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    load     i64       step             
    neg      i64                        
    load     u64       qq_pcllib.pccurr 
    load     i64       12               
    istorex  i16 /1                     
#4785: 
    load     u64       pautovar         
    jumpf    u64       #4798            
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       pto              
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    load     u64       pautovar         
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       limitvar         
    setcall      /2/1                   
    load     u64       limitvar         
    setarg   u64 /2                     
    load     i64       24               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    load     u64       pautovar         
    store    u64       pto              
    jump               #4797            
#4798: 
    load     u64       pto              
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       limitvar         
#4797: 
    load     i64       jumpinto         
    jumpf    i64       #4800            
    setcall      /1/1                   
    load     i64       lab_c            
    setarg   i64 /1                     
    callp        /1    &qq_pclgen.genjumpl
#4800: 
    setcall      /1/1                   
    load     i64       lab_b            
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       pbody            
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       lab_c            
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    load     i64       step             
    load     i64       0                
    jumple   i64       #4802            
    load     u64       pto              
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       41               
    jumpne   i64       #4804            
    load     i64       46               
    load     u64       dvar             
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       9                
    loadbit  i64                        
    add      i64                        
    store    i64       opc              
    jump               #4803            
#4804: 
    load     u64       dvar             
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       9                
    loadbit  i64                        
    load     u64       limitvar         
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       9                
    loadbit  i64                        
    jumpne   u64       #4805            
    load     i64       48               
    load     u64       dvar             
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       9                
    loadbit  i64                        
    add      i64                        
    store    i64       opc              
    jump               #4803            
#4805: 
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "for:mixed m/f vars"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4803: 
    load     i64       qq_decls.qpos    
    store    i64       oldqpos          
    load     u64       p                
    load     i64       4                
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       qq_decls.qpos    
    setcall      /2/1                   
    load     i64       lab_b            
    setarg   i64 /2                     
    load     i64       opc              
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_lab
    load     i64       oldqpos          
    store    i64       qq_decls.qpos    
    setcall      /2/1                   
    load     u64       dvar             
    setarg   u64 /2                     
    load     i64       7                
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    load     u64       pto              
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       41               
    jumpne   i64       #4807            
    setcall      /2/1                   
    load     u64       pto              
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     i64       14               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_int
    jump               #4806            
#4807: 
    setcall      /2/1                   
    load     u64       limitvar         
    setarg   u64 /2                     
    load     i64       7                
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
#4806: 
    jump               #4801            
#4802: 
    setcall      /2/1                   
    load     u64       dvar             
    setarg   u64 /2                     
    load     i64       71               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    load     i64       -1               
    load     u64       qq_pcllib.pccurr 
    load     i64       12               
    istorex  i16 /1                     
    setcall      /2/1                   
    load     u64       dvar             
    setarg   u64 /2                     
    load     i64       7                
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    load     u64       pto              
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       41               
    jumpne   i64       #4809            
    setcall      /2/1                   
    load     u64       pto              
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     i64       14               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_int
    jump               #4808            
#4809: 
    setcall      /2/1                   
    load     u64       limitvar         
    setarg   u64 /2                     
    load     i64       7                
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
#4808: 
    setcall      /2/1                   
    load     i64       lab_b            
    setarg   i64 /2                     
    load     i64       38               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_lab
#4801: 
    load     u64       pelse            
    jumpf    u64       #4811            
    setcall      /1/1                   
    load     i64       lab_e            
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       pelse            
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
#4811: 
    setcall      /1/1                   
    load     i64       lab_d            
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    setcall      /0/1                   
    callp        /0    &qq_pclgen.unstacklooplabels
    retproc                             
endproc

proc qq_pclgen.do_forx:
    param    u64       p
    param    u64       pvar
    param    u64       pbody
    local    u64       pbounds
    local    u64       pelse
    local    u64       plimit
    local    u64       pautovar
    local    u64       dvar
    local    u64       limitvar
    local    i64       lab_b
    local    i64       lab_c
    local    i64       lab_d
    local    i64       lab_e
    local    i64       opc
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "FORX"           
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     u64       pvar             
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pbounds          
    setcall  u64 /1/1                   
    load     u64       qq_decls.stcurrproc
    setarg   u64 /1                     
    callf    u64 /1    &qq_lib.createavnamex
    store    u64       pautovar         
    load     u64       pbody            
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pelse            
    load     u64       pvar             
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       dvar             
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab_b            
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab_c            
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab_d            
    startmx                             
    load     u64       pelse            
    jumpf    u64       #4814            
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    resetmx  i64                        
    jump               #4813            
#4814: 
    load     i64       lab_d            
    endmx    i64                        
#4813: 
    store    i64       lab_e            
    setcall      /3/1                   
    load     i64       lab_d            
    setarg   i64 /3                     
    load     i64       lab_c            
    setarg   i64 /2                     
    load     i64       lab_b            
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.stacklooplabels
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       pbounds          
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    load     u64       pautovar         
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       limitvar         
    setcall      /2/1                   
    load     u64       limitvar         
    setarg   u64 /2                     
    load     i64       24               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     i64       14               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_int
    setcall      /1/1                   
    load     i64       102              
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    setcall      /2/1                   
    load     u64       dvar             
    setarg   u64 /2                     
    load     i64       12               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    setcall      /1/1                   
    load     i64       lab_c            
    setarg   i64 /1                     
    callp        /1    &qq_pclgen.genjumpl
    setcall      /1/1                   
    load     i64       lab_b            
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       pbody            
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       lab_c            
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    load     u64       dvar             
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       9                
    loadbit  i64                        
    load     u64       limitvar         
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       9                
    loadbit  i64                        
    jumpne   u64       #4816            
    setcall      /2/1                   
    load     i64       lab_b            
    setarg   i64 /2                     
    load     i64       48               
    load     u64       dvar             
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       9                
    loadbit  i64                        
    add      i64                        
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_lab
    jump               #4815            
#4816: 
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "forx:mixed m/f" 
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4815: 
    setcall      /2/1                   
    load     u64       dvar             
    setarg   u64 /2                     
    load     i64       7                
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    setcall      /2/1                   
    load     u64       limitvar         
    setarg   u64 /2                     
    load     i64       7                
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    load     u64       pelse            
    jumpf    u64       #4818            
    setcall      /1/1                   
    load     i64       lab_e            
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       pelse            
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
#4818: 
    setcall      /1/1                   
    load     i64       lab_d            
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    setcall      /0/1                   
    callp        /0    &qq_pclgen.unstacklooplabels
    retproc                             
endproc

proc qq_pclgen.do_print:
    param    u64       p
    param    u64       a
    param    u64       b
    local    i64       issprint
    local    u64       x
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       4                
    bitand   i64                        
    store    i64       issprint         
    load     i64       issprint         
    jumpf    i64       #4821            
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       3                
    setarg   i64 /1                     
    callp        /2    &qq_pclgen.callhostfn
    jump               #4820            
#4821: 
    load     u64       a                
    jumpf    u64       #4823            
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       1                
    setarg   i64 /1                     
    callp        /2    &qq_pclgen.callhostfn
    jump               #4822            
#4823: 
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       2                
    setarg   i64 /1                     
    callp        /2    &qq_pclgen.callhostfn
#4822: 
#4820: 
    load     u64       b                
    store    u64       x                
    jump               #4825            
#4824: 
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       58               
    jumpeq   i64 /1    #4828            
    load     i64       56               
    jumpeq   i64 /1    #4829            
    load     i64       57               
    jumpeq   i64       #4830            
    jump               #4831            
#4828: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       x                
    load     i64       24               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       x                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       7                
    setarg   i64 /1                     
    callp        /2    &qq_pclgen.callhostfn
    jump               #4827            
#4829: 
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       10               
    setarg   i64 /1                     
    callp        /2    &qq_pclgen.callhostfn
    jump               #4827            
#4830: 
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       11               
    setarg   i64 /1                     
    callp        /2    &qq_pclgen.callhostfn
    jump               #4827            
#4831: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       8                
    setarg   i64 /1                     
    callp        /2    &qq_pclgen.callhostfn
#4827: 
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       x                
#4825: 
    load     u64       x                
    jumpt    u64       #4824            
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    bitand   i64                        
    jumpf    i64       #4833            
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       9                
    setarg   i64 /1                     
    callp        /2    &qq_pclgen.callhostfn
#4833: 
    load     i64       issprint         
    jumpf    i64       #4835            
    setcall      /1/1                   
    load     i64       15               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       6                
    setarg   i64 /1                     
    callp        /2    &qq_pclgen.callhostfn
    jump               #4834            
#4835: 
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       5                
    setarg   i64 /1                     
    callp        /2    &qq_pclgen.callhostfn
#4834: 
    retproc                             
endproc

proc qq_pclgen.do_fprint:
    param    u64       p
    param    u64       a
    param    u64       b
    param    u64       c
    local    i64       issfprint
    local    u64       x
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       4                
    bitand   i64                        
    store    i64       issfprint        
    load     i64       issfprint        
    jumpf    i64       #4838            
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       3                
    setarg   i64 /1                     
    callp        /2    &qq_pclgen.callhostfn
    jump               #4837            
#4838: 
    load     u64       a                
    jumpf    u64       #4840            
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       1                
    setarg   i64 /1                     
    callp        /2    &qq_pclgen.callhostfn
    jump               #4839            
#4840: 
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       2                
    setarg   i64 /1                     
    callp        /2    &qq_pclgen.callhostfn
#4839: 
#4837: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       b                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       4                
    setarg   i64 /1                     
    callp        /2    &qq_pclgen.callhostfn
    load     u64       c                
    store    u64       x                
    jump               #4842            
#4841: 
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       58               
    jumpeq   i64 /1    #4845            
    load     i64       56               
    jumpeq   i64       #4846            
    jump               #4847            
#4845: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       x                
    load     i64       24               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       x                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       7                
    setarg   i64 /1                     
    callp        /2    &qq_pclgen.callhostfn
    jump               #4844            
#4846: 
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       10               
    setarg   i64 /1                     
    callp        /2    &qq_pclgen.callhostfn
    jump               #4844            
#4847: 
    setcall      /1/1                   
    load     i64       15               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       7                
    setarg   i64 /1                     
    callp        /2    &qq_pclgen.callhostfn
#4844: 
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       x                
#4842: 
    load     u64       x                
    jumpt    u64       #4841            
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    bitand   i64                        
    jumpf    i64       #4849            
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       9                
    setarg   i64 /1                     
    callp        /2    &qq_pclgen.callhostfn
#4849: 
    load     i64       issfprint        
    jumpf    i64       #4851            
    setcall      /1/1                   
    load     i64       15               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       6                
    setarg   i64 /1                     
    callp        /2    &qq_pclgen.callhostfn
    jump               #4850            
#4851: 
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       5                
    setarg   i64 /1                     
    callp        /2    &qq_pclgen.callhostfn
#4850: 
    retproc                             
endproc

proc qq_pclgen.do_read:
    param    u64       p
    param    u64       a
    param    u64       b
    local    u64       x
    local    u64       xloop
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    bitand   i64                        
    jumpf    i64       #4854            
    load     u64       a                
    jumpf    u64       #4856            
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       12               
    setarg   i64 /1                     
    callp        /2    &qq_pclgen.callhostfn
    jump               #4855            
#4856: 
    setcall      /1/1                   
    load     i64       15               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       12               
    setarg   i64 /1                     
    callp        /2    &qq_pclgen.callhostfn
#4855: 
#4854: 
    load     u64       b                
    store    u64       xloop            
    jump               #4858            
#4857: 
    load     u64       xloop            
    store    u64       x                
    setcall      /1/1                   
    load     i64       15               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       58               
    jumpne   i64       #4861            
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       x                
    load     i64       24               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       14               
    setarg   i64 /1                     
    callp        /2    &qq_pclgen.callhostfn
    load     u64       x                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       x                
    jump               #4860            
#4861: 
    setcall      /1/1                   
    load     i64       15               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       14               
    setarg   i64 /1                     
    callp        /2    &qq_pclgen.callhostfn
#4860: 
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       39               
    jumpne   i64       #4863            
    setcall      /2/1                   
    load     u64       x                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     i64       12               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    jump               #4862            
#4863: 
    setcall      /1/1                   
    load     u64       x                
    setarg   u64 /1                     
    callp        /1    &qq_pclgen.evalref
    setcall      /1/1                   
    load     i64       23               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
#4862: 
    load     u64       xloop            
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       xloop            
#4858: 
    load     u64       xloop            
    jumpt    u64       #4857            
    retproc                             
endproc

proc qq_pclgen.do_forall:
    param    u64       p
    param    u64       pindex
    param    u64       pbody
    local    i64       lab_b
    local    i64       lab_c
    local    i64       lab_d
    local    i64       lab_e
    local    u64       ploopvar
    local    u64       plist
    local    u64       pelse
    local    u64       plimitvar
    local    u64       plistvar
    local    u64       indexvar
    local    u64       limitvar
    local    u64       loopvar
    local    u64       listvar
    load     u64       pindex           
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       plist            
    load     u64       plist            
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       ploopvar         
    load     u64       ploopvar         
    load     u64       0                
    jumpne   u64       #4866            
    load     u64       pindex           
    store    u64       ploopvar         
    setcall  u64 /1/1                   
    load     u64       qq_decls.stcurrproc
    setarg   u64 /1                     
    callf    u64 /1    &qq_lib.createavnamex
    store    u64       pindex           
#4866: 
    load     u64       ploopvar         
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       loopvar          
    setcall  u64 /1/1                   
    load     u64       qq_decls.stcurrproc
    setarg   u64 /1                     
    callf    u64 /1    &qq_lib.createavnamex
    store    u64       plimitvar        
    load     u64       plimitvar        
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       limitvar         
    load     u64       pindex           
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       indexvar         
    load     u64       plist            
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       39               
    jumpne   i64       #4869            
    load     u64       plist            
    load     i64       16               
    iloadx   u64 /1                     
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       9                
    loadbit  i64                        
    load     u64       loopvar          
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       9                
    loadbit  i64                        
    jumpeq   u64       #4868            
#4869: 
    setcall  u64 /1/1                   
    load     u64       qq_decls.stcurrproc
    setarg   u64 /1                     
    callf    u64 /1    &qq_lib.createavnamex
    store    u64       plistvar         
    load     u64       plistvar         
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       listvar          
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       plist            
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     u64       listvar          
    setarg   u64 /2                     
    load     i64       24               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    jump               #4867            
#4868: 
    load     u64       plist            
    store    u64       plistvar         
    load     u64       plistvar         
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       listvar          
#4867: 
    load     u64       indexvar         
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       9                
    loadbit  i64                        
    load     u64       loopvar          
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       9                
    loadbit  i64                        
    swapstk      /1/2                   
    jumpne   u64 /1    #4872            
    load     u64       listvar          
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       9                
    loadbit  i64                        
    jumpeq   u64       #4871            
#4872: 
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "forall: mixed vars"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4871: 
    load     u64       pbody            
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pelse            
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab_b            
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab_c            
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab_d            
    startmx                             
    load     u64       pelse            
    jumpf    u64       #4874            
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    resetmx  i64                        
    jump               #4873            
#4874: 
    load     i64       lab_d            
    endmx    i64                        
#4873: 
    store    i64       lab_e            
    setcall      /3/1                   
    load     i64       lab_d            
    setarg   i64 /3                     
    load     i64       lab_c            
    setarg   i64 /2                     
    load     i64       lab_b            
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.stacklooplabels
    setcall      /2/1                   
    load     u64       listvar          
    setarg   u64 /2                     
    load     i64       7                
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    setcall      /2/1                   
    load     i64       2                
    setarg   i64 /2                     
    load     i64       90               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_n
    setcall      /2/1                   
    load     u64       limitvar         
    setarg   u64 /2                     
    load     i64       24               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     i64       14               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_int
    setcall      /1/1                   
    load     i64       102              
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    setcall      /2/1                   
    load     u64       indexvar         
    setarg   u64 /2                     
    load     i64       24               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    setcall      /1/1                   
    load     i64       lab_c            
    setarg   i64 /1                     
    callp        /1    &qq_pclgen.genjumpl
    setcall      /1/1                   
    load     i64       lab_b            
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    setcall      /2/1                   
    load     u64       listvar          
    setarg   u64 /2                     
    load     i64       7                
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       pindex           
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    startmx                             
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       17               
    jumpne   i64       #4876            
    load     i64       130              
    resetmx  i64                        
    jump               #4875            
#4876: 
    load     i64       136              
    endmx    i64                        
#4875: 
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    setcall      /2/1                   
    load     u64       loopvar          
    setarg   u64 /2                     
    load     i64       12               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       pbody            
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       lab_c            
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    load     u64       indexvar         
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       9                
    loadbit  i64                        
    load     u64       limitvar         
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       9                
    loadbit  i64                        
    jumpne   u64       #4878            
    setcall      /2/1                   
    load     i64       lab_b            
    setarg   i64 /2                     
    load     i64       48               
    load     u64       indexvar         
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       9                
    loadbit  i64                        
    add      i64                        
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_lab
    jump               #4877            
#4878: 
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "forall:mixed m/f"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4877: 
    setcall      /2/1                   
    load     u64       indexvar         
    setarg   u64 /2                     
    load     i64       7                
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    setcall      /2/1                   
    load     u64       limitvar         
    setarg   u64 /2                     
    load     i64       7                
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    load     u64       pelse            
    jumpf    u64       #4880            
    setcall      /1/1                   
    load     i64       lab_e            
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       pelse            
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
#4880: 
    setcall      /1/1                   
    load     i64       lab_d            
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    setcall      /0/1                   
    callp        /0    &qq_pclgen.unstacklooplabels
    retproc                             
endproc

proc qq_pclgen.do_case:
    param    u64       p
    param    u64       pindex
    param    u64       pwhenthen
    param    i64       res
    local    i64       lab_a
    local    i64       lab_d
    local    i64       loopsw
    local    i64       labnextwhen
    local    i64       labstmtstart
    local    i64       fmult
    local    u64       w
    local    u64       wt
    local    u64       pelse
    load     u64       pindex           
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #4883            
    setcall      /4/1                   
    load     i64       res              
    setarg   i64 /4                     
    load     u64       pwhenthen        
    setarg   u64 /3                     
    load     u64       pindex           
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /4    &qq_pclgen.do_case_nc
    jump               #4881            
#4883: 
    startmx                             
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       11               
    jumpeq   i64       #4884            
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       13               
    jumpne   i64       #4885            
#4884: 
    load     i64       1                
    resetmx  i64                        
    jump               #4886            
#4885: 
    load     i64       0                
    endmx    i64                        
#4886: 
    store    i64       loopsw           
    load     u64       pindex           
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pelse            
    load     i64       loopsw           
    jumpf    i64       #4888            
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.definelabel
    store    i64       lab_a            
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab_d            
    setcall      /3/1                   
    load     i64       lab_d            
    setarg   i64 /3                     
    load     i64       lab_a            
    setarg   i64 /2                     
    load     i64       lab_a            
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.stacklooplabels
    jump               #4887            
#4888: 
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab_d            
#4887: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       pindex           
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    load     u64       pwhenthen        
    store    u64       wt               
    jump               #4890            
#4889: 
    load     u64       wt               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       w                
    load     u64       w                
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       0                
    setne    u64                        
    store    i64       fmult            
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       labnextwhen      
    load     i64       fmult            
    jumpf    i64       #4893            
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       labstmtstart     
#4893: 
    jump               #4895            
#4894: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       w                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    load     u64       w                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       w                
    load     u64       w                
    jumpf    u64       #4898            
    setcall      /2/1                   
    load     i64       labstmtstart     
    setarg   i64 /2                     
    load     i64       40               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_lab
    jump               #4897            
#4898: 
    setcall      /2/1                   
    load     i64       labnextwhen      
    setarg   i64 /2                     
    load     i64       41               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_lab
#4897: 
#4895: 
    load     u64       w                
    jumpt    u64       #4894            
    load     i64       fmult            
    jumpf    i64       #4900            
    setcall      /1/1                   
    load     i64       labstmtstart     
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
#4900: 
    setcall      /2/1                   
    load     i64       res              
    setarg   i64 /2                     
    load     u64       wt               
    load     i64       24               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    load     i64       loopsw           
    jumpt    i64       #4902            
    setcall      /1/1                   
    load     i64       lab_d            
    setarg   i64 /1                     
    callp        /1    &qq_pclgen.genjumpl
    jump               #4901            
#4902: 
    setcall      /1/1                   
    load     i64       lab_a            
    setarg   i64 /1                     
    callp        /1    &qq_pclgen.genjumpl
#4901: 
    setcall      /1/1                   
    load     i64       labnextwhen      
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    load     u64       wt               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       wt               
#4890: 
    load     u64       wt               
    jumpt    u64       #4889            
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     i64       58               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_n
    load     u64       pelse            
    jumpf    u64       #4904            
    setcall      /2/1                   
    load     i64       res              
    setarg   i64 /2                     
    load     u64       pelse            
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    jump               #4903            
#4904: 
    load     i64       res              
    jumpf    i64       #4905            
    setcall      /1/1                   
    load     i64       15               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
#4905: 
#4903: 
    load     i64       loopsw           
    jumpf    i64       #4907            
    setcall      /1/1                   
    load     i64       lab_a            
    setarg   i64 /1                     
    callp        /1    &qq_pclgen.genjumpl
    setcall      /1/1                   
    load     i64       lab_d            
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    setcall      /0/1                   
    callp        /0    &qq_pclgen.unstacklooplabels
    jump               #4906            
#4907: 
    setcall      /1/1                   
    load     i64       lab_d            
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
#4906: 
#4881: 
    retproc                             
endproc

proc qq_pclgen.do_case_nc:
    param    u64       p
    param    u64       pindex
    param    u64       pwhenthen
    param    i64       res
    local    i64       lab_a
    local    i64       lab_d
    local    i64       labnextwhen
    local    i64       labstmtstart
    local    i64       fmult
    local    u64       w
    local    u64       wt
    local    u64       pelse
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       10               
    jumpeq   i64       #4910            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "case-nc"        
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4910: 
    load     u64       pindex           
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pelse            
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab_d            
    load     u64       pwhenthen        
    store    u64       wt               
    jump               #4912            
#4911: 
    load     u64       wt               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       w                
    load     u64       w                
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       0                
    setne    u64                        
    store    i64       fmult            
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       labnextwhen      
    load     i64       fmult            
    jumpf    i64       #4915            
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       labstmtstart     
#4915: 
    jump               #4917            
#4916: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       w                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    load     u64       w                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       w                
    load     u64       w                
    jumpf    u64       #4920            
    setcall      /2/1                   
    load     i64       labstmtstart     
    setarg   i64 /2                     
    load     i64       32               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_lab
    jump               #4919            
#4920: 
    setcall      /2/1                   
    load     i64       labnextwhen      
    setarg   i64 /2                     
    load     i64       33               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_lab
#4919: 
#4917: 
    load     u64       w                
    jumpt    u64       #4916            
    load     i64       fmult            
    jumpf    i64       #4922            
    setcall      /1/1                   
    load     i64       labstmtstart     
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
#4922: 
    setcall      /2/1                   
    load     i64       res              
    setarg   i64 /2                     
    load     u64       wt               
    load     i64       24               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       lab_d            
    setarg   i64 /1                     
    callp        /1    &qq_pclgen.genjumpl
    setcall      /1/1                   
    load     i64       labnextwhen      
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    load     u64       wt               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       wt               
#4912: 
    load     u64       wt               
    jumpt    u64       #4911            
    load     u64       pelse            
    jumpf    u64       #4924            
    setcall      /2/1                   
    load     i64       res              
    setarg   i64 /2                     
    load     u64       pelse            
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    jump               #4923            
#4924: 
    load     i64       res              
    jumpf    i64       #4925            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Needs Else branch"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4925: 
#4923: 
    setcall      /1/1                   
    load     i64       lab_d            
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    retproc                             
endproc

proc qq_pclgen.do_try:
    param    u64       p
    param    u64       a
    param    u64       b
    local    i64       labend
    local    i64       labx
    local    u64       ptry
    local    u64       x
    local    u64       pexcept
    local    u64       pexcode
    load     u64 /1    &qq_pclgen.trylevel
    incrto   i64 /1                     
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       labend           
    load     u64       a                
    store    u64       ptry             
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       labx             
    load     u64       b                
    store    u64       pexcept          
    load     u64       pexcept          
    load     u64       0                
    jumpne   u64       #4928            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "try: no except" 
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
    jump               #4927            
#4928: 
    load     u64       pexcept          
    load     i64       8                
    iloadx   u64 /1                     
    jumpf    u64       #4929            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Try:multiple except block not implemented"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4929: 
#4927: 
    jump               #4931            
#4930: 
    load     u64       pexcept          
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pexcode          
    load     u64       pexcode          
    load     u64       0                
    jumpeq   u64       #4935            
    load     u64       pexcode          
    load     i64       8                
    iloadx   u64 /1                     
    jumpf    u64       #4934            
#4935: 
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Try:multiple except codes not implemented"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4934: 
    setcall      /2/1                   
    load     i64       labx             
    setarg   i64 /2                     
    load     i64       140              
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_lab
    setcall      /2                     
    load     i64       1                
    setarg   i64 /2                     
    setcall  i64 /1                     
    load     u64       pexcode          
    setarg   u64 /1                     
    callf    i64 /1    &qq_pclgen.getconstvalue
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genxy 
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       ptry             
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       labend           
    setarg   i64 /1                     
    callp        /1    &qq_pclgen.genjumpl
    setcall      /1/1                   
    load     i64       labx             
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       pexcept          
    load     i64       24               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       labend           
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    load     u64       pexcept          
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pexcept          
#4931: 
    load     u64       pexcept          
    jumpt    u64       #4930            
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     i64       59               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_n
    load     u64 /1    &qq_pclgen.trylevel
    decrto   i64 /1                     
    retproc                             
endproc

proc qq_pclgen.unitstoarray:
    param    u64       p
    param    u64       plist
    param    i64       maxunits
    local    i64       n
    rettype  i64
    load     i64       0                
    store    i64       n                
    jump               #4938            
#4937: 
    load     i64       n                
    load     i64       maxunits         
    jumplt   i64       #4941            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "UTA Too many units"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4941: 
    load     u64       p                
    load     u64       plist            
    load     u64 /1    &n               
    incrload i64 /1                     
    istorex  u64 /8/-8                  
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
#4938: 
    load     u64       p                
    jumpt    u64       #4937            
    load     i64       n                
    jumpret  i64       #4936            
#4936: 
    retfn    i64                        
endproc

proc qq_pclgen.do_select:
    param    u64       pindex
    param    u64       pplist
    param    i64       res
    local    i64       n
    local    i64       labend
    local    i64       i
    local    i64       lab
    local    i64       elselab
    local    u64       x
    local    u64       pelse
    local    mem:4096       plist
    local    mem:4104       labels
    load     u64       pindex           
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pelse            
    setcall  i64 /3/1                   
    load     i64       512              
    setarg   i64 /3                     
    load     u64       &plist           
    setarg   u64 /2                     
    load     u64       pplist           
    setarg   u64 /1                     
    callf    i64 /3    &qq_pclgen.unitstoarray
    store    i64       n                
    load     i64       n                
    load     i64       512              
    jumple   i64       #4944            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Selectx too complex"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4944: 
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       labend           
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       pindex           
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /3/1                   
    load     i64       n                
    setarg   i64 /3                     
    load     i64       1                
    setarg   i64 /2                     
    load     i64       43               
    setarg   i64 /1                     
    callp        /3    &qq_pcllib.genpc_xy
    load     i64       1                
    store    i64       i                
    load     i64       n                
    load     i64       1                
    jumplt   i64       #4947            
#4945: 
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       42               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_lab
    load     u64       qq_pcllib.pccurr 
    load     u64       &labels          
    load     i64       i                
    istorex  u64 /8/-8                  
    forup    i64 /1    #4945            
    opnd     i64       i                
    opnd     i64       n                
#4947: 
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       42               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_lab
    load     u64       qq_pcllib.pccurr 
    load     u64       &labels          
    load     i64       n                
    istorex  u64 /8                     
    load     i64       1                
    store    i64       i                
    load     i64       1                
    store    i64       i                
    load     i64       n                
    load     i64       1                
    jumplt   i64       #4950            
#4948: 
    load     u64       &plist           
    load     i64       i                
    iloadx   u64 /8/-8                  
    store    u64       x                
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.definelabel
    store    i64       lab              
    load     i64       lab              
    load     u64       &labels          
    load     i64       i                
    iloadx   u64 /8/-8                  
    load     i64       16               
    istorex  i64 /1                     
    setcall      /2/1                   
    load     i64       res              
    setarg   i64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       labend           
    setarg   i64 /1                     
    callp        /1    &qq_pclgen.genjumpl
    forup    i64 /1    #4948            
    opnd     i64       i                
    opnd     i64       n                
#4950: 
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.definelabel
    store    i64       elselab          
    load     i64       elselab          
    load     u64       &labels          
    load     i64       n                
    iloadx   u64 /8                     
    load     i64       16               
    istorex  i64 /1                     
    load     u64       pelse            
    jumpf    u64       #4952            
    setcall      /2/1                   
    load     i64       res              
    setarg   i64 /2                     
    load     u64       pelse            
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    jump               #4951            
#4952: 
    load     i64       res              
    jumpf    i64       #4953            
    setcall      /1/1                   
    load     i64       15               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
#4953: 
#4951: 
    setcall      /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    setcall      /1/1                   
    load     i64       labend           
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    retproc                             
endproc

proc qq_pclgen.do_andl:
    param    u64       x
    param    u64       y
    local    i64       a
    local    i64       b
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       a                
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       b                
    setcall      /3/1                   
    load     i64       a                
    setarg   i64 /3                     
    load     u64       x                
    setarg   u64 /2                     
    load     i64       33               
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.genjumpcond
    setcall      /3/1                   
    load     i64       a                
    setarg   i64 /3                     
    load     u64       y                
    setarg   u64 /2                     
    load     i64       33               
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.genjumpcond
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     i64       14               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_int
    setcall      /1/1                   
    load     i64       b                
    setarg   i64 /1                     
    callp        /1    &qq_pclgen.genjumpl
    setcall      /1/1                   
    load     i64       a                
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       14               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_int
    setcall      /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    setcall      /1/1                   
    load     i64       b                
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    retproc                             
endproc

proc qq_pclgen.do_orl:
    param    u64       x
    param    u64       y
    local    i64       a
    local    i64       b
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       a                
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       b                
    setcall      /3/1                   
    load     i64       a                
    setarg   i64 /3                     
    load     u64       x                
    setarg   u64 /2                     
    load     i64       32               
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.genjumpcond
    setcall      /3/1                   
    load     i64       a                
    setarg   i64 /3                     
    load     u64       y                
    setarg   u64 /2                     
    load     i64       32               
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.genjumpcond
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       14               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_int
    setcall      /1/1                   
    load     i64       b                
    setarg   i64 /1                     
    callp        /1    &qq_pclgen.genjumpl
    setcall      /1/1                   
    load     i64       a                
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     i64       14               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_int
    setcall      /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    setcall      /1/1                   
    load     i64       b                
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    retproc                             
endproc

proc qq_pclgen.do_incr:
    param    u64       p
    param    u64       a
    param    i64       res
    local    u64       d
    local    i64       opc
    startmx                             
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       60               
    jumpne   i64       #4958            
    load     i64       74               
    resetmx  i64                        
    jump               #4957            
#4958: 
    load     i64       73               
    endmx    i64                        
#4957: 
    store    i64       opc              
    load     i64       res              
    jumpf    i64       #4960            
    setcall      /2/1                   
    load     i64       opc              
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.do_unaryref
    jump               #4959            
#4960: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       39               
    jumpne   i64       #4961            
    load     u64       a                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       d                
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       15               
    jumpne   i64       #4963            
    load     u64       d                
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       5                
    loadbit  i64                        
    jumpf    u64       #4963            
    setcall      /2/1                   
    load     i64       70               
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.do_unaryref
    jump               #4962            
#4963: 
    setcall      /2/1                   
    load     u64       a                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     i64       71               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
#4962: 
    jump               #4959            
#4961: 
    setcall      /2/1                   
    load     i64       70               
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.do_unaryref
#4959: 
    startmx                             
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #4965            
    load     i64       -1               
    resetmx  i64                        
    jump               #4964            
#4965: 
    load     i64       1                
    endmx    i64                        
#4964: 
    load     u64       qq_pcllib.pccurr 
    load     i64       12               
    istorex  i16 /1                     
    retproc                             
endproc

proc qq_pclgen.do_callhost:
    param    u64       p
    param    u64       a
    param    i64       res
    local    i64       index
    local    i64       isfunc
    local    i64       nargs
    local    i64       nparams
    local    i64       fparams
    local    mem:80       plist
    local    u64       q
    local    i64       av_1
    local    i64       i
    load     u64       p                
    load     i64       24               
    iloadx   i64 /1                     
    store    i64       index            
    load     u64       &qq_tables.hostisfn
    load     i64       index            
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       isfunc           
    load     i64       res              
    jumpf    i64       #4968            
    load     i64       isfunc           
    jumpt    i64       #4968            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Host proc not a function"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4968: 
    load     i64       isfunc           
    jumpf    i64       #4970            
    setcall      /1/1                   
    load     i64       15               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
#4970: 
    load     i64       0                
    store    i64       nargs            
    load     u64       a                
    store    u64       q                
    jump               #4972            
#4971: 
    load     i64       nargs            
    load     i64       10               
    jumple   i64       #4975            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Too many host args"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4975: 
    load     u64       q                
    load     u64       &plist           
    load     u64 /1    &nargs           
    incrload i64 /1                     
    istorex  u64 /8/-8                  
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
#4972: 
    load     u64       q                
    jumpt    u64       #4971            
    load     i64       nargs            
    store    i64       nparams          
    load     i64       nparams          
    load     i64       0                
    jumpne   i64       #4977            
    load     u64       &qq_tables.hostlvset
    load     i64       index            
    iloadx   u8  /1                     
    jumpf    u8        #4977            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "LV hostfn: needs 1+ params"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4977: 
    load     u64       &qq_tables.hostnparams
    load     i64       index            
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       fparams          
    load     i64       nparams          
    load     i64       fparams          
    jumple   i64       #4979            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Hostfn too many params"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4979: 
    load     i64       fparams          
    load     i64       nparams          
    sub      i64                        
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #4982            
#4980: 
    setcall      /1/1                   
    load     i64       15               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    to       i64       #4980            
    opnd     i64       av_1             
#4982: 
    load     i64       nparams          
    store    i64       i                
    load     i64       i                
    load     i64       1                
    jumplt   i64       #4985            
#4983: 
    load     i64       i                
    load     i64       1                
    jumpne   i64       #4987            
    load     u64       &qq_tables.hostlvset
    load     i64       index            
    iloadx   u8  /1                     
    jumpf    u8        #4987            
    setcall      /1/1                   
    load     u64       &plist           
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /1                     
    callp        /1    &qq_pclgen.evalref
    jump               #4986            
#4987: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       &plist           
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
#4986: 
    fordown  i64 /1    #4983            
    opnd     i64       i                
    opnd     i64       1                
#4985: 
    setcall      /2/1                   
    load     i64       res              
    setarg   i64 /2                     
    load     i64       index            
    setarg   i64 /1                     
    callp        /2    &qq_pclgen.callhostfn
    retproc                             
endproc

proc qq_pclgen.callhostfn:
    param    i64       fnindex
    param    i64       calledasfn
    setcall      /2/1                   
    load     i64       fnindex          
    setarg   i64 /2                     
    load     i64       57               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_int
    retproc                             
endproc

proc qq_pclgen.genfree:
    param    i64       n
    setcall      /2/1                   
    load     i64       n                
    setarg   i64 /2                     
    load     i64       58               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_n
    retproc                             
endproc

proc qq_pclgen.do_return:
    param    u64       p
    param    u64       a
    param    i64       res
    load     u64       a                
    jumpf    u64       #4992            
    load     u64       qq_decls.stcurrproc
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       4                
    loadbit  i64                        
    jumpt    u64       #4994            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Proc can't return a value"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4994: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    jump               #4991            
#4992: 
    load     u64       qq_decls.stcurrproc
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       4                
    loadbit  i64                        
    jumpf    u64       #4996            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Func needs return value"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#4996: 
#4991: 
    load     i64       res              
    jumpt    i64       #4998            
    setcall      /1/1                   
    load     i64       qq_pclgen.retindex
    setarg   i64 /1                     
    callp        /1    &qq_pclgen.genjumpl
#4998: 
    retproc                             
endproc

proc qq_pclgen.do_multassign:
    param    u64       a
    param    u64       b
    param    i64       deepcopy
    param    i64       res
    local    u64       p
    local    u64       q
    local    mem:800       plist
    local    i64       n
    local    i64       i
    load     u64       a                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       b                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       q                
    load     i64       0                
    store    i64       n                
    jump               #5001            
#5000: 
    load     u64       q                
    load     u64       0                
    jumpne   u64       #5004            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Too few RHS elems"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#5004: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       q                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    load     i64       n                
    load     i64       100              
    jumplt   i64       #5006            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Too many elems" 
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#5006: 
    load     u64       p                
    load     u64       &plist           
    load     u64 /1    &n               
    incrload i64 /1                     
    istorex  u64 /8/-8                  
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
#5001: 
    load     u64       p                
    jumpt    u64       #5000            
    load     u64       q                
    jumpf    u64       #5008            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Too few LHS elems"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#5008: 
    load     i64       n                
    store    i64       i                
    load     i64       i                
    load     i64       1                
    jumplt   i64       #5011            
#5009: 
    load     i64       deepcopy         
    jumpf    i64       #5013            
    setcall      /1/1                   
    load     i64       27               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
#5013: 
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       &plist           
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.do_store
    fordown  i64 /1    #5009            
    opnd     i64       i                
    opnd     i64       1                
#5011: 
    retproc                             
endproc

proc qq_pclgen.do_store:
    param    u64       a
    param    i64       res
    local    u64       d
    local    u64       p
    local    mem:800       plist
    local    i64       n
    local    i64       i
    load     i64       res              
    jumpf    i64       #5016            
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       39               
    jumpeq   i64       #5016            
    setcall      /1/1                   
    load     i64       26               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
#5016: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       39               
    jumpeq   i64 /1    #5018            
    load     i64       46               
    jumpeq   i64 /1    #5019            
    load     i64       47               
    jumpeq   i64 /1    #5020            
    load     i64       48               
    jumpeq   i64 /1    #5021            
    load     i64       51               
    jumpeq   i64 /1    #5022            
    load     i64       49               
    jumpeq   i64 /1    #5023            
    load     i64       88               
    jumpeq   i64 /1    #5024            
    load     i64       7                
    jumpeq   i64       #5025            
    jump               #5026            
#5018: 
    load     u64       a                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       d                
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       15               
    jumpne   i64       #5028            
    load     u64       d                
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       5                
    loadbit  i64                        
    jumpf    u64       #5028            
    load     i64       res              
    jumpf    i64       #5030            
    setcall      /1/1                   
    load     i64       26               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
#5030: 
    setcall      /2/1                   
    load     u64       d                
    setarg   u64 /2                     
    load     i64       7                
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    setcall      /1/1                   
    load     i64       23               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    jump               #5027            
#5028: 
    load     i64       res              
    jumpf    i64       #5031            
    setcall      /1/1                   
    load     i64       26               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    setcall      /2/1                   
    load     u64       d                
    setarg   u64 /2                     
    load     i64       12               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    jump               #5027            
#5031: 
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       5                
    jumpeq   i64 /1    #5033            
    load     i64       7                
    jumpne   i64       #5032            
#5033: 
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Not lvalue"     
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
    jump               #5027            
#5032: 
    setcall      /2/1                   
    load     u64       d                
    setarg   u64 /2                     
    load     i64       12               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
#5027: 
    jump               #5017            
#5019: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    load     u64       a                
    load     i64       24               
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   u64 /1                     
    load     i64       104              
    iloadx   i64 /1                     
    load     i64       0                
    jumpne   i64       #5035            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       ".m3?"           
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#5035: 
    setcall      /2/1                   
    load     u64       a                
    load     i64       24               
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     i64       128              
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_name
    jump               #5017            
#5020: 
    setcall      /3/1                   
    load     i64       131              
    setarg   i64 /3                     
    load     u64       a                
    load     i64       24               
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       a                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &qq_pclgen.do_bin
    jump               #5017            
#5021: 
    setcall      /1/1                   
    load     u64       a                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_pclgen.evalref
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    load     i64       24               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       137              
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    jump               #5017            
#5022: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       23               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    jump               #5017            
#5023: 
    setcall      /3/1                   
    load     i64       134              
    setarg   i64 /3                     
    load     u64       a                
    load     i64       24               
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       a                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &qq_pclgen.do_bin
    jump               #5017            
#5024: 
    load     i64       0                
    store    i64       n                
    load     u64       a                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       p                
    jump               #5037            
#5036: 
    load     i64       n                
    load     i64       100              
    jumplt   i64       #5040            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Too many elems" 
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#5040: 
    load     u64       p                
    load     u64       &plist           
    load     u64 /1    &n               
    incrload i64 /1                     
    istorex  u64 /8/-8                  
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
#5037: 
    load     u64       p                
    jumpt    u64       #5036            
    load     i64       n                
    load     i64       0                
    jumpne   i64       #5042            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Empty lhs list" 
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#5042: 
    setcall      /2/1                   
    load     i64       n                
    setarg   i64 /2                     
    load     i64       139              
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_n
    load     i64       1                
    store    i64       i                
    load     i64       n                
    load     i64       1                
    jumplt   i64       #5045            
#5043: 
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       &plist           
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.do_store
    forup    i64 /1    #5043            
    opnd     i64       i                
    opnd     i64       n                
#5045: 
    jump               #5017            
#5025: 
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_pclgen.evalref
    setcall      /1/1                   
    load     i64       23               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    jump               #5017            
#5026: 
    setcall      /3/1                   
    load     u64       a                
    setarg   u64 /3                     
    load     u64       &qq_tables.jtagnames
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /2                     
    load     u64       "Can't store to this unit yet:"
    setarg   u64 /1                     
    callp        /3    &qq_lib.gerror_s 
#5017: 
    retproc                             
endproc

proc qq_pclgen.getconstvalue:
    param    u64       p
    rettype  i64
    load     u64       p                
    jumpf    u64       #5048            
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       41               
    jumpne   i64       #5048            
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    jumpret  i64       #5046            
#5048: 
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "gcv Not const"  
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
    load     i64       0                
    jumpret  i64       #5046            
#5046: 
    retfn    i64                        
endproc

proc qq_pclgen.do_convert:
    param    u64       pconv
    local    i64       n
    local    i64       elemmode
    local    i64       i
    local    i64       lowerx
    local    i64       lbound
    local    i64       m
    local    i64       mbase
    local    i64       nfields
    local    mem:3200       plist
    local    u64       p
    local    i64       av_1
    load     u64       pconv            
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       m                
    load     u64       pconv            
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       &qq_tables.ttbasetype
    load     i64       m                
    iloadx   i16 /2                     
    widen    i64/i16                    
    store    i64       mbase            
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       88               
    jumpne   i64       #5052            
    load     i64       mbase            
    load     i64       16               
    jumpne   i64       #5051            
#5052: 
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       88               
    jumpne   i64       #5054            
    setcall      /2/1                   
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /2    &qq_lib.deleteunit
#5054: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /2/1                   
    load     i64       m                
    setarg   i64 /2                     
    load     i64       99               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_int
    jump               #5049            
#5051: 
    setcall  i64 /3/1                   
    load     i64       400              
    setarg   i64 /3                     
    load     u64       &plist           
    setarg   u64 /2                     
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /3    &qq_pclgen.unitstoarray
    store    i64       n                
    load     i64       n                
    jumpf    i64       #5056            
    load     u64       &plist           
    load     i64       1                
    iloadx   u64 /8/-8                  
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       4                
    jumpne   i64       #5056            
    load     i64       mbase            
    load     i64       12               
    jumpeq   i64 /1    #5058            
    load     i64       13               
    jumpeq   i64       #5058            
    jump               #5059            
#5058: 
    setcall      /3/1                   
    load     u64       &plist           
    setarg   u64 /3                     
    load     i64       n                
    setarg   i64 /2                     
    load     i64       m                
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.do_makerecordkv
    jump               #5057            
#5059: 
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "key:value not allowed"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#5057: 
    jump               #5049            
#5056: 
    load     i64       1                
    store    i64       i                
    load     i64       n                
    load     i64       1                
    jumplt   i64       #5062            
#5060: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       &plist           
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    forup    i64 /1    #5060            
    opnd     i64       i                
    opnd     i64       n                
#5062: 
    load     i64       mbase            
    load     i64       12               
    jumpeq   i64 /1    #5064            
    load     i64       13               
    jumpeq   i64 /1    #5064            
    load     i64       10               
    jumpeq   i64 /1    #5065            
    load     i64       11               
    jumpeq   i64 /1    #5066            
    load     i64       7                
    jumpeq   i64 /1    #5067            
    load     i64       8                
    jumpeq   i64 /1    #5068            
    load     i64       5                
    jumpeq   i64       #5069            
    jump               #5070            
#5064: 
    load     u64       &qq_tables.ttlength
    load     i64       m                
    iloadx   i64 /8                     
    store    i64       nfields          
    load     i64       n                
    jumpf    i64       #5072            
    setcall      /3/1                   
    load     u64       p                
    setarg   u64 /3                     
    load     i64       nfields          
    setarg   i64 /2                     
    load     i64       n                
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.checkelems
    jump               #5071            
#5072: 
    load     i64       nfields          
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #5075            
#5073: 
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       14               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_int
    to       i64       #5073            
    opnd     i64       av_1             
#5075: 
    load     i64       nfields          
    store    i64       n                
#5071: 
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     i64       n                
    setarg   i64 /2                     
    startmx                             
    load     i64       mbase            
    load     i64       12               
    jumpne   i64       #5077            
    load     i64       62               
    resetmx  i64                        
    jump               #5076            
#5077: 
    load     i64       65               
    endmx    i64                        
#5076: 
    setarg   i64 /1                     
    callp        /3    &qq_pcllib.genpc_xy
    load     i64       m                
    load     u64       qq_pcllib.pccurr 
    load     i64       16               
    istorex  i32 /1                     
    jump               #5063            
#5065: 
    load     u64       p                
    load     i64       28               
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       lowerx           
    setcall      /3/1                   
    load     i64       lowerx           
    setarg   i64 /3                     
    load     i64       n                
    setarg   i64 /2                     
    load     i64       61               
    setarg   i64 /1                     
    callp        /3    &qq_pcllib.genpc_xy
    jump               #5063            
#5066: 
    setcall      /3/1                   
    load     u64       p                
    load     i64       28               
    iloadx   i32 /1                     
    widen    i64/i32                    
    setarg   i64 /3                     
    load     i64       n                
    setarg   i64 /2                     
    load     i64       63               
    setarg   i64 /1                     
    callp        /3    &qq_pcllib.genpc_xy
    load     i64       11               
    load     u64       qq_pcllib.pccurr 
    load     i64       16               
    istorex  i32 /1                     
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       qq_pcllib.pccurr 
    load     i64       20               
    istorex  i32 /1                     
    jump               #5063            
#5067: 
    load     u64       &qq_tables.tttarget
    load     i64       m                
    iloadx   i16 /2                     
    widen    i64/i16                    
    store    i64       elemmode         
    load     u64       &qq_tables.ttlower
    load     i64       m                
    iloadx   i64 /8                     
    store    i64       lowerx           
    setcall      /3/1                   
    load     u64       p                
    setarg   u64 /3                     
    load     u64       &qq_tables.ttlength
    load     i64       m                
    iloadx   i64 /8                     
    setarg   i64 /2                     
    load     i64       n                
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.checkelems
    setcall      /3/1                   
    load     i64       lowerx           
    setarg   i64 /3                     
    load     i64       n                
    setarg   i64 /2                     
    load     i64       63               
    setarg   i64 /1                     
    callp        /3    &qq_pcllib.genpc_xy
    load     i64       m                
    load     u64       qq_pcllib.pccurr 
    load     i64       16               
    istorex  i32 /1                     
    load     i64       elemmode         
    load     u64       qq_pcllib.pccurr 
    load     i64       20               
    istorex  i32 /1                     
    jump               #5063            
#5068: 
    load     i64       m                
    load     i64       8                
    jumpne   i64       #5079            
    setcall      /3/1                   
    load     u64       p                
    load     i64       28               
    iloadx   i32 /1                     
    widen    i64/i32                    
    setarg   i64 /3                     
    load     i64       n                
    setarg   i64 /2                     
    load     i64       64               
    setarg   i64 /1                     
    callp        /3    &qq_pcllib.genpc_xy
    load     i64       8                
    load     u64       qq_pcllib.pccurr 
    load     i64       16               
    istorex  i32 /1                     
    startmx                             
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #5081            
    load     i64       33               
    resetmx  i64                        
    jump               #5080            
#5081: 
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    endmx    i64                        
#5080: 
    load     u64       qq_pcllib.pccurr 
    load     i64       20               
    istorex  i32 /1                     
    jump               #5078            
#5079: 
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "user-define bit array not ready"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#5078: 
    jump               #5063            
#5069: 
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     i64       n                
    setarg   i64 /2                     
    load     i64       66               
    setarg   i64 /1                     
    callp        /3    &qq_pcllib.genpc_xy
    jump               #5063            
#5070: 
    setcall      /3                     
    load     u64       0                
    setarg   u64 /3                     
    setcall  u64 /2                     
    load     i64       0                
    setarg   i64 /2                     
    load     i64       mbase            
    setarg   i64 /1                     
    callf    u64 /2    &qq_show.strmode 
    setarg   u64 /2                     
    load     u64       "Convert list"   
    setarg   u64 /1                     
    callp        /3    &qq_lib.gerror_s 
#5063: 
#5049: 
    retproc                             
endproc

proc qq_pclgen.checkelems:
    param    i64       n
    param    i64       length
    param    u64       p
    load     i64       n                
    load     i64       length           
    jumpge   i64       #5084            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Too few elements"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
    jump               #5083            
#5084: 
    load     i64       n                
    load     i64       length           
    jumple   i64       #5085            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Too many elements"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#5085: 
#5083: 
    retproc                             
endproc

proc qq_pclgen.do_switch:
    param    u64       p
    param    u64       pindex
    param    u64       pwhenthen
    param    i64       res
    local    i64       minlab
    local    i64       maxlab
    local    i64       x
    local    i64       y
    local    i64       i
    local    i64       n
    local    u64       w
    local    u64       wt
    local    u64       pelse
    load     u64       pindex           
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pelse            
    load     i64       1000000          
    store    i64       minlab           
    load     i64       -1000000         
    store    i64       maxlab           
    load     i64       0                
    store    i64       n                
    load     u64       pwhenthen        
    store    u64       wt               
    jump               #5088            
#5087: 
    load     u64       wt               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       w                
    jump               #5091            
#5090: 
    load     u64       w                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       87               
    jumpeq   i64 /1    #5094            
    load     i64       41               
    jumpeq   i64 /1    #5095            
    load     i64       34               
    jumpeq   i64       #5096            
    jump               #5097            
#5094: 
    setcall  i64 /1/1                   
    load     u64       w                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /1    &qq_pclgen.getconstvalue
    store    i64       x                
    setcall  i64 /1/1                   
    load     u64       w                
    load     i64       24               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /1    &qq_pclgen.getconstvalue
    store    i64       y                
! qq_pclgen.do_switch.dorange:
#5098: 
    load     i64       x                
    store    i64       i                
    load     i64       i                
    load     i64       y                
    jumpgt   i64       #5101            
#5099: 
    load     i64       minlab           
    load     i64       i                
    min      i64                        
    store    i64       minlab           
    load     i64       maxlab           
    load     i64       i                
    max      i64                        
    store    i64       maxlab           
    forup    i64 /1    #5099            
    opnd     i64       i                
    opnd     i64       y                
#5101: 
    jump               #5093            
#5095: 
    load     u64       w                
    load     i64       16               
    iloadx   i64 /1                     
    double                              
    store    i64       y                
    store    i64       x                
    jump               #5098            
    jump               #5093            
#5096: 
    load     u64       w                
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    double                              
    store    i64       y                
    store    i64       x                
    jump               #5098            
    jump               #5093            
#5097: 
    setcall      /3                     
    load     u64       0                
    setarg   u64 /3                     
    setcall  u64 /1                     
    load     u64       w                
    setarg   u64 /1                     
    callf    u64 /1    &qq_lib.strexpr  
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       "Switch when2: not const"
    setarg   u64 /1                     
    callp        /3    &qq_lib.gerror_s 
#5093: 
    load     u64       w                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       w                
#5091: 
    load     u64       w                
    jumpt    u64       #5090            
    load     u64       wt               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       wt               
#5088: 
    load     u64       wt               
    jumpt    u64       #5087            
    load     i64       maxlab           
    load     i64       minlab           
    sub      i64                        
    load     i64       512              
    jumpgt   i64       #5103            
    setcall      /7/1                   
    load     i64       res              
    setarg   i64 /7                     
    load     i64       maxlab           
    setarg   i64 /6                     
    load     i64       minlab           
    setarg   i64 /5                     
    load     u64       pelse            
    setarg   u64 /4                     
    load     u64       pwhenthen        
    setarg   u64 /3                     
    load     u64       pindex           
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /7    &qq_pclgen.do_simpleswitch
    jump               #5086            
#5103: 
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "COMPLEX SWITCH/NOT COMPLETE"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#5086: 
    retproc                             
endproc

proc qq_pclgen.do_simpleswitch:
    param    u64       p
    param    u64       pindex
    param    u64       pwhenthen
    param    u64       pelse
    param    i64       a
    param    i64       b
    param    i64       res
    local    u64       w
    local    u64       wt
    local    u64       q
    local    i64       loopsw
    local    i64       n
    local    i64       offset
    local    i64       x
    local    i64       y
    local    i64       x0
    local    i64       i
    local    i64       labstmt
    local    i64       elselab
    local    mem:4104       labels
    local    i64       lab_a
    local    i64       lab_b
    local    i64       lab_c
    local    i64       lab_d
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       13               
    seteq    i64                        
    store    i64       loopsw           
    load     i64       b                
    load     i64       a                
    sub      i64                        
    load     i64       1                
    add      i64                        
    store    i64       n                
    load     i64       a                
    load     i64       1                
    sub      i64                        
    store    i64       offset           
    load     i64       loopsw           
    jumpf    i64       #5106            
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.definelabel
    store    i64       lab_a            
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab_d            
    setcall      /3/1                   
    load     i64       lab_d            
    setarg   i64 /3                     
    load     i64       lab_a            
    setarg   i64 /2                     
    load     i64       lab_a            
    setarg   i64 /1                     
    callp        /3    &qq_pclgen.stacklooplabels
    jump               #5105            
#5106: 
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab_d            
#5105: 
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       elselab          
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       pindex           
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /3/1                   
    load     i64       b                
    setarg   i64 /3                     
    load     i64       a                
    setarg   i64 /2                     
    load     i64       43               
    setarg   i64 /1                     
    callp        /3    &qq_pcllib.genpc_xy
    load     i64       1                
    store    i64       i                
    load     i64       n                
    load     i64       1                
    jumplt   i64       #5109            
#5107: 
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       42               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_lab
    load     u64       qq_pcllib.pccurr 
    load     u64       &labels          
    load     i64       i                
    istorex  u64 /8/-8                  
    forup    i64 /1    #5107            
    opnd     i64       i                
    opnd     i64       n                
#5109: 
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       42               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_lab
    load     u64       qq_pcllib.pccurr 
    load     u64       &labels          
    load     i64       n                
    istorex  u64 /8                     
    load     u64       pwhenthen        
    store    u64       wt               
    jump               #5111            
#5110: 
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.definelabel
    store    i64       labstmt          
    load     u64       wt               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       w                
    jump               #5114            
#5113: 
    load     u64       w                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       87               
    jumpeq   i64 /1    #5117            
    load     i64       41               
    jumpeq   i64 /1    #5118            
    load     i64       34               
    jumpeq   i64       #5119            
    jump               #5120            
#5117: 
    setcall  i64 /1/1                   
    load     u64       w                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /1    &qq_pclgen.getconstvalue
    store    i64       x0               
    setcall  i64 /1/1                   
    load     u64       w                
    load     i64       24               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /1    &qq_pclgen.getconstvalue
    store    i64       y                
    jump               #5116            
#5118: 
    load     u64       w                
    load     i64       16               
    iloadx   i64 /1                     
    double                              
    store    i64       y                
    store    i64       x0               
    jump               #5116            
#5119: 
    load     u64       w                
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    double                              
    store    i64       y                
    store    i64       x0               
    jump               #5116            
#5120: 
#5116: 
    load     i64       x0               
    store    i64       x                
    load     i64       x                
    load     i64       y                
    jumpgt   i64       #5123            
#5121: 
    load     i64       x                
    load     i64       offset           
    sub      i64                        
    store    i64       i                
    load     u64       &labels          
    load     i64       i                
    iloadx   u64 /8/-8                  
    load     i64       16               
    iloadx   i64 /1                     
    jumpf    i64       #5125            
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     i64       x                
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       x                
    truncate u64/u8                     
    setarg   u64 /1                     
    callp        /2    &msysc.m$print_c8
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Dupl switch value"
    setarg   u64 /1                     
    callp        /2    &qq_lib.gerror   
#5125: 
    load     i64       labstmt          
    load     u64       &labels          
    load     i64       i                
    iloadx   u64 /8/-8                  
    load     i64       16               
    istorex  i64 /1                     
    forup    i64 /1    #5121            
    opnd     i64       x                
    opnd     i64       y                
#5123: 
    load     u64       w                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       w                
#5114: 
    load     u64       w                
    jumpt    u64       #5113            
    setcall      /2/1                   
    load     i64       res              
    setarg   i64 /2                     
    load     u64       wt               
    load     i64       24               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    load     i64       loopsw           
    jumpt    i64       #5127            
    setcall      /1/1                   
    load     i64       lab_d            
    setarg   i64 /1                     
    callp        /1    &qq_pclgen.genjumpl
    jump               #5126            
#5127: 
    setcall      /1/1                   
    load     i64       lab_a            
    setarg   i64 /1                     
    callp        /1    &qq_pclgen.genjumpl
#5126: 
    load     u64       wt               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       wt               
#5111: 
    load     u64       wt               
    jumpt    u64       #5110            
    setcall      /1/1                   
    load     i64       elselab          
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    load     u64       pelse            
    jumpf    u64       #5129            
    setcall      /2/1                   
    load     i64       res              
    setarg   i64 /2                     
    load     u64       pelse            
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
#5129: 
    load     i64       loopsw           
    jumpf    i64       #5131            
    setcall      /1/1                   
    load     i64       lab_a            
    setarg   i64 /1                     
    callp        /1    &qq_pclgen.genjumpl
    setcall      /1/1                   
    load     i64       lab_d            
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    setcall      /0/1                   
    callp        /0    &qq_pclgen.unstacklooplabels
    jump               #5130            
#5131: 
    setcall      /1/1                   
    load     i64       lab_d            
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
#5130: 
    load     i64       1                
    store    i64       i                
    load     i64       n                
    load     i64       1                
    jumplt   i64       #5134            
#5132: 
    load     u64       &labels          
    load     i64       i                
    iloadx   u64 /8/-8                  
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       0                
    jumpne   i64       #5136            
    load     i64       elselab          
    load     u64       &labels          
    load     i64       i                
    iloadx   u64 /8/-8                  
    load     i64       16               
    istorex  i64 /1                     
#5136: 
    forup    i64 /1    #5132            
    opnd     i64       i                
    opnd     i64       n                
#5134: 
    load     i64       elselab          
    load     u64       &labels          
    load     i64       n                
    iloadx   u64 /8                     
    load     i64       16               
    istorex  i64 /1                     
    retproc                             
endproc

proc qq_pclgen.do_makerecordkv:
    param    i64       m
    param    i64       nkeyvals
    param    u64       kvlist
    local    u64       p
    local    mem:3200       plist
    local    i64       nfields
    local    i64       index
    local    u64       d
    local    u64       e
    local    u64       f
    local    u64       k
    local    i64       i
    load     u64       &qq_tables.ttnamedef
    load     i64       m                
    iloadx   u64 /8                     
    store    u64       d                
    load     u64       d                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       e                
    load     i64       0                
    store    i64       nfields          
    jump               #5141            
#5138: 
    load     u64       e                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       11               
    jumpeq   i64 /1    #5144            
    load     i64       12               
    jumpne   i64       #5143            
#5144: 
    load     u64       e                
    load     i64       80               
    iloadx   u64 /1                     
    load     u64       0                
    jumpne   u64       #5143            
    load     u64 /1    &nfields         
    incrto   i64 /1                     
    load     u64       0                
    load     u64       &plist           
    load     i64       nfields          
    istorex  u64 /8/-8                  
#5143: 
    load     u64       e                
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       e                
#5141: 
    load     u64       e                
    jumpt    u64       #5138            
    load     i64       1                
    store    i64       i                
    load     i64       nkeyvals         
    load     i64       1                
    jumplt   i64       #5147            
#5145: 
    load     u64       kvlist           
    load     i64       i                
    iloadx   u64 /8/-8                  
    load     i64       16               
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       k                
    load     u64       kvlist           
    load     i64       i                
    iloadx   u64 /8/-8                  
    load     i64       24               
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       d                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       e                
    load     u64       0                
    store    u64       f                
    jump               #5151            
#5148: 
    load     u64       e                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       11               
    jumpeq   i64 /1    #5154            
    load     i64       12               
    jumpne   i64       #5153            
#5154: 
    load     u64       e                
    load     i64       48               
    iloadx   u64 /1                     
    load     u64       k                
    jumpne   u64       #5153            
    load     u64       e                
    store    u64       f                
    jump               #5150            
#5153: 
    load     u64       e                
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       e                
#5151: 
    load     u64       e                
    jumpt    u64       #5148            
#5150: 
    load     u64       f                
    jumpt    u64       #5156            
    setcall      /3/1                   
    load     u64       0                
    setarg   u64 /3                     
    load     u64       k                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       "Can't find field:"
    setarg   u64 /1                     
    callp        /3    &qq_lib.gerror_s 
#5156: 
    load     u64       f                
    load     i64       96               
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       index            
    load     u64       &plist           
    load     i64       index            
    iloadx   u64 /8/-8                  
    jumpf    u64       #5158            
    setcall      /3/1                   
    load     u64       0                
    setarg   u64 /3                     
    load     u64       k                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       "Dupl key:"      
    setarg   u64 /1                     
    callp        /3    &qq_lib.gerror_s 
#5158: 
    load     u64       p                
    load     u64       &plist           
    load     i64       index            
    istorex  u64 /8/-8                  
    forup    i64 /1    #5145            
    opnd     i64       i                
    opnd     i64       nkeyvals         
#5147: 
    load     i64       1                
    store    i64       i                
    load     i64       nfields          
    load     i64       1                
    jumplt   i64       #5161            
#5159: 
    load     u64       &plist           
    load     i64       i                
    iloadx   u64 /8/-8                  
    jumpf    u64       #5163            
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       &plist           
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    jump               #5162            
#5163: 
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     i64       14               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_int
#5162: 
    forup    i64 /1    #5159            
    opnd     i64       i                
    opnd     i64       nfields          
#5161: 
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     i64       nfields          
    setarg   i64 /2                     
    load     i64       62               
    setarg   i64 /1                     
    callp        /3    &qq_pcllib.genpc_xy
    load     i64       m                
    load     u64       qq_pcllib.pccurr 
    load     i64       16               
    istorex  i32 /1                     
    retproc                             
endproc

proc qq_pclgen.do_idiv:
    param    u64       a
    param    u64       b
    local    i64       n
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       41               
    jumpne   i64       #5166            
    setcall  i64 /1/1                   
    load     u64       b                
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callf    i64 /1    &qq_lib.ispoweroftwo
    double                              
    store    i64       n                
    jumpf    i64       #5166            
    setcall      /2/1                   
    load     i64       n                
    setarg   i64 /2                     
    load     i64       14               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_int
    setcall      /1/1                   
    load     i64       112              
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    jump               #5165            
#5166: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       b                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       105              
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
#5165: 
    retproc                             
endproc

proc qq_pclgen.do_irem:
    param    u64       a
    param    u64       b
    local    i64       n
    local    u64       m
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       41               
    jumpne   i64       #5169            
    setcall  i64 /1/1                   
    load     u64       b                
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callf    i64 /1    &qq_lib.ispoweroftwo
    double                              
    store    i64       n                
    jumpf    i64       #5169            
    load     u64       -1               
    load     i64       n                
    shl      u64                        
    bitnot   u64                        
    store    u64       m                
    setcall      /2/1                   
    load     u64       m                
    setarg   i64 /2                     
    load     i64       14               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_int
    setcall      /1/1                   
    load     i64       108              
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    jump               #5168            
#5169: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       b                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       106              
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
#5168: 
    retproc                             
endproc

proc qq_pclgen.do_map:
    param    u64       p
    param    u64       popcode
    param    u64       x
    local    i64       lab
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    jumpf    u64       #5172            
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
#5172: 
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       popcode          
    setarg   u64 /1                     
    callp        /2    &qq_pclgen.evalunit
    setcall      /1/1                   
    load     i64       142              
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    setcall  i64 /0/1                   
    callf    i64 /0    &qq_pcllib.createfwdlabel
    store    i64       lab              
    setcall      /2/1                   
    load     i64       lab              
    setarg   i64 /2                     
    load     i64       30               
    setarg   i64 /1                     
    callp        /2    &qq_pcllib.genpc_lab
    setcall      /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    setcall      /1/1                   
    load     i64       lab              
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.definefwdlabel
    retproc                             
endproc

proc qq_pclgen.pushstring:
    param    u64       s
    setcall      /1/1                   
    load     i64       18               
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    setcall      /1/1                   
    load     u64       s                
    setarg   u64 /1                     
    callp        /1    &qq_pcllib.genopnd_strz
    retproc                             
endproc

proc qq_pclgen.checkblockreturn:
    param    u64       p
    local    u64       q
    local    u64       r
    rettype  i64
    load     u64       p                
    load     u64       0                
    jumpne   u64       #5176            
    load     i64       0                
    jumpret  i64       #5174            
#5176: 
    load     u64       &qq_tables.jhasvalue
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpeq   i64 /1    #5178            
    load     i64       1                
    jumpeq   i64       #5179            
    jump               #5180            
#5178: 
    load     i64       0                
    jumpret  i64       #5174            
    jump               #5177            
#5179: 
    load     i64       1                
    jumpret  i64       #5174            
    jump               #5177            
#5180: 
#5177: 
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       6                
    jumpeq   i64 /1    #5182            
    load     i64       7                
    jumpeq   i64       #5183            
    jump               #5184            
#5182: 
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       q                
    load     u64       0                
    jumpne   u64       #5186            
    load     i64       0                
    jumpret  i64       #5174            
#5186: 
    jump               #5188            
#5187: 
    load     u64       r                
    store    u64       q                
#5188: 
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    double                              
    store    u64       r                
    jumpt    u64       #5187            
    setcall  i64 /1/1                   
    load     u64       q                
    setarg   u64 /1                     
    callf    i64 /1    &qq_pclgen.checkblockreturn
    jumpret  i64       #5174            
    jump               #5181            
#5183: 
    startmx                             
    setcall  i64 /1/1                   
    load     u64       p                
    load     i64       24               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /1    &qq_pclgen.checkblockreturn
    jumpf    i64       #5190            
    setcall  i64 /1/1                   
    load     u64       p                
    load     i64       24               
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /1    &qq_pclgen.checkblockreturn
    jumpf    i64       #5190            
    load     i64       1                
    resetmx  i64                        
    jump               #5191            
#5190: 
    load     i64       0                
    endmx    i64                        
#5191: 
    jumpret  i64       #5174            
    jump               #5181            
#5184: 
    load     i64       1                
    jumpret  i64       #5174            
#5181: 
    load     i64       0                
    jumpret  i64       #5174            
#5174: 
    retfn    i64                        
endproc

proc qq_pcllib.start:
    local    i64       nn
    setcall      /0/1                   
    callp        /0    &mlib.pcm_init   
    load     i64       8192             
    store    i64       qq_pcllib.labelalloc
    setcall  u64 /1/1                   
    load     i64       8                
    load     i64       qq_pcllib.labelalloc
    mul      i64                        
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    store    u64       qq_pcllib.labelpctable
    retproc                             
endproc

proc qq_pcllib.resetpcl:
    param    i64       sourcesize
    local    i64       pclsize
    load     i64       0                
    store    i64       qq_decls.qpos    
    load     i64       0                
    store    i64       qq_pcllib.nextlabelno
    load     i64       0                
    store    i64       qq_pcllib.pclcurrlineno
    load     i64       sourcesize       
    store    i64       pclsize          
    load     i64       1024             
    store    i64       qq_pcllib.pcalloc
    jump               #5195            
#5194: 
    load     i64       1                
    load     u64 /1    &qq_pcllib.pcalloc
    shlto    i64                        
#5195: 
    load     i64       qq_pcllib.pcalloc
    load     i64       pclsize          
    jumplt   i64       #5194            
    setcall  u64 /1/1                   
    load     i64       qq_pcllib.pcalloc
    load     i64       32               
    mul      i64                        
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_allocz 
    store    u64       qq_pcllib.pcstart
    load     u64       qq_pcllib.pcstart
    load     i64       1                
    subpx    u64 /32                    
    store    u64       qq_pcllib.pccurr 
    load     u64       qq_pcllib.pcstart
    load     i64       qq_pcllib.pcalloc
    addpx    u64 /32                    
    load     i64       8                
    subpx    u64 /32                    
    store    u64       qq_pcllib.pcend  
    setcall  u64 /1/1                   
    load     i64       qq_pcllib.pcalloc
    load     i64       4                
    mul      i64                        
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    store    u64       qq_pcllib.pcsourcestart
    load     u64       qq_pcllib.pcsourcestart
    store    u64       qq_pcllib.pcsourcecurr
    setcall      /2/1                   
    load     i64       8                
    load     i64       qq_pcllib.labelalloc
    mul      i64                        
    setarg   i64 /2                     
    load     u64       qq_pcllib.labelpctable
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_clearmem
    retproc                             
endproc

proc qq_pcllib.genpc:
    param    i64       opc
    load     u64 /1    &qq_pcllib.pccurr
    incrto   u64 /32                    
    load     u64       qq_pcllib.pccurr 
    load     u64       qq_pcllib.pcend  
    jumplt   u64       #5199            
    setcall      /0/1                   
    callp        /0    &qq_pcllib.extendpcldata
#5199: 
    load     i64       opc              
    load     u64       qq_pcllib.pccurr 
    load     i64       8                
    istorex  u8  /1                     
    load     u64 /1    &qq_pcllib.pcsourcecurr
    incrto   u64 /4                     
    load     i64       qq_decls.qpos    
    load     u64       qq_pcllib.pcsourcecurr
    istore   i32                        
    retproc                             
endproc

proc qq_pcllib.genpc_int:
    param    i64       opc
    param    i64       a
    setcall      /1/1                   
    load     i64       opc              
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    load     i64       a                
    load     u64       qq_pcllib.pccurr 
    load     i64       16               
    istorex  i64 /1                     
    retproc                             
endproc

proc qq_pcllib.genpc_n:
    param    i64       opc
    param    i64       n
    setcall      /1/1                   
    load     i64       opc              
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    load     i64       n                
    load     u64       qq_pcllib.pccurr 
    load     i64       9                
    istorex  u8  /1                     
    retproc                             
endproc

proc qq_pcllib.genpc_xy:
    param    i64       opc
    param    i64       x
    param    i64       y
    setcall      /1/1                   
    load     i64       opc              
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    load     i64       x                
    load     u64       qq_pcllib.pccurr 
    load     i64       12               
    istorex  i16 /1                     
    load     i64       y                
    load     u64       qq_pcllib.pccurr 
    load     i64       14               
    istorex  i16 /1                     
    retproc                             
endproc

proc qq_pcllib.genpc_name:
    param    i64       opc
    param    u64       d
    setcall      /1/1                   
    load     i64       opc              
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    load     u64       d                
    load     u64       qq_pcllib.pccurr 
    load     i64       16               
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_pcllib.genopnd_strz:
    param    u64       s
    load     u64       s                
    load     u64       qq_pcllib.pccurr 
    load     i64       16               
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_pcllib.genopnd_str:
    param    u64       s
    load     u64       s                
    load     u64       qq_pcllib.pccurr 
    load     i64       16               
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_pcllib.genopnd_obj:
    param    u64       p
    load     u64       p                
    load     u64       qq_pcllib.pccurr 
    load     i64       16               
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_pcllib.genpc_real:
    param    i64       opc
    param    r64       x
    setcall      /1/1                   
    load     i64       opc              
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    load     r64       x                
    load     u64       qq_pcllib.pccurr 
    load     i64       16               
    istorex  r64 /1                     
    retproc                             
endproc

proc qq_pcllib.genpc_lab:
    param    i64       opc
    param    i64       lab
    setcall      /1/1                   
    load     i64       opc              
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    load     i64       lab              
    load     u64       qq_pcllib.pccurr 
    load     i64       16               
    istorex  i64 /1                     
    retproc                             
endproc

proc qq_pcllib.gencomment:
    param    u64       s
    setcall      /1/1                   
    load     i64       6                
    setarg   i64 /1                     
    callp        /1    &qq_pcllib.genpc 
    setcall      /1                     
    setcall  u64 /1                     
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /1    &mlib.pcm_copyheapstring
    setarg   u64 /1                     
    callp        /1    &qq_pcllib.genopnd_strz
    retproc                             
endproc

proc qq_pcllib.extendpcldata:
    local    i64       newpcalloc
    local    u64       newpcstart
    local    u64       newpcsourcestart
    load     i64       qq_pcllib.pcalloc
    load     i64       2                
    mul      i64                        
    store    i64       newpcalloc       
    setcall  u64 /1/1                   
    load     i64       32               
    load     i64       newpcalloc       
    mul      i64                        
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    store    u64       newpcstart       
    setcall  u64 /1/1                   
    load     i64       4                
    load     i64       newpcalloc       
    mul      i64                        
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    store    u64       newpcsourcestart 
    setcall      /3                     
    setcall  i64 /2                     
    load     u64       qq_pcllib.pcstart
    setarg   u64 /2                     
    load     u64       qq_pcllib.pccurr 
    setarg   u64 /1                     
    callf    i64 /2    &qq_lib.getpcloffset
    load     i64       32               
    mul      u64                        
    setarg   u64 /3                     
    load     u64       qq_pcllib.pcstart
    setarg   u64 /2                     
    load     u64       newpcstart       
    setarg   u64 /1                     
    callp        /3    &memcpy          
    setcall      /3                     
    setcall  i64 /2                     
    load     u64       qq_pcllib.pcstart
    setarg   u64 /2                     
    load     u64       qq_pcllib.pccurr 
    setarg   u64 /1                     
    callf    i64 /2    &qq_lib.getpcloffset
    load     i64       4                
    mul      u64                        
    setarg   u64 /3                     
    load     u64       qq_pcllib.pcsourcestart
    setarg   u64 /2                     
    load     u64       newpcsourcestart 
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     u64       newpcstart       
    setcall  i64 /2/1                   
    load     u64       qq_pcllib.pcstart
    setarg   u64 /2                     
    load     u64       qq_pcllib.pccurr 
    setarg   u64 /1                     
    callf    i64 /2    &qq_lib.getpcloffset
    addpx    u64 /32                    
    store    u64       qq_pcllib.pccurr 
    load     u64       newpcstart       
    load     i64       newpcalloc       
    addpx    u64 /32                    
    load     i64       10               
    subpx    u64 /32                    
    store    u64       qq_pcllib.pcend  
    load     u64       newpcsourcestart 
    load     u64       qq_pcllib.pcsourcecurr
    load     u64       qq_pcllib.pcsourcestart
    subp     i64 /4                     
    addpx    u64 /4                     
    store    u64       qq_pcllib.pcsourcecurr
    setcall      /2/1                   
    load     i64       qq_pcllib.pcalloc
    load     i64       32               
    mul      i64                        
    setarg   i64 /2                     
    load     u64       qq_pcllib.pcstart
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_free   
    setcall      /2/1                   
    load     i64       qq_pcllib.pcalloc
    load     i64       4                
    mul      i64                        
    setarg   i64 /2                     
    load     u64       qq_pcllib.pcsourcestart
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_free   
    load     u64       newpcstart       
    store    u64       qq_pcllib.pcstart
    load     i64       newpcalloc       
    store    i64       qq_pcllib.pcalloc
    load     u64       newpcsourcestart 
    store    u64       qq_pcllib.pcsourcestart
    retproc                             
endproc

proc qq_pcllib.extendlabeltable:
    local    i64       newlabelalloc
    local    u64       newlabeltable
    load     i64       qq_pcllib.labelalloc
    load     i64       2                
    mul      i64                        
    store    i64       newlabelalloc    
    setcall  u64 /1/1                   
    load     i64       8                
    load     i64       newlabelalloc    
    mul      i64                        
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    store    u64       newlabeltable    
    setcall      /3/1                   
    load     i64       qq_pcllib.labelalloc
    load     i64       8                
    mul      u64                        
    setarg   u64 /3                     
    load     u64       qq_pcllib.labelpctable
    setarg   u64 /2                     
    load     u64       newlabeltable    
    setarg   u64 /1                     
    callp        /3    &memcpy          
    setcall      /2/1                   
    load     i64       qq_pcllib.labelalloc
    load     i64       8                
    mul      i64                        
    setarg   i64 /2                     
    load     u64       qq_pcllib.labelpctable
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_free   
    load     u64       newlabeltable    
    store    u64       qq_pcllib.labelpctable
    load     i64       newlabelalloc    
    store    i64       qq_pcllib.labelalloc
    retproc                             
endproc

proc qq_pcllib.definelabel:
    rettype  i64
    load     i64       qq_pcllib.nextlabelno
    load     i64       qq_pcllib.labelalloc
    jumplt   i64       #5214            
    setcall      /0/1                   
    callp        /0    &qq_pcllib.extendlabeltable
#5214: 
    load     u64 /1    &qq_pcllib.nextlabelno
    incrto   i64 /1                     
    load     u64       qq_pcllib.pccurr 
    load     i64       1                
    addpx    u64 /32                    
    load     u64       qq_pcllib.labelpctable
    load     i64       qq_pcllib.nextlabelno
    istorex  u64 /8/-8                  
    load     i64       qq_pcllib.nextlabelno
    jumpret  i64       #5212            
#5212: 
    retfn    i64                        
endproc

proc qq_pcllib.createfwdlabel:
    rettype  i64
    load     i64       qq_pcllib.nextlabelno
    load     i64       qq_pcllib.labelalloc
    jumplt   i64       #5217            
    setcall      /0/1                   
    callp        /0    &qq_pcllib.extendlabeltable
#5217: 
    load     u64 /1    &qq_pcllib.nextlabelno
    incrto   i64 /1                     
    load     u64       0                
    load     u64       qq_pcllib.labelpctable
    load     i64       qq_pcllib.nextlabelno
    istorex  u64 /8/-8                  
    load     i64       qq_pcllib.nextlabelno
    jumpret  i64       #5215            
#5215: 
    retfn    i64                        
endproc

proc qq_pcllib.definefwdlabel:
    param    i64       lab
    load     u64       qq_pcllib.labelpctable
    load     i64       lab              
    iloadx   u64 /8/-8                  
    jumpf    u64       #5220            
    setcall      /1/1                   
    load     u64       "dupl label?"    
    setarg   u64 /1                     
    callp        /1    &qq_lib.serror   
#5220: 
    load     u64       qq_pcllib.pccurr 
    load     i64       1                
    addpx    u64 /32                    
    load     u64       qq_pcllib.labelpctable
    load     i64       lab              
    istorex  u64 /8/-8                  
    retproc                             
endproc

proc qq_pcllib.genxy:
    param    i64       x
    param    i64       y
    load     i64       x                
    load     u64       qq_pcllib.pccurr 
    load     i64       12               
    istorex  i16 /1                     
    load     i64       y                
    load     u64       qq_pcllib.pccurr 
    load     i64       14               
    istorex  i16 /1                     
    retproc                             
endproc

proc qq_print.pch_print:
    param    u64       p
    param    u64       fmt
    local    mem:16       v
    local    u64       q
    local    u64       s
    local    mem:16       emptyfmt
    load     u64       fmt              
    load     u64       0                
    jumpne   u64       #5224            
    load     u64       &emptyfmt        
    store    u64       fmt              
    load     i64       0                
    load     u64       &emptyfmt        
    load     i64       0                
    istorex  u32 /1                     
#5224: 
    load     u64       qq_print.mfmtstr 
    load     u64       0                
    jumpne   u64       #5226            
    load     u8        qq_print.mgapneeded
    jumpf    u8        #5228            
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       " "              
    setarg   u64 /1                     
    callp        /2    &qq_print.printstr_n
    jump               #5227            
#5228: 
    load     i64       1                
    store    u8        qq_print.mgapneeded
#5227: 
    jump               #5225            
#5226: 
    setcall      /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callp        /1    &qq_print.printnextfmtchars
#5225: 
    load     i64       0                
    store    i64       qq_print.listdepth
    setcall      /3/1                   
    load     u64       &v               
    setarg   u64 /3                     
    load     u64       fmt              
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_print.pch_tostr
    setcall      /2/1                   
    load     u64       &v               
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     u64       &v               
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &qq_print.printstr_n
    load     u64       &v               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #5230            
    setcall      /1/1                   
    load     u64       &v               
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#5230: 
    retproc                             
endproc

proc qq_print.pch_print_nf:
    param    u64       p
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /2    &qq_print.pch_print
    retproc                             
endproc

proc qq_print.pch_printnogap:
    load     i64       0                
    store    u8        qq_print.mgapneeded
    retproc                             
endproc

proc qq_print.pch_println:
    load     u64       qq_print.mfmtstr 
    jumpf    u64       #5235            
    setcall      /1/1                   
    load     i64       1                
    setarg   i64 /1                     
    callp        /1    &qq_print.printnextfmtchars
#5235: 
    load     i64       0                
    store    u8        qq_print.mgapneeded
    setcall      /2/1                   
    load     i64       -1               
    setarg   i64 /2                     
    load     u64       "\n"             
    setarg   u64 /1                     
    callp        /2    &qq_print.printstr_n
    retproc                             
endproc

proc qq_print.pch_reread:
    load     u64       qq_print.kb_lastpos
    store    u64       qq_print.kb_pos  
    load     i64       qq_print.kb_lastlength
    store    i64       qq_print.kb_length
    retproc                             
endproc

proc qq_print.pch_rereadln:
    load     u64       qq_print.kb_start
    store    u64       qq_print.kb_pos  
    load     i64       qq_print.kb_linelength
    store    i64       qq_print.kb_length
    retproc                             
endproc

proc qq_print.pch_startprint:
    param    u64       p
    local    u64       s
    load     u64 /1    &qq_print.noclevels
    incrload i64 /1                     
    load     i64       0                
    jumpeq   i64 /1    #5240            
    load     i64       1                
    jumpeq   i64 /1    #5240            
    load     i64       7                
    jumpeq   i64       #5241            
    jump               #5242            
#5240: 
    jump               #5239            
#5241: 
    setcall      /1/1                   
    load     u64       "print #x overflow"
    setarg   u64 /1                     
    callp        /1    &qq_lib.prterror 
    jump               #5239            
#5242: 
    load     i64       qq_print.moutdev 
    load     u64       &qq_print.moutdevstack
    load     i64       qq_print.noclevels
    istorex  i32 /4/-4                  
    load     u64       qq_print.moutchan
    load     u64       &qq_print.moutchanstack
    load     i64       qq_print.noclevels
    istorex  u64 /8/-8                  
    load     mem:16       qq_print.moutvar
    load     u64       &qq_print.moutvarstack
    load     i64       qq_print.noclevels
    istorex  mem:16 /16/-16             
    load     u64       qq_print.mfmtstr 
    load     u64       &qq_print.mfmtstrstack
    load     i64       qq_print.noclevels
    istorex  u64 /8/-8                  
    load     u64       qq_print.mfmtcurr
    load     u64       &qq_print.mfmtcurrstack
    load     i64       qq_print.noclevels
    istorex  u64 /8/-8                  
    load     u8        qq_print.mgapneeded
    load     u64       &qq_print.mgapstack
    load     i64       qq_print.noclevels
    istorex  u8  /1/-1                  
#5239: 
    load     u64       0                
    store    u64       qq_print.mfmtstr 
    load     u64       0                
    store    u64       qq_print.mfmtcurr
    load     u64       p                
    load     u64       0                
    jumpne   u64       #5244            
    jump               #5245            
#5244: 
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #5247            
    load     i64       14               
    jumpeq   i64       #5248            
    jump               #5249            
#5247: 
    load     u64       p                
    load     i64       8                
    iloadx   i64 /1                     
    load     i64       0                
    jumpeq   i64 /1    #5251            
    load     i64       1                
    jumpeq   i64 /1    #5252            
    load     i64       2                
    jumpeq   i64       #5253            
    jump               #5254            
#5251: 
! qq_print.pch_startprint.doconsole:
#5245: 
    load     i64       0                
    store    i64       qq_print.moutdev 
    load     u64       0                
    store    u64       qq_print.moutchan
    jump               #5250            
#5252: 
    load     i64       2                
    store    i64       qq_print.moutdev 
    load     u64       0                
    store    u64       qq_print.moutchan
    load     i64       265              
    load     u64       &qq_print.moutvar
    load     i64       0                
    istorex  u32 /1                     
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_vars.obj_new 
    store    u64       s                
    load     u64       1                
    load     u64       s                
    load     i64       4                
    addpx    u64 /1                     
    load     i64       1                
    storebit u8                         
    load     u64       s                
    load     u64       &qq_print.moutvar
    load     i64       8                
    istorex  u64 /1                     
    jump               #5250            
#5253: 
    load     u64       qq_print.testfilech
    load     u64       0                
    jumpne   u64       #5256            
    setcall      /1/1                   
    load     u64       "@2: file not open"
    setarg   u64 /1                     
    callp        /1    &qq_lib.prterror 
#5256: 
    load     i64       1                
    store    i64       qq_print.moutdev 
    load     u64       qq_print.testfilech
    store    u64       qq_print.moutchan
    jump               #5250            
#5254: 
    load     i64       1                
    store    i64       qq_print.moutdev 
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       qq_print.moutchan
#5250: 
    jump               #5246            
#5248: 
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       9                
    jumpeq   i64       #5258            
    jump               #5259            
#5258: 
    load     i64       4                
    store    i64       qq_print.moutdev 
    load     u64       0                
    store    u64       qq_print.moutchan
    load     i64       14               
    load     u64       &qq_print.moutvar
    load     i64       0                
    istorex  u32 /1                     
    load     u64       p                
    load     u64       &qq_print.moutvar
    load     i64       8                
    istorex  u64 /1                     
    jump               #5257            
#5259: 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       &qq_tables.ttname
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       "Print@^?"       
    setarg   u64 /1                     
    callp        /1    &qq_lib.prterror 
#5257: 
    jump               #5246            
#5249: 
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       12               
    jumpeq   i64 /1    #5261            
    load     i64       13               
    jumpeq   i64       #5261            
    jump               #5262            
#5261: 
    load     i64       0                
    store    i64       qq_print.moutdev 
    jump               #5260            
#5262: 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       &qq_tables.ttname
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       "Can't do startprint..."
    setarg   u64 /1                     
    callp        /1    &qq_lib.prterror 
#5260: 
#5246: 
    load     i64       0                
    store    u8        qq_print.mgapneeded
    retproc                             
endproc

proc qq_print.pch_startprintcon:
    local    mem:16       v
    load     i64       1                
    load     u64       &v               
    load     i64       0                
    istorex  u32 /1                     
    load     i64       0                
    load     u64       &v               
    load     i64       8                
    istorex  i64 /1                     
    setcall      /1/1                   
    load     u64       &v               
    setarg   u64 /1                     
    callp        /1    &qq_print.pch_startprint
    retproc                             
endproc

proc qq_print.pch_endprint:
    local    u64       p
    load     u64       qq_print.mfmtstr 
    jumpf    u64       #5266            
    setcall      /1/1                   
    load     i64       1                
    setarg   i64 /1                     
    callp        /1    &qq_print.printnextfmtchars
#5266: 
    load     i64       qq_print.moutdev 
    load     i64       4                
    jumpeq   i64       #5268            
    jump               #5269            
#5268: 
    load     u64       &qq_print.moutvar
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    jump               #5267            
#5269: 
#5267: 
    load     u64       qq_print.mfmtstr 
    load     u64       0                
    jumpeq   u64       #5271            
    setcall      /2                     
    setcall  i64 /1                     
    load     u64       qq_print.mfmtstr 
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    load     i64       1                
    add      i64                        
    setarg   i64 /2                     
    load     u64       qq_print.mfmtstr 
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_free   
#5271: 
    load     u64 /1    &qq_print.noclevels
    decrload i64 /1                     
    load     i64       -1               
    jumpne   i64       #5273            
    setcall      /1/1                   
    load     u64       "resetoc??"      
    setarg   u64 /1                     
    callp        /1    &qq_lib.prterror 
#5273: 
    load     i64       qq_print.noclevels
    load     i64       0                
    jumpne   i64       #5275            
    load     i64       0                
    store    i64       qq_print.moutdev 
    jump               #5274            
#5275: 
    load     u64       &qq_print.moutdevstack
    load     i64       qq_print.noclevels
    iloadx   i32 /4                     
    widen    i64/i32                    
    store    i64       qq_print.moutdev 
    load     u64       &qq_print.moutchanstack
    load     i64       qq_print.noclevels
    iloadx   u64 /8                     
    store    u64       qq_print.moutchan
    load     u64       &qq_print.moutvarstack
    load     i64       qq_print.noclevels
    iloadx   mem:16 /16                 
    store    mem:16       qq_print.moutvar
    load     u64       &qq_print.mgapstack
    load     i64       qq_print.noclevels
    iloadx   u8  /1                     
    store    u8        qq_print.mgapneeded
    load     u64       &qq_print.mfmtstrstack
    load     i64       qq_print.noclevels
    iloadx   u64 /8                     
    store    u64       qq_print.mfmtstr 
    load     u64       &qq_print.mfmtcurrstack
    load     i64       qq_print.noclevels
    iloadx   u64 /8                     
    store    u64       qq_print.mfmtcurr
#5274: 
    load     i64       0                
    store    u8        qq_print.mgapneeded
    retproc                             
endproc

proc qq_print.pch_strstartprint:
    local    mem:16       p
    load     i64       1                
    load     u64       &p               
    load     i64       0                
    istorex  u32 /1                     
    load     i64       1                
    load     u64       &p               
    load     i64       8                
    istorex  i64 /1                     
    setcall      /1/1                   
    load     u64       &p               
    setarg   u64 /1                     
    callp        /1    &qq_print.pch_startprint
    retproc                             
endproc

proc qq_print.pch_strendprint:
    param    u64       dest
    load     u64       qq_print.mfmtstr 
    jumpf    u64       #5279            
    setcall      /1/1                   
    load     i64       1                
    setarg   i64 /1                     
    callp        /1    &qq_print.printnextfmtchars
#5279: 
    load     i64       qq_print.moutdev 
    load     i64       2                
    jumpeq   i64       #5281            
    setcall      /1/1                   
    load     u64       "STRENDPRT/NOT STR"
    setarg   u64 /1                     
    callp        /1    &qq_lib.prterror 
#5281: 
    load     mem:16       qq_print.moutvar
    load     u64       dest             
    istore   mem:16                     
    load     i64       0                
    load     u64       &qq_print.moutvar
    load     i64       0                
    istorex  u32 /1                     
    setcall      /0/1                   
    callp        /0    &qq_print.pch_endprint
    retproc                             
endproc

proc qq_print.pch_printspace:
    load     i64       0                
    store    u8        qq_print.mgapneeded
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       " "              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    retproc                             
endproc

proc qq_print.pch_readln:
    param    u64       dev
    local    u64       ch
    local    i64       length
    local    u64       pdev
    load     u64       qq_print.kb_start
    load     u64       0                
    jumpne   u64       #5285            
    setcall  u64 /1/1                   
    load     i64       1048576          
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    store    u64       qq_print.kb_start
    load     i64       1048576          
    store    i64       qq_print.kb_size 
    load     u64       qq_print.kb_start
    store    u64       qq_print.kb_lastpos
    load     u64       qq_print.kb_start
    store    u64       qq_print.kb_pos  
    load     i64       0                
    store    i64       qq_print.kb_length
    load     i64       0                
    store    i64       qq_print.kb_lastlength
    load     i64       0                
    store    i64       qq_print.kb_linelength
#5285: 
    load     u64       dev              
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpeq   i64 /1    #5287            
    load     i64       1                
    jumpeq   i64 /1    #5288            
    load     i64       9                
    jumpeq   i64       #5289            
    jump               #5290            
#5287: 
! qq_print.pch_readln.doconsole:
#5291: 
    setcall      /3/1                   
    load     i64       qq_print.kb_size 
    setarg   i64 /3                     
    load     u64       qq_print.kb_start
    setarg   u64 /2                     
    load     u64       0                
    setarg   u64 /1                     
    callp        /3    &mlib.readlinen  
    setcall  i64 /1/1                   
    load     u64       qq_print.kb_start
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    store    i64       qq_print.kb_length
    jump               #5286            
#5288: 
    load     u64       dev              
    load     i64       8                
    iloadx   i64 /1                     
    load     i64       0                
    jumpeq   i64 /1    #5293            
    load     i64       1                
    jumpeq   i64       #5294            
    jump               #5295            
#5293: 
    jump               #5291            
    jump               #5292            
#5294: 
    load     u64       qq_print.testfilech
    load     u64       0                
    jumpne   u64       #5297            
    setcall      /1/1                   
    load     u64       "R@2: file not open"
    setarg   u64 /1                     
    callp        /1    &qq_lib.prterror 
#5297: 
    load     u64       qq_print.testfilech
    store    u64       ch               
    jump               #5292            
#5295: 
    load     u64       dev              
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       ch               
#5292: 
    setcall      /3/1                   
    load     i64       qq_print.kb_size 
    setarg   i64 /3                     
    load     u64       qq_print.kb_start
    setarg   u64 /2                     
    load     u64       ch               
    setarg   u64 /1                     
    callp        /3    &mlib.readlinen  
    setcall  i64 /1/1                   
    load     u64       qq_print.kb_start
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    store    i64       qq_print.kb_length
    jump               #5286            
#5289: 
    load     u64       dev              
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pdev             
    load     u64       pdev             
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       length           
    load     i64       length           
    load     i64       0                
    jumpne   i64       #5299            
    load     i64       0                
    store    i64       qq_print.kb_length
    load     u64       0                
    load     u64       qq_print.kb_start
    istore   u8                         
    jump               #5298            
#5299: 
    load     i64       length           
    load     i64       qq_print.kb_size 
    jumplt   i64       #5300            
    setcall      /1/1                   
    load     u64       "KB overflow"    
    setarg   u64 /1                     
    callp        /1    &qq_lib.prterror 
    jump               #5298            
#5300: 
    load     i64       length           
    store    i64       qq_print.kb_length
    setcall      /3/1                   
    load     i64       length           
    setarg   u64 /3                     
    load     u64       pdev             
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       qq_print.kb_start
    setarg   u64 /1                     
    callp        /3    &memcpy          
#5298: 
    jump               #5286            
#5290: 
    setcall      /2/1                   
    load     u64       dev              
    setarg   u64 /2                     
    load     u64       "readln@"        
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#5286: 
    load     u64       qq_print.kb_start
    store    u64       qq_print.kb_pos  
    load     u64       qq_print.kb_pos  
    store    u64       qq_print.kb_lastpos
    load     i64       qq_print.kb_length
    store    i64       qq_print.kb_linelength
    retproc                             
endproc

proc qq_print.pch_sread:
    param    u64       fmt
    param    u64       dest
    local    i64       fmtcode
    local    u8       c
    setcall  i64 /1/1                   
    load     u64       fmt              
    setarg   u64 /1                     
    callf    i64 /1    &qq_print.getreadfmtcode
    store    i64       fmtcode          
    load     u64       qq_print.kb_pos  
    store    u64       qq_print.kb_lastpos
    load     i64       qq_print.kb_length
    store    i64       qq_print.kb_lastlength
    load     i64       fmtcode          
    load     i64       73               
    jumpeq   i64 /1    #5303            
    load     i64       82               
    jumpeq   i64 /1    #5304            
    load     i64       78               
    jumpeq   i64 /1    #5305            
    load     i64       83               
    jumpeq   i64 /1    #5306            
    load     i64       72               
    jumpeq   i64 /1    #5307            
    load     i64       66               
    jumpeq   i64 /1    #5308            
    load     i64       65               
    jumpeq   i64 /1    #5309            
    load     i64       76               
    jumpeq   i64 /1    #5310            
    load     i64       67               
    jumpeq   i64 /1    #5311            
    load     i64       90               
    jumpeq   i64 /1    #5312            
    load     i64       69               
    jumpeq   i64 /1    #5313            
    load     i64       68               
    jumpeq   i64       #5314            
    jump               #5315            
#5303: 
    setcall      /1                     
    setcall  u64 /4                     
    load     i64       0                
    setarg   i64 /4                     
    load     u64       dest             
    setarg   u64 /3                     
    load     i64       qq_print.kb_length
    setarg   i64 /2                     
    load     u64       qq_print.kb_pos  
    setarg   u64 /1                     
    callf    u64 /4    &qq_print.readint
    setarg   u64 /1                     
    callp        /1    &qq_print.stepkbpos
    jump               #5302            
#5304: 
    setcall      /1                     
    setcall  u64 /3                     
    load     u64       dest             
    setarg   u64 /3                     
    load     i64       qq_print.kb_length
    setarg   i64 /2                     
    load     u64       qq_print.kb_pos  
    setarg   u64 /1                     
    callf    u64 /3    &qq_print.readreal
    setarg   u64 /1                     
    callp        /1    &qq_print.stepkbpos
    jump               #5302            
#5305: 
    setcall      /1                     
    setcall  u64 /3                     
    load     u64       dest             
    setarg   u64 /3                     
    load     i64       qq_print.kb_length
    setarg   i64 /2                     
    load     u64       qq_print.kb_pos  
    setarg   u64 /1                     
    callf    u64 /3    &qq_print.readname
    setarg   u64 /1                     
    callp        /1    &qq_print.stepkbpos
    jump               #5302            
#5306: 
    setcall      /1                     
    setcall  u64 /3                     
    load     u64       dest             
    setarg   u64 /3                     
    load     i64       qq_print.kb_length
    setarg   i64 /2                     
    load     u64       qq_print.kb_pos  
    setarg   u64 /1                     
    callf    u64 /3    &qq_print.readstring
    setarg   u64 /1                     
    callp        /1    &qq_print.stepkbpos
    jump               #5302            
#5307: 
    setcall      /1                     
    setcall  u64 /3                     
    load     u64       dest             
    setarg   u64 /3                     
    load     i64       qq_print.kb_length
    setarg   i64 /2                     
    load     u64       qq_print.kb_pos  
    setarg   u64 /1                     
    callf    u64 /3    &qq_print.readhex
    setarg   u64 /1                     
    callp        /1    &qq_print.stepkbpos
    jump               #5302            
#5308: 
    setcall      /1                     
    setcall  u64 /3                     
    load     u64       dest             
    setarg   u64 /3                     
    load     i64       qq_print.kb_length
    setarg   i64 /2                     
    load     u64       qq_print.kb_pos  
    setarg   u64 /1                     
    callf    u64 /3    &qq_print.readbin
    setarg   u64 /1                     
    callp        /1    &qq_print.stepkbpos
    jump               #5302            
#5309: 
    setcall      /1                     
    setcall  u64 /3                     
    load     u64       dest             
    setarg   u64 /3                     
    load     i64       qq_print.kb_length
    setarg   i64 /2                     
    load     u64       qq_print.kb_pos  
    setarg   u64 /1                     
    callf    u64 /3    &qq_print.readany
    setarg   u64 /1                     
    callp        /1    &qq_print.stepkbpos
    jump               #5302            
#5310: 
    load     i64       qq_print.kb_length
    load     i64       0                
    jumpne   i64       #5317            
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /2    &qq_strings.var_empty_string
    jump               #5316            
#5317: 
    setcall      /4/1                   
    load     i64       1                
    setarg   i64 /4                     
    load     u64       dest             
    setarg   u64 /3                     
    load     i64       qq_print.kb_length
    setarg   i64 /2                     
    load     u64       qq_print.kb_pos  
    setarg   u64 /1                     
    callp        /4    &qq_strings.var_make_stringn
    load     i64       qq_print.kb_length
    load     u64 /1    &qq_print.kb_pos 
    addpxto  u64 /1                     
    load     i64       0                
    store    i64       qq_print.kb_length
#5316: 
    jump               #5302            
#5311: 
    load     i64       qq_print.kb_length
    load     i64       0                
    jumpne   i64       #5319            
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /2    &qq_strings.var_empty_string
    jump               #5318            
#5319: 
    load     u64       qq_print.kb_pos  
    iload    u8                         
    store    u8        qq_print.termchar
! qq_print.pch_sread.dochar:
    load     i64       1                
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     u8        qq_print.termchar
    widen    i64/u8                     
    load     u64       dest             
    load     i64       8                
    istorex  i64 /1                     
    load     u64 /1    &qq_print.kb_pos 
    incrto   u64 /1                     
    load     u64 /1    &qq_print.kb_length
    decrto   i64 /1                     
#5318: 
    jump               #5302            
#5312: 
    load     i64       1                
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     u8        qq_print.termchar
    widen    i64/u8                     
    load     u64       dest             
    load     i64       8                
    istorex  i64 /1                     
    jump               #5302            
#5313: 
    load     i64       1                
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     i64       qq_print.itemerror
    load     u64       dest             
    load     i64       8                
    istorex  i64 /1                     
    jump               #5302            
#5314: 
    setcall      /1                     
    setcall  u64 /4                     
    load     i64       1                
    setarg   i64 /4                     
    load     u64       dest             
    setarg   u64 /3                     
    load     i64       qq_print.kb_length
    setarg   i64 /2                     
    load     u64       qq_print.kb_pos  
    setarg   u64 /1                     
    callf    u64 /4    &qq_print.readint
    setarg   u64 /1                     
    callp        /1    &qq_print.stepkbpos
    jump               #5302            
#5315: 
    setcall      /1/1                   
    load     u64       "SREAD/FMT?"     
    setarg   u64 /1                     
    callp        /1    &qq_lib.prterror 
#5302: 
    retproc                             
endproc

proc qq_print.pch_sreadln:
    param    u64       dev
    param    u64       dest
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &qq_print.pch_readln
    setcall      /4/1                   
    load     i64       1                
    setarg   i64 /4                     
    load     u64       dest             
    setarg   u64 /3                     
    load     i64       qq_print.kb_length
    setarg   i64 /2                     
    load     u64       qq_print.kb_start
    setarg   u64 /1                     
    callp        /4    &qq_strings.var_make_stringn
    retproc                             
endproc

proc qq_print.readname:
    param    u64       s
    param    i64       length
    param    u64       dest
    local    u64       send
    local    u64       itemstr
    local    i64       itemlength
    rettype  u64
    setcall  u64 /4/1                   
    load     u64       &itemlength      
    setarg   u64 /4                     
    load     u64       &itemstr         
    setarg   u64 /3                     
    load     i64       length           
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /4    &qq_print.readitem
    store    u64       send             
    setcall      /4/1                   
    load     i64       1                
    setarg   i64 /4                     
    load     u64       dest             
    setarg   u64 /3                     
    load     i64       itemlength       
    setarg   i64 /2                     
    load     u64       itemstr          
    setarg   u64 /1                     
    callp        /4    &qq_strings.var_make_stringn
    setcall      /2/1                   
    load     u64       dest             
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     u64       dest             
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &mlib.iconvlcn   
    load     u64       send             
    jumpret  u64       #5322            
#5322: 
    retfn    u64                        
endproc

proc qq_print.readstring:
    param    u64       s
    param    i64       length
    param    u64       dest
    local    u64       send
    local    u64       itemstr
    local    i64       itemlength
    rettype  u64
    setcall  u64 /4/1                   
    load     u64       &itemlength      
    setarg   u64 /4                     
    load     u64       &itemstr         
    setarg   u64 /3                     
    load     i64       length           
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /4    &qq_print.readitem
    store    u64       send             
    setcall      /4/1                   
    load     i64       1                
    setarg   i64 /4                     
    load     u64       dest             
    setarg   u64 /3                     
    load     i64       itemlength       
    setarg   i64 /2                     
    load     u64       itemstr          
    setarg   u64 /1                     
    callp        /4    &qq_strings.var_make_stringn
    load     u64       send             
    jumpret  u64       #5323            
#5323: 
    retfn    u64                        
endproc

proc qq_print.readint:
    param    u64       sold
    param    i64       length
    param    u64       dest
    param    i64       dodec
    local    u64       p
    local    u64       s
    local    u64       send
    local    u64       itemstr
    local    i64       itemlength
    local    i64       numlength
    rettype  u64
    setcall  u64 /4/1                   
    load     u64       &itemlength      
    setarg   u64 /4                     
    load     u64       &s               
    setarg   u64 /3                     
    load     i64       length           
    setarg   i64 /2                     
    load     u64       sold             
    setarg   u64 /1                     
    callf    u64 /4    &qq_print.readitem
    store    u64       send             
    setcall      /4/1                   
    load     i64       dodec            
    setarg   i64 /4                     
    load     u64       dest             
    setarg   u64 /3                     
    load     i64       itemlength       
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callp        /4    &qq_print.strtoint
    load     u64       send             
    jumpret  u64       #5324            
#5324: 
    retfn    u64                        
endproc

proc qq_print.readhex:
    param    u64       sold
    param    i64       length
    param    u64       dest
    local    mem:256       str
    local    u64       p
    local    u64       s
    local    u8       res
    local    i64       aa
    local    i64       a
    local    i64       t
    local    i64       nalloc
    local    u8       c
    rettype  u64
    load     i64       length           
    load     i64       0                
    jumpne   i64       #5327            
    load     i64       1                
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     i64       0                
    load     u64       dest             
    load     i64       8                
    istorex  i64 /1                     
    load     u64       0                
    store    u8        qq_print.termchar
    load     u64       sold             
    jumpret  u64       #5325            
#5327: 
    jump               #5329            
#5328: 
    load     u64 /1    &sold            
    incrto   u64 /1                     
    load     u64 /1    &length          
    decrto   i64 /1                     
#5329: 
    load     i64       length           
    jumpf    i64       #5331            
    load     u64       sold             
    iload    u8                         
    widen    u64/u8                     
    load     u64       32               
    jumpeq   u64       #5328            
    load     u64       sold             
    iload    u8                         
    widen    i64/u8                     
    load     i64       9                
    jumpeq   i64       #5328            
#5331: 
    load     i64       length           
    load     i64       256              
    jumpgt   i64       #5333            
    load     u64       &str             
    store    u64       s                
    load     i64       0                
    store    i64       nalloc           
    jump               #5332            
#5333: 
    load     i64       length           
    load     i64       1                
    add      i64                        
    store    i64       nalloc           
    setcall  u64 /1/1                   
    load     i64       nalloc           
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    store    u64       s                
#5332: 
    load     u64       s                
    store    u64       p                
    jump               #5335            
#5334: 
    setcall  i32 /1/1                   
    load     u64       sold             
    iload    u8                         
    widen    u64/u8                     
    setarg   i32 /1                     
    callf    i32 /1    &toupper         
    store    u8        c                
    load     u64 /1    &sold            
    incrto   u64 /1                     
    load     u64 /1    &length          
    decrto   i64 /1                     
    load     u8        c                
    widen    u64/u8                     
    load     u64       48               
    jumplt   u64       #5338            
    load     u8        c                
    widen    u64/u8                     
    load     u64       57               
    jumpgt   u64       #5338            
    load     u8        c                
    load     u64       p                
    istore   u8                         
    load     u64 /1    &p               
    incrto   u64 /1                     
    jump               #5337            
#5338: 
    load     u8        c                
    widen    u64/u8                     
    load     u64       65               
    jumplt   u64       #5339            
    load     u8        c                
    widen    u64/u8                     
    load     u64       70               
    jumpgt   u64       #5339            
    load     u8        c                
    load     u64       p                
    istore   u8                         
    load     u64 /1    &p               
    incrto   u64 /1                     
    jump               #5337            
#5339: 
    load     u8        c                
    widen    u64/u8                     
    load     u64       95               
    jumpne   u64       #5340            
    jump               #5337            
#5340: 
    load     u8        c                
    store    u8        qq_print.termchar
    jump               #5336            
#5337: 
#5335: 
    load     i64       length           
    jumpt    i64       #5334            
#5336: 
    load     u64       0                
    load     u64       p                
    istore   u8                         
    load     u64       p                
    load     u64       s                
    subp     i64 /1                     
    store    i64       length           
    load     i64       length           
    load     i64       16               
    jumpgt   i64       #5342            
    load     i64       1                
    store    i64       t                
    jump               #5341            
#5342: 
    load     i64       3                
    store    i64       t                
#5341: 
    load     u64       s                
    store    u64       p                
    load     i64       t                
    load     i64       1                
    jumpeq   i64       #5344            
    jump               #5345            
#5344: 
    load     i64       0                
    store    i64       aa               
#5346: 
    load     u64       p                
    iload    u8                         
    store    u8        c                
    load     u64 /1    &p               
    incrto   u64 /1                     
    load     u8        c                
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #5349            
    jump               #5347            
#5349: 
    load     u8        c                
    widen    u64/u8                     
    load     u64       65               
    jumpge   u64       #5351            
    load     i64       aa               
    load     i64       16               
    mul      i64                        
    load     u8        c                
    widen    i64/u8                     
    add      i64                        
    load     i64       48               
    sub      i64                        
    store    i64       aa               
    jump               #5350            
#5351: 
    load     i64       aa               
    load     i64       16               
    mul      i64                        
    load     u8        c                
    widen    u64/u8                     
    load     u64       65               
    sub      i64                        
    add      i64                        
    load     i64       10               
    add      i64                        
    store    i64       aa               
#5350: 
    jump               #5346            
#5347: 
    load     i64       1                
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     i64       aa               
    load     u64       dest             
    load     i64       8                
    istorex  i64 /1                     
    jump               #5343            
#5345: 
    setcall      /1/1                   
    load     u64       "Readhex/long"   
    setarg   u64 /1                     
    callp        /1    &qq_lib.prterror 
#5343: 
    load     i64       nalloc           
    jumpf    i64       #5353            
    setcall      /2/1                   
    load     i64       nalloc           
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_free   
#5353: 
    load     u64       sold             
    jumpret  u64       #5325            
#5325: 
    retfn    u64                        
endproc

proc qq_print.readbin:
    param    u64       sold
    param    i64       length
    param    u64       dest
    local    mem:256       str
    local    u64       p
    local    u64       s
    local    u8       res
    local    i64       aa
    local    i64       a
    local    i64       t
    local    i64       nalloc
    local    u8       c
    rettype  u64
    load     i64       length           
    load     i64       0                
    jumpne   i64       #5356            
    load     i64       1                
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     i64       0                
    load     u64       dest             
    load     i64       8                
    istorex  i64 /1                     
    load     u64       0                
    store    u8        qq_print.termchar
    load     u64       sold             
    jumpret  u64       #5354            
#5356: 
    jump               #5358            
#5357: 
    load     u64 /1    &sold            
    incrto   u64 /1                     
    load     u64 /1    &length          
    decrto   i64 /1                     
#5358: 
    load     i64       length           
    jumpf    i64       #5360            
    load     u64       sold             
    iload    u8                         
    widen    u64/u8                     
    load     u64       32               
    jumpeq   u64       #5357            
    load     u64       sold             
    iload    u8                         
    widen    i64/u8                     
    load     i64       9                
    jumpeq   i64       #5357            
#5360: 
    load     i64       length           
    load     i64       256              
    jumpgt   i64       #5362            
    load     u64       &str             
    store    u64       s                
    load     i64       0                
    store    i64       nalloc           
    jump               #5361            
#5362: 
    load     i64       length           
    load     i64       1                
    add      i64                        
    store    i64       nalloc           
    setcall  u64 /1/1                   
    load     i64       nalloc           
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    store    u64       s                
#5361: 
    load     u64       s                
    store    u64       p                
    jump               #5364            
#5363: 
    setcall  i32 /1/1                   
    load     u64       sold             
    iload    u8                         
    widen    u64/u8                     
    setarg   i32 /1                     
    callf    i32 /1    &toupper         
    store    u8        c                
    load     u64 /1    &sold            
    incrto   u64 /1                     
    load     u64 /1    &length          
    decrto   i64 /1                     
    load     u8        c                
    widen    u64/u8                     
    load     u64       48               
    jumplt   u64       #5367            
    load     u8        c                
    widen    u64/u8                     
    load     u64       49               
    jumpgt   u64       #5367            
    load     u8        c                
    load     u64       p                
    istore   u8                         
    load     u64 /1    &p               
    incrto   u64 /1                     
    jump               #5366            
#5367: 
    load     u8        c                
    widen    u64/u8                     
    load     u64       95               
    jumpne   u64       #5368            
    jump               #5366            
#5368: 
    load     u8        c                
    store    u8        qq_print.termchar
    jump               #5365            
#5366: 
#5364: 
    load     i64       length           
    jumpt    i64       #5363            
#5365: 
    load     u64       0                
    load     u64       p                
    istore   u8                         
    load     u64       p                
    load     u64       s                
    subp     i64 /1                     
    store    i64       length           
    load     i64       length           
    load     i64       64               
    jumpgt   i64       #5370            
    load     i64       1                
    store    i64       t                
    jump               #5369            
#5370: 
    load     i64       3                
    store    i64       t                
#5369: 
    load     u64       s                
    store    u64       p                
    load     i64       t                
    load     i64       1                
    jumpeq   i64       #5372            
    jump               #5373            
#5372: 
    load     i64       0                
    store    i64       aa               
#5374: 
    load     u64       p                
    iload    u8                         
    store    u8        c                
    load     u64 /1    &p               
    incrto   u64 /1                     
    load     u8        c                
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #5377            
    jump               #5375            
#5377: 
    load     i64       aa               
    load     i64       2                
    mul      i64                        
    load     u8        c                
    widen    i64/u8                     
    add      i64                        
    load     i64       48               
    sub      i64                        
    store    i64       aa               
    jump               #5374            
#5375: 
    load     i64       1                
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     i64       aa               
    load     u64       dest             
    load     i64       8                
    istorex  i64 /1                     
    jump               #5371            
#5373: 
    setcall      /1/1                   
    load     u64       "Readbin/long"   
    setarg   u64 /1                     
    callp        /1    &qq_lib.prterror 
#5371: 
    load     i64       nalloc           
    jumpf    i64       #5379            
    setcall      /2/1                   
    load     i64       nalloc           
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_free   
#5379: 
    load     u64       sold             
    jumpret  u64       #5354            
#5354: 
    retfn    u64                        
endproc

proc qq_print.readreal:
    param    u64       sold
    param    i64       length
    param    u64       dest
    local    mem:512       str
    local    r64       x
    local    u64       send
    local    u64       itemstr
    local    i64       itemlength
    local    i64       numlength
    rettype  u64
    setcall  u64 /4/1                   
    load     u64       &itemlength      
    setarg   u64 /4                     
    load     u64       &itemstr         
    setarg   u64 /3                     
    load     i64       length           
    setarg   i64 /2                     
    load     u64       sold             
    setarg   u64 /1                     
    callf    u64 /4    &qq_print.readitem
    store    u64       send             
    setcall      /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     i64       itemlength       
    setarg   i64 /2                     
    load     u64       itemstr          
    setarg   u64 /1                     
    callp        /3    &qq_print.strtoreal
    load     u64       send             
    jumpret  u64       #5380            
#5380: 
    retfn    u64                        
endproc

proc qq_print.getreadfmtcode:
    param    u64       p
    local    u8       c
    rettype  i64
    load     u64       p                
    load     u64       0                
    jumpeq   u64       #5384            
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #5383            
#5384: 
    load     i64       65               
    jumpret  i64       #5381            
#5383: 
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       9                
    jumpeq   i64       #5386            
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "P=%s"           
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &qq_tables.ttname
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       "Readfmt?"       
    setarg   u64 /1                     
    callp        /1    &qq_lib.prterror 
#5386: 
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       0                
    jumpne   i64       #5388            
    load     i64       65               
    jumpret  i64       #5381            
#5388: 
    setcall  i32 /1/1                   
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    iload    u8                         
    widen    u64/u8                     
    setarg   i32 /1                     
    callf    i32 /1    &toupper         
    store    u8        c                
    load     u8        c                
    widen    u64/u8                     
    load     u64       73               
    jumpeq   u64 /1    #5390            
    load     u64       82               
    jumpeq   u64 /1    #5390            
    load     u64       78               
    jumpeq   u64 /1    #5390            
    load     u64       83               
    jumpeq   u64 /1    #5390            
    load     u64       70               
    jumpeq   u64 /1    #5390            
    load     u64       84               
    jumpeq   u64 /1    #5390            
    load     u64       90               
    jumpeq   u64 /1    #5390            
    load     u64       67               
    jumpeq   u64 /1    #5390            
    load     u64       76               
    jumpeq   u64 /1    #5390            
    load     u64       72               
    jumpeq   u64 /1    #5390            
    load     u64       66               
    jumpeq   u64 /1    #5390            
    load     u64       65               
    jumpeq   u64 /1    #5390            
    load     u64       69               
    jumpeq   u64 /1    #5390            
    load     u64       68               
    jumpeq   u64       #5390            
    jump               #5391            
#5390: 
    load     u8        c                
    widen    i64/u8                     
    jumpret  i64       #5381            
    jump               #5389            
#5391: 
#5389: 
    setcall      /1/1                   
    load     u64       "Readfmt2?"      
    setarg   u64 /1                     
    callp        /1    &qq_lib.prterror 
    load     i64       0                
    jumpret  i64       #5381            
#5381: 
    retfn    i64                        
endproc

proc qq_print.stepkbpos:
    param    u64       s
    local    i64       newlen
    load     u64       s                
    load     u64       qq_print.kb_pos  
    subp     i64 /1                     
    store    i64       newlen           
    load     i64       newlen           
    load     i64       0                
    jumpne   i64       #5394            
    jump               #5392            
#5394: 
    load     i64       newlen           
    load     i64       qq_print.kb_length
    jumplt   i64       #5396            
    load     u64       qq_print.kb_pos  
    load     i64       qq_print.kb_length
    addpx    u64 /1                     
    store    u64       qq_print.kb_pos  
    load     i64       0                
    store    i64       qq_print.kb_length
    jump               #5395            
#5396: 
    load     u64       qq_print.kb_pos  
    load     i64       newlen           
    addpx    u64 /1                     
    store    u64       qq_print.kb_pos  
    load     i64       newlen           
    load     u64 /1    &qq_print.kb_length
    subto    i64                        
#5395: 
#5392: 
    retproc                             
endproc

proc qq_print.readany:
    param    u64       sold
    param    i64       length
    param    u64       dest
    local    mem:256       str
    local    u64       p
    local    u64       s
    local    u8       signd
    local    u8       res
    local    i64       aa
    local    i64       digits
    local    i64       expon
    local    i64       other
    local    i64       t
    local    i64       nalloc
    local    u8       c
    local    u64       send
    local    u64       itemstr
    local    i64       itemlength
    local    i64       numlength
    local    i64       av_1
    rettype  u64
    load     i64       0                
    store    i64       qq_print.itemerror
    setcall  u64 /4/1                   
    load     u64       &itemlength      
    setarg   u64 /4                     
    load     u64       &s               
    setarg   u64 /3                     
    load     i64       length           
    setarg   i64 /2                     
    load     u64       sold             
    setarg   u64 /1                     
    callf    u64 /4    &qq_print.readitem
    store    u64       send             
    load     u64       s                
    store    u64       p                
    load     i64       0                
    double                              
    store    i64       other            
    double                              
    store    i64       expon            
    store    i64       digits           
    load     i64       itemlength       
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #5400            
#5398: 
    load     u64 /1    &p               
    loadincr u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    switch   i64 /43/101  #5402         
    opnd     i64       #5403            
#5402: 
    swlabel            #5404            
    swlabel            #5403            
    swlabel            #5404            
    swlabel            #5405            
    swlabel            #5403            
    swlabel            #5404            
    swlabel            #5404            
    swlabel            #5404            
    swlabel            #5404            
    swlabel            #5404            
    swlabel            #5404            
    swlabel            #5404            
    swlabel            #5404            
    swlabel            #5404            
    swlabel            #5404            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5405            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5404            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5403            
    swlabel            #5405            
    endsw                               
#5404: 
    load     i64       1                
    store    i64       digits           
    jump               #5401            
#5405: 
    load     i64       1                
    store    i64       expon            
    jump               #5401            
#5403: 
    load     i64       1                
    store    i64       other            
#5401: 
    to       i64       #5398            
    opnd     i64       av_1             
#5400: 
    load     i64       1                
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     i64       other            
    jumpt    i64       #5408            
    load     i64       itemlength       
    load     i64       0                
    jumpne   i64       #5407            
#5408: 
    load     i64       5395539          
    load     u64       dest             
    load     i64       8                
    istorex  i64 /1                     
    setcall      /4/1                   
    load     i64       1                
    setarg   i64 /4                     
    load     u64       dest             
    setarg   u64 /3                     
    load     i64       itemlength       
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callp        /4    &qq_strings.var_make_stringn
    jump               #5406            
#5407: 
    load     i64       expon            
    jumpf    i64       #5409            
    setcall      /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     i64       itemlength       
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callp        /3    &qq_print.strtoreal
    jump               #5406            
#5409: 
    setcall      /4/1                   
    load     i64       0                
    setarg   i64 /4                     
    load     u64       dest             
    setarg   u64 /3                     
    load     i64       itemlength       
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callp        /4    &qq_print.strtoint
#5406: 
    load     u64       send             
    jumpret  u64       #5397            
#5397: 
    retfn    u64                        
endproc

proc qq_print.readitem:
    param    u64       s
    param    i64       length
    param    u64       itemstr
    param    u64       itemlength
    local    u64       p
    local    u8       quotechar
    local    u8       c
    rettype  u64
    jump               #5412            
#5411: 
    load     u64 /1    &s               
    incrto   u64 /1                     
    load     u64 /1    &length          
    decrto   i64 /1                     
#5412: 
    load     i64       length           
    jumpf    i64       #5414            
    load     u64       s                
    iload    u8                         
    widen    u64/u8                     
    load     u64       32               
    jumpeq   u64       #5411            
    load     u64       s                
    iload    u8                         
    widen    i64/u8                     
    load     i64       9                
    jumpeq   i64       #5411            
#5414: 
    load     u64       s                
    load     u64       itemstr          
    istore   u64                        
    load     i64       length           
    load     i64       0                
    jumpne   i64       #5416            
    load     u64       0                
    store    u8        qq_print.termchar
    load     i64       0                
    load     u64       itemlength       
    istore   i64                        
    load     u64       s                
    jumpret  u64       #5410            
#5416: 
    load     u64       0                
    store    u8        quotechar        
    load     u64       s                
    iload    u8                         
    widen    u64/u8                     
    load     u64       34               
    jumpne   u64       #5418            
    load     u64       34               
    store    u8        quotechar        
    load     u64 /1    &s               
    incrto   u64 /1                     
    load     u64 /1    &length          
    decrto   i64 /1                     
    jump               #5417            
#5418: 
    load     u64       s                
    iload    u8                         
    widen    u64/u8                     
    load     u64       39               
    jumpne   u64       #5419            
    load     u64       39               
    store    u8        quotechar        
    load     u64 /1    &s               
    incrto   u64 /1                     
    load     u64 /1    &length          
    decrto   i64 /1                     
#5419: 
#5417: 
    load     u64       s                
    double                              
    load     u64       itemstr          
    istore   u64                        
    store    u64       p                
    jump               #5421            
#5420: 
    load     u64 /1    &s               
    loadincr u64 /1                     
    iload    u8                         
    store    u8        c                
    load     u64 /1    &length          
    decrto   i64 /1                     
    load     u8        c                
    widen    u64/u8                     
    load     u64       32               
    jumpeq   u64 /1    #5424            
    load     u64       9                
    jumpeq   u64 /1    #5424            
    load     u64       44               
    jumpeq   u64 /1    #5424            
    load     u64       61               
    jumpeq   u64 /1    #5424            
    load     u64       59               
    jumpeq   u64       #5424            
    jump               #5425            
#5424: 
    load     u8        quotechar        
    jumpt    u8        #5428            
    load     u64       p                
    load     u64       s                
    jumpne   u64       #5427            
#5428: 
    jump               #5429            
#5427: 
    load     u8        c                
    store    u8        qq_print.termchar
    jump               #5422            
    jump               #5423            
#5425: 
! qq_print.readitem.normalchar:
#5429: 
    load     u8        c                
    widen    u64/u8                     
    load     u8        quotechar        
    widen    u64/u8                     
    jumpne   u64       #5431            
    load     i64       length           
    jumpf    i64       #5433            
    load     u64       s                
    iload    u8                         
    widen    u64/u8                     
    load     u8        quotechar        
    widen    u64/u8                     
    jumpne   u64       #5433            
    load     u8        c                
    load     u64       p                
    istore   u8                         
    load     u64 /1    &s               
    incrto   u64 /1                     
    load     u64 /1    &p               
    incrto   u64 /1                     
    jump               #5432            
#5433: 
    load     u64       s                
    iload    u8                         
    store    u8        qq_print.termchar
    load     u8        qq_print.termchar
    widen    u64/u8                     
    load     u64       44               
    jumpeq   u64       #5436            
    load     u8        qq_print.termchar
    widen    u64/u8                     
    load     u64       61               
    jumpne   u64       #5435            
#5436: 
    load     u64 /1    &s               
    incrto   u64 /1                     
    load     u64       s                
    iload    u8                         
    store    u8        qq_print.termchar
#5435: 
    jump               #5422            
#5432: 
    jump               #5430            
#5431: 
    load     u8        c                
    load     u64       p                
    istore   u8                         
    load     u64 /1    &p               
    incrto   u64 /1                     
#5430: 
#5423: 
#5421: 
    load     i64       length           
    jumpt    i64       #5420            
#5422: 
    load     i64       length           
    load     i64       0                
    jumpne   i64       #5438            
    load     u64       0                
    store    u8        qq_print.termchar
#5438: 
    load     u64       p                
    load     u64       itemstr          
    iload    u64                        
    subp     i64 /1                     
    load     u64       itemlength       
    istore   i64                        
    load     u64       s                
    jumpret  u64       #5410            
#5410: 
    retfn    u64                        
endproc

proc qq_print.strtoreal:
    param    u64       s
    param    i64       length
    param    u64       dest
    local    mem:512       str
    local    r64       x
    local    i32       numlength
    load     i64       2                
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     i64       length           
    load     i64       512              
    jumpge   i64       #5442            
    load     i64       length           
    load     i64       0                
    jumpne   i64       #5441            
#5442: 
    load     r64       0.0000000000000000e+000
    load     u64       dest             
    load     i64       8                
    istorex  r64 /1                     
    jump               #5439            
#5441: 
    setcall      /3/1                   
    load     i64       length           
    setarg   u64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     u64       0                
    load     u64       &str             
    load     i64       length           
    istorex  u8  /1                     
    load     i64       0                
    store    i64       qq_print.itemerror
    setcall  i32 /4/1                   
    load     u64       &numlength       
    setarg   u64 /4                     
    load     u64       &x               
    setarg   u64 /3                     
    load     u64       "%lf%n"          
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    i32 /4/2  &sscanf          
    widen    i64/i32                    
    load     i64       0                
    jumpeq   i64       #5445            
    load     i32       numlength        
    widen    i64/i32                    
    load     i64       length           
    jumpeq   i64       #5444            
#5445: 
    load     i32       numlength        
    widen    i64/i32                    
    load     i64       length           
    jumpne   i64       #5447            
    load     r64       0.0000000000000000e+000
    store    r64       x                
#5447: 
    load     i64       1                
    store    i64       qq_print.itemerror
#5444: 
    load     r64       x                
    load     u64       dest             
    load     i64       8                
    istorex  r64 /1                     
#5439: 
    retproc                             
endproc

proc qq_print.strtoint:
    param    u64       s
    param    i64       length
    param    u64       dest
    param    i64       dodec
    local    mem:256       str
    local    u64       p
    local    u64       q
    local    u8       signd
    local    i64       aa
    local    i64       a
    local    i64       res
    local    i64       cat
    local    i64       t
    local    i64       nalloc
    local    u8       c
    load     i64       0                
    store    i64       qq_print.itemerror
    load     i64       length           
    load     i64       0                
    jumpne   i64       #5450            
    load     i64       1                
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     i64       0                
    load     u64       dest             
    load     i64       8                
    istorex  i64 /1                     
    jump               #5448            
#5450: 
    load     i64       0                
    store    u8        signd            
    load     i64       length           
    jumpf    i64       #5452            
    load     u64       s                
    iload    u8                         
    widen    u64/u8                     
    load     u64       45               
    jumpne   u64       #5452            
    load     i64       1                
    store    u8        signd            
    load     u64 /1    &s               
    incrto   u64 /1                     
    load     u64 /1    &length          
    decrto   i64 /1                     
    jump               #5451            
#5452: 
    load     i64       length           
    jumpf    i64       #5453            
    load     u64       s                
    iload    u8                         
    widen    u64/u8                     
    load     u64       43               
    jumpne   u64       #5453            
    load     u64 /1    &s               
    incrto   u64 /1                     
    load     u64 /1    &length          
    decrto   i64 /1                     
#5453: 
#5451: 
    jump               #5455            
#5454: 
    load     u64 /1    &s               
    incrto   u64 /1                     
    load     u64 /1    &length          
    decrto   i64 /1                     
#5455: 
    load     u64       s                
    iload    u8                         
    widen    u64/u8                     
    load     u64       48               
    jumpne   u64       #5457            
    load     i64       length           
    load     i64       1                
    jumpgt   i64       #5454            
#5457: 
    load     u64       s                
    double                              
    store    u64       q                
    store    u64       p                
    jump               #5459            
#5458: 
    load     u64 /1    &q               
    loadincr u64 /1                     
    iload    u8                         
    store    u8        c                
    load     u64 /1    &length          
    decrto   i64 /1                     
    load     u8        c                
    widen    u64/u8                     
    load     u64       48               
    jumplt   u64       #5462            
    load     u8        c                
    widen    u64/u8                     
    load     u64       57               
    jumpgt   u64       #5462            
    load     u8        c                
    load     u64       p                
    istore   u8                         
    load     u64 /1    &p               
    incrto   u64 /1                     
    jump               #5461            
#5462: 
    load     u8        c                
    widen    u64/u8                     
    load     u64       95               
    jumpne   u64       #5464            
    jump               #5463            
#5464: 
    load     i64       1                
    store    i64       qq_print.itemerror
    jump               #5460            
#5463: 
#5461: 
#5459: 
    load     i64       length           
    jumpt    i64       #5458            
#5460: 
    load     u64       0                
    load     u64       p                
    istore   u8                         
    load     u64       p                
    load     u64       s                
    subp     i64 /1                     
    store    i64       length           
    load     i64       length           
    load     i64       18               
    jumpgt   i64       #5466            
    load     i64       65               
    store    i64       cat              
    jump               #5465            
#5466: 
    load     i64       length           
    load     i64       19               
    jumpne   i64       #5467            
    setcall  i64 /2/1                   
    load     u64       "9223372036854775808"
    setarg   u64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    i64 /2    &mlib.cmpstring  
    load     i64       -1               
    jumpeq   i64 /1    #5469            
    load     i64       0                
    jumpeq   i64       #5470            
    jump               #5471            
#5469: 
    load     i64       65               
    store    i64       cat              
    jump               #5468            
#5470: 
    load     i64       66               
    store    i64       cat              
    jump               #5468            
#5471: 
    load     i64       67               
    store    i64       cat              
#5468: 
    jump               #5465            
#5467: 
    load     i64       length           
    load     i64       20               
    jumpne   i64       #5472            
    setcall  i64 /2/1                   
    load     u64       "18446744073709551615"
    setarg   u64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    i64 /2    &mlib.cmpstring  
    load     i64       0                
    jumpgt   i64       #5474            
    load     i64       67               
    store    i64       cat              
    jump               #5473            
#5474: 
    load     i64       68               
    store    i64       cat              
#5473: 
    jump               #5465            
#5472: 
    load     i64       68               
    store    i64       cat              
#5465: 
    load     i64       dodec            
    jumpf    i64       #5476            
    load     i64       68               
    store    i64       cat              
#5476: 
    load     u8        signd            
    jumpf    u8        #5478            
    load     i64       cat              
    load     i64       66               
    jumpeq   i64 /1    #5480            
    load     i64       67               
    jumpeq   i64       #5481            
    jump               #5482            
#5480: 
    load     i64       65               
    store    i64       cat              
    jump               #5479            
#5481: 
    load     i64       68               
    store    i64       cat              
    jump               #5479            
#5482: 
#5479: 
#5478: 
    load     i64       cat              
    load     i64       65               
    jumpeq   i64       #5484            
    jump               #5485            
#5484: 
    load     i64       1                
    store    i64       t                
    jump               #5483            
#5485: 
    load     i64       3                
    store    i64       t                
#5483: 
    load     u64       s                
    store    u64       p                
    load     i64       t                
    load     i64       3                
    jumpeq   i64       #5487            
    load     i64       0                
    store    i64       aa               
#5488: 
    load     u64       p                
    iload    u8                         
    store    u8        c                
    load     u64 /1    &p               
    incrto   u64 /1                     
    load     u8        c                
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #5491            
    jump               #5489            
#5491: 
    load     i64       aa               
    load     i64       10               
    mul      i64                        
    load     u8        c                
    widen    u64/u8                     
    load     u64       48               
    sub      i64                        
    add      i64                        
    store    i64       aa               
    jump               #5488            
#5489: 
    load     u8        signd            
    jumpf    u8        #5493            
    load     i64       aa               
    neg      i64                        
    store    i64       aa               
#5493: 
    load     i64       t                
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     i64       aa               
    load     u64       dest             
    load     i64       8                
    istorex  i64 /1                     
    jump               #5486            
#5487: 
    setcall      /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     i64       length           
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callp        /3    &qq_decimal.var_make_dec_str
#5486: 
#5448: 
    retproc                             
endproc

proc qq_print.printnextfmtchars:
    param    i64       lastx
    local    u8       c
    local    u64       pstart
    local    i64       n
    load     u64       qq_print.mfmtcurr
    store    u64       pstart           
    load     i64       0                
    store    i64       n                
#5495: 
    load     u64       qq_print.mfmtcurr
    iload    u8                         
    store    u8        c                
    load     u8        c                
    widen    u64/u8                     
    load     u64       35               
    jumpeq   u64 /1    #5498            
    load     u64       0                
    jumpeq   u64 /1    #5499            
    load     u64       126              
    jumpeq   u64       #5500            
    jump               #5501            
#5498: 
    load     i64       lastx            
    jumpf    i64       #5503            
    jump               #5504            
#5503: 
    load     u64 /1    &qq_print.mfmtcurr
    incrto   u64 /1                     
    load     i64       n                
    jumpf    i64       #5506            
    setcall      /2/1                   
    load     i64       n                
    setarg   i64 /2                     
    load     u64       pstart           
    setarg   u64 /1                     
    callp        /2    &qq_print.printstr_n
#5506: 
    jump               #5494            
    jump               #5497            
#5499: 
    load     i64       n                
    jumpf    i64       #5508            
    setcall      /2/1                   
    load     i64       n                
    setarg   i64 /2                     
    load     u64       pstart           
    setarg   u64 /1                     
    callp        /2    &qq_print.printstr_n
    jump               #5507            
#5508: 
    load     i64       lastx            
    jumpt    i64       #5509            
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       "|"              
    setarg   u64 /1                     
    callp        /2    &qq_print.printstr_n
#5509: 
#5507: 
    jump               #5494            
    jump               #5497            
#5500: 
    load     i64       n                
    jumpf    i64       #5511            
    setcall      /2/1                   
    load     i64       n                
    setarg   i64 /2                     
    load     u64       pstart           
    setarg   u64 /1                     
    callp        /2    &qq_print.printstr_n
    load     i64       0                
    store    i64       n                
#5511: 
    load     u64 /1    &qq_print.mfmtcurr
    incrto   u64 /1                     
    load     u64       qq_print.mfmtcurr
    iload    u8                         
    store    u8        c                
    load     u8        c                
    jumpf    u8        #5513            
    load     u64 /1    &qq_print.mfmtcurr
    incrto   u64 /1                     
    setcall      /2/1                   
    load     i64       1                
    setarg   i64 /2                     
    load     u64       &c               
    setarg   u64 /1                     
    callp        /2    &qq_print.printstr_n
#5513: 
    load     u64       qq_print.mfmtcurr
    store    u64       pstart           
    jump               #5497            
#5501: 
! qq_print.printnextfmtchars.skip:
#5504: 
    load     u64 /1    &n               
    incrto   i64 /1                     
    load     u64 /1    &qq_print.mfmtcurr
    incrto   u64 /1                     
#5497: 
    jump               #5495            
#5494: 
    retproc                             
endproc

proc qq_print.pch_setformat:
    param    u64       p
    local    i64       n
    local    u64       s
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       9                
    jumpeq   i64       #5516            
    setcall      /1/1                   
    load     u64       "(str)"          
    setarg   u64 /1                     
    callp        /1    &qq_lib.prterror 
#5516: 
    load     u64       qq_print.mfmtstr 
    jumpf    u64       #5518            
    setcall      /1/1                   
    load     u64       "Setfmt?"        
    setarg   u64 /1                     
    callp        /1    &qq_lib.prterror 
#5518: 
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       n                
    setcall  u64 /1/1                   
    load     i64       n                
    load     i64       1                
    add      i64                        
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    store    u64       qq_print.mfmtstr 
    load     i64       n                
    jumpf    i64       #5520            
    setcall      /3/1                   
    load     i64       n                
    setarg   u64 /3                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       qq_print.mfmtstr 
    setarg   u64 /1                     
    callp        /3    &memcpy          
#5520: 
    load     u64       qq_print.mfmtstr 
    load     i64       n                
    addpx    u64 /1                     
    store    u64       s                
    load     u64       0                
    load     u64       s                
    istore   u8                         
    load     u64       qq_print.mfmtstr 
    store    u64       qq_print.mfmtcurr
    retproc                             
endproc

proc qq_print.pc_getfmt:
    param    u64       p
    param    u64       fmt
    rettype  u64
    startmx                             
    load     u64       p                
    load     u64       0                
    jumpeq   u64       #5524            
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #5523            
#5524: 
    load     u64       &qq_print.defaultfmt
    resetmx  u64                        
    jump               #5522            
#5523: 
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       9                
    jumpeq   i64       #5526            
    setcall      /1/1                   
    load     u64       "pc_getfmt/not str?"
    setarg   u64 /1                     
    callp        /1    &qq_lib.prterror 
#5526: 
    startmx                             
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       0                
    jumpne   u64       #5528            
    load     u64       &qq_print.defaultfmt
    resetmx  u64                        
    jump               #5527            
#5528: 
    setcall      /3/1                   
    load     u64       fmt              
    setarg   u64 /3                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &msysc.strtofmt  
    load     u64       fmt              
    endmx    u64                        
#5527: 
    endmx    u64                        
#5522: 
    jumpret  u64       #5521            
#5521: 
    retfn    u64                        
endproc

proc qq_print.addstring:
    param    u64       p
    param    u64       t
    param    i64       n
    local    i64       oldlen
    local    i64       newlen
    local    i64       oldbytes
    local    i64       newbytes
    local    u64       newptr
    load     i64       n                
    load     i64       0                
    jumpeq   i64       #5532            
    load     u64       t                
    iload    u8                         
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #5531            
#5532: 
    jump               #5529            
#5531: 
    load     i64       n                
    load     i64       0                
    jumpge   i64       #5534            
    setcall  i64 /1/1                   
    load     u64       t                
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    store    i64       n                
#5534: 
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       oldlen           
    load     u64       p                
    load     i64       0                
    iloadx   u32 /1                     
    widen    i64/u32                    
    load     i64       0                
    jumpne   i64       #5536            
    load     i64       oldlen           
    load     i64       0                
    jumpne   i64       #5538            
    setcall      /3/1                   
    load     i64       n                
    setarg   u64 /3                     
    load     u64       t                
    setarg   u64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     i64       n                
    load     u64       p                
    load     i64       16               
    istorex  i64 /1                     
    jump               #5537            
#5538: 
    setcall      /3/1                   
    load     i64       n                
    setarg   u64 /3                     
    load     u64       t                
    setarg   u64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       oldlen           
    addpx    u64 /1                     
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     i64       oldlen           
    load     i64       n                
    add      i64                        
    load     u64       p                
    load     i64       16               
    istorex  i64 /1                     
#5537: 
    jump               #5529            
#5536: 
    load     i64       oldlen           
    load     i64       0                
    jumpne   i64       #5540            
    setcall  u64 /1/1                   
    load     i64       n                
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    load     u64       p                
    load     i64       8                
    istorex  u64 /1                     
    load     i64       n                
    load     u64       p                
    load     i64       16               
    istorex  i64 /1                     
    load     i64       mlib.allocbytes  
    load     u64       p                
    load     i64       24               
    istorex  i64 /1                     
    setcall      /3/1                   
    load     i64       n                
    setarg   u64 /3                     
    load     u64       t                
    setarg   u64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &memcpy          
    jump               #5539            
#5540: 
    load     i64       oldlen           
    load     i64       n                
    add      i64                        
    store    i64       newlen           
    load     u64       p                
    load     i64       24               
    iloadx   i64 /1                     
    store    i64       oldbytes         
    load     i64       oldlen           
    load     i64       n                
    add      i64                        
    store    i64       newbytes         
    load     i64       newbytes         
    load     i64       oldbytes         
    jumpgt   i64       #5542            
    setcall      /3/1                   
    load     i64       n                
    setarg   u64 /3                     
    load     u64       t                
    setarg   u64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       oldlen           
    addpx    u64 /1                     
    setarg   u64 /1                     
    callp        /3    &memcpy          
    jump               #5541            
#5542: 
    setcall  u64 /1/1                   
    load     i64       newbytes         
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    store    u64       newptr           
    setcall      /3/1                   
    load     i64       oldlen           
    setarg   u64 /3                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       newptr           
    setarg   u64 /1                     
    callp        /3    &memcpy          
    setcall      /3/1                   
    load     i64       n                
    setarg   u64 /3                     
    load     u64       t                
    setarg   u64 /2                     
    load     u64       newptr           
    load     i64       oldlen           
    addpx    u64 /1                     
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     i64       mlib.allocbytes  
    load     u64       p                
    load     i64       24               
    istorex  i64 /1                     
    setcall      /2/1                   
    load     i64       oldbytes         
    setarg   i64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_free   
    load     u64       newptr           
    load     u64       p                
    load     i64       8                
    istorex  u64 /1                     
#5541: 
    load     i64       newlen           
    load     u64       p                
    load     i64       16               
    istorex  i64 /1                     
#5539: 
#5529: 
    retproc                             
endproc

proc qq_print.domultichar:
    param    u64       p
    param    i64       n
    param    u64       dest
    param    u64       fmt
    local    mem:20       str
    local    u64       q
    local    i64       i
    local    i64       nchars
    local    i64       av_1
    load     u64       &str             
    store    u64       q                
    load     i64       n                
    store    i64       nchars           
    load     i64       n                
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #5546            
#5544: 
    load     u64       p                
    iload    u8                         
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #5548            
    jump               #5546            
#5548: 
    load     u64       p                
    iload    u8                         
    load     u64       q                
    istore   u8                         
    load     u64 /1    &q               
    incrto   u64 /1                     
    load     u64 /1    &p               
    incrto   u64 /1                     
    to       i64       #5544            
    opnd     i64       av_1             
#5546: 
    load     u64       0                
    load     u64       q                
    istore   u8                         
    setcall  i64 /4/1                   
    load     u64       fmt              
    setarg   u64 /4                     
    load     i64       nchars           
    setarg   i64 /3                     
    load     u64       dest             
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    i64 /4    &msysc.expandstr 
    unload   i64                        
    retproc                             
endproc

proc qq_print.printstr_n:
    param    u64       s
    param    i64       n
    local    u64       p
    local    i64       x
    load     i64       n                
    load     i64       -1               
    jumpne   i64       #5551            
    setcall  i64 /1/1                   
    load     u64       s                
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    store    i64       n                
#5551: 
    load     i64       n                
    load     i64       0                
    jumpne   i64       #5553            
    jump               #5549            
#5553: 
    load     i64       qq_print.moutdev 
    load     i64       0                
    jumpeq   i64 /1    #5555            
    load     i64       1                
    jumpeq   i64 /1    #5556            
    load     i64       2                
    jumpeq   i64 /1    #5557            
    load     i64       4                
    jumpeq   i64 /1    #5558            
    load     i64       3                
    jumpeq   i64       #5559            
    jump               #5560            
#5555: 
    setcall      /3/1                   
    load     u64       0                
    setarg   u64 /3                     
    load     i64       n                
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callp        /3    &msysc.printstrn_app
    jump               #5554            
#5556: 
    setcall      /3/1                   
    load     u64       qq_print.moutchan
    setarg   u64 /3                     
    load     i64       n                
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callp        /3    &msysc.printstrn_app
    jump               #5554            
#5557: 
    setcall      /3/1                   
    load     i64       n                
    setarg   i64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       &qq_print.moutvar
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
    jump               #5554            
#5558: 
    load     u64       &qq_print.moutvar
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       9                
    jumpeq   i64       #5562            
    setcall      /1/1                   
    load     u64       "prtstrn1"       
    setarg   u64 /1                     
    callp        /1    &qq_lib.prterror 
#5562: 
    setcall      /3/1                   
    load     i64       n                
    setarg   i64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       &qq_print.moutvar
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
    jump               #5554            
#5559: 
    jump               #5554            
#5560: 
#5554: 
#5549: 
    retproc                             
endproc

proc qq_print.pch_strtoval:
    param    u64       p
    param    u64       fmt
    param    u64       dest
    local    i64       fmtcode
    local    i64       length
    local    u8       oldmutable
    local    u64       q
    local    mem:1024       str
    local    u64       s
    load     u64       &str             
    store    u64       s                
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       q                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       1024             
    jumpge   i64       #5565            
    setcall      /3/1                   
    load     u64       q                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /3                     
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     u64       0                
    load     u64       &str             
    load     u64       q                
    load     i64       16               
    iloadx   i64 /1                     
    istorex  u8  /1                     
    jump               #5564            
#5565: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "STRTOVAL/string too long"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#5564: 
    setcall  i64 /1/1                   
    load     u64       fmt              
    setarg   u64 /1                     
    callf    i64 /1    &qq_print.getreadfmtcode
    store    i64       fmtcode          
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       9                
    jumpeq   i64       #5567            
    setcall      /1/1                   
    load     u64       "strval"         
    setarg   u64 /1                     
    callp        /1    &qq_lib.prterror 
#5567: 
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       length           
    load     i64       fmtcode          
    load     i64       73               
    jumpeq   i64 /1    #5569            
    load     i64       68               
    jumpeq   i64 /1    #5570            
    load     i64       82               
    jumpeq   i64 /1    #5571            
    load     i64       78               
    jumpeq   i64 /1    #5572            
    load     i64       83               
    jumpeq   i64 /1    #5573            
    load     i64       72               
    jumpeq   i64 /1    #5574            
    load     i64       66               
    jumpeq   i64 /1    #5575            
    load     i64       65               
    jumpeq   i64       #5576            
    jump               #5577            
#5569: 
    setcall  u64 /4/1                   
    load     i64       0                
    setarg   i64 /4                     
    load     u64       dest             
    setarg   u64 /3                     
    load     i64       length           
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /4    &qq_print.readint
    unload   u64                        
    jump               #5568            
#5570: 
    setcall  u64 /4/1                   
    load     i64       1                
    setarg   i64 /4                     
    load     u64       dest             
    setarg   u64 /3                     
    load     i64       length           
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /4    &qq_print.readint
    unload   u64                        
    jump               #5568            
#5571: 
    setcall  u64 /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     i64       length           
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /3    &qq_print.readreal
    unload   u64                        
    jump               #5568            
#5572: 
    setcall  u64 /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     i64       length           
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /3    &qq_print.readname
    unload   u64                        
    jump               #5568            
#5573: 
    setcall  u64 /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     i64       length           
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /3    &qq_print.readstring
    unload   u64                        
    jump               #5568            
#5574: 
    setcall  u64 /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     i64       length           
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /3    &qq_print.readhex
    unload   u64                        
    jump               #5568            
#5575: 
    setcall  u64 /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     i64       length           
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /3    &qq_print.readbin
    unload   u64                        
    jump               #5568            
#5576: 
    setcall  u64 /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     i64       length           
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /3    &qq_print.readany
    unload   u64                        
    jump               #5568            
#5577: 
    setcall      /1/1                   
    load     u64       "strval:fmt?"    
    setarg   u64 /1                     
    callp        /1    &qq_lib.prterror 
#5568: 
    retproc                             
endproc

proc qq_print.tostr_int:
    param    u64       p
    param    u64       fmt
    param    u64       dest
    local    mem:1024       str
    load     u64       fmt              
    load     i64       12               
    iloadx   u8  /1                     
    widen    u64/u8                     
    load     u64       77               
    jumpeq   u64 /1    #5580            
    load     u64       68               
    jumpeq   u64 /1    #5580            
    load     u64       67               
    jumpeq   u64       #5581            
    jump               #5582            
#5580: 
    setcall      /4/1                   
    load     u64       fmt              
    setarg   u64 /4                     
    load     u64       &str             
    setarg   u64 /3                     
    load     i64       8                
    setarg   i64 /2                     
    load     u64       p                
    load     i64       8                
    addpx    u64 /1                     
    setarg   u64 /1                     
    callp        /4    &qq_print.domultichar
    jump               #5579            
#5581: 
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       &str             
    load     i64       0                
    istorex  u8  /1                     
    load     u64       0                
    load     u64       &str             
    load     i64       1                
    istorex  u8  /1                     
    jump               #5579            
#5582: 
    setcall  i64 /3/1                   
    load     u64       fmt              
    setarg   u64 /3                     
    load     u64       &str             
    setarg   u64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callf    i64 /3    &msysc.i64tostrfmt
    unload   i64                        
#5579: 
    load     u64       fmt              
    load     i64       15               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    loadbit  i64                        
    jumpf    u64       #5584            
    setcall      /3/1                   
    load     i64       2                
    setarg   i64 /3                     
    load     u64       "I:"             
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
#5584: 
    setcall      /3                     
    setcall  i64 /1                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    setarg   i64 /3                     
    load     u64       &str             
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
    retproc                             
endproc

proc qq_print.tostr_real:
    param    u64       p
    param    u64       fmt
    param    u64       dest
    local    mem:1024       str
    local    mem:1024       str2
    local    mem:10       cfmt
    local    i64       n
    load     u64       fmt              
    load     i64       1                
    iloadx   i8  /1                     
    jumpf    i8        #5587            
    load     u64       46               
    load     u64       &cfmt            
    load     i64       1                
    istorex  u8  /1/-1                  
    load     u64       42               
    load     u64       &cfmt            
    load     i64       2                
    istorex  u8  /1/-1                  
    load     u64       fmt              
    load     i64       5                
    iloadx   u8  /1                     
    load     u64       &cfmt            
    load     i64       3                
    istorex  u8  /1/-1                  
    load     u64       0                
    load     u64       &cfmt            
    load     i64       4                
    istorex  u8  /1/-1                  
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /2/1                   
    load     u64       "v"              
    setarg   u64 /2                     
    load     u64       fmt              
    load     i64       1                
    iloadx   i8  /1                     
    widen    i64/i8                     
    setarg   i64 /1                     
    callp        /2    &msysc.m$print_i64
    setcall      /2/1                   
    load     u64       &cfmt            
    setarg   u64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   r64 /1                     
    setarg   r64 /1                     
    callp        /2    &msysc.m$print_r64
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #5586            
#5587: 
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /2/1                   
    load     u64       "fmt"            
    setarg   u64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   r64 /1                     
    setarg   r64 /1                     
    callp        /2    &msysc.m$print_r64
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
#5586: 
    setcall  i64 /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    store    i64       n                
    load     i64       n                
    load     u64       fmt              
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    jumpge   i64       #5589            
    setcall  i64 /4/1                   
    load     u64       fmt              
    setarg   u64 /4                     
    load     i64       n                
    setarg   i64 /3                     
    load     u64       &str2            
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    i64 /4    &msysc.expandstr 
    unload   i64                        
    setcall  u64 /2/1                   
    load     u64       &str2            
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
#5589: 
    setcall      /3                     
    setcall  i64 /1                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    setarg   i64 /3                     
    load     u64       &str             
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
    retproc                             
endproc

proc qq_print.tostr_str:
    param    u64       p
    param    u64       fmt
    param    u64       dest
    local    i64       oldlen
    local    i64       newlen
    local    u64       s
    local    mem:100       str
    local    u64       q
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       q                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       oldlen           
    load     i64       oldlen           
    store    i64       newlen           
    load     u64       fmt              
    load     i64       3                
    iloadx   u8  /1                     
    jumpt    u8        #5593            
    load     u64       fmt              
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       newlen           
    jumple   i64       #5592            
#5593: 
    load     u64       fmt              
    load     i64       3                
    iloadx   u8  /1                     
    jumpf    u8        #5595            
    load     i64       2                
    load     u64 /1    &newlen          
    addto    i64                        
#5595: 
    load     u64       fmt              
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       newlen           
    jumple   i64       #5597            
    load     u64       fmt              
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       newlen           
#5597: 
    setcall  u64 /1/1                   
    load     i64       newlen           
    load     i64       1                
    add      i64                        
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    store    u64       s                
    setcall  i64 /4/1                   
    load     u64       fmt              
    setarg   u64 /4                     
    load     i64       oldlen           
    setarg   i64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /4    &msysc.strtostrfmt
    unload   i64                        
    setcall      /3/1                   
    load     i64       newlen           
    setarg   i64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
    setcall      /2/1                   
    load     i64       newlen           
    load     i64       1                
    add      i64                        
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_free   
    jump               #5591            
#5592: 
    setcall      /3/1                   
    load     i64       oldlen           
    setarg   i64 /3                     
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
#5591: 
    retproc                             
endproc

proc qq_print.pch_tostr:
    param    u64       a
    param    u64       b
    param    u64       result
    local    mem:16       fmt
    local    u64       ifmt
    local    u64       p
    setcall  u64 /2/1                   
    load     u64       &fmt             
    setarg   u64 /2                     
    load     u64       b                
    setarg   u64 /1                     
    callf    u64 /2    &qq_print.pc_getfmt
    store    u64       ifmt             
    setcall  u64 /1/1                   
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_strings.obj_new_string
    store    u64       p                
    load     i64       0                
    store    i64       qq_print.listdepth
    setcall      /3/1                   
    load     u64       p                
    setarg   u64 /3                     
    load     u64       ifmt             
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /3    &qq_print.tostr  
    load     i64       265              
    load     u64       result           
    load     i64       0                
    istorex  u32 /1                     
    load     u64       p                
    load     u64       result           
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_print.tostr_range:
    param    u64       p
    param    u64       fmt
    param    u64       dest
    local    mem:1024       str
    setcall  i64 /3/1                   
    load     u64       fmt              
    setarg   u64 /3                     
    load     u64       &str             
    setarg   u64 /2                     
    load     u64       p                
    load     i64       0                
    iloadx   i64 /1                     
    load     i64       16               
    load     i64       63               
    loadbf   i64                        
    setarg   i64 /1                     
    callf    i64 /3    &msysc.i64tostrfmt
    unload   i64                        
    setcall  u64 /2/1                   
    load     u64       ".."             
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /2    &strcat          
    unload   u64                        
    setcall      /3/1                   
    load     i64       -1               
    setarg   i64 /3                     
    load     u64       &str             
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
    setcall  i64 /3/1                   
    load     u64       fmt              
    setarg   u64 /3                     
    load     u64       &str             
    setarg   u64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callf    i64 /3    &msysc.i64tostrfmt
    unload   i64                        
    setcall      /3/1                   
    load     i64       -1               
    setarg   i64 /3                     
    load     u64       &str             
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
    retproc                             
endproc

proc qq_print.tostr_array:
    param    u64       p
    param    u64       fmt
    param    u64       dest
    local    mem:1024       str
    local    u64       q
    local    i64       i
    local    i64       m
    local    i64       elemtype
    local    i64       a
    local    i64       b
    local    i64       lower
    local    i64       length
    local    mem:16       v
    local    u64       pa
    local    u64       ptr
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       m                
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pa               
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       11               
    jumpne   i64       #5602            
    load     u64       pa               
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       length           
    load     u64       pa               
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    loadbit  i64                        
    store    i64       lower            
    load     u64       pa               
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    store    i64       elemtype         
    jump               #5601            
#5602: 
    load     u64       &qq_tables.ttlength
    load     u64       pa               
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i64 /8                     
    store    i64       length           
    load     u64       &qq_tables.ttlower
    load     u64       pa               
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i64 /8                     
    store    i64       lower            
    load     u64       &qq_tables.tttarget
    load     u64       pa               
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i16 /2                     
    widen    i64/i16                    
    store    i64       elemtype         
#5601: 
    load     i64       lower            
    store    i64       a                
    load     i64       length           
    load     i64       lower            
    add      i64                        
    load     i64       1                
    sub      i64                        
    store    i64       b                
    load     u64       pa               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       fmt              
    load     i64       15               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    loadbit  i64                        
    jumpf    u64       #5604            
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "#[#:#]A"        
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       &qq_tables.ttname
    load     i64       m                
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     i64       lower            
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       &qq_tables.ttname
    load     i64       elemtype         
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /3/1                   
    load     i64       -1               
    setarg   i64 /3                     
    load     u64       &str             
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
#5604: 
    setcall      /3/1                   
    load     i64       -1               
    setarg   i64 /3                     
    load     u64       "("              
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
    load     i64       a                
    store    i64       i                
    load     i64       i                
    load     i64       b                
    jumpgt   i64       #5607            
#5605: 
    setcall      /4/1                   
    load     u64       0                
    setarg   u64 /4                     
    load     u64       &v               
    setarg   u64 /3                     
    load     i64       elemtype         
    setarg   i64 /2                     
    load     u64       q                
    setarg   u64 /1                     
    callp        /4    &qq_packed.var_loadpacked
    load     u64       &qq_tables.ttsize
    load     i64       elemtype         
    iloadx   i64 /8                     
    load     u64 /1    &q               
    addpxto  u64 /1                     
    setcall      /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     u64       fmt              
    setarg   u64 /2                     
    load     u64       &v               
    setarg   u64 /1                     
    callp        /3    &qq_print.tostr  
    load     i64       i                
    load     i64       b                
    jumpge   i64       #5609            
    setcall      /3/1                   
    load     i64       1                
    setarg   i64 /3                     
    load     u64       ","              
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
#5609: 
    forup    i64 /1    #5605            
    opnd     i64       i                
    opnd     i64       b                
#5607: 
    setcall      /3/1                   
    load     i64       1                
    setarg   i64 /3                     
    load     u64       ")"              
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
    retproc                             
endproc

proc qq_print.tostr_bits:
    param    u64       p
    param    u64       fmt
    param    u64       dest
    local    mem:1024       str
    local    u64       q
    local    i64       i
    local    i64       m
    local    i64       elemtype
    local    i64       a
    local    i64       b
    local    i64       bitwidthx
    local    i64       offset
    local    mem:16       v
    local    u64       pa
    local    u64       ptr
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       m                
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pa               
    load     u64       pa               
    load     i64       6                
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       a                
    load     u64       pa               
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    store    i64       elemtype         
    load     u64       pa               
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       a                
    add      i64                        
    load     i64       1                
    sub      i64                        
    store    i64       b                
    load     u64       &qq_tables.ttbitwidth
    load     i64       elemtype         
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       bitwidthx        
    load     u64       pa               
    load     i64       7                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       bitwidthx        
    mul      i64                        
    store    i64       offset           
    load     u64       pa               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       fmt              
    load     i64       15               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    loadbit  i64                        
    jumpf    u64       #5612            
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "#[#:#]A"        
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       &qq_tables.ttname
    load     i64       m                
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       pa               
    load     i64       6                
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       &qq_tables.ttname
    load     i64       elemtype         
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /3/1                   
    load     i64       -1               
    setarg   i64 /3                     
    load     u64       &str             
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
#5612: 
    setcall      /3/1                   
    load     i64       -1               
    setarg   i64 /3                     
    load     u64       "("              
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
    load     i64       a                
    store    i64       i                
    load     i64       i                
    load     i64       b                
    jumpgt   i64       #5615            
#5613: 
    setcall      /5/1                   
    load     u64       &v               
    setarg   u64 /5                     
    load     i64       0                
    setarg   i64 /4                     
    load     i64       elemtype         
    setarg   i64 /3                     
    load     i64       offset           
    setarg   i64 /2                     
    load     u64       q                
    setarg   u64 /1                     
    callp        /5    &qq_vars.var_loadbit
    load     i64       bitwidthx        
    load     u64 /1    &offset          
    addto    i64                        
    load     i64       offset           
    load     i64       8                
    jumplt   i64       #5617            
    load     i64       0                
    store    i64       offset           
    load     u64 /1    &q               
    incrto   u64 /1                     
#5617: 
    setcall      /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     u64       fmt              
    setarg   u64 /2                     
    load     u64       &v               
    setarg   u64 /1                     
    callp        /3    &qq_print.tostr  
    load     i64       i                
    load     i64       b                
    jumpge   i64       #5619            
    setcall      /3/1                   
    load     i64       1                
    setarg   i64 /3                     
    load     u64       ","              
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
#5619: 
    forup    i64 /1    #5613            
    opnd     i64       i                
    opnd     i64       b                
#5615: 
    setcall      /3/1                   
    load     i64       1                
    setarg   i64 /3                     
    load     u64       ")"              
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
    retproc                             
endproc

proc qq_print.tostr_struct:
    param    u64       p
    param    u64       fmt
    param    u64       dest
    local    u64       q
    local    i64       i
    local    i64       m
    local    i64       nfields
    local    i64       needcomma
    local    mem:16       v
    local    u64       pa
    local    u64       ptr
    local    u64       d
    local    u64       r
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pa               
    load     u64       pa               
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    store    i64       m                
    load     u64       &qq_tables.ttnamedef
    load     i64       m                
    iloadx   u64 /8                     
    store    u64       d                
    load     u64       d                
    load     i64       88               
    iloadx   u64 /1                     
    store    u64       r                
    load     u64       &qq_tables.ttlength
    load     i64       m                
    iloadx   i64 /8                     
    store    i64       nfields          
    load     i64       0                
    store    i64       needcomma        
    setcall      /3/1                   
    load     i64       -1               
    setarg   i64 /3                     
    load     u64       "("              
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
    load     i64       1                
    store    i64       i                
    load     i64       nfields          
    load     i64       1                
    jumplt   i64       #5623            
#5621: 
    setcall      /4/1                   
    load     u64       0                
    setarg   u64 /4                     
    load     u64       &v               
    setarg   u64 /3                     
    load     u64       r                
    iload    u64                        
    load     i64       116              
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /2                     
    load     u64       pa               
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       r                
    iload    u64                        
    load     i64       108              
    iloadx   i16 /1                     
    widen    i64/i16                    
    addpx    u64 /1                     
    setarg   u64 /1                     
    callp        /4    &qq_packed.var_loadpacked
    load     i64       needcomma        
    jumpf    i64       #5625            
    setcall      /3/1                   
    load     i64       -1               
    setarg   i64 /3                     
    load     u64       ","              
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
#5625: 
    load     i64       1                
    store    i64       needcomma        
    setcall      /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     u64       fmt              
    setarg   u64 /2                     
    load     u64       &v               
    setarg   u64 /1                     
    callp        /3    &qq_print.tostr  
    load     u64 /1    &r               
    incrto   u64 /8                     
    forup    i64 /1    #5621            
    opnd     i64       i                
    opnd     i64       nfields          
#5623: 
    setcall      /3/1                   
    load     i64       -1               
    setarg   i64 /3                     
    load     u64       ")"              
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
    retproc                             
endproc

proc qq_print.tostr_set:
    param    u64       p
    param    u64       fmt
    param    u64       dest
    local    mem:1024       str
    local    u64       q
    local    i64       i
    local    i64       j
    local    i64       first
    local    mem:16       v
    local    u64       s
    load     u64       fmt              
    load     u64       0                
    jumpne   u64       #5628            
    load     u64       &qq_print.defaultfmt
    store    u64       fmt              
#5628: 
    setcall      /3/1                   
    load     i64       1                
    setarg   i64 /3                     
    load     u64       "["              
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       s                
    load     i64       1                
    store    i64       first            
    load     i64       0                
    store    i64       i                
    jump               #5630            
#5629: 
    setcall  i64 /2/1                   
    load     i64       i                
    setarg   i64 /2                     
    load     u64       s                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /2    &qq_lib.testelem 
    jumpf    i64       #5633            
    load     i64       i                
    load     i64       1                
    add      i64                        
    store    i64       j                
    jump               #5635            
#5634: 
    load     u64 /1    &j               
    incrto   i64 /1                     
#5635: 
    load     i64       j                
    load     u64       s                
    load     i64       16               
    iloadx   i64 /1                     
    jumpge   i64       #5637            
    setcall  i64 /2/1                   
    load     i64       j                
    setarg   i64 /2                     
    load     u64       s                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /2    &qq_lib.testelem 
    jumpt    i64       #5634            
#5637: 
    load     u64 /1    &j               
    decrto   i64 /1                     
    load     i64       first            
    jumpt    i64       #5639            
    setcall      /3/1                   
    load     i64       1                
    setarg   i64 /3                     
    load     u64       ","              
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
#5639: 
    load     i64       0                
    store    i64       first            
    load     i64       i                
    load     i64       j                
    jumpne   i64       #5641            
    load     i64       1                
    load     u64       &v               
    load     i64       0                
    istorex  u32 /1                     
    load     i64       i                
    load     u64       &v               
    load     i64       8                
    istorex  i64 /1                     
    jump               #5640            
#5641: 
    load     i64       4                
    load     u64       &v               
    load     i64       0                
    istorex  u32 /1                     
    load     i64       i                
    load     u64       &v               
    load     i64       16               
    load     i64       63               
    storebf  i64                        
    load     i64       j                
    load     u64       &v               
    load     i64       8                
    istorex  u64 /1                     
#5640: 
    setcall      /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     u64       fmt              
    setarg   u64 /2                     
    load     u64       &v               
    setarg   u64 /1                     
    callp        /3    &qq_print.tostr  
    load     i64       j                
    load     i64       1                
    add      i64                        
    store    i64       i                
    jump               #5632            
#5633: 
    load     u64 /1    &i               
    incrto   i64 /1                     
#5632: 
#5630: 
    load     i64       i                
    load     u64       s                
    load     i64       16               
    iloadx   i64 /1                     
    jumplt   i64       #5629            
    setcall      /3/1                   
    load     i64       1                
    setarg   i64 /3                     
    load     u64       "]"              
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
    retproc                             
endproc

proc qq_print.tostr_dict:
    param    u64       p
    param    u64       fmt
    param    u64       dest
    local    mem:1024       str
    local    u64       q
    local    i64       i
    local    i64       length
    local    i64       needcomma
    local    u64       pa
    load     i64       0                
    store    i64       needcomma        
    load     u64       fmt              
    load     u64       0                
    jumpne   u64       #5644            
    load     u64       &qq_print.defaultfmt
    store    u64       fmt              
#5644: 
    setcall      /3/1                   
    load     i64       -1               
    setarg   i64 /3                     
    load     u64       "["              
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pa               
    load     u64       pa               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       pa               
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       2                
    idiv     i64                        
    store    i64       length           
    load     i64       length           
    store    i64       i                
    load     i64       i                
    load     i64       1                
    jumplt   i64       #5647            
#5645: 
    load     u64       q                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #5649            
    load     i64       2                
    load     u64 /1    &q               
    addpxto  u64 /16                    
    jump               #5646            
#5649: 
    load     i64       needcomma        
    jumpf    i64       #5651            
    setcall      /3/1                   
    load     i64       1                
    setarg   i64 /3                     
    load     u64       ","              
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
#5651: 
    load     i64       1                
    store    i64       needcomma        
    setcall      /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     u64       fmt              
    setarg   u64 /2                     
    load     u64       q                
    setarg   u64 /1                     
    callp        /3    &qq_print.tostr  
    load     u64 /1    &q               
    incrto   u64 /16                    
    setcall      /3/1                   
    load     i64       1                
    setarg   i64 /3                     
    load     u64       ":"              
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
    setcall      /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     u64       fmt              
    setarg   u64 /2                     
    load     u64       q                
    setarg   u64 /1                     
    callp        /3    &qq_print.tostr  
    load     u64 /1    &q               
    incrto   u64 /16                    
#5646: 
    fordown  i64 /1    #5645            
    opnd     i64       i                
    opnd     i64       1                
#5647: 
    setcall      /3/1                   
    load     i64       1                
    setarg   i64 /3                     
    load     u64       "]"              
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
    retproc                             
endproc

proc qq_print.tostr_decimal:
    param    u64       p
    param    u64       fmt
    param    u64       dest
    local    u64       s
    setcall  u64 /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callf    u64 /2    &qq_decimal.var_tostr_dec
    store    u64       s                
    setcall      /3/1                   
    load     i64       -1               
    setarg   i64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
    setcall      /2/1                   
    load     i64       qq_decimal.decstrsize
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_free   
    retproc                             
endproc

proc qq_print.tostr:
    param    u64       p
    param    u64       fmt
    param    u64       dest
    local    mem:1024       str
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #5655            
    load     i64       2                
    jumpeq   i64 /1    #5656            
    load     i64       9                
    jumpeq   i64 /1    #5657            
    load     i64       4                
    jumpeq   i64 /1    #5658            
    load     i64       10               
    jumpeq   i64 /1    #5659            
    load     i64       12               
    jumpeq   i64 /1    #5659            
    load     i64       11               
    jumpeq   i64 /1    #5660            
    load     i64       7                
    jumpeq   i64 /1    #5660            
    load     i64       8                
    jumpeq   i64 /1    #5661            
    load     i64       5                
    jumpeq   i64 /1    #5662            
    load     i64       13               
    jumpeq   i64 /1    #5663            
    load     i64       3                
    jumpeq   i64 /1    #5664            
    load     i64       6                
    jumpeq   i64 /1    #5665            
    load     i64       0                
    jumpeq   i64 /1    #5666            
    load     i64       14               
    jumpeq   i64 /1    #5667            
    load     i64       16               
    jumpeq   i64 /1    #5668            
    load     i64       15               
    jumpeq   i64 /1    #5669            
    load     i64       17               
    jumpeq   i64 /1    #5670            
    load     i64       18               
    jumpeq   i64 /1    #5671            
    load     i64       19               
    jumpeq   i64       #5672            
    jump               #5673            
#5655: 
    setcall      /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     u64       fmt              
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_print.tostr_int
    jump               #5654            
#5656: 
    setcall      /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     u64       fmt              
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_print.tostr_real
    jump               #5654            
#5657: 
    setcall      /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     u64       fmt              
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_print.tostr_str
    jump               #5654            
#5658: 
    setcall      /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     u64       fmt              
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_print.tostr_range
    jump               #5654            
#5659: 
    setcall      /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     u64       fmt              
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_print.tostr_list
    jump               #5654            
#5660: 
    setcall      /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     u64       fmt              
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_print.tostr_array
    jump               #5654            
#5661: 
    setcall      /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     u64       fmt              
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_print.tostr_bits
    jump               #5654            
#5662: 
    setcall      /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     u64       fmt              
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_print.tostr_set
    jump               #5654            
#5663: 
    setcall      /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     u64       fmt              
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_print.tostr_struct
    jump               #5654            
#5664: 
    setcall      /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     u64       fmt              
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_print.tostr_decimal
    jump               #5654            
#5665: 
    setcall      /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     u64       fmt              
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_print.tostr_dict
    jump               #5654            
#5666: 
    setcall      /3/1                   
    load     i64       -1               
    setarg   i64 /3                     
    load     u64       "<Void>"         
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
    jump               #5654            
#5667: 
    load     u64       fmt              
    load     i64       15               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    loadbit  i64                        
    jumpf    u64       #5675            
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "#<#>:"          
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       &qq_tables.ttname
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    startmx                             
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    jumpf    u64       #5677            
    load     u64       &qq_tables.ttname
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    resetmx  u64                        
    jump               #5676            
#5677: 
    load     u64       ""               
    endmx    u64                        
#5676: 
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /3/1                   
    load     i64       -1               
    setarg   i64 /3                     
    load     u64       &str             
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
#5675: 
! qq_print.tostr.showptr:
#5678: 
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       0                
    jumpne   u64       #5680            
    setcall      /3/1                   
    load     i64       -1               
    setarg   i64 /3                     
    load     u64       "nil"            
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
    jump               #5679            
#5680: 
    setcall      /3                     
    load     i64       -1               
    setarg   i64 /3                     
    setcall  u64 /2                     
    load     u64       "H"              
    setarg   u64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callf    u64 /2    &msysc.strint    
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
#5679: 
    jump               #5654            
#5668: 
    load     u64       fmt              
    load     i64       15               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    loadbit  i64                        
    jumpf    u64       #5682            
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "#<#>:"          
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       &qq_tables.ttname
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    startmx                             
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    jumpf    u64       #5684            
    load     u64       &qq_tables.ttname
    load     u64       p                
    load     i64       4                
    iloadx   u32 /1                     
    widen    i64/u32                    
    iloadx   u64 /8                     
    resetmx  u64                        
    jump               #5683            
#5684: 
    load     u64       ""               
    endmx    u64                        
#5683: 
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /3/1                   
    load     i64       -1               
    setarg   i64 /3                     
    load     u64       &str             
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
#5682: 
    jump               #5678            
    jump               #5654            
#5669: 
    load     u64       fmt              
    load     i64       15               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    loadbit  i64                        
    jumpf    u64       #5686            
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "#<#>(#,#):"     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       &qq_tables.ttname
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    startmx                             
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    jumpf    u64       #5688            
    load     u64       &qq_tables.ttname
    load     u64       p                
    load     i64       4                
    iloadx   u32 /1                     
    widen    i64/u32                    
    iloadx   u64 /8                     
    resetmx  u64                        
    jump               #5687            
#5688: 
    load     u64       ""               
    endmx    u64                        
#5687: 
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       p                
    load     i64       2                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       p                
    load     i64       3                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /3/1                   
    load     i64       -1               
    setarg   i64 /3                     
    load     u64       &str             
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
#5686: 
    jump               #5678            
    jump               #5654            
#5670: 
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    jumpf    u64       #5690            
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "<#:\"#\">"      
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       &qq_tables.namenames
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /3/1                   
    load     i64       -1               
    setarg   i64 /3                     
    load     u64       &str             
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
    jump               #5689            
#5690: 
    setcall      /3/1                   
    load     i64       -1               
    setarg   i64 /3                     
    load     u64       "<nil>"          
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
#5689: 
    jump               #5654            
#5671: 
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "#"              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       &qq_tables.ttname
    load     u64       p                
    load     i64       8                
    iloadx   i64 /1                     
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /3/1                   
    load     i64       -1               
    setarg   i64 /3                     
    load     u64       &str             
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
    jump               #5654            
#5672: 
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "(#)"            
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       &qq_pcltabs.pclnames
    load     u64       p                
    load     i64       8                
    iloadx   i64 /1                     
    iloadx   u64 /8                     
    load     i64       1                
    addpx    u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /3/1                   
    load     i64       -1               
    setarg   i64 /3                     
    load     u64       &str             
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
    jump               #5654            
#5673: 
    setcall      /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     u64       "Tostr:"         
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#5654: 
    retproc                             
endproc

proc qq_print.tostr_list:
    param    u64       p
    param    u64       fmt
    param    u64       dest
    local    u64       q
    local    i64       i
    local    i64       n
    local    u8       c
    local    u64       r
    local    i64       av_1
    load     u64 /1    &qq_print.listdepth
    incrto   i64 /1                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       r                
    load     u64       r                
    load     i64       0                
    iloadx   u32 /1                     
    widen    i64/u32                    
    load     i64       0                
    jumplt   i64       #5694            
    load     i64       qq_print.listdepth
    load     i64       4                
    jumple   i64       #5693            
#5694: 
    setcall      /3/1                   
    load     i64       3                
    setarg   i64 /3                     
    load     u64       "..."            
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
    load     u64 /1    &qq_print.listdepth
    decrto   i64 /1                     
    jump               #5691            
#5693: 
    load     u64       r                
    load     i64       0                
    iloadx   u32 /1                     
    widen    i64/u32                    
    neg      i64                        
    load     u64       r                
    load     i64       0                
    istorex  u32 /1                     
    load     u64       r                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       10               
    jumpne   i64       #5696            
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       n                
    jump               #5695            
#5696: 
    load     u64       &qq_tables.ttlength
    load     u64       r                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i64 /8                     
    store    i64       n                
#5695: 
    load     u64       fmt              
    load     i64       15               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    loadbit  i64                        
    jumpf    u64       #5698            
    load     i64       n                
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #5701            
#5699: 
    setcall      /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     u64       fmt              
    setarg   u64 /2                     
    load     u64       q                
    setarg   u64 /1                     
    callp        /3    &qq_print.tostr  
    setcall      /3/1                   
    load     i64       -1               
    setarg   i64 /3                     
    load     u64       "\n"             
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
    load     u64 /1    &q               
    incrto   u64 /16                    
    to       i64       #5699            
    opnd     i64       av_1             
#5701: 
    jump               #5697            
#5698: 
    setcall      /3/1                   
    load     i64       1                
    setarg   i64 /3                     
    load     u64       "("              
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
    load     i64       n                
    store    i64       i                
    load     i64       i                
    load     i64       1                
    jumplt   i64       #5704            
#5702: 
    setcall      /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     u64       fmt              
    setarg   u64 /2                     
    load     u64       q                
    setarg   u64 /1                     
    callp        /3    &qq_print.tostr  
    load     u64 /1    &q               
    incrto   u64 /16                    
    load     i64       i                
    load     i64       1                
    jumpeq   i64       #5706            
    setcall      /3/1                   
    load     i64       1                
    setarg   i64 /3                     
    load     u64       ","              
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
#5706: 
    fordown  i64 /1    #5702            
    opnd     i64       i                
    opnd     i64       1                
#5704: 
    setcall      /3/1                   
    load     i64       1                
    setarg   i64 /3                     
    load     u64       ")"              
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /3    &qq_print.addstring
#5697: 
    load     u64       r                
    load     i64       0                
    iloadx   u32 /1                     
    widen    i64/u32                    
    neg      i64                        
    load     u64       r                
    load     i64       0                
    istorex  u32 /1                     
    load     u64 /1    &qq_print.listdepth
    decrto   i64 /1                     
#5691: 
    retproc                             
endproc

proc qq_records.var_make_record:
    param    u64       a
    param    u64       dest
    param    i64       n
    param    i64       rectype
    local    u64       p
    local    u64       b
    local    i64       m
    local    i64       av_1
    setcall  u64 /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     i64       rectype          
    setarg   i64 /1                     
    callf    u64 /2    &qq_records.obj_new_record
    store    u64       p                
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       b                
    load     u64       &qq_tables.ttlength
    load     i64       rectype          
    iloadx   i64 /8                     
    store    i64       m                
    load     i64       n                
    load     i64       m                
    jumpge   i64       #5709            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Too few elements"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
    jump               #5708            
#5709: 
    load     i64       n                
    load     i64       m                
    jumple   i64       #5710            
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "N="             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     i64       n                
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       "M="             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     i64       m                
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Too many elements"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#5710: 
#5708: 
    load     i64       n                
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #5713            
#5711: 
    load     u64       a                
    iload    mem:16                     
    load     u64       b                
    istore   mem:16                     
    load     u64 /1    &a               
    incrto   u64 /16                    
    load     u64 /1    &b               
    incrto   u64 /16                    
    to       i64       #5711            
    opnd     i64       av_1             
#5713: 
    load     i64       268              
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     i64       rectype          
    load     u64       p                
    load     i64       6                
    istorex  u16 /1                     
    load     u64       p                
    load     u64       dest             
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_records.obj_new_record:
    param    i64       m
    param    u64       defval
    local    u64       p
    local    u64       a
    local    i64       n
    local    i64       av_1
    local    i64       av_2
    rettype  u64
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_vars.obj_new 
    store    u64       p                
    load     u64       1                
    load     u64       p                
    load     i64       4                
    addpx    u64 /1                     
    load     i64       1                
    storebit u8                         
    load     u64       &qq_tables.ttlength
    load     i64       m                
    iloadx   i64 /8                     
    store    i64       n                
    load     i64       0                
    load     u64       p                
    load     i64       5                
    istorex  u8  /1                     
    load     i64       n                
    jumpf    i64       #5716            
    setcall  u64 /1/1                   
    load     i64       n                
    load     i64       16               
    mul      i64                        
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    double                              
    store    u64       a                
    load     u64       p                
    load     i64       8                
    istorex  u64 /1                     
    load     u64       defval           
    jumpf    u64       #5718            
    load     u64       defval           
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpeq   i64       #5718            
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       a                
    load     i64       n                
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #5721            
#5719: 
    load     u64       defval           
    iload    mem:16                     
    load     u64       a                
    istore   mem:16                     
    load     u64       a                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #5723            
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#5723: 
    load     u64 /1    &a               
    incrto   u64 /16                    
    to       i64       #5719            
    opnd     i64       av_1             
#5721: 
    jump               #5717            
#5718: 
    load     i64       n                
    store    i64       av_2             
    load     i64       av_2             
    load     i64       0                
    jumple   i64       #5726            
#5724: 
    load     i64       1                
    load     u64       a                
    load     i64       0                
    istorex  u32 /1                     
    load     i64       0                
    load     u64       a                
    load     i64       8                
    istorex  i64 /1                     
    load     u64 /1    &a               
    incrto   u64 /16                    
    to       i64       #5724            
    opnd     i64       av_2             
#5726: 
#5717: 
#5716: 
    load     u64       p                
    jumpret  u64       #5714            
#5714: 
    retfn    u64                        
endproc

proc qq_records.obj_free_record:
    param    u64       p
    local    u64       q
    local    i64       av_1
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #5730            
#5728: 
    load     u64       q                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #5732            
    setcall      /1/1                   
    load     u64       q                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#5732: 
    load     u64 /1    &q               
    incrto   u64 /16                    
    to       i64       #5728            
    opnd     i64       av_1             
#5730: 
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    jumpf    i64       #5734            
    setcall      /2/1                   
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       16               
    mul      i64                        
    setarg   i64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_free   
#5734: 
    setcall      /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callp        /1    &mlib.pcm_free32 
    retproc                             
endproc

proc qq_records.var_dupl_record:
    param    u64       a
    local    u64       p
    local    u64       q
    local    u64       plist
    local    u64       qlist
    local    i64       length
    local    i64       av_1
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_vars.obj_new 
    store    u64       q                
    load     u64       p                
    iload    mem:32                     
    load     u64       q                
    istore   mem:32                     
    load     i64       1                
    load     u64       q                
    load     i64       0                
    istorex  u32 /1                     
    load     u64       1                
    load     u64       q                
    load     i64       4                
    addpx    u64 /1                     
    load     i64       1                
    storebit u8                         
    load     u64       q                
    load     u64       a                
    load     i64       8                
    istorex  u64 /1                     
    load     u64       &qq_tables.ttlength
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i64 /8                     
    store    i64       length           
    load     i64       length           
    load     i64       0                
    jumpne   i64       #5737            
    jump               #5735            
#5737: 
    setcall  u64 /1/1                   
    load     i64       length           
    load     i64       16               
    mul      i64                        
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    double                              
    load     u64       q                
    load     i64       8                
    istorex  u64 /1                     
    store    u64       qlist            
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       plist            
    load     i64       length           
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #5740            
#5738: 
    load     u64       plist            
    iload    mem:16                     
    load     u64       qlist            
    istore   mem:16                     
    load     u64       qlist            
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       12               
    jumpne   i64       #5742            
    load     u64       qlist            
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #5744            
    load     u64       qlist            
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#5744: 
    jump               #5741            
#5742: 
    load     u64       qlist            
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #5746            
    setcall      /1/1                   
    load     u64       qlist            
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_duplu
#5746: 
#5741: 
    load     u64 /1    &qlist           
    incrto   u64 /16                    
    load     u64 /1    &plist           
    incrto   u64 /16                    
    to       i64       #5738            
    opnd     i64       av_1             
#5740: 
#5735: 
    retproc                             
endproc

proc qq_records.var_equal_record:
    param    u64       x
    param    u64       y
    local    i64       xlen
    local    i64       ylen
    local    i64       res
    local    u64       px
    local    u64       py
    local    u64       a
    local    u64       b
    local    i64       av_1
    rettype  i64
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       px               
    load     u64       y                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       py               
    load     u64       px               
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     u64       py               
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    jumpeq   i64       #5749            
    load     i64       0                
    jumpret  i64       #5747            
#5749: 
    load     u64       px               
    load     u64       py               
    jumpne   u64       #5751            
    load     i64       1                
    jumpret  i64       #5747            
#5751: 
    load     u64       px               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       a                
    load     u64       py               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       b                
    load     u64       &qq_tables.ttlength
    load     u64       px               
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i64 /8                     
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #5754            
#5752: 
    setcall  i64 /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /2    &qq_vars.var_equal
    load     i64       0                
    jumpne   i64       #5756            
    load     i64       0                
    jumpret  i64       #5747            
#5756: 
    load     u64 /1    &a               
    incrto   u64 /16                    
    load     u64 /1    &b               
    incrto   u64 /16                    
    to       i64       #5752            
    opnd     i64       av_1             
#5754: 
    load     i64       1                
    jumpret  i64       #5747            
#5747: 
    retfn    i64                        
endproc

proc qq_records.var_getix_record:
    param    u64       a
    param    i64       index
    local    u64       q
    local    u64       offset
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     i64       index            
    load     i64       1                
    sub      u64                        
    store    u64       offset           
    load     u64       offset           
    load     u64       &qq_tables.ttlength
    load     u64       q                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   u64 /8                     
    jumplt   u64       #5759            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "record[int] bounds"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#5759: 
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       offset           
    addpx    u64 /16                    
    iload    mem:16                     
    load     u64       a                
    istore   mem:16                     
    load     u64       a                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #5761            
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#5761: 
    retproc                             
endproc

proc qq_records.var_putix_record:
    param    u64       a
    param    i64       index
    param    u64       x
    local    u64       dest
    local    u64       q
    local    u64       offset
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       q                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    loadbit  i64                        
    jumpt    u64       #5764            
    setcall      /0/1                   
    callp        /0    &qq_lib.pcnotmut 
#5764: 
    load     i64       index            
    load     i64       1                
    sub      u64                        
    store    u64       offset           
    load     u64       offset           
    load     u64       &qq_tables.ttlength
    load     u64       q                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   u64 /8                     
    jumplt   u64       #5766            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "rec[int] bounds"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#5766: 
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       offset           
    addpx    u64 /16                    
    store    u64       dest             
    load     u64       dest             
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #5768            
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#5768: 
    load     u64       x                
    iload    mem:16                     
    load     u64       dest             
    istore   mem:16                     
    retproc                             
endproc

proc qq_records.var_getixref_record:
    param    u64       a
    param    i64       index
    param    u64       dest
    local    u64       p
    local    u64       q
    local    u64       offset
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     i64       index            
    load     i64       1                
    sub      u64                        
    store    u64       offset           
    load     u64       offset           
    load     u64       q                
    load     i64       16               
    iloadx   u64 /1                     
    jumplt   u64       #5771            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "^rec[int] bounds"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#5771: 
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       offset           
    addpx    u64 /16                    
    store    u64       p                
    load     i64       14               
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     u64       p                
    load     u64       dest             
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_resolve.rx_module:
    param    u64       pm
    load     u64       pm               
    store    u64       qq_decls.currmodule
    load     u64       qq_decls.currmodule
    load     i64       88               
    iloadx   u64 /1                     
    double                              
    store    u64       qq_decls.stcurrmodule
    store    u64       qq_decls.stcurrproc
    load     i64       0                
    store    i64       qq_resolve.nprocs
    setcall      /2/1                   
    load     u64       qq_decls.stcurrmodule
    setarg   u64 /2                     
    load     u64       qq_decls.stprogram
    setarg   u64 /1                     
    callp        /2    &qq_resolve.rx_passdef
    load     i64       qq_resolve.nprocs
    load     i64       0                
    jumpne   i64       #5774            
    setcall      /2/1                   
    load     u64       qq_decls.currmodule
    load     i64       48               
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       qq_decls.stcurrmodule
    setarg   u64 /1                     
    callp        /2    &qq_resolve.rx_unit
    jump               #5773            
#5774: 
    load     u64       qq_decls.currmodule
    load     i64       48               
    iloadx   u64 /1                     
    jumpf    u64       #5775            
    setcall      /2/1                   
    load     u64       qq_decls.currmodule
    load     i64       48               
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       qq_decls.stcurrmodule
    setarg   u64 /1                     
    callp        /2    &qq_resolve.rx_unit
#5775: 
#5773: 
    retproc                             
endproc

proc qq_resolve.rx_passdef:
    param    u64       owner
    param    u64       p
    local    u64       d
    load     u64       p                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64 /1    #5778            
    load     i64       5                
    jumpeq   i64 /1    #5779            
    load     i64       6                
    jumpeq   i64 /1    #5779            
    load     i64       7                
    jumpeq   i64 /1    #5780            
    load     i64       18               
    jumpeq   i64 /1    #5781            
    load     i64       13               
    jumpeq   i64 /1    #5781            
    load     i64       14               
    jumpeq   i64 /1    #5781            
    load     i64       15               
    jumpeq   i64 /1    #5781            
    load     i64       10               
    jumpeq   i64 /1    #5782            
    load     i64       9                
    jumpeq   i64       #5782            
    jump               #5783            
#5778: 
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_resolve.rx_deflist
    jump               #5777            
#5779: 
    load     u64 /1    &qq_resolve.nprocs
    incrto   i64 /1                     
    setcall      /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_resolve.fixmode
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_resolve.rx_deflist
    load     u64       p                
    store    u64       qq_decls.stcurrproc
    setcall      /2/1                   
    load     u64       p                
    load     i64       88               
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /2    &qq_resolve.rx_unit
    load     u64       qq_decls.stcurrmodule
    store    u64       qq_decls.stcurrproc
    setcall      /3/1                   
    load     i64       1                
    setarg   i64 /3                     
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_resolve.rx_deflist
    jump               #5777            
#5780: 
    setcall      /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_resolve.fixmode
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_resolve.rx_deflist
    jump               #5777            
#5781: 
    setcall      /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_resolve.fixmode
    load     u64       p                
    load     i64       88               
    iloadx   u64 /1                     
    jumpf    u64       #5785            
    setcall      /2/1                   
    load     u64       p                
    load     i64       88               
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_resolve.rx_unit
#5785: 
    jump               #5777            
#5782: 
    setcall      /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_resolve.fixmode
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_resolve.rx_deflist
    jump               #5777            
#5783: 
#5777: 
    retproc                             
endproc

proc qq_resolve.rx_deflist:
    param    u64       owner
    param    u64       p
    param    i64       doanon
    jump               #5788            
#5787: 
    load     i64       doanon           
    jumpf    i64       #5793            
    load     u64       p                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       6                
    jumpeq   i64       #5792            
#5793: 
    load     i64       doanon           
    load     i64       0                
    jumpne   i64       #5791            
    load     u64       p                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       6                
    jumpeq   i64       #5791            
#5792: 
    setcall      /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_resolve.rx_passdef
#5791: 
    load     u64       p                
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       p                
#5788: 
    load     u64       p                
    jumpt    u64       #5787            
    retproc                             
endproc

proc qq_resolve.rx_unit:
    param    u64       owner
    param    u64       p
    local    u64       d
    local    u64       a
    local    u64       b
    local    i64       n
    local    i64       flags
    local    i64       oldnoexpand
    local    i64       oldsymbolmode
    local    i64       nk
    local    u64       pm
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       a                
    load     u64       p                
    load     i64       24               
    iloadx   u64 /1                     
    store    u64       b                
    load     u64       p                
    load     i64       4                
    iloadx   i32 /1                     
    widen    i64/i32                    
    store    i64       qq_decls.qpos    
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       39               
    jumpeq   i64 /1    #5796            
    load     i64       3                
    jumpeq   i64 /1    #5797            
    load     i64       46               
    jumpeq   i64 /1    #5798            
    load     i64       26               
    jumpeq   i64 /1    #5799            
    load     i64       63               
    jumpeq   i64 /1    #5800            
    load     i64       87               
    jumpeq   i64 /1    #5800            
    load     i64       62               
    jumpeq   i64 /1    #5801            
    load     i64       66               
    jumpeq   i64 /1    #5801            
    load     i64       15               
    jumpeq   i64 /1    #5802            
    load     i64       35               
    jumpeq   i64 /1    #5803            
    load     i64       40               
    jumpeq   i64 /1    #5804            
    load     i64       45               
    jumpeq   i64       #5805            
    jump               #5806            
#5796: 
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /3    &qq_resolve.resolvename
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       39               
    jumpne   i64       #5808            
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       22               
    jumpne   i64       #5808            
    load     i64       qq_resolve.noexpand
    jumpt    i64       #5808            
    load     u64 /1    &qq_resolve.macrolevels
    incrto   i64 /1                     
    setcall      /3/1                   
    load     u64       0                
    setarg   u64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_resolve.expandmacro
    setcall      /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_resolve.rx_unit
    load     u64 /1    &qq_resolve.macrolevels
    decrto   i64 /1                     
#5808: 
    jump               #5795            
#5797: 
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_resolve.rx_unit
    jump               #5795            
#5798: 
    setcall      /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_resolve.resolvedot
    jump               #5795            
#5799: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       39               
    jumpne   i64       #5810            
    load     i64       qq_resolve.noexpand
    store    i64       oldnoexpand      
    load     i64       1                
    store    i64       qq_resolve.noexpand
    setcall      /2/1                   
    load     u64       a                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_resolve.rx_unit
    load     i64       oldnoexpand      
    store    i64       qq_resolve.noexpand
    jump               #5809            
#5810: 
    setcall      /2/1                   
    load     u64       a                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_resolve.rx_unit
#5809: 
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_resolve.rx_unitlist
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       34               
    jumpne   i64       #5812            
    load     i64       35               
    load     u64       p                
    load     i64       0                
    istorex  u8  /1                     
    load     u64       b                
    load     u64       p                
    load     i64       16               
    istorex  u64 /1                     
    load     u64       0                
    load     u64       p                
    load     i64       24               
    istorex  u64 /1                     
    load     u64       a                
    load     i64       24               
    iloadx   i16 /1                     
    load     u64       p                
    load     i64       24               
    istorex  i16 /1                     
    load     i64       0                
    store    i64       nk               
    setcall  u64 /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     i64       88               
    setarg   i64 /1                     
    callf    u64 /2    &qq_lib.createunit1
    load     u64       p                
    load     i64       16               
    istorex  u64 /1                     
    load     i64       0                
    store    i64       n                
    jump               #5814            
#5813: 
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpne   i64       #5817            
    load     u64 /1    &nk              
    incrto   i64 /1                     
    load     i64       4                
    load     u64       b                
    load     i64       0                
    istorex  u8  /1                     
#5817: 
    load     u64 /1    &n               
    incrto   i64 /1                     
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       b                
#5814: 
    load     u64       b                
    jumpt    u64       #5813            
    load     i64       nk               
    jumpf    i64       #5819            
    load     i64       nk               
    load     i64       n                
    jumpeq   i64       #5819            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Mixed key:value"
    setarg   u64 /1                     
    callp        /2    &qq_lib.rxerror  
#5819: 
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    jumpf    u64       #5821            
    load     i64       n                
    neg      i64                        
    store    i64       n                
#5821: 
    load     i64       n                
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    load     i64       24               
    istorex  i32 /1                     
    jump               #5811            
#5812: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       39               
    jumpne   i64       #5822            
    load     u64       a                
    load     i64       16               
    iloadx   u64 /1                     
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       22               
    jumpne   i64       #5822            
    load     u64 /1    &qq_resolve.macrolevels
    incrto   i64 /1                     
    setcall      /3/1                   
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_resolve.expandmacro
    setcall      /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_resolve.rx_unit
    load     u64 /1    &qq_resolve.macrolevels
    decrto   i64 /1                     
#5822: 
#5811: 
    jump               #5795            
#5800: 
    setcall      /2/1                   
    load     u64       a                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_resolve.rx_unit
    load     u64       b                
    jumpt    u64       #5824            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Binop missing opnd"
    setarg   u64 /1                     
    callp        /2    &qq_lib.rxerror  
#5824: 
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_resolve.rx_unit
    setcall      /3/1                   
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_resolve.evalbinop
    jump               #5795            
#5801: 
    setcall      /2/1                   
    load     u64       a                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_resolve.rx_unit
    setcall      /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callp        /1    &qq_resolve.evalmonop
    jump               #5795            
#5802: 
    setcall      /3/1                   
    load     i64       1                
    setarg   i64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /3    &qq_resolve.resolvename
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       a                
    jump               #5825            
    jump               #5795            
#5803: 
    setcall      /2/1                   
    load     u64       a                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_resolve.rx_unit
    setcall      /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callp        /1    &qq_resolve.evalmonop
    jump               #5795            
#5804: 
    load     i64       qq_resolve.noexpand
    store    i64       oldnoexpand      
    load     i64       qq_resolve.symbolmode
    store    i64       oldsymbolmode    
    load     i64       1                
    store    i64       qq_resolve.noexpand
    load     i64       1                
    store    i64       qq_resolve.symbolmode
    setcall      /2/1                   
    load     u64       a                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_resolve.rx_unit
    load     i64       oldnoexpand      
    store    i64       qq_resolve.noexpand
    load     i64       oldsymbolmode    
    store    i64       qq_resolve.symbolmode
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       39               
    jumpeq   i64 /1    #5827            
    load     i64       34               
    jumpeq   i64       #5828            
    jump               #5829            
#5827: 
    jump               #5826            
#5828: 
    load     u64       &qq_tables.ttnamedef
    load     u64       a                
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    iloadx   u64 /8                     
    store    u64       d                
    load     u64       d                
    jumpf    u64       #5831            
    load     u64       d                
    load     u64       a                
    load     i64       16               
    istorex  u64 /1                     
    load     i64       39               
    load     u64       a                
    load     i64       0                
    istorex  u8  /1                     
    jump               #5830            
#5831: 
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "T.$?"           
    setarg   u64 /1                     
    callp        /2    &qq_lib.rxerror  
#5830: 
    jump               #5826            
#5829: 
    setcall      /4/1                   
    load     u64       0                
    setarg   u64 /4                     
    load     u64       "*"              
    setarg   u64 /3                     
    load     i64       0                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /4    &qq_show.printunit
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       ".$ not name"    
    setarg   u64 /1                     
    callp        /2    &qq_lib.rxerror  
#5826: 
    jump               #5795            
#5805: 
    setcall      /2/1                   
    load     u64       a                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_resolve.rx_unit
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       43               
    jumpeq   i64       #5833            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Not strconst"   
    setarg   u64 /1                     
    callp        /2    &qq_lib.rxerror  
#5833: 
    setcall  u64 /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       a                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /2    &qq_modules.loadsourcefile
    store    u64       pm               
    load     u64       pm               
    load     i64       24               
    iloadx   u64 /1                     
    load     u64       a                
    load     i64       16               
    istorex  u64 /1                     
    load     u64       pm               
    load     i64       32               
    iloadx   i64 /1                     
    load     i64       1                
    sub      i64                        
    load     u64       a                
    load     i64       24               
    istorex  i64 /1                     
    setcall      /2/1                   
    load     u64       a                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /2    &qq_lib.deleteunit
    jump               #5795            
#5806: 
! qq_resolve.rx_unit.doabc:
#5825: 
    load     u64       &qq_tables.jflags
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       flags            
    load     i64       flags            
    load     i64       1                
    jumplt   i64       #5835            
    setcall      /2/1                   
    load     u64       a                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_resolve.rx_unitlist
#5835: 
    load     i64       flags            
    load     i64       2                
    jumpne   i64       #5837            
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_resolve.rx_unitlist
#5837: 
#5795: 
    retproc                             
endproc

proc qq_resolve.rx_unitlist:
    param    u64       owner
    param    u64       p
    jump               #5840            
#5839: 
    setcall      /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_resolve.rx_unit
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
#5840: 
    load     u64       p                
    jumpt    u64       #5839            
    retproc                             
endproc

proc qq_resolve.evalmonop:
    param    u64       p
    local    i64       a
    local    i64       c
    local    r64       x
    local    r64       z
    jump               #5844            
#5844: 
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       41               
    jumpeq   i64 /1    #5846            
    load     i64       42               
    jumpeq   i64       #5847            
    jump               #5848            
#5846: 
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       a                
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       75               
    jumpeq   i64 /1    #5850            
    load     i64       76               
    jumpeq   i64       #5851            
    jump               #5852            
#5850: 
    load     i64       a                
    neg      i64                        
    store    i64       c                
    jump               #5849            
#5851: 
    load     i64       a                
    abs      i64                        
    store    i64       c                
    jump               #5849            
#5852: 
    jump               #5842            
#5849: 
! qq_resolve.evalmonop.newint:
    setcall      /2/1                   
    load     i64       c                
    setarg   i64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /2    &qq_resolve.makeintconst
    jump               #5845            
#5847: 
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   r64 /1                     
    store    r64       x                
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       75               
    jumpeq   i64 /1    #5855            
    load     i64       76               
    jumpeq   i64       #5856            
    jump               #5857            
#5855: 
    load     r64       x                
    neg      r64                        
    store    r64       z                
    jump               #5854            
#5856: 
    load     r64       x                
    abs      r64                        
    store    r64       z                
    jump               #5854            
#5857: 
    jump               #5842            
#5854: 
    setcall      /2/1                   
    load     r64       z                
    setarg   r64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /2    &qq_resolve.makerealconst
    jump               #5845            
#5848: 
    jump               #5842            
#5845: 
#5842: 
    retproc                             
endproc

proc qq_resolve.evalbinop:
    param    u64       p
    param    u64       lhs
    param    u64       rhs
    local    i64       a
    local    i64       b
    local    i64       c
    local    r64       x
    local    r64       y
    local    r64       z
    load     u64       lhs              
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       16               
    shl      i64                        
    load     u64       rhs              
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    bitor    i64                        
    load     i64       2687017          
    jumpeq   i64 /1    #5860            
    load     i64       2752554          
    jumpeq   i64       #5861            
    jump               #5862            
#5860: 
    load     u64       lhs              
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       a                
    load     u64       rhs              
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       b                
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       101              
    jumpeq   i64 /1    #5864            
    load     i64       102              
    jumpeq   i64 /1    #5865            
    load     i64       103              
    jumpeq   i64 /1    #5866            
    load     i64       105              
    jumpeq   i64 /1    #5867            
    load     i64       121              
    jumpeq   i64       #5868            
    jump               #5869            
#5864: 
    load     i64       a                
    load     i64       b                
    add      i64                        
    store    i64       c                
    jump               #5863            
#5865: 
    load     i64       a                
    load     i64       b                
    sub      i64                        
    store    i64       c                
    jump               #5863            
#5866: 
    load     i64       a                
    load     i64       b                
    mul      i64                        
    store    i64       c                
    jump               #5863            
#5867: 
    load     i64       b                
    load     i64       0                
    jumpne   i64       #5871            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "x/0"            
    setarg   u64 /1                     
    callp        /2    &qq_lib.rxerror  
#5871: 
    load     i64       a                
    load     i64       b                
    idiv     i64                        
    store    i64       c                
    jump               #5863            
#5868: 
    load     i64       a                
    load     i64       b                
    power    i64                        
    store    i64       c                
    jump               #5863            
#5869: 
    jump               #5858            
#5863: 
    setcall      /2/1                   
    load     i64       c                
    setarg   i64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /2    &qq_resolve.makeintconst
    jump               #5859            
#5861: 
    load     u64       lhs              
    load     i64       16               
    iloadx   r64 /1                     
    store    r64       x                
    load     u64       rhs              
    load     i64       16               
    iloadx   r64 /1                     
    store    r64       y                
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       101              
    jumpeq   i64 /1    #5873            
    load     i64       102              
    jumpeq   i64 /1    #5874            
    load     i64       103              
    jumpeq   i64 /1    #5875            
    load     i64       104              
    jumpeq   i64       #5876            
    jump               #5877            
#5873: 
    load     r64       x                
    load     r64       y                
    add      r64                        
    store    r64       z                
    jump               #5872            
#5874: 
    load     r64       x                
    load     r64       y                
    sub      r64                        
    store    r64       z                
    jump               #5872            
#5875: 
    load     r64       x                
    load     r64       y                
    mul      r64                        
    store    r64       z                
    jump               #5872            
#5876: 
    load     r64       x                
    load     r64       y                
    div      r64                        
    store    r64       z                
    jump               #5872            
#5877: 
    jump               #5858            
#5872: 
    setcall      /2/1                   
    load     r64       z                
    setarg   r64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /2    &qq_resolve.makerealconst
    jump               #5859            
#5862: 
    jump               #5858            
#5859: 
#5858: 
    retproc                             
endproc

proc qq_resolve.makeintconst:
    param    u64       p
    param    i64       value
    load     i64       41               
    load     u64       p                
    load     i64       0                
    istorex  u8  /1                     
    load     u64       0                
    double                              
    load     u64       p                
    load     i64       24               
    istorex  u64 /1                     
    load     u64       p                
    load     i64       16               
    istorex  u64 /1                     
    load     i64       value            
    load     u64       p                
    load     i64       16               
    istorex  i64 /1                     
    load     i64       1                
    load     u64       p                
    load     i64       24               
    istorex  i16 /1                     
    retproc                             
endproc

proc qq_resolve.makerealconst:
    param    u64       p
    param    r64       xvalue
    load     i64       42               
    load     u64       p                
    load     i64       0                
    istorex  u8  /1                     
    load     u64       0                
    double                              
    load     u64       p                
    load     i64       24               
    istorex  u64 /1                     
    load     u64       p                
    load     i64       16               
    istorex  u64 /1                     
    load     r64       xvalue           
    load     u64       p                
    load     i64       16               
    istorex  r64 /1                     
    load     i64       2                
    load     u64       p                
    load     i64       24               
    istorex  i16 /1                     
    retproc                             
endproc

proc qq_resolve.resolvename:
    param    u64       owner
    param    u64       p
    param    i64       mode
    local    u64       d
    local    u64       e
    local    u64       f
    local    u64       q
    local    i64       moduleno
    local    i64       n
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       d                
    load     u64       p                
    load     i64       4                
    iloadx   i32 /1                     
    widen    i64/i32                    
    load     i64       24               
    load     i64       31               
    loadbf   i64                        
    store    i64       moduleno         
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpeq   i64       #5882            
    jump               #5880            
#5882: 
    setcall  u64 /4/1                   
    load     i64       qq_resolve.allowmodname
    setarg   i64 /4                     
    load     i64       moduleno         
    setarg   i64 /3                     
    load     u64       d                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callf    u64 /4    &qq_resolve.resolvetopname
    store    u64       e                
    load     u64       e                
    jumpt    u64       #5884            
    load     u64       owner            
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       5                
    jumpeq   i64 /1    #5886            
    load     i64       6                
    jumpeq   i64 /1    #5886            
    load     i64       3                
    jumpeq   i64       #5887            
    jump               #5888            
#5886: 
    setcall  u64 /4/1                   
    load     i64       0                
    setarg   i64 /4                     
    load     i64       14               
    setarg   i64 /3                     
    load     u64       d                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callf    u64 /4    &qq_names.addsymbol
    double                              
    load     u64       p                
    load     i64       16               
    istorex  u64 /1                     
    store    u64       e                
    jump               #5885            
#5887: 
    setcall  u64 /4/1                   
    load     i64       0                
    setarg   i64 /4                     
    load     i64       13               
    setarg   i64 /3                     
    load     u64       d                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callf    u64 /4    &qq_names.addsymbol
    double                              
    load     u64       p                
    load     i64       16               
    istorex  u64 /1                     
    store    u64       e                
    jump               #5885            
#5888: 
    setcall      /3/1                   
    load     u64       p                
    setarg   u64 /3                     
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       "Undefined: #"   
    setarg   u64 /1                     
    callp        /3    &qq_lib.rxerror_s
#5885: 
    jump               #5883            
#5884: 
! qq_resolve.resolvename.$else:
! qq_resolve.resolvename.retry:
    load     u64       e                
    load     u64       p                
    load     i64       16               
    istorex  u64 /1                     
    load     u64       e                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       18               
    jumpeq   i64 /1    #5892            
    load     i64       19               
    jumpeq   i64 /1    #5893            
    load     i64       13               
    jumpeq   i64 /1    #5894            
    load     i64       10               
    jumpeq   i64 /1    #5895            
    load     i64       9                
    jumpeq   i64 /1    #5895            
    load     i64       21               
    jumpeq   i64 /1    #5896            
    load     i64       14               
    jumpeq   i64 /1    #5897            
    load     i64       15               
    jumpeq   i64       #5897            
    jump               #5898            
#5892: 
    load     i64       qq_resolve.symbolmode
    jumpf    i64       #5900            
    jump               #5880            
#5900: 
    load     u64       e                
    load     i64       88               
    iloadx   u64 /1                     
    store    u64       q                
    setcall      /2/1                   
    load     u64       q                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_resolve.rx_unit
    load     u64       q                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       41               
    jumpeq   i64 /1    #5902            
    load     i64       42               
    jumpeq   i64 /1    #5902            
    load     i64       43               
    jumpeq   i64       #5902            
    setcall      /3/1                   
    load     u64       0                
    setarg   u64 /3                     
    load     u64       &qq_tables.jtagnames
    load     u64       q                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /2                     
    load     u64       "Not const expr: #"
    setarg   u64 /1                     
    callp        /3    &qq_lib.rxerror_s
#5902: 
    load     u64       q                
    load     i64       24               
    iloadx   i16 /1                     
    load     u64       e                
    load     i64       116              
    istorex  i16 /1                     
    load     u64       q                
    load     i64       0                
    iloadx   u8  /1                     
    load     u64       p                
    load     i64       0                
    istorex  u8  /1                     
    load     u64       q                
    load     i64       16               
    iloadx   i64 /1                     
    load     u64       p                
    load     i64       16               
    istorex  i64 /1                     
    load     u64       q                
    load     i64       24               
    iloadx   i16 /1                     
    load     u64       p                
    load     i64       24               
    istorex  i16 /1                     
    load     u64       q                
    load     i64       24               
    iloadx   i64 /1                     
    load     u64       p                
    load     i64       24               
    istorex  i64 /1                     
    jump               #5891            
#5893: 
    load     i64       qq_resolve.symbolmode
    jumpf    i64       #5904            
    jump               #5880            
#5904: 
    load     i64       41               
    load     u64       p                
    load     i64       0                
    istorex  u8  /1                     
    load     u64       e                
    load     i64       96               
    iloadx   i32 /1                     
    widen    i64/i32                    
    load     u64       p                
    load     i64       16               
    istorex  i64 /1                     
    load     i64       1                
    load     u64       p                
    load     i64       24               
    istorex  i16 /1                     
    jump               #5891            
#5894: 
    jump               #5891            
#5895: 
    load     i64       34               
    load     u64       p                
    load     i64       0                
    istorex  u8  /1                     
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    load     i64       116              
    iloadx   i16 /1                     
    load     u64       p                
    load     i64       24               
    istorex  i16 /1                     
    jump               #5891            
#5896: 
    setcall      /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     u64       "FOUND LINK"     
    setarg   u64 /1                     
    callp        /2    &qq_lib.rxerror  
    jump               #5891            
#5897: 
    load     u64       qq_decls.stcurrproc
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       6                
    jumpne   i64       #5906            
    load     u64       e                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       6                
    jumpeq   i64       #5906            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Accessing transient vars from {}"
    setarg   u64 /1                     
    callp        /2    &qq_lib.rxerror  
#5906: 
    jump               #5891            
#5898: 
#5891: 
#5883: 
#5880: 
    retproc                             
endproc

proc qq_resolve.resolvetopname:
    param    u64       owner
    param    u64       stnewname
    param    i64       moduleno
    param    i64       allowmod
    local    i64       extcount
    local    i64       subprogno
    local    u64       p
    local    u64       q
    local    u64       powner
    local    u64       d
    local    u64       e
    local    u64       extdef
    local    u64       moddef
    local    mem:80       ambiglist
    local    i64       i
    rettype  u64
    load     u64       owner            
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       6                
    jumpne   i64       #5909            
    load     u64       owner            
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       q                
    jump               #5913            
#5910: 
    load     u64       q                
    load     i64       48               
    iloadx   u64 /1                     
    load     u64       stnewname        
    jumpne   u64       #5915            
    load     u64       q                
    jumpret  u64       #5907            
#5915: 
    load     u64       q                
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       q                
#5913: 
    load     u64       q                
    jumpt    u64       #5910            
    load     u64       owner            
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       owner            
#5909: 
    load     u64       owner            
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       5                
    jumpne   i64       #5917            
    load     u64       owner            
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       q                
    jump               #5921            
#5918: 
    load     u64       q                
    load     i64       48               
    iloadx   u64 /1                     
    load     u64       stnewname        
    jumpne   u64       #5923            
    load     u64       q                
    jumpret  u64       #5907            
#5923: 
    load     u64       q                
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       q                
#5921: 
    load     u64       q                
    jumpt    u64       #5918            
#5917: 
    load     u64       stnewname        
    load     i64       40               
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       &qq_decls.modules
    load     i64       moduleno         
    iloadx   u64 /8                     
    load     i64       44               
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       subprogno        
    load     i64       0                
    store    i64       extcount         
    load     u64       0                
    double                              
    store    u64       moddef           
    store    u64       extdef           
    jump               #5927            
#5924: 
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       powner           
    load     u64       powner           
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64 /1    #5929            
    load     i64       10               
    jumpeq   i64 /1    #5930            
    load     i64       1                
    jumpeq   i64       #5931            
    jump               #5932            
#5929: 
    load     u64       powner           
    load     i64       114              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       moduleno         
    jumpne   i64       #5934            
    load     u64       p                
    jumpret  u64       #5907            
    jump               #5933            
#5934: 
    load     u64       p                
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       0                
    load     i64       1                
    loadbf   i64                        
    jumpf    u64       #5935            
    load     u64       &qq_decls.modules
    load     u64       powner           
    load     i64       114              
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    load     i64       44               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       subprogno        
    jumpeq   i64       #5938            
    load     u64       p                
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       0                
    load     i64       1                
    loadbf   i64                        
    load     i64       2                
    jumpeq   i64       #5938            
    load     u64       p                
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       2                
    loadbit  i64                        
    jumpf    u64       #5937            
#5938: 
    load     u64 /1    &extcount        
    incrto   i64 /1                     
    load     u64       p                
    store    u64       extdef           
    load     i64       extcount         
    load     i64       10               
    jumpge   i64       #5940            
    load     u64       extdef           
    load     u64       &ambiglist       
    load     i64       extcount         
    istorex  u64 /8/-8                  
#5940: 
#5937: 
#5935: 
#5933: 
    jump               #5928            
#5930: 
    load     u64       powner           
    load     u64       owner            
    jumpeq   u64       #5943            
    load     u64       powner           
    load     u64       owner            
    load     i64       8                
    iloadx   u64 /1                     
    jumpne   u64       #5942            
#5943: 
    load     u64       p                
    jumpret  u64       #5907            
#5942: 
    jump               #5928            
#5931: 
    load     u64       p                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64 /1    #5945            
    load     i64       2                
    jumpeq   i64 /1    #5945            
    load     i64       22               
    jumpeq   i64       #5946            
    jump               #5947            
#5945: 
    load     i64       allowmod         
    jumpf    i64       #5949            
    load     u64       p                
    store    u64       moddef           
#5949: 
    jump               #5944            
#5946: 
    load     u64       p                
    jumpret  u64       #5907            
    jump               #5944            
#5947: 
#5944: 
    jump               #5928            
#5932: 
#5928: 
    load     u64       p                
    load     i64       40               
    iloadx   u64 /1                     
    store    u64       p                
#5927: 
    load     u64       p                
    jumpt    u64       #5924            
    load     u64       extdef           
    jumpf    u64       #5951            
    load     i64       extcount         
    load     i64       1                
    jumple   i64       #5953            
    load     i64       1                
    store    i64       i                
    load     i64       extcount         
    load     i64       1                
    jumplt   i64       #5956            
#5954: 
    load     u64       &ambiglist       
    load     i64       i                
    iloadx   u64 /8/-8                  
    store    u64       extdef           
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     i64       i                
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       extdef           
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &qq_tables.namenames
    load     u64       extdef           
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    forup    i64 /1    #5954            
    opnd     i64       i                
    opnd     i64       extcount         
#5956: 
    setcall      /3/1                   
    load     u64       0                
    setarg   u64 /3                     
    load     u64       extdef           
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       "Ambiguous ext name: #"
    setarg   u64 /1                     
    callp        /3    &qq_lib.rxerror_s
#5953: 
    load     u64       extdef           
    jumpret  u64       #5907            
#5951: 
    load     u64       moddef           
    jumpret  u64       #5907            
#5907: 
    retfn    u64                        
endproc

proc qq_resolve.resolvedot:
    param    u64       owner
    param    u64       p
    local    u64       qdef
    local    u64       rdef
    local    u64       d
    local    u64       newd
    local    u64       e
    local    u64       fielddef
    local    u64       q
    local    u64       r
    local    i64       nfields
    local    i64       oldallowmod
    load     i64       qq_resolve.symbolmode
    jumpf    i64       #5959            
    setcall      /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_resolve.resolvedot_sym
    jump               #5957            
#5959: 
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       p                
    load     i64       24               
    iloadx   u64 /1                     
    store    u64       r                
    load     u64       r                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       rdef             
    load     i64       qq_resolve.allowmodname
    store    i64       oldallowmod      
    load     u64       q                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       39               
    seteq    i64                        
    store    i64       qq_resolve.allowmodname
    setcall      /2/1                   
    load     u64       q                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_resolve.rx_unit
    load     i64       oldallowmod      
    store    i64       qq_resolve.allowmodname
    load     u64       q                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       39               
    jumpeq   i64 /1    #5961            
    load     i64       34               
    jumpeq   i64       #5962            
    jump               #5963            
#5961: 
    load     u64       q                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       d                
    jump               #5960            
#5962: 
    load     u64       q                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       d                
    jump               #5964            
    jump               #5960            
#5963: 
    load     u64       r                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       rdef             
    jump               #5965            
#5960: 
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64 /1    #5967            
    load     i64       10               
    jumpeq   i64 /1    #5967            
    load     i64       5                
    jumpeq   i64 /1    #5967            
    load     i64       7                
    jumpeq   i64 /1    #5967            
    load     i64       14               
    jumpeq   i64 /1    #5968            
    load     i64       13               
    jumpeq   i64 /1    #5968            
    load     i64       15               
    jumpeq   i64 /1    #5968            
    load     i64       11               
    jumpeq   i64 /1    #5968            
    load     i64       12               
    jumpeq   i64       #5968            
    jump               #5969            
#5967: 
! qq_resolve.resolvedot.dotype:
#5964: 
    setcall  u64 /2/1                   
    load     u64       rdef             
    setarg   u64 /2                     
    load     u64       d                
    setarg   u64 /1                     
    callf    u64 /2    &qq_resolve.finddupl
    store    u64       newd             
    load     u64       newd             
    jumpf    u64       #5971            
    load     u64       newd             
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       19               
    jumpeq   i64 /1    #5973            
    load     i64       18               
    jumpeq   i64 /1    #5974            
    load     i64       10               
    jumpeq   i64 /1    #5975            
    load     i64       13               
    jumpeq   i64 /1    #5976            
    load     i64       5                
    jumpeq   i64 /1    #5977            
    load     i64       7                
    jumpeq   i64 /1    #5977            
    load     i64       22               
    jumpeq   i64       #5978            
    jump               #5979            
#5973: 
    load     i64       41               
    load     u64       p                
    load     i64       0                
    istorex  u8  /1                     
    load     u64       newd             
    load     i64       96               
    iloadx   i32 /1                     
    widen    i64/i32                    
    load     u64       p                
    load     i64       16               
    istorex  i64 /1                     
    load     i64       1                
    load     u64       p                
    load     i64       24               
    istorex  i16 /1                     
    jump               #5972            
#5974: 
    load     u64       newd             
    load     i64       88               
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       q                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       41               
    jumpeq   i64       #5981            
    jump               #5982            
#5981: 
    load     i64       41               
    load     u64       p                
    load     i64       0                
    istorex  u8  /1                     
    load     u64       0                
    double                              
    load     u64       p                
    load     i64       24               
    istorex  u64 /1                     
    load     u64       p                
    load     i64       16               
    istorex  u64 /1                     
    load     u64       q                
    load     i64       16               
    iloadx   i64 /1                     
    load     u64       p                
    load     i64       16               
    istorex  i64 /1                     
    load     u64       newd             
    load     i64       116              
    iloadx   i16 /1                     
    load     u64       p                
    load     i64       24               
    istorex  i16 /1                     
    jump               #5980            
#5982: 
    setcall      /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     u64       "Rxdot:const?"   
    setarg   u64 /1                     
    callp        /2    &qq_lib.rxerror  
#5980: 
    jump               #5972            
#5975: 
    load     i64       34               
    load     u64       p                
    load     i64       0                
    istorex  u8  /1                     
    load     u64       newd             
    load     i64       116              
    iloadx   i16 /1                     
    load     u64       p                
    load     i64       24               
    istorex  i16 /1                     
    load     u64       newd             
    load     u64       p                
    load     i64       16               
    istorex  u64 /1                     
    jump               #5972            
#5976: 
    load     i64       39               
    load     u64       p                
    load     i64       0                
    istorex  u8  /1                     
    load     u64       newd             
    load     u64       p                
    load     i64       16               
    istorex  u64 /1                     
    jump               #5972            
#5977: 
    load     i64       39               
    load     u64       p                
    load     i64       0                
    istorex  u8  /1                     
    load     u64       0                
    double                              
    load     u64       p                
    load     i64       24               
    istorex  u64 /1                     
    load     u64       p                
    load     i64       16               
    istorex  u64 /1                     
    load     u64       newd             
    load     u64       p                
    load     i64       16               
    istorex  u64 /1                     
    jump               #5972            
#5978: 
    load     u64       e                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       22               
    jumpne   i64       #5984            
    load     i64       qq_resolve.noexpand
    jumpt    i64       #5984            
    load     u64 /1    &qq_resolve.macrolevels
    incrto   i64 /1                     
    setcall      /3/1                   
    load     u64       0                
    setarg   u64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &qq_resolve.expandmacro
    setcall      /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_resolve.rx_unit
    load     u64 /1    &qq_resolve.macrolevels
    decrto   i64 /1                     
#5984: 
    jump               #5972            
#5979: 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       &qq_tables.namenames
    load     u64       newd             
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64       "."              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64       newd             
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     u64       "Rxdot:.name not allowed here"
    setarg   u64 /1                     
    callp        /2    &qq_lib.rxerror  
#5972: 
    jump               #5970            
#5971: 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64       "."              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64       rdef             
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     u64       "Can't resolve"  
    setarg   u64 /1                     
    callp        /2    &qq_lib.rxerror  
#5970: 
    jump               #5966            
#5968: 
! qq_resolve.resolvedot.doexprdot:
#5965: 
    load     i64       0                
    store    i64       nfields          
    load     u64       0                
    store    u64       fielddef         
    load     u64       rdef             
    load     i64       40               
    iloadx   u64 /1                     
    store    u64       e                
    jump               #5986            
#5985: 
    load     u64       e                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       11               
    jumpeq   i64 /1    #5989            
    load     i64       12               
    jumpeq   i64 /1    #5989            
    load     i64       18               
    jumpeq   i64 /1    #5989            
    load     i64       5                
    jumpeq   i64 /1    #5989            
    load     i64       10               
    jumpeq   i64 /1    #5989            
    load     i64       13               
    jumpeq   i64 /1    #5989            
    load     i64       7                
    jumpeq   i64       #5989            
    jump               #5990            
#5989: 
    load     u64 /1    &nfields         
    incrto   i64 /1                     
    load     u64       e                
    store    u64       fielddef         
    jump               #5988            
#5990: 
#5988: 
    load     u64       e                
    load     i64       40               
    iloadx   u64 /1                     
    store    u64       e                
#5986: 
    load     u64       e                
    jumpt    u64       #5985            
    load     i64       nfields          
    load     i64       0                
    jumpeq   i64       #5992            
    jump               #5993            
#5992: 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       rdef             
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Can't find field"
    setarg   u64 /1                     
    callp        /2    &qq_lib.rxerror  
    jump               #5991            
#5993: 
    load     u64       rdef             
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpeq   i64       #5995            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Field name not generic"
    setarg   u64 /1                     
    callp        /2    &qq_lib.rxerror  
#5995: 
#5991: 
    jump               #5966            
#5969: 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       &qq_tables.namenames
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     u64       "RXDOT:Unknown nameid"
    setarg   u64 /1                     
    callp        /2    &qq_lib.rxerror  
#5966: 
#5957: 
    retproc                             
endproc

proc qq_resolve.resolvedot_sym:
    param    u64       owner
    param    u64       p
    local    u64       qdef
    local    u64       rdef
    local    u64       d
    local    u64       newd
    local    u64       e
    local    u64       fielddef
    local    u64       q
    local    u64       r
    local    i64       nfields
    local    i64       oldallowmod
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       p                
    load     i64       24               
    iloadx   u64 /1                     
    store    u64       r                
    load     u64       r                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       rdef             
    load     i64       qq_resolve.allowmodname
    store    i64       oldallowmod      
    load     u64       q                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       39               
    seteq    i64                        
    store    i64       qq_resolve.allowmodname
    setcall      /2/1                   
    load     u64       q                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_resolve.rx_unit
    load     i64       oldallowmod      
    store    i64       qq_resolve.allowmodname
    load     u64       q                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       39               
    jumpeq   i64 /1    #5998            
    load     i64       34               
    jumpeq   i64       #5999            
    jump               #6000            
#5998: 
    load     u64       q                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       d                
    jump               #5997            
#5999: 
    load     u64       q                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       d                
    load     i64       qq_resolve.symbolmode
    jumpf    i64       #6002            
    setcall  u64 /2/1                   
    load     u64       rdef             
    setarg   u64 /2                     
    load     u64       d                
    setarg   u64 /1                     
    callf    u64 /2    &qq_resolve.finddupl
    store    u64       newd             
    load     u64       newd             
    load     u64       0                
    jumpne   u64       #6004            
    setcall      /3/1                   
    load     u64       0                
    setarg   u64 /3                     
    load     u64       rdef             
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       "Can't resolve ."
    setarg   u64 /1                     
    callp        /3    &qq_lib.rxerror_s
#6004: 
    load     u64       newd             
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       11               
    jumpeq   i64 /1    #6006            
    load     i64       12               
    jumpeq   i64       #6006            
    jump               #6007            
#6006: 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "*******FIELD.$" 
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #6005            
#6007: 
    setcall      /3/1                   
    load     u64       0                
    setarg   u64 /3                     
    load     u64       &qq_tables.namenames
    load     u64       newd             
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /2                     
    load     u64       ".$ ON type:"    
    setarg   u64 /1                     
    callp        /3    &qq_lib.rxerror_s
#6005: 
#6002: 
    jump               #6008            
    jump               #5997            
#6000: 
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "RXDOTSYM?"      
    setarg   u64 /1                     
    callp        /2    &qq_lib.rxerror  
#5997: 
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64 /1    #6010            
    load     i64       10               
    jumpeq   i64 /1    #6010            
    load     i64       5                
    jumpeq   i64 /1    #6010            
    load     i64       7                
    jumpeq   i64       #6010            
    jump               #6011            
#6010: 
! qq_resolve.resolvedot_sym.dotype:
#6008: 
    setcall  u64 /2/1                   
    load     u64       rdef             
    setarg   u64 /2                     
    load     u64       d                
    setarg   u64 /1                     
    callf    u64 /2    &qq_resolve.finddupl
    store    u64       newd             
    load     u64       newd             
    jumpf    u64       #6013            
    load     i64       39               
    load     u64       p                
    load     i64       0                
    istorex  u8  /1                     
    load     u64       0                
    double                              
    load     u64       p                
    load     i64       24               
    istorex  u64 /1                     
    load     u64       p                
    load     i64       16               
    istorex  u64 /1                     
    load     u64       newd             
    load     u64       p                
    load     i64       16               
    istorex  u64 /1                     
    jump               #6012            
#6013: 
    setcall      /3/1                   
    load     u64       0                
    setarg   u64 /3                     
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       ".$ Can't resolve"
    setarg   u64 /1                     
    callp        /3    &qq_lib.rxerror_s
#6012: 
    jump               #6009            
#6011: 
    setcall      /3/1                   
    load     u64       p                
    setarg   u64 /3                     
    load     u64       &qq_tables.namenames
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /2                     
    load     u64       "RX.$: Unknown nameid:"
    setarg   u64 /1                     
    callp        /3    &qq_lib.rxerror_s
#6009: 
    retproc                             
endproc

proc qq_resolve.finddupl:
    param    u64       d
    param    u64       pdupl
    rettype  u64
    load     u64       pdupl            
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpeq   i64       #6016            
    load     u64       pdupl            
    jumpret  u64       #6014            
#6016: 
    load     u64       pdupl            
    load     i64       40               
    iloadx   u64 /1                     
    store    u64       pdupl            
    jump               #6018            
#6017: 
    load     u64       pdupl            
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       d                
    jumpne   u64       #6021            
    load     u64       pdupl            
    jumpret  u64       #6014            
#6021: 
    load     u64       pdupl            
    load     i64       40               
    iloadx   u64 /1                     
    store    u64       pdupl            
#6018: 
    load     u64       pdupl            
    jumpt    u64       #6017            
    load     u64       0                
    jumpret  u64       #6014            
#6014: 
    retfn    u64                        
endproc

proc qq_resolve.expandmacro:
    param    u64       p
    param    u64       a
    param    u64       b
    local    u64       d
    local    u64       pm
    local    u64       pnew
    local    i64       ignoreargs
    load     i64       qq_resolve.macrolevels
    load     i64       10               
    jumple   i64       #6024            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Too many macro levels (recursive macro?)"
    setarg   u64 /1                     
    callp        /2    &qq_lib.rxerror  
#6024: 
    load     u64       a                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       d                
    load     u64       d                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pm               
    load     i64       0                
    store    i64       qq_resolve.nmacroparams
    jump               #6026            
#6025: 
    load     i64       qq_resolve.nmacroparams
    load     i64       50               
    jumplt   i64       #6029            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "macro param overflow"
    setarg   u64 /1                     
    callp        /2    &qq_lib.rxerror  
#6029: 
    load     u64       pm               
    load     u64       &qq_resolve.macroparams
    load     u64 /1    &qq_resolve.nmacroparams
    incrload i64 /1                     
    istorex  u64 /8/-8                  
    load     u64       pm               
    load     i64       48               
    iloadx   u64 /1                     
    load     u64       &qq_resolve.macroparamsgen
    load     i64       qq_resolve.nmacroparams
    istorex  u64 /8/-8                  
    load     u64       pm               
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       pm               
#6026: 
    load     u64       pm               
    jumpt    u64       #6025            
    load     i64       0                
    store    i64       qq_resolve.nmacroargs
    jump               #6031            
#6030: 
    load     i64       qq_resolve.nmacroargs
    load     i64       50               
    jumplt   i64       #6034            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "macro arg overflow"
    setarg   u64 /1                     
    callp        /2    &qq_lib.rxerror  
#6034: 
    load     u64       b                
    load     u64       &qq_resolve.macroargs
    load     u64 /1    &qq_resolve.nmacroargs
    incrload i64 /1                     
    istorex  u64 /8/-8                  
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       b                
#6031: 
    load     u64       b                
    jumpt    u64       #6030            
    load     i64       qq_resolve.nmacroargs
    load     i64       qq_resolve.nmacroparams
    jumpge   i64       #6036            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Too few macro args"
    setarg   u64 /1                     
    callp        /2    &qq_lib.rxerror  
#6036: 
    load     i64       0                
    store    i64       ignoreargs       
    load     i64       qq_resolve.nmacroargs
    load     i64       0                
    jumple   i64       #6038            
    load     i64       qq_resolve.nmacroparams
    load     i64       0                
    jumpne   i64       #6038            
    load     i64       1                
    store    i64       ignoreargs       
    load     i64       0                
    double                              
    store    i64       qq_resolve.nmacroparams
    store    i64       qq_resolve.nmacroargs
    jump               #6037            
#6038: 
    load     i64       qq_resolve.nmacroargs
    load     i64       qq_resolve.nmacroparams
    jumple   i64       #6039            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Too many macro args"
    setarg   u64 /1                     
    callp        /2    &qq_lib.rxerror  
#6039: 
#6037: 
    setcall  u64 /1/1                   
    load     u64       d                
    load     i64       88               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /1    &qq_resolve.copyunit
    store    u64       pnew             
    load     i64       ignoreargs       
    jumpt    i64       #6041            
    setcall      /2/1                   
    load     u64       pnew             
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /2    &qq_resolve.replaceunit
    jump               #6040            
#6041: 
    load     u64       pnew             
    load     u64       p                
    load     i64       16               
    istorex  u64 /1                     
#6040: 
    retproc                             
endproc

proc qq_resolve.copylistunit:
    param    u64       p
    local    u64       q
    local    u64       plist
    local    u64       plistx
    rettype  u64
    load     u64       0                
    double                              
    store    u64       plistx           
    store    u64       plist            
    jump               #6044            
#6043: 
    setcall  u64 /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callf    u64 /1    &qq_resolve.copyunit
    store    u64       q                
    setcall      /3/1                   
    load     u64       q                
    setarg   u64 /3                     
    load     u64       &plistx          
    setarg   u64 /2                     
    load     u64       &plist           
    setarg   u64 /1                     
    callp        /3    &qq_lib.addlistunit
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
#6044: 
    load     u64       p                
    jumpt    u64       #6043            
    load     u64       plist            
    jumpret  u64       #6042            
#6042: 
    retfn    u64                        
endproc

proc qq_resolve.copyunit:
    param    u64       p
    local    u64       q
    local    u64       d
    local    i64       i
    rettype  u64
    load     u64       p                
    load     u64       0                
    jumpne   u64       #6048            
    load     u64       0                
    jumpret  u64       #6046            
#6048: 
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       39               
    jumpne   i64       #6050            
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       d                
    load     i64       1                
    store    i64       i                
    load     i64       qq_resolve.nmacroparams
    load     i64       1                
    jumplt   i64       #6053            
#6051: 
    load     u64       &qq_resolve.macroparamsgen
    load     i64       i                
    iloadx   u64 /8/-8                  
    load     u64       d                
    jumpne   u64       #6055            
    setcall  u64 /1/1                   
    load     u64       &qq_resolve.macroargs
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /1                     
    callf    u64 /1    &qq_resolve.copyunit
    jumpret  u64       #6046            
    jump               #6053            
#6055: 
    forup    i64 /1    #6051            
    opnd     i64       i                
    opnd     i64       qq_resolve.nmacroparams
#6053: 
#6050: 
    setcall  u64 /1/1                   
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /1                     
    callf    u64 /1    &qq_lib.createunit0
    store    u64       q                
    load     u64       p                
    iload    mem:32                     
    load     u64       q                
    istore   mem:32                     
    load     u64       0                
    load     u64       q                
    load     i64       8                
    istorex  u64 /1                     
    load     u64       &qq_tables.jflags
    load     u64       q                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u8  /1                     
    jumpf    u8        #6057            
    setcall  u64 /1/1                   
    load     u64       q                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /1    &qq_resolve.copylistunit
    load     u64       q                
    load     i64       16               
    istorex  u64 /1                     
    load     u64       &qq_tables.jflags
    load     u64       q                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       2                
    jumpne   i64       #6059            
    setcall  u64 /1/1                   
    load     u64       q                
    load     i64       24               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /1    &qq_resolve.copylistunit
    load     u64       q                
    load     i64       24               
    istorex  u64 /1                     
#6059: 
#6057: 
    load     u64       q                
    jumpret  u64       #6046            
#6046: 
    retfn    u64                        
endproc

proc qq_resolve.replaceunit:
    param    u64       p
    param    u64       q
    local    u64       pnext
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pnext            
    load     u64       q                
    iload    mem:32                     
    load     u64       p                
    istore   mem:32                     
    load     u64       pnext            
    load     u64       p                
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_resolve.fixmode:
    param    u64       owner
    param    u64       p
    local    u64       d
    local    u64       e
    local    i64       m
    load     u64       p                
    load     i64       116              
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       m                
    load     i64       m                
    load     i64       0                
    jumplt   i64       #6063            
    jump               #6061            
#6063: 
    load     i64       m                
    neg      i64                        
    store    i64       m                
    load     u64       &qq_tables.ttxmap
    load     i64       m                
    iloadx   i64 /8                     
    jumpf    i64       #6065            
    load     u64       &qq_tables.ttxmap
    load     i64       m                
    iloadx   i64 /8                     
    load     u64       p                
    load     i64       116              
    istorex  i16 /1                     
    jump               #6061            
#6065: 
    load     u64       &qq_tables.ttnamedefx
    load     i64       m                
    iloadx   u64 /8                     
    store    u64       d                
    setcall  u64 /4/1                   
    load     i64       0                
    setarg   i64 /4                     
    load     u64       &qq_tables.ttxmoduleno
    load     i64       m                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /3                     
    load     u64       d                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callf    u64 /4    &qq_resolve.resolvetopname
    store    u64       e                
    load     u64       e                
    jumpf    u64       #6067            
    load     u64       e                
    load     i64       116              
    iloadx   i16 /1                     
    widen    i64/i16                    
    load     u64       &qq_tables.ttxmap
    load     i64       m                
    istorex  i64 /8                     
    load     u64       e                
    load     i64       116              
    iloadx   i16 /1                     
    load     u64       p                
    load     i64       116              
    istorex  i16 /1                     
    jump               #6066            
#6067: 
    setcall      /3/1                   
    load     u64       0                
    setarg   u64 /3                     
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       "Can't resolve type: #"
    setarg   u64 /1                     
    callp        /3    &qq_lib.rxerror_s
#6066: 
#6061: 
    retproc                             
endproc

proc qq_resolve.fixmode2:
    param    u64       owner
    param    i64       m
    local    u64       d
    local    u64       e
    local    mem:256       str
    rettype  i64
    load     i64       m                
    load     i64       0                
    jumplt   i64       #6070            
    load     i64       m                
    jumpret  i64       #6068            
#6070: 
    load     i64       m                
    neg      i64                        
    store    i64       m                
    load     u64       &qq_tables.ttxmap
    load     i64       m                
    iloadx   i64 /8                     
    jumpf    i64       #6072            
    load     u64       &qq_tables.ttxmap
    load     i64       m                
    iloadx   i64 /8                     
    jumpret  i64       #6068            
#6072: 
    load     u64       &qq_tables.ttnamedefx
    load     i64       m                
    iloadx   u64 /8                     
    store    u64       d                
    load     u64       owner            
    load     u64       0                
    jumpne   u64       #6074            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "FM2/owner"      
    setarg   u64 /1                     
    callp        /2    &qq_lib.rxerror  
#6074: 
    setcall  u64 /4/1                   
    load     i64       0                
    setarg   i64 /4                     
    load     u64       &qq_tables.ttxmoduleno
    load     i64       m                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /3                     
    load     u64       d                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callf    u64 /4    &qq_resolve.resolvetopname
    store    u64       e                
    load     u64       e                
    jumpf    u64       #6076            
    load     u64       e                
    load     i64       116              
    iloadx   i16 /1                     
    widen    i64/i16                    
    load     u64       &qq_tables.ttxmap
    load     i64       m                
    istorex  i64 /8                     
    load     u64       e                
    load     i64       116              
    iloadx   i16 /1                     
    widen    i64/i16                    
    jumpret  i64       #6068            
    jump               #6075            
#6076: 
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "# in module #, line:#"
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &qq_decls.modules
    load     u64       &qq_tables.ttxmoduleno
    load     i64       m                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /3/1                   
    load     u64       0                
    setarg   u64 /3                     
    load     u64       &str             
    setarg   u64 /2                     
    load     u64       "2:Can't resolve type: #"
    setarg   u64 /1                     
    callp        /3    &qq_lib.rxerror_s
#6075: 
    load     i64       0                
    jumpret  i64       #6068            
#6068: 
    retfn    i64                        
endproc

proc qq_resolve.fixusertypes:
    local    u64       p
    local    u64       pmode
    local    i64       m
    local    i64       rescan
    local    i64       i
    load     i64       1                
    store    i64       i                
#6078: 
    load     u64       qq_tables.userxmodelist
    store    u64       p                
    load     i64       0                
    store    i64       rescan           
    jump               #6082            
#6081: 
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    iload    i16                        
    widen    i64/i16                    
    store    i64       m                
    load     i64       m                
    load     i64       0                
    jumpge   i64       #6085            
    setcall  i64 /2/1                   
    load     i64       m                
    setarg   i64 /2                     
    load     u64       p                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /2    &qq_resolve.fixmode2
    store    i64       m                
    load     i64       m                
    load     i64       0                
    jumpge   i64       #6087            
    load     i64       i                
    load     i64       2                
    jumpne   i64       #6087            
    load     u64       &qq_tables.ttxmap
    load     i64       m                
    abs      i64                        
    iloadx   i64 /8                     
    jumpf    i64       #6087            
    load     u64       &qq_tables.ttxmap
    load     i64       m                
    abs      i64                        
    iloadx   i64 /8                     
    store    i64       m                
#6087: 
    load     i64       m                
    load     i64       0                
    jumpge   i64       #6089            
    load     i64       1                
    store    i64       rescan           
    jump               #6088            
#6089: 
    load     i64       m                
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    istore   i16                        
    load     u64       &qq_tables.tttarget
    load     i64       m                
    iloadx   i16 /2                     
    widen    i64/i16                    
    load     i64       m                
    jumpne   i64       #6091            
    setcall      /3/1                   
    load     u64       0                
    setarg   u64 /3                     
    load     u64       &qq_tables.ttname
    load     i64       m                
    iloadx   u64 /8                     
    setarg   u64 /2                     
    load     u64       "recursive type?"
    setarg   u64 /1                     
    callp        /3    &qq_lib.rxerror_s
#6091: 
#6088: 
#6085: 
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       p                
#6082: 
    load     u64       p                
    jumpt    u64       #6081            
    load     i64       rescan           
    jumpt    i64       #6093            
    jump               #6080            
#6093: 
    forup    i64 /1    #6078            
    opnd     i64       i                
    opnd     i64       2                
#6080: 
    load     i64       rescan           
    jumpf    i64       #6095            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "FUT Phase Error"
    setarg   u64 /1                     
    callp        /2    &qq_lib.rxerror  
#6095: 
    load     i64       1                
    store    i64       i                
    load     i64       qq_decls.nbaseclasses
    load     i64       1                
    jumplt   i64       #6098            
#6096: 
    setcall      /1/1                   
    load     i64       i                
    setarg   i64 /1                     
    callp        /1    &qq_resolve.dobaseclass
    forup    i64 /1    #6096            
    opnd     i64       i                
    opnd     i64       qq_decls.nbaseclasses
#6098: 
    retproc                             
endproc

proc qq_resolve.tx_typetable:
    local    i64       i
    load     i64       41               
    store    i64       i                
    load     i64       qq_tables.ntypes 
    load     i64       41               
    jumplt   i64       #6102            
#6100: 
    setcall      /1/1                   
    load     i64       i                
    setarg   i64 /1                     
    callp        /1    &qq_resolve.converttype
    forup    i64 /1    #6100            
    opnd     i64       i                
    opnd     i64       qq_tables.ntypes 
#6102: 
    retproc                             
endproc

proc qq_resolve.getconstint:
    param    u64       owner
    param    u64       a
    param    i64       ownerid
    rettype  i64
    setcall      /2/1                   
    load     u64       a                
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callp        /2    &qq_resolve.rx_unit
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       41               
    jumpeq   i64 /1    #6105            
    load     i64       42               
    jumpeq   i64       #6106            
    jump               #6107            
#6105: 
    load     u64       a                
    load     i64       16               
    iloadx   i64 /1                     
    jumpret  i64       #6103            
    jump               #6104            
#6106: 
    load     u64       a                
    load     i64       16               
    iloadx   r64 /1                     
    fix      i64/r64                    
    jumpret  i64       #6103            
    jump               #6104            
#6107: 
    setcall      /3/1                   
    load     u64       0                
    setarg   u64 /3                     
    load     u64       &qq_tables.jtagnames
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /2                     
    load     u64       "Getconstint: not int/real"
    setarg   u64 /1                     
    callp        /3    &qq_lib.rxerror_s
#6104: 
    load     i64       0                
    jumpret  i64       #6103            
#6103: 
    retfn    i64                        
endproc

proc qq_resolve.converttype:
    param    i64       m
    local    u64       d
    local    u64       f
    local    u64       owner
    local    i64       first
    local    i64       a
    local    i64       b
    local    i64       index
    local    i64       length
    local    i64       lower
    local    i64       elemtype
    local    i64       nbits
    local    mem:2056       fieldlist
    local    i64       oldmodno
    local    i64       pos
    local    i64       ownerid
    local    i64       maxalign
    local    i64       nfields
    local    i64       size
    local    u64       plength
    local    u64       plower
    load     u64       &qq_tables.ttsize
    load     i64       m                
    iloadx   i64 /8                     
    jumpf    i64       #6110            
    jump               #6108            
#6110: 
    load     u64       &qq_tables.ttowner
    load     i64       m                
    iloadx   u64 /8                     
    store    u64       owner            
    load     u64       &qq_tables.ttlowerexpr
    load     i64       m                
    iloadx   u64 /8                     
    store    u64       plower           
    load     u64       &qq_tables.ttlengthexpr
    load     i64       m                
    iloadx   u64 /8                     
    store    u64       plength          
    load     u64       &qq_tables.ttbasetype
    load     i64       m                
    iloadx   i16 /2                     
    widen    i64/i16                    
    load     i64       36               
    jumpeq   i64 /1    #6112            
    load     i64       37               
    jumpeq   i64 /1    #6112            
    load     i64       7                
    jumpeq   i64 /1    #6113            
    load     i64       13               
    jumpeq   i64 /1    #6114            
    load     i64       12               
    jumpeq   i64       #6115            
    jump               #6116            
#6112: 
    setcall  i64 /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     u64       plength          
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callf    i64 /3    &qq_resolve.getconstint
    double                              
    load     u64       &qq_tables.ttlength
    load     i64       m                
    istorex  i64 /8                     
    load     u64       &qq_tables.ttsize
    load     i64       m                
    istorex  i64 /8                     
    jump               #6111            
#6113: 
    load     i64       m                
    load     i64       11               
    jumpne   i64       #6118            
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "CT:ARRAY/ARRAY" 
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
#6118: 
    load     u64       &qq_tables.ttowner
    load     i64       m                
    iloadx   u64 /8                     
    jumpf    u64       #6120            
    load     u64       &qq_tables.ttowner
    load     i64       m                
    iloadx   u64 /8                     
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       ownerid          
    jump               #6119            
#6120: 
    load     i64       0                
    store    i64       ownerid          
#6119: 
    load     u64       plower           
    jumpf    u64       #6122            
    setcall  i64 /3/1                   
    load     i64       ownerid          
    setarg   i64 /3                     
    load     u64       plower           
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callf    i64 /3    &qq_resolve.getconstint
    load     u64       &qq_tables.ttlower
    load     i64       m                
    istorex  i64 /8                     
    jump               #6121            
#6122: 
    load     i64       1                
    load     u64       &qq_tables.ttlower
    load     i64       m                
    istorex  i64 /8                     
#6121: 
    load     u64       plength          
    jumpf    u64       #6124            
    setcall  i64 /3/1                   
    load     i64       ownerid          
    setarg   i64 /3                     
    load     u64       plength          
    setarg   u64 /2                     
    load     u64       owner            
    setarg   u64 /1                     
    callf    i64 /3    &qq_resolve.getconstint
    load     u64       &qq_tables.ttlength
    load     i64       m                
    istorex  i64 /8                     
    jump               #6123            
#6124: 
    load     i64       0                
    load     u64       &qq_tables.ttlength
    load     i64       m                
    istorex  i64 /8                     
#6123: 
    load     u64       &qq_tables.tttarget
    load     i64       m                
    iloadx   i16 /2                     
    widen    i64/i16                    
    store    i64       elemtype         
    load     i64       elemtype         
    load     i64       33               
    jumpeq   i64 /1    #6126            
    load     i64       34               
    jumpeq   i64 /1    #6126            
    load     i64       35               
    jumpeq   i64       #6126            
    jump               #6127            
#6126: 
    load     u64       &qq_tables.ttlength
    load     i64       m                
    iloadx   i64 /8                     
    load     u64       &qq_tables.ttbitwidth
    load     u64       &qq_tables.tttarget
    load     i64       m                
    iloadx   i16 /2                     
    widen    i64/i16                    
    iloadx   u8  /1                     
    widen    i64/u8                     
    mul      i64                        
    store    i64       nbits            
    load     i64       nbits            
    load     i64       1                
    sub      i64                        
    load     i64       8                
    idiv     i64                        
    load     i64       1                
    add      i64                        
    load     u64       &qq_tables.ttsize
    load     i64       m                
    istorex  i64 /8                     
    jump               #6125            
#6127: 
    setcall      /1/1                   
    load     u64       &qq_tables.tttarget
    load     i64       m                
    iloadx   i16 /2                     
    widen    i64/i16                    
    setarg   i64 /1                     
    callp        /1    &qq_resolve.converttype
    load     u64       &qq_tables.ttlength
    load     i64       m                
    iloadx   i64 /8                     
    load     u64       &qq_tables.ttsize
    load     u64       &qq_tables.tttarget
    load     i64       m                
    iloadx   i16 /2                     
    widen    i64/i16                    
    iloadx   i64 /8                     
    mul      i64                        
    load     u64       &qq_tables.ttsize
    load     i64       m                
    istorex  i64 /8                     
#6125: 
    jump               #6111            
#6114: 
    load     u64       &qq_tables.ttnamedef
    load     i64       m                
    iloadx   u64 /8                     
    store    u64       d                
    load     u64       d                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       f                
    load     i64       0                
    store    i64       nfields          
    jump               #6129            
#6128: 
    load     i64       nfields          
    load     i64       256              
    jumplt   i64       #6132            
    setcall      /2/1                   
    load     u64       0                
    setarg   u64 /2                     
    load     u64       "Too many fields"
    setarg   u64 /1                     
    callp        /2    &qq_lib.rxerror  
#6132: 
    load     u64       f                
    load     u64       &fieldlist       
    load     u64 /1    &nfields         
    incrload i64 /1                     
    istorex  u64 /8/-8                  
    load     u64       f                
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       f                
#6129: 
    load     u64       f                
    jumpt    u64       #6128            
    load     u64       0                
    load     u64       &fieldlist       
    load     i64       nfields          
    istorex  u64 /8                     
    load     i64       0                
    double                              
    store    i64       qq_resolve.nallfields
    store    i64       qq_resolve.ntopfields
    load     i64       1                
    store    i64       maxalign         
    load     i64       1                
    store    i64       index            
    setcall      /8/1                   
    load     i64       2                
    setarg   i64 /8                     
    load     u64       &maxalign        
    setarg   u64 /7                     
    load     u64       &qq_tables.ttcaligned
    load     i64       m                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /6                     
    load     i64       0                
    setarg   i64 /5                     
    load     u64       &size            
    setarg   u64 /4                     
    load     u64       &index           
    setarg   u64 /3                     
    load     u64       &fieldlist       
    setarg   u64 /2                     
    load     i64       1                
    setarg   i64 /1                     
    callp        /8    &qq_resolve.scanstruct
    load     u64       &qq_tables.ttcaligned
    load     i64       m                
    iloadx   u8  /1                     
    jumpf    u8        #6134            
    setcall  i64 /2/1                   
    load     i64       maxalign         
    setarg   i64 /2                     
    load     i64       size             
    setarg   i64 /1                     
    callf    i64 /2    &mlib.roundtoblock
    store    i64       size             
    load     i64       maxalign         
    load     u64       d                
    load     i64       106              
    istorex  i16 /1                     
    jump               #6133            
#6134: 
    load     i64       1                
    load     u64       d                
    load     i64       106              
    istorex  i16 /1                     
#6133: 
    load     i64       size             
    load     u64       &qq_tables.ttsize
    load     i64       m                
    istorex  i64 /8                     
    load     i64       1                
    load     u64       &qq_tables.ttlower
    load     i64       m                
    istorex  i64 /8                     
    load     i64       qq_resolve.ntopfields
    load     u64       &qq_tables.ttlength
    load     i64       m                
    istorex  i64 /8                     
    setcall  u64 /1/1                   
    load     i64       8                
    load     i64       qq_resolve.ntopfields
    mul      i64                        
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    load     u64       d                
    load     i64       88               
    istorex  u64 /1                     
    setcall      /3/1                   
    load     i64       8                
    load     i64       qq_resolve.ntopfields
    mul      u64                        
    setarg   u64 /3                     
    load     u64       &qq_resolve.structfields
    setarg   u64 /2                     
    load     u64       d                
    load     i64       88               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &memcpy          
    jump               #6111            
#6115: 
    jump               #6111            
#6116: 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "CAN'T DO:"      
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1                     
    setcall  u64 /2                     
    load     i64       0                
    setarg   i64 /2                     
    load     i64       m                
    setarg   i64 /1                     
    callf    u64 /2    &qq_show.strmode 
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1                     
    setcall  u64 /2                     
    load     i64       0                
    setarg   i64 /2                     
    load     u64       &qq_tables.ttbasetype
    load     i64       m                
    iloadx   i16 /2                     
    widen    i64/i16                    
    setarg   i64 /1                     
    callf    u64 /2    &qq_show.strmode 
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
#6111: 
#6108: 
    retproc                             
endproc

proc qq_resolve.scanstruct:
    param    i64       smode
    param    u64       fields
    param    u64       index
    param    u64       isize
    param    i64       offset
    param    i64       calign
    param    u64       maxalign
    param    i64       countmode
    local    u64       f
    local    i64       newoffset
    local    i64       fieldsize
    local    i64       alignment
    local    i64       nfields
    local    i64       structmode
    local    i64       ndepth
    local    i64       size
    load     i64       0                
    store    i64       size             
    jump               #6137            
#6136: 
    load     u64       f                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       12               
    jumpeq   i64 /1    #6140            
    load     i64       24               
    jumpeq   i64 /1    #6141            
    load     i64       25               
    jumpeq   i64 /1    #6142            
    load     i64       26               
    jumpeq   i64       #6143            
    jump               #6144            
#6140: 
    setcall      /1/1                   
    load     u64       f                
    load     i64       116              
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /1                     
    callp        /1    &qq_resolve.converttype
    load     u64       &qq_tables.ttsize
    load     u64       f                
    load     i64       116              
    iloadx   i16 /1                     
    widen    i64/i16                    
    iloadx   i64 /8                     
    store    i64       fieldsize        
    load     i64       calign           
    jumpf    i64       #6146            
    setcall  i64 /1/1                   
    load     u64       f                
    load     i64       116              
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /1                     
    callf    i64 /1    &qq_names.getalignment
    store    i64       alignment        
    load     i64       alignment        
    load     u64       maxalign         
    maxto    i64                        
    setcall  i64 /2/1                   
    load     i64       alignment        
    setarg   i64 /2                     
    load     i64       offset           
    setarg   i64 /1                     
    callf    i64 /2    &mlib.roundtoblock
    store    i64       newoffset        
    load     i64       newoffset        
    load     i64       offset           
    sub      i64                        
    load     u64 /1    &size            
    addto    i64                        
    jump               #6145            
#6146: 
    load     i64       offset           
    store    i64       newoffset        
#6145: 
    load     i64       newoffset        
    load     u64       f                
    load     i64       108              
    istorex  i16 /1                     
    load     u64       index            
    iload    i64                        
    load     i64       1                
    sub      i64                        
    load     u64       f                
    load     i64       96               
    istorex  i32 /1                     
    load     i64       newoffset        
    store    i64       offset           
! qq_resolve.scanstruct.countfields:
    load     u64 /1    &qq_resolve.nallfields
    incrto   i64 /1                     
    load     i64       countmode        
    jumpf    i64       #6149            
    load     u64       f                
    load     u64       &qq_resolve.structfields
    load     u64 /1    &qq_resolve.ntopfields
    incrload i64 /1                     
    istorex  u64 /8/-8                  
#6149: 
    jump               #6139            
#6141: 
    setcall      /8/1                   
    load     i64       countmode        
    setarg   i64 /8                     
    load     u64       maxalign         
    setarg   u64 /7                     
    load     i64       calign           
    setarg   i64 /6                     
    load     i64       offset           
    setarg   i64 /5                     
    load     u64       &fieldsize       
    setarg   u64 /4                     
    load     u64       index            
    setarg   u64 /3                     
    load     u64       fields           
    setarg   u64 /2                     
    load     i64       1                
    setarg   i64 /1                     
    callp        /8    &qq_resolve.scanstruct
    jump               #6139            
#6142: 
    setcall      /8/1                   
    startmx                             
    load     i64       countmode        
    jumpf    i64       #6151            
    load     i64       1                
    resetmx  i64                        
    jump               #6150            
#6151: 
    load     i64       0                
    endmx    i64                        
#6150: 
    setarg   i64 /8                     
    load     u64       maxalign         
    setarg   u64 /7                     
    load     i64       calign           
    setarg   i64 /6                     
    load     i64       offset           
    setarg   i64 /5                     
    load     u64       &fieldsize       
    setarg   u64 /4                     
    load     u64       index            
    setarg   u64 /3                     
    load     u64       fields           
    setarg   u64 /2                     
    load     i64       0                
    setarg   i64 /1                     
    callp        /8    &qq_resolve.scanstruct
    jump               #6139            
#6143: 
    load     i64       size             
    load     u64       isize            
    istore   i64                        
    jump               #6135            
    jump               #6139            
#6144: 
#6139: 
    load     i64       smode            
    jumpf    i64       #6153            
    load     i64       fieldsize        
    load     u64 /1    &offset          
    addto    i64                        
    load     i64       fieldsize        
    load     u64 /1    &size            
    addto    i64                        
    jump               #6152            
#6153: 
    load     i64       size             
    load     i64       fieldsize        
    max      i64                        
    store    i64       size             
    load     i64       0                
    store    i64       countmode        
#6152: 
#6137: 
    load     u64       fields           
    load     u64       index            
    loadincr i64 /1                     
    iloadx   u64 /8/-8                  
    double                              
    store    u64       f                
    jumpt    u64       #6136            
    load     i64       size             
    load     u64       isize            
    istore   i64                        
#6135: 
    retproc                             
endproc

proc qq_resolve.dobaseclass:
    param    i64       baseclassindex
    local    u64       sttype
    local    u64       d
    local    u64       e
    local    u64       newd
    local    i64       baseclass
    local    i64       normalexit
    load     u64       &qq_decls.baseclasstable
    load     i64       baseclassindex   
    iloadx   i16 /2                     
    widen    i64/i16                    
    store    i64       baseclass        
    load     u64       &qq_decls.baseclassdef
    load     i64       baseclassindex   
    iloadx   u64 /8                     
    store    u64       sttype           
    load     u64       &qq_tables.ttnamedef
    load     i64       baseclass        
    iloadx   u64 /8                     
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       d                
    jump               #6156            
#6155: 
    load     u64       sttype           
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       e                
    load     i64       1                
    store    i64       normalexit       
    jump               #6159            
#6158: 
    setcall  i64 /2/1                   
    load     u64       e                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /2    &mlib.eqstring   
    jumpf    i64       #6162            
    load     i64       0                
    store    i64       normalexit       
    jump               #6160            
#6162: 
    load     u64       e                
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       e                
#6159: 
    load     u64       e                
    jumpt    u64       #6158            
#6160: 
    load     i64       normalexit       
    jumpf    i64       #6164            
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       5                
    jumpeq   i64 /1    #6166            
    load     i64       21               
    jumpeq   i64       #6166            
    jump               #6167            
#6166: 
    setcall  u64 /4/1                   
    load     i64       0                
    setarg   i64 /4                     
    load     i64       21               
    setarg   i64 /3                     
    load     u64       d                
    load     i64       48               
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       sttype           
    setarg   u64 /1                     
    callf    u64 /4    &qq_names.addsymbol
    store    u64       newd             
    load     u64       d                
    load     u64       newd             
    load     i64       56               
    istorex  u64 /1                     
    jump               #6165            
#6167: 
    setcall  u64 /4/1                   
    load     i64       0                
    setarg   i64 /4                     
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /3                     
    load     u64       d                
    load     i64       48               
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       sttype           
    setarg   u64 /1                     
    callf    u64 /4    &qq_names.addsymbol
    store    u64       newd             
    setcall      /2/1                   
    load     u64       newd             
    setarg   u64 /2                     
    load     u64       d                
    setarg   u64 /1                     
    callp        /2    &qq_names.duplfield
    load     u64       sttype           
    load     i64       104              
    addpx    u64 /1                     
    incrto   i16 /1                     
    load     u64       sttype           
    load     i64       104              
    iloadx   i16 /1                     
    widen    i64/i16                    
    load     u64       &qq_tables.ttlength
    load     u64       sttype           
    load     i64       116              
    iloadx   i16 /1                     
    widen    i64/i16                    
    istorex  i64 /8                     
    load     u64       sttype           
    load     i64       104              
    iloadx   i16 /1                     
    widen    i64/i16                    
    load     u64       newd             
    load     i64       96               
    istorex  i32 /1                     
    load     u64       newd             
    load     i64       96               
    iloadx   i32 /1                     
    widen    i64/i32                    
    load     i64       1                
    sub      i64                        
    load     i64       16               
    mul      i64                        
    load     u64       newd             
    load     i64       108              
    istorex  i16 /1                     
#6165: 
    setcall      /1/1                   
    load     u64       newd             
    setarg   u64 /1                     
    callp        /1    &qq_names.addgenfield
#6164: 
    load     u64       d                
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       d                
#6156: 
    load     u64       d                
    jumpt    u64       #6155            
    retproc                             
endproc

proc qq_runx.disploop:
    local    u64       pc
    local    u64       sp
    local    u64       fp
    local    u64       x
    local    u64       y
    local    u64       z
    local    i64       n
    local    i64       index
    local    u64       dest
    local    u64       px
    local    u64       d
    local    i64       nloc
    local    u64       pz
    local    u64       pp
    local    u64       q
    local    u64       g
    local    i64       xt
    local    i64       yt
    local    i64       res
    local    i64       lower
    local    i64       upper
    local    i64       moduleno
    local    i64       offset
    local    u64       newsp
    local    u64       e
    local    u64       localjumptable
    local    mem:16       vx
    local    i64       av_1
    local    i64       av_2
    local    i64       av_3
    local    i64       av_4
    initdswx                            
    load     u64       #6176            
    store    u64       localjumptable   
! qq_runx.disploop.freddy:
    load     u8        qq_runx.getjt    
    jumpf    u8        #6171            
    load     u64       localjumptable   
    store    u64       qq_runx.jumptable
    jump               #6168            
#6171: 
    load     u64       qq_decls.sptr    
    store    u64       sp               
    load     u64       qq_decls.pcptr   
    store    u64       pc               
    load     u64       qq_decls.frameptr
    store    u64       fp               
    load     u64       qq_runx.jumptable
    load     u64       0                
    jumpne   u64       #6173            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "JUMPTABLE NOT SET"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#6173: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6176: 
    swlabel            #6178            
    swlabel            #6179            
    swlabel            #6181            
    swlabel            #6182            
    swlabel            #6186            
    swlabel            #6187            
    swlabel            #6188            
    swlabel            #6189            
    swlabel            #6192            
    swlabel            #6196            
    swlabel            #6198            
    swlabel            #6206            
    swlabel            #6200            
    swlabel            #6203            
    swlabel            #6207            
    swlabel            #6210            
    swlabel            #6211            
    swlabel            #6212            
    swlabel            #6213            
    swlabel            #6214            
    swlabel            #6215            
    swlabel            #6216            
    swlabel            #6217            
    swlabel            #6231            
    swlabel            #6239            
    swlabel            #6240            
    swlabel            #6241            
    swlabel            #6244            
    swlabel            #6247            
    swlabel            #6250            
    swlabel            #6251            
    swlabel            #6252            
    swlabel            #6255            
    swlabel            #6264            
    swlabel            #6273            
    swlabel            #6280            
    swlabel            #6287            
    swlabel            #6297            
    swlabel            #6304            
    swlabel            #6311            
    swlabel            #6378            
    swlabel            #6389            
    swlabel            #6401            
    swlabel            #6402            
    swlabel            #6407            
    swlabel            #6409            
    swlabel            #6412            
    swlabel            #6414            
    swlabel            #6417            
    swlabel            #6419            
    swlabel            #6422            
    swlabel            #6423            
    swlabel            #6430            
    swlabel            #6442            
    swlabel            #6443            
    swlabel            #6444            
    swlabel            #6445            
    swlabel            #6446            
    swlabel            #6447            
    swlabel            #6823            
    swlabel            #6453            
    swlabel            #6454            
    swlabel            #6455            
    swlabel            #6456            
    swlabel            #6457            
    swlabel            #6458            
    swlabel            #6459            
    swlabel            #6460            
    swlabel            #6467            
    swlabel            #6468            
    swlabel            #6475            
    swlabel            #6476            
    swlabel            #6478            
    swlabel            #6487            
    swlabel            #6488            
    swlabel            #6489            
    swlabel            #6492            
    swlabel            #6495            
    swlabel            #6498            
    swlabel            #6503            
    swlabel            #6506            
    swlabel            #6512            
    swlabel            #6515            
    swlabel            #6520            
    swlabel            #6521            
    swlabel            #6522            
    swlabel            #6523            
    swlabel            #6524            
    swlabel            #6525            
    swlabel            #6526            
    swlabel            #6528            
    swlabel            #6536            
    swlabel            #6539            
    swlabel            #6542            
    swlabel            #6549            
    swlabel            #6552            
    swlabel            #6553            
    swlabel            #6554            
    swlabel            #6564            
    swlabel            #6567            
    swlabel            #6572            
    swlabel            #6573            
    swlabel            #6582            
    swlabel            #6590            
    swlabel            #6598            
    swlabel            #6605            
    swlabel            #6612            
    swlabel            #6617            
    swlabel            #6621            
    swlabel            #6628            
    swlabel            #6635            
    swlabel            #6642            
    swlabel            #6649            
    swlabel            #6656            
    swlabel            #6661            
    swlabel            #6666            
    swlabel            #6671            
    swlabel            #6678            
    swlabel            #6685            
    swlabel            #6688            
    swlabel            #6691            
    swlabel            #6698            
    swlabel            #6703            
    swlabel            #6734            
    swlabel            #6735            
    swlabel            #6740            
    swlabel            #6736            
    swlabel            #6744            
    swlabel            #6753            
    swlabel            #6766            
    swlabel            #6767            
    swlabel            #6774            
    swlabel            #6785            
    swlabel            #6791            
    swlabel            #6792            
    swlabel            #6793            
    swlabel            #6794            
    swlabel            #6801            
    swlabel            #6812            
    swlabel            #6817            
    swlabel            #6818            
    swlabel            #6819            
    swlabel            #6822            
    swlabel            #6829            
    swlabel            #6824            
    swlabel            #6177            
    swlabel            #6177            
    swlabel            #6177            
    swlabel            #6836            
    swlabel            #6839            
    swlabel            #6869            
    swlabel            #6177            
    swlabel            #6177            
    swlabel            #6177            
    swlabel            #6177            
    swlabel            #6866            
    swlabel            #6177            
    swlabel            #6177            
    swlabel            #6177            
    swlabel            #6177            
    swlabel            #6318            
    swlabel            #6323            
    swlabel            #6328            
    swlabel            #6333            
    swlabel            #6338            
    swlabel            #6343            
    swlabel            #6348            
    swlabel            #6353            
    swlabel            #6358            
    swlabel            #6363            
    swlabel            #6368            
    swlabel            #6373            
    swlabel            #6845            
    swlabel            #6848            
    swlabel            #6842            
    swlabel            #6177            
    swlabel            #6851            
    swlabel            #6854            
    swlabel            #6857            
    swlabel            #6860            
    swlabel            #6863            
    swlabel            #6710            
    swlabel            #6717            
    swlabel            #6722            
    swlabel            #6725            
    swlabel            #6728            
    swlabel            #6731            
    swlabel            #6880            
    swlabel            #6874            
    swlabel            #6177            
    swlabel            #6230            
    swlabel            #6894            
    swlabel            #6899            
    swlabel            #6906            
    swlabel            #6911            
    swlabel            #6891            
    swlabel            #6177            
    swlabel            #6177            
    swlabel            #6918            
    swlabel            #6881            
    swlabel            #6886            
    swlabel            #6921            
    endsw                               
#6178: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6179: 
    jump               #6180            
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6181: 
    jump               #6180            
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6182: 
    load     u64       pc               
    load     i64       9                
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #6185            
#6183: 
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     i64       0                
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    to       i64       #6183            
    opnd     i64       av_1             
#6185: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6186: 
    jump               #6180            
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6187: 
    jump               #6180            
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6188: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6189: 
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       0                
    istorex  i64 /1                     
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6191            
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#6191: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6192: 
! qq_runx.disploop.jpushf:
#6193: 
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       0                
    istorex  i64 /1                     
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6195            
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#6195: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6196: 
! qq_runx.disploop.jpushmref:
#6197: 
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     i64       14               
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    load     u64       sp               
    load     i64       8                
    istorex  u64 /1                     
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6198: 
! qq_runx.disploop.jpushfref:
#6199: 
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     i64       14               
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    load     u64       sp               
    load     i64       8                
    istorex  u64 /1                     
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6200: 
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       x                
    load     u64       x                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6202            
    setcall      /1/1                   
    load     u64       x                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6202: 
    load     u64       sp               
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       x                
    load     i64       0                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       x                
    load     i64       8                
    istorex  i64 /1                     
    load     u64 /1    &sp              
    decrto   u64 /16                    
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6203: 
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       x                
    load     u64       x                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6205            
    setcall      /1/1                   
    load     u64       x                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6205: 
    load     u64       sp               
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       x                
    load     i64       0                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       x                
    load     i64       8                
    istorex  i64 /1                     
    load     u64 /1    &sp              
    decrto   u64 /16                    
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6206: 
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     i64       16               
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     i64       0                
    load     u64       sp               
    load     i64       4                
    istorex  u32 /1                     
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    load     u64       sp               
    load     i64       8                
    istorex  u64 /1                     
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6207: 
! qq_runx.disploop.jpushci:
#6208: 
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     i64       1                
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     u64 /1    &pc              
    incrto   u64 /32                    
! qq_runx.disploop.jpushcix:
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6210: 
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     i64       0                
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6211: 
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     i64       16               
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     i64       0                
    load     u64       sp               
    load     i64       4                
    istorex  u32 /1                     
    load     u64       0                
    load     u64       sp               
    load     i64       8                
    istorex  u64 /1                     
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6212: 
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     i64       2                
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     u64       pc               
    load     i64       16               
    iloadx   r64 /1                     
    load     u64       sp               
    load     i64       8                
    istorex  r64 /1                     
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6213: 
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     i64       265              
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    load     u64       sp               
    load     i64       8                
    istorex  u64 /1                     
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6214: 
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     i64       18               
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6215: 
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     i64       19               
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     u64       pc               
    load     i64       16               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6216: 
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     i64       17               
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    load     u64       sp               
    load     i64       8                
    istorex  u64 /1                     
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6217: 
    load     u64       sp               
    store    u64       x                
! qq_runx.disploop.jpushptr:
#6218: 
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       14               
    jumpeq   i64 /1    #6220            
    load     i64       16               
    jumpeq   i64 /1    #6221            
    load     i64       15               
    jumpeq   i64       #6222            
    jump               #6223            
#6220: 
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    iload    mem:16                     
    load     u64       sp               
    istore   mem:16                     
    jump               #6219            
#6221: 
    load     u64       x                
    load     i64       4                
    iloadx   u32 /1                     
    widen    i64/u32                    
    load     i64       27               
    jumpeq   i64       #6225            
    jump               #6226            
#6225: 
    load     i64       1                
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    jump               #6227            
    jump               #6224            
#6226: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /4/1                   
    load     u64       0                
    setarg   u64 /4                     
    load     u64       sp               
    setarg   u64 /3                     
    load     u64       x                
    load     i64       4                
    iloadx   u32 /1                     
    widen    i64/u32                    
    setarg   i64 /2                     
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /4    &qq_packed.var_loadpacked
#6224: 
    jump               #6219            
#6222: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /5/1                   
    load     u64       sp               
    setarg   u64 /5                     
    load     u64       x                
    load     i64       3                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /4                     
    load     u64       x                
    load     i64       4                
    iloadx   u32 /1                     
    widen    i64/u32                    
    setarg   i64 /3                     
    load     u64       x                
    load     i64       2                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /5    &qq_vars.var_loadbit
    jump               #6219            
#6223: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    setcall      /2/1                   
    load     u64       x                
    setarg   u64 /2                     
    load     u64       "Pushptr"        
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#6219: 
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6229            
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#6229: 
! qq_runx.disploop.refpackend:
#6227: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6230: 
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       x                
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     u64 /1    &pc              
    incrto   u64 /32                    
    jump               #6218            
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6231: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       x                
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       14               
    jumpeq   i64 /1    #6233            
    load     i64       16               
    jumpeq   i64 /1    #6234            
    load     i64       15               
    jumpeq   i64       #6235            
    jump               #6236            
#6233: 
    load     u64       y                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6238            
    setcall      /1/1                   
    load     u64       y                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6238: 
    load     u64       x                
    iload    mem:16                     
    load     u64       y                
    load     i64       8                
    iloadx   u64 /1                     
    istore   mem:16                     
    jump               #6232            
#6234: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /3/1                   
    load     u64       y                
    load     i64       4                
    iloadx   u32 /1                     
    widen    i64/u32                    
    setarg   i64 /3                     
    load     u64       x                
    setarg   u64 /2                     
    load     u64       y                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &qq_packed.var_storepacked
    jump               #6232            
#6235: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /5/1                   
    load     u64       y                
    load     i64       3                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /5                     
    load     u64       y                
    load     i64       4                
    iloadx   u32 /1                     
    widen    i64/u32                    
    setarg   i64 /4                     
    load     u64       x                
    setarg   u64 /3                     
    load     u64       y                
    load     i64       2                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       y                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /5    &qq_vars.var_storebit
    jump               #6232            
#6236: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    setcall      /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       "Popptr"         
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#6232: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6239: 
    load     u64       sp               
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    load     i64       0                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    load     i64       8                
    istorex  i64 /1                     
    load     u64 /1    &sp              
    decrto   u64 /16                    
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6240: 
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       x                
    load     u64       sp               
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       x                
    load     i64       0                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       x                
    load     i64       8                
    istorex  i64 /1                     
    load     u64 /1    &sp              
    decrto   u64 /16                    
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6241: 
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     u64       sp               
    load     i64       1                
    subpx    u64 /16                    
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       0                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       1                
    subpx    u64 /16                    
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6243            
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#6243: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6244: 
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6246            
    load     u64       sp               
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       0                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       8                
    istorex  i64 /1                     
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_duplu
    setcall      /1/1                   
    load     u64       &vx              
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6246: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6247: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       x                
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    swapstk      /1/2                   
    jumpne   i64 /1    #6249            
    load     i64       14               
    jumpne   i64       #6249            
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       0                
    istorex  i64 /1                     
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       8                
    istorex  i64 /1                     
    load     u64       y                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       0                
    istorex  i64 /1                     
    load     u64       y                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    istorex  i64 /1                     
    load     u64       &vx              
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       y                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       0                
    istorex  i64 /1                     
    load     u64       &vx              
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       y                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    istorex  i64 /1                     
    jump               #6248            
#6249: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callp        /2    &qq_runaux.k_swap
#6248: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6250: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_runaux.k_convrefpack
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6251: 
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6252: 
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       16               
    jumpeq   i64       #6254            
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "jumpptr?"       
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#6254: 
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pc               
    load     u64 /1    &sp              
    decrto   u64 /16                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6255: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpne   i64       #6257            
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    jumpf    i64       #6259            
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6258            
#6259: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
#6258: 
    jump               #6256            
#6257: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall  i64 /1/1                   
    load     u64       x                
    setarg   u64 /1                     
    callf    i64 /1    &qq_vars.var_istruel
    jumpf    i64       #6261            
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6260            
#6261: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
#6260: 
    load     u64       x                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6263            
    setcall      /1/1                   
    load     u64       x                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6263: 
#6256: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6264: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpne   i64       #6266            
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    jumpt    i64       #6268            
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6267            
#6268: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
#6267: 
    jump               #6265            
#6266: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall  i64 /1/1                   
    load     u64       x                
    setarg   u64 /1                     
    callf    i64 /1    &qq_vars.var_istruel
    jumpt    i64       #6270            
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6269            
#6270: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
#6269: 
    load     u64       x                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6272            
    setcall      /1/1                   
    load     u64       x                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6272: 
#6265: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6273: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    swapstk      /1/2                   
    jumpne   i64 /1    #6275            
    load     i64       1                
    jumpne   i64       #6275            
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    jumpne   i64       #6277            
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6276            
#6277: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
#6276: 
    jump               #6274            
#6275: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall  i64 /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callf    i64 /2    &qq_vars.var_equal
    jumpf    i64       #6279            
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6278            
#6279: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
#6278: 
#6274: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6280: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    swapstk      /1/2                   
    jumpne   i64 /1    #6282            
    load     i64       1                
    jumpne   i64       #6282            
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    jumpeq   i64       #6284            
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6283            
#6284: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
#6283: 
    jump               #6281            
#6282: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall  i64 /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callf    i64 /2    &qq_vars.var_equal
    jumpt    i64       #6286            
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6285            
#6286: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
#6285: 
#6281: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6287: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    swapstk      /1/2                   
    jumpne   i64 /1    #6289            
    load     i64       1                
    jumpne   i64       #6289            
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    jumpge   i64       #6291            
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6290            
#6291: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
#6290: 
    jump               #6288            
#6289: 
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    swapstk      /1/2                   
    jumpne   i64 /1    #6292            
    load     i64       2                
    jumpne   i64       #6292            
    load     u64       x                
    load     i64       8                
    iloadx   r64 /1                     
    load     u64       y                
    load     i64       8                
    iloadx   r64 /1                     
    jumpge   r64       #6294            
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6293            
#6294: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
#6293: 
    jump               #6288            
#6292: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall  i64 /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callf    i64 /2    &qq_vars.var_compare
    load     i64       0                
    jumpge   i64       #6296            
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6295            
#6296: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
#6295: 
#6288: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6297: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    swapstk      /1/2                   
    jumpne   i64 /1    #6299            
    load     i64       1                
    jumpne   i64       #6299            
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    jumpgt   i64       #6301            
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6300            
#6301: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
#6300: 
    jump               #6298            
#6299: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall  i64 /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callf    i64 /2    &qq_vars.var_compare
    load     i64       0                
    jumpgt   i64       #6303            
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6302            
#6303: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
#6302: 
#6298: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6304: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    swapstk      /1/2                   
    jumpne   i64 /1    #6306            
    load     i64       1                
    jumpne   i64       #6306            
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    jumplt   i64       #6308            
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6307            
#6308: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
#6307: 
    jump               #6305            
#6306: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall  i64 /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callf    i64 /2    &qq_vars.var_compare
    load     i64       0                
    jumplt   i64       #6310            
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6309            
#6310: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
#6309: 
#6305: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6311: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    swapstk      /1/2                   
    jumpne   i64 /1    #6313            
    load     i64       1                
    jumpne   i64       #6313            
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    jumple   i64       #6315            
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6314            
#6315: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
#6314: 
    jump               #6312            
#6313: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall  i64 /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callf    i64 /2    &qq_vars.var_compare
    load     i64       0                
    jumple   i64       #6317            
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6316            
#6317: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
#6316: 
#6312: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6318: 
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64       #6320            
    jump               #6193            
#6320: 
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    jumpne   i64       #6322            
    load     u64       pc               
    load     i64       2                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6321            
#6322: 
    load     i64       3                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
#6321: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6323: 
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64       #6325            
    jump               #6193            
#6325: 
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    jumpeq   i64       #6327            
    load     u64       pc               
    load     i64       2                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6326            
#6327: 
    load     i64       3                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
#6326: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6328: 
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64       #6330            
    jump               #6193            
#6330: 
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    jumpge   i64       #6332            
    load     u64       pc               
    load     i64       2                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6331            
#6332: 
    load     i64       3                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
#6331: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6333: 
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64       #6335            
    jump               #6193            
#6335: 
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    jumpgt   i64       #6337            
    load     u64       pc               
    load     i64       2                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6336            
#6337: 
    load     i64       3                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
#6336: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6338: 
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64       #6340            
    jump               #6193            
#6340: 
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    jumplt   i64       #6342            
    load     u64       pc               
    load     i64       2                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6341            
#6342: 
    load     i64       3                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
#6341: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6343: 
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64       #6345            
    jump               #6193            
#6345: 
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    jumple   i64       #6347            
    load     u64       pc               
    load     i64       2                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6346            
#6347: 
    load     i64       3                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
#6346: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6348: 
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64       #6350            
    jump               #6193            
#6350: 
    load     u64       fp               
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       y                
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    jumpne   i64       #6352            
    load     u64       pc               
    load     i64       2                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6351            
#6352: 
    load     i64       3                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
#6351: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6353: 
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64       #6355            
    jump               #6193            
#6355: 
    load     u64       fp               
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       y                
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    jumpeq   i64       #6357            
    load     u64       pc               
    load     i64       2                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6356            
#6357: 
    load     i64       3                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
#6356: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6358: 
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64       #6360            
    jump               #6193            
#6360: 
    load     u64       fp               
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       y                
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    jumpge   i64       #6362            
    load     u64       pc               
    load     i64       2                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6361            
#6362: 
    load     i64       3                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
#6361: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6363: 
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64       #6365            
    jump               #6193            
#6365: 
    load     u64       fp               
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       y                
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    jumpgt   i64       #6367            
    load     u64       pc               
    load     i64       2                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6366            
#6367: 
    load     i64       3                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
#6366: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6368: 
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64       #6370            
    jump               #6193            
#6370: 
    load     u64       fp               
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       y                
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    jumplt   i64       #6372            
    load     u64       pc               
    load     i64       2                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6371            
#6372: 
    load     i64       3                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
#6371: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6373: 
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64       #6375            
    jump               #6193            
#6375: 
    load     u64       fp               
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       y                
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    jumple   i64       #6377            
    load     u64       pc               
    load     i64       2                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6376            
#6377: 
    load     i64       3                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
#6376: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6378: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64       sp               
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    swapstk      /1/2                   
    jumpne   i64 /1    #6380            
    load     i64       1                
    jumpne   i64       #6380            
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    jumpne   i64       #6382            
    load     u64 /1    &sp              
    decrto   u64 /16                    
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6381            
#6382: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
#6381: 
    jump               #6379            
#6380: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall  i64 /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callf    i64 /2    &qq_runaux.k_when
    store    i64       res              
    load     u64       y                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6384            
    setcall      /1/1                   
    load     u64       y                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6384: 
    load     i64       res              
    jumpf    i64       #6386            
    load     u64       x                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6388            
    setcall      /1/1                   
    load     u64       x                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6388: 
    load     u64 /1    &sp              
    decrto   u64 /16                    
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6385            
#6386: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
#6385: 
#6379: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6389: 
! qq_runx.disploop.jwhenne:
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64       sp               
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    swapstk      /1/2                   
    jumpne   i64 /1    #6392            
    load     i64       1                
    jumpne   i64       #6392            
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    jumpeq   i64       #6394            
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6393            
#6394: 
    load     u64 /1    &sp              
    decrto   u64 /16                    
    load     u64 /1    &pc              
    incrto   u64 /32                    
#6393: 
    jump               #6391            
#6392: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall  i64 /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callf    i64 /2    &qq_runaux.k_when
    store    i64       res              
    load     u64       y                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6396            
    setcall      /1/1                   
    load     u64       y                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6396: 
    load     i64       res              
    jumpt    i64       #6398            
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6397            
#6398: 
    load     u64       x                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6400            
    setcall      /1/1                   
    load     u64       x                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6400: 
    load     u64 /1    &sp              
    decrto   u64 /16                    
    load     u64 /1    &pc              
    incrto   u64 /32                    
#6397: 
#6391: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6401: 
    jump               #6180            
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6402: 
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #6404            
    load     i64       18               
    jumpeq   i64       #6404            
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    setcall      /2/1                   
    load     u64       &qq_tables.ttname
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /2                     
    load     u64       "switch not int" 
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#6404: 
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    store    i64       n                
    load     i64       n                
    load     u64       pc               
    load     i64       12               
    iloadx   i16 /1                     
    widen    i64/i16                    
    jumplt   i64 /1    #6406            
    load     u64       pc               
    load     i64       14               
    iloadx   i16 /1                     
    widen    i64/i16                    
    jumpgt   i64       #6406            
    load     u64       pc               
    load     i64       n                
    addpx    u64 /32                    
    load     u64       pc               
    load     i64       12               
    iloadx   i16 /1                     
    widen    i64/i16                    
    subpx    u64 /32                    
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6405            
#6406: 
    load     u64       pc               
    load     u64       pc               
    load     i64       14               
    iloadx   i16 /1                     
    widen    i64/i16                    
    addpx    u64 /32                    
    load     u64       pc               
    load     i64       12               
    iloadx   i16 /1                     
    widen    i64/i16                    
    subpx    u64 /32                    
    load     i64       2                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
#6405: 
    load     u64 /1    &sp              
    decrto   u64 /16                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6407: 
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       x                
    jump               #6408            
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6409: 
    load     u64       fp               
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       x                
! qq_runx.disploop.doto:
#6408: 
    load     u64       x                
    load     i64       8                
    addpx    u64 /1                     
    decrload i64 /1                     
    jumpf    i64       #6411            
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6410            
#6411: 
    load     i64       2                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
#6410: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6412: 
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       x                
    jump               #6413            
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6414: 
    load     u64       fp               
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       x                
! qq_runx.disploop.doforfci:
#6413: 
    load     u64       x                
    load     i64       8                
    addpx    u64 /1                     
    incrto   i64 /1                     
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       pc               
    load     i64       2                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    jumpgt   i64       #6416            
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6415            
#6416: 
    load     i64       3                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
#6415: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6417: 
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       x                
    load     u64       pc               
    load     i64       2                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       y                
    jump               #6418            
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6419: 
    load     u64       fp               
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       x                
    load     u64       fp               
    load     u64       pc               
    load     i64       2                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       y                
! qq_runx.disploop.doforff:
#6418: 
    load     u64       x                
    load     i64       8                
    addpx    u64 /1                     
    incrto   i64 /1                     
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    jumpgt   i64       #6421            
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6420            
#6421: 
    load     i64       3                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
#6420: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6422: 
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     i64       20               
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     u64       sp               
    load     i64       8                
    istorex  u64 /1                     
    load     u64       fp               
    load     u64       sp               
    load     i64       4                
    istorex  u32 /1                     
    load     u64       sp               
    store    u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6423: 
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       17               
    jumpeq   i64       #6425            
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Probably undefined function"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#6425: 
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       d                
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       21               
    jumpne   i64       #6427            
    load     u64       d                
    load     i64       56               
    iloadx   u64 /1                     
    store    u64       d                
#6427: 
    load     u64       d                
    load     i64       104              
    iloadx   i16 /1                     
    widen    i64/i16                    
    load     u64       pc               
    load     i64       9                
    iloadx   u8  /1                     
    widen    i64/u8                     
    jumpeq   i64       #6429            
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    setcall      /2                     
    setcall  u64 /2                     
    load     u64       0                
    setarg   u64 /2                     
    load     u64       d                
    load     i64       104              
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /1                     
    callf    u64 /2    &msysc.strint    
    setarg   u64 /2                     
    load     u64       "Callptr: wrong # params; need:"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#6429: 
    load     i64       20               
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     u64       sp               
    load     i64       8                
    istorex  u64 /1                     
    load     u64       fp               
    load     u64       sp               
    load     i64       4                
    istorex  u32 /1                     
    load     u64       sp               
    store    u64       fp               
    load     u64       d                
    load     i64       80               
    iloadx   u64 /1                     
    store    u64       pc               
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6430: 
! qq_runx.disploop.doretproc:
#6431: 
    load     u64       pc               
    load     i64       12               
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       av_2             
    load     i64       av_2             
    load     i64       0                
    jumple   i64       #6434            
#6432: 
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6436            
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6436: 
    load     u64 /1    &sp              
    decrto   u64 /16                    
    to       i64       #6432            
    opnd     i64       av_2             
#6434: 
    load     u64       pc               
    load     i64       9                
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       n                
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pc               
    load     u64       fp               
    load     u64       -4294967296      
    bitand   i64                        
    load     u64       sp               
    load     i64       4                
    iloadx   u32 /1                     
    widen    i64/u32                    
    bitor    u64                        
    store    u64       fp               
    load     u64 /1    &sp              
    decrto   u64 /16                    
    load     i64       n                
    store    i64       av_3             
    load     i64       av_3             
    load     i64       0                
    jumple   i64       #6439            
#6437: 
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6441            
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6441: 
    load     u64 /1    &sp              
    decrto   u64 /16                    
    to       i64       #6437            
    opnd     i64       av_3             
#6439: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6442: 
    load     u64       fp               
    load     u64       pc               
    load     i64       14               
    iloadx   i16 /1                     
    widen    i64/i16                    
    addpx    u64 /1                     
    store    u64       x                
    load     u64       sp               
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       x                
    load     i64       0                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       x                
    load     i64       8                
    istorex  i64 /1                     
    load     u64 /1    &sp              
    decrto   u64 /16                    
    jump               #6431            
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6443: 
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       d                
    load     u64       d                
    load     i64       114              
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       moduleno         
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     i64       20               
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     u64       sp               
    load     i64       8                
    istorex  u64 /1                     
    load     u64       &qq_decls.modules
    load     i64       moduleno         
    iloadx   u64 /8                     
    load     i64       56               
    iloadx   u64 /1                     
    store    u64       pc               
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6444: 
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pc               
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6445: 
    load     u64       pc               
    load     i64       9                
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       n                
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /4/1                   
    load     i64       n                
    setarg   i64 /4                     
    load     u64       sp               
    load     i64       n                
    subpx    u64 /16                    
    setarg   u64 /3                     
    load     u64       sp               
    load     i64       n                
    subpx    u64 /16                    
    load     i64       1                
    addpx    u64 /16                    
    setarg   u64 /2                     
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /4    &qq_calldll.calldll
    load     i64       n                
    load     u64 /1    &sp              
    subpxto  u64 /16                    
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6446: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall  u64 /2/1                   
    load     u64       sp               
    setarg   u64 /2                     
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callf    u64 /2    &qq_host.callhostfunction
    store    u64       sp               
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6447: 
    load     u64       pc               
    load     i64       9                
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       av_4             
    load     i64       av_4             
    load     i64       0                
    jumple   i64       #6450            
#6448: 
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6452            
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6452: 
    load     u64 /1    &sp              
    decrto   u64 /16                    
    to       i64       #6448            
    opnd     i64       av_4             
#6450: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6453: 
    load     i64       1                
    store    i64       qq_decls.stopped 
    load     u64       sp               
    store    u64       qq_decls.sptr    
    jump               #6175            
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6454: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall  u64 /3/1                   
    load     u64       pc               
    load     i64       12               
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /3                     
    load     u64       pc               
    load     i64       14               
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callf    u64 /3    &qq_runaux.k_makelist
    store    u64       sp               
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6455: 
    load     u64       pc               
    load     i64       12               
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       n                
    load     u64       sp               
    load     u64       pc               
    load     i64       12               
    iloadx   i16 /1                     
    widen    i64/i16                    
    subpx    u64 /16                    
    load     i64       1                
    addpx    u64 /16                    
    store    u64       x                
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /4/1                   
    load     u64       pc               
    load     i64       16               
    iloadx   i32 /1                     
    widen    i64/i32                    
    setarg   i64 /4                     
    load     u64       pc               
    load     i64       12               
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /3                     
    load     u64       x                
    setarg   u64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callp        /4    &qq_records.var_make_record
    load     u64       x                
    store    u64       sp               
    load     u64       0                
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       4                
    addpx    u64 /1                     
    load     i64       1                
    storebit u8                         
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6456: 
    load     u64       sp               
    load     u64       pc               
    load     i64       12               
    iloadx   i16 /1                     
    widen    i64/i16                    
    subpx    u64 /16                    
    load     i64       1                
    addpx    u64 /16                    
    store    u64       x                
    setcall      /6/1                   
    load     u64       pc               
    load     i64       20               
    iloadx   i32 /1                     
    widen    i64/i32                    
    setarg   i64 /6                     
    load     u64       pc               
    load     i64       16               
    iloadx   i32 /1                     
    widen    i64/i32                    
    setarg   i64 /5                     
    load     u64       pc               
    load     i64       12               
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /4                     
    load     u64       pc               
    load     i64       14               
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /3                     
    load     u64       x                
    setarg   u64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callp        /6    &qq_arrays.var_make_array
    load     u64       x                
    store    u64       sp               
    load     u64       0                
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       4                
    addpx    u64 /1                     
    load     i64       1                
    storebit u8                         
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6457: 
    jump               #6180            
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6458: 
    load     u64       pc               
    load     i64       12               
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       n                
    load     u64       sp               
    load     i64       n                
    subpx    u64 /16                    
    load     i64       1                
    addpx    u64 /16                    
    store    u64       x                
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /4/1                   
    load     u64       pc               
    load     i64       16               
    iloadx   i32 /1                     
    widen    i64/i32                    
    setarg   i64 /4                     
    load     i64       n                
    setarg   i64 /3                     
    load     u64       x                
    setarg   u64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callp        /4    &qq_packed.var_make_struct
    load     u64       x                
    store    u64       sp               
    load     u64       0                
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       4                
    addpx    u64 /1                     
    load     i64       1                
    storebit u8                         
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6459: 
    load     u64       pc               
    load     i64       12               
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       n                
    load     u64       sp               
    load     i64       n                
    subpx    u64 /16                    
    load     i64       1                
    addpx    u64 /16                    
    store    u64       x                
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /3/1                   
    load     i64       n                
    setarg   i64 /3                     
    load     u64       x                
    setarg   u64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callp        /3    &qq_sets.var_make_set
    load     u64       x                
    store    u64       sp               
    load     u64       0                
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       4                
    addpx    u64 /1                     
    load     i64       1                
    storebit u8                         
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6460: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64       sp               
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    swapstk      /1/2                   
    jumpne   i64 /1    #6463            
    load     i64       1                
    jumpeq   i64       #6462            
#6463: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "makerange/not int"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#6462: 
    load     i64       4                
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    store    i64       lower            
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    store    i64       upper            
    load     i64       lower            
    load     i64       -281474976710656 
    jumplt   i64 /1    #6466            
    load     i64       281474976710655  
    jumple   i64       #6465            
#6466: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Range lwb bounds"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#6465: 
    load     i64       upper            
    load     u64       sp               
    load     i64       8                
    istorex  u64 /1                     
    load     i64       lower            
    load     u64       sp               
    load     i64       16               
    load     i64       63               
    storebf  i64                        
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6467: 
    load     u64       pc               
    load     i64       12               
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       n                
    load     u64       sp               
    load     i64       n                
    load     i64       2                
    mul      i64                        
    subpx    u64 /16                    
    load     i64       1                
    addpx    u64 /16                    
    store    u64       x                
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /3/1                   
    load     i64       n                
    setarg   i64 /3                     
    load     u64       x                
    setarg   u64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callp        /3    &qq_dicts.var_make_dict
    load     u64       x                
    store    u64       sp               
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6468: 
    load     u64       sp               
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       0                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       8                
    istorex  i64 /1                     
    load     u64       &vx              
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       9                
    jumpeq   i64       #6470            
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Not str"        
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#6470: 
    load     u64       &vx              
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pp               
    load     u64       pp               
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       0                
    jumpne   i64       #6472            
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Null str"       
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#6472: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /3/1                   
    load     u64       sp               
    setarg   u64 /3                     
    load     u64       pp               
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     u64       pp               
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &qq_decimal.var_make_dec_str
    load     u64       &vx              
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6474            
    setcall      /1/1                   
    load     u64       &vx              
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6474: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6475: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /2/1                   
    load     u64       pc               
    load     i64       12               
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /2    &qq_runaux.k_incrptr
    load     u64 /1    &sp              
    decrto   u64 /16                    
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6476: 
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       x                
    jump               #6477            
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6478: 
! qq_runx.disploop.jincrtof:
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       x                
! qq_runx.disploop.doincrto:
#6477: 
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #6481            
    load     i64       14               
    jumpeq   i64 /1    #6482            
    load     i64       16               
    jumpeq   i64 /1    #6483            
    load     i64       2                
    jumpeq   i64       #6484            
    jump               #6485            
#6481: 
    load     u64       pc               
    load     i64       12               
    iloadx   i16 /1                     
    widen    i64/i16                    
    load     u64       x                
    load     i64       8                
    addpx    u64 /1                     
    addto    i64                        
    jump               #6480            
#6482: 
    load     u64       pc               
    load     i64       12               
    iloadx   i16 /1                     
    widen    i64/i16                    
    load     u64       x                
    load     i64       8                
    addpx    u64 /1                     
    addpxto  u64 /16                    
    jump               #6480            
#6483: 
    load     u64       &qq_tables.ttsize
    load     u64       x                
    load     i64       4                
    iloadx   u32 /1                     
    widen    i64/u32                    
    iloadx   i64 /8                     
    load     u64       pc               
    load     i64       12               
    iloadx   i16 /1                     
    widen    i64/i16                    
    mul      i64                        
    load     u64       x                
    load     i64       8                
    addpx    u64 /1                     
    addpxto  u64 /1                     
    jump               #6480            
#6484: 
    load     u64       pc               
    load     i64       12               
    iloadx   i16 /1                     
    widen    i64/i16                    
    float    r64/i64                    
    load     u64       x                
    load     i64       8                
    addpx    u64 /1                     
    addto    r64                        
    jump               #6480            
#6485: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    setcall      /2/1                   
    load     u64       x                
    setarg   u64 /2                     
    load     u64       "incrto"         
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#6480: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
! qq_runx.disploop.jincrtofx:
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6487: 
    load     u64       sp               
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       0                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       8                
    istorex  i64 /1                     
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /2/1                   
    load     u64       sp               
    setarg   u64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /2    &qq_vars.var_loadptr
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     u64       &vx              
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       0                
    istorex  i64 /1                     
    load     u64       &vx              
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    setcall      /2/1                   
    load     u64       pc               
    load     i64       12               
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /2    &qq_runaux.k_incrptr
    load     u64 /1    &sp              
    decrto   u64 /16                    
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6488: 
    load     u64       sp               
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       0                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       8                
    istorex  i64 /1                     
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /2/1                   
    load     u64       pc               
    load     i64       12               
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /2    &qq_runaux.k_incrptr
    load     u64 /1    &sp              
    decrto   u64 /16                    
    setcall      /2/1                   
    load     u64 /1    &sp              
    incrload u64 /16                    
    setarg   u64 /2                     
    load     u64       &vx              
    setarg   u64 /1                     
    callp        /2    &qq_vars.var_loadptr
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6489: 
    load     u64       sp               
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       0                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       8                
    istorex  i64 /1                     
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_neg 
    load     u64       &vx              
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6491            
    setcall      /1/1                   
    load     u64       &vx              
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6491: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6492: 
    load     u64       sp               
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       0                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       8                
    istorex  i64 /1                     
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_abs 
    load     u64       &vx              
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6494            
    setcall      /1/1                   
    load     u64       &vx              
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6494: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6495: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall  i64 /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callf    i64 /1    &qq_vars.var_istruel
    toboolf  i64/i64                    
    store    i64       res              
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6497            
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6497: 
    load     i64       1                
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     i64       res              
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6498: 
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpne   i64       #6500            
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    bitnot   i64                        
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    jump               #6499            
#6500: 
    load     u64       sp               
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       0                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       8                
    istorex  i64 /1                     
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_inot
    load     u64       &vx              
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6502            
    setcall      /1/1                   
    load     u64       &vx              
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6502: 
#6499: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6503: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall  i64 /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callf    i64 /1    &qq_vars.var_istruel
    store    i64       n                
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6505            
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6505: 
    load     i64       1                
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     i64       n                
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6506: 
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       9                
    jumpeq   i64       #6508            
    jump               #6509            
#6508: 
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   i64 /1                     
    jumpf    i64       #6511            
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    store    i64       n                
    jump               #6510            
#6511: 
    load     i64       0                
    store    i64       n                
#6510: 
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
    load     i64       1                
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     i64       n                
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    jump               #6507            
#6509: 
    setcall      /2/1                   
    load     u64       sp               
    setarg   u64 /2                     
    load     u64       "ASC"            
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#6507: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6512: 
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpne   i64       #6514            
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /2/1                   
    load     u64       sp               
    setarg   u64 /2                     
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callp        /2    &qq_strings.var_makechar
    jump               #6513            
#6514: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    setcall      /2/1                   
    load     u64       sp               
    setarg   u64 /2                     
    load     u64       "CHR"            
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#6513: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6515: 
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #6517            
    load     i64       2                
    jumpeq   i64       #6518            
    jump               #6519            
#6517: 
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    sqr      i64                        
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    jump               #6516            
#6518: 
    load     u64       sp               
    load     i64       8                
    iloadx   r64 /1                     
    sqr      r64                        
    load     u64       sp               
    load     i64       8                
    istorex  r64 /1                     
    jump               #6516            
#6519: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    setcall      /2/1                   
    load     u64       sp               
    setarg   u64 /2                     
    load     u64       "sqr"            
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#6516: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6520: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /2/1                   
    load     u64       pc               
    load     i64       16               
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /2    &qq_runaux.k_maths
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6521: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /3/1                   
    load     u64       pc               
    load     i64       16               
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /3                     
    load     u64       sp               
    setarg   u64 /2                     
    load     u64       sp               
    load     i64       1                
    subpx    u64 /16                    
    setarg   u64 /1                     
    callp        /3    &qq_runaux.k_maths2
    load     u64 /1    &sp              
    decrto   u64 /16                    
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6522: 
    jump               #6180            
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6523: 
    jump               #6180            
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6524: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_runaux.k_len 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6525: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_runaux.k_lwb 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6526: 
! qq_runx.disploop.jupb:
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_runaux.k_upb 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6528: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /3/1                   
    load     u64       &upper           
    setarg   u64 /3                     
    load     u64       &lower           
    setarg   u64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /3    &qq_runaux.k_bounds
    load     u64       pc               
    load     i64       9                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       2                
    jumpne   i64       #6530            
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6532            
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6532: 
    load     i64       1                
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     i64       lower            
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     i64       1                
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     i64       upper            
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    jump               #6529            
#6530: 
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6534            
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6534: 
! qq_runx.disploop.billy:
    load     i64       4                
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     i64       lower            
    load     u64       sp               
    load     i64       16               
    load     i64       63               
    storebf  i64                        
    load     i64       upper            
    load     u64       sp               
    load     i64       8                
    istorex  u64 /1                     
#6529: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6536: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall  i64 /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callf    i64 /1    &qq_runaux.k_bytesize
    store    i64       res              
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6538            
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6538: 
    load     i64       1                
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     i64       res              
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6539: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall  i64 /2/1                   
    load     u64       pc               
    load     i64       9                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callf    i64 /2    &qq_runaux.k_type
    store    i64       n                
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6541            
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6541: 
    load     i64       18               
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     i64       n                
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6542: 
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       6                
    jumpeq   i64 /1    #6544            
    load     i64       3                
    jumpeq   i64       #6545            
    jump               #6546            
#6544: 
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       28               
    iloadx   u32 /1                     
    widen    i64/u32                    
    store    i64       n                
    jump               #6543            
#6545: 
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       n                
    jump               #6543            
#6546: 
    setcall      /2/1                   
    load     u64       sp               
    setarg   u64 /2                     
    load     u64       "Dictitems/digits"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#6543: 
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6548            
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6548: 
    load     i64       1                
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     i64       n                
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6549: 
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64       #6551            
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "isfound"        
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#6551: 
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     i64       -9223372036854775808
    setne    i64                        
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6552: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_runaux.k_minval
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6553: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_runaux.k_maxval
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6554: 
    load     i64       0                
    store    i64       n                
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       14               
    jumpne   i64       #6556            
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       14               
    jumpeq   i64 /1    #6559            
    load     i64       16               
    jumpeq   i64 /1    #6559            
    load     i64       15               
    jumpne   i64       #6558            
#6559: 
    load     i64       1                
    store    i64       n                
#6558: 
    jump               #6555            
#6556: 
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    jumpne   i64       #6561            
    load     i64       1                
    store    i64       n                
#6561: 
#6555: 
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6563            
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6563: 
    load     i64       1                
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     i64       n                
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6564: 
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    seteq    i64                        
    store    i64       res              
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6566            
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6566: 
    load     i64       1                
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     i64       res              
    load     u64       pc               
    load     i64       9                
    iloadx   u8  /1                     
    widen    i64/u8                     
    bitxor   i64                        
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6567: 
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       pc               
    load     i64       16               
    iloadx   i32 /1                     
    widen    i64/i32                    
    jumpeq   i64       #6569            
    load     u64       sp               
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       0                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       8                
    istorex  i64 /1                     
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /3/1                   
    load     u64       sp               
    setarg   u64 /3                     
    load     u64       pc               
    load     i64       16               
    iloadx   i32 /1                     
    widen    i64/i32                    
    setarg   i64 /2                     
    load     u64       &vx              
    setarg   u64 /1                     
    callp        /3    &qq_vars.var_convert
    load     u64       &vx              
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6571            
    setcall      /1/1                   
    load     u64       &vx              
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6571: 
#6569: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6572: 
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6573: 
! qq_runx.disploop.jadd:
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    swapstk      /1/2                   
    jumpne   i64 /1    #6576            
    load     i64       1                
    jumpne   i64       #6576            
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       8                
    addpx    u64 /1                     
    addto    i64                        
    jump               #6575            
#6576: 
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    swapstk      /1/2                   
    jumpne   i64 /1    #6577            
    load     i64       2                
    jumpne   i64       #6577            
    load     u64       y                
    load     i64       8                
    iloadx   r64 /1                     
    load     u64       sp               
    load     i64       8                
    addpx    u64 /1                     
    addto    r64                        
    jump               #6575            
#6577: 
    load     u64       sp               
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       0                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       8                
    istorex  i64 /1                     
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /2    &qq_vars.var_add 
    load     u64       &vx              
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6579            
    setcall      /1/1                   
    load     u64       &vx              
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6579: 
    load     u64       y                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6581            
    setcall      /1/1                   
    load     u64       y                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6581: 
#6575: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6582: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    swapstk      /1/2                   
    jumpne   i64 /1    #6584            
    load     i64       1                
    jumpne   i64       #6584            
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       8                
    addpx    u64 /1                     
    subto    i64                        
    jump               #6583            
#6584: 
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    swapstk      /1/2                   
    jumpne   i64 /1    #6585            
    load     i64       2                
    jumpne   i64       #6585            
    load     u64       y                
    load     i64       8                
    iloadx   r64 /1                     
    load     u64       sp               
    load     i64       8                
    addpx    u64 /1                     
    subto    r64                        
    jump               #6583            
#6585: 
    load     u64       sp               
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       0                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       8                
    istorex  i64 /1                     
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /2    &qq_vars.var_sub 
    load     u64       &vx              
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6587            
    setcall      /1/1                   
    load     u64       &vx              
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6587: 
    load     u64       y                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6589            
    setcall      /1/1                   
    load     u64       y                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6589: 
#6583: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6590: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    swapstk      /1/2                   
    jumpne   i64 /1    #6592            
    load     i64       1                
    jumpne   i64       #6592            
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       8                
    addpx    u64 /1                     
    multo    i64                        
    jump               #6591            
#6592: 
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    swapstk      /1/2                   
    jumpne   i64 /1    #6593            
    load     i64       2                
    jumpne   i64       #6593            
    load     u64       y                
    load     i64       8                
    iloadx   r64 /1                     
    load     u64       sp               
    load     i64       8                
    addpx    u64 /1                     
    multo    r64                        
    jump               #6591            
#6593: 
    load     u64       sp               
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       0                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       8                
    istorex  i64 /1                     
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /2    &qq_vars.var_mul 
    load     u64       &vx              
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6595            
    setcall      /1/1                   
    load     u64       &vx              
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6595: 
    load     u64       y                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6597            
    setcall      /1/1                   
    load     u64       y                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6597: 
#6591: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6598: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64       sp               
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       0                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       8                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    swapstk      /1/2                   
    jumpne   i64 /1    #6600            
    load     i64       2                
    jumpne   i64       #6600            
    load     u64       y                
    load     i64       8                
    iloadx   r64 /1                     
    load     u64       sp               
    load     i64       8                
    addpx    u64 /1                     
    divto    r64                        
    jump               #6599            
#6600: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /2    &qq_vars.var_div 
    load     u64       &vx              
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6602            
    setcall      /1/1                   
    load     u64       &vx              
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6602: 
    load     u64       y                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6604            
    setcall      /1/1                   
    load     u64       y                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6604: 
#6599: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6605: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64       sp               
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       0                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       8                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    swapstk      /1/2                   
    jumpne   i64 /1    #6607            
    load     i64       1                
    jumpne   i64       #6607            
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       8                
    addpx    u64 /1                     
    idivto   i64                        
    jump               #6606            
#6607: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /2    &qq_vars.var_idiv
    load     u64       &vx              
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6609            
    setcall      /1/1                   
    load     u64       &vx              
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6609: 
    load     u64       y                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6611            
    setcall      /1/1                   
    load     u64       y                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6611: 
#6606: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6612: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64       sp               
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       0                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       8                
    istorex  i64 /1                     
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /2    &qq_vars.var_irem
    load     u64       &vx              
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6614            
    setcall      /1/1                   
    load     u64       &vx              
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6614: 
    load     u64       y                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6616            
    setcall      /1/1                   
    load     u64       y                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6616: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6617: 
    load     u64       sp               
    store    u64       y                
    load     u64       sp               
    load     i64       1                
    subpx    u64 /16                    
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    swapstk      /1/2                   
    jumpne   i64 /1    #6620            
    load     i64       1                
    jumpeq   i64       #6619            
#6620: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "divrem"         
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#6619: 
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    idiv     i64                        
    store    i64       lower            
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "X.VALUE="       
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    irem     i64                        
    load     u64       y                
    load     i64       8                
    istorex  i64 /1                     
    load     i64       lower            
    load     u64       x                
    load     i64       8                
    istorex  i64 /1                     
    setcall  u64 /3/1                   
    load     i64       2                
    setarg   i64 /3                     
    load     i64       1                
    setarg   i64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callf    u64 /3    &qq_runaux.k_makelist
    store    u64       sp               
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6621: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    swapstk      /1/2                   
    jumpne   i64 /1    #6623            
    load     i64       1                
    jumpne   i64       #6623            
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       8                
    addpx    u64 /1                     
    bitandto i64                        
    jump               #6622            
#6623: 
    load     u64       sp               
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       0                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       8                
    istorex  i64 /1                     
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /2    &qq_vars.var_iand
    load     u64       &vx              
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6625            
    setcall      /1/1                   
    load     u64       &vx              
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6625: 
    load     u64       y                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6627            
    setcall      /1/1                   
    load     u64       y                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6627: 
#6622: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6628: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    swapstk      /1/2                   
    jumpne   i64 /1    #6630            
    load     i64       1                
    jumpne   i64       #6630            
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       8                
    addpx    u64 /1                     
    bitorto  i64                        
    jump               #6629            
#6630: 
    load     u64       sp               
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       0                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       8                
    istorex  i64 /1                     
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /2    &qq_vars.var_ior 
    load     u64       &vx              
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6632            
    setcall      /1/1                   
    load     u64       &vx              
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6632: 
    load     u64       y                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6634            
    setcall      /1/1                   
    load     u64       y                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6634: 
#6629: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6635: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    swapstk      /1/2                   
    jumpne   i64 /1    #6637            
    load     i64       1                
    jumpne   i64       #6637            
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       8                
    addpx    u64 /1                     
    bitxorto i64                        
    jump               #6636            
#6637: 
    load     u64       sp               
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       0                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       8                
    istorex  i64 /1                     
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /2    &qq_vars.var_ixor
    load     u64       &vx              
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6639            
    setcall      /1/1                   
    load     u64       &vx              
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6639: 
    load     u64       y                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6641            
    setcall      /1/1                   
    load     u64       y                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6641: 
#6636: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6642: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    swapstk      /1/2                   
    jumpne   i64 /1    #6644            
    load     i64       1                
    jumpne   i64       #6644            
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       8                
    addpx    u64 /1                     
    shlto    i64                        
    jump               #6643            
#6644: 
    load     u64       sp               
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       0                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       8                
    istorex  i64 /1                     
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /2    &qq_vars.var_shl 
    load     u64       &vx              
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6646            
    setcall      /1/1                   
    load     u64       &vx              
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6646: 
    load     u64       y                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6648            
    setcall      /1/1                   
    load     u64       y                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6648: 
#6643: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6649: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    swapstk      /1/2                   
    jumpne   i64 /1    #6651            
    load     i64       1                
    jumpne   i64       #6651            
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       8                
    addpx    u64 /1                     
    shrto    i64                        
    jump               #6650            
#6651: 
    load     u64       sp               
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       0                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       8                
    istorex  i64 /1                     
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /2    &qq_vars.var_shr 
    load     u64       &vx              
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6653            
    setcall      /1/1                   
    load     u64       &vx              
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6653: 
    load     u64       y                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6655            
    setcall      /1/1                   
    load     u64       y                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6655: 
#6650: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6656: 
    load     u64       sp               
    store    u64       y                
    load     u64 /1    &sp              
    decrload u64 /16                    
    store    u64       x                
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall  i64 /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callf    i64 /2    &qq_vars.var_in  
    load     u64       pc               
    load     i64       9                
    iloadx   u8  /1                     
    widen    i64/u8                     
    bitxor   i64                        
    store    i64       n                
    load     u64       x                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6658            
    setcall      /1/1                   
    load     u64       x                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6658: 
    load     u64       y                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6660            
    setcall      /1/1                   
    load     u64       y                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6660: 
    load     i64       1                
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     i64       n                
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6661: 
    load     u64       sp               
    store    u64       y                
    load     u64 /1    &sp              
    decrload u64 /16                    
    store    u64       x                
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall  i64 /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callf    i64 /2    &qq_vars.var_inx 
    store    i64       n                
    load     u64       x                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6663            
    setcall      /1/1                   
    load     u64       x                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6663: 
    load     u64       y                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6665            
    setcall      /1/1                   
    load     u64       y                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6665: 
    load     i64       1                
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     i64       n                
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6666: 
    load     u64       sp               
    store    u64       y                
    load     u64 /1    &sp              
    decrload u64 /16                    
    store    u64       x                
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall  i64 /3/1                   
    load     u64       y                
    setarg   u64 /3                     
    load     u64       x                
    setarg   u64 /2                     
    load     u64       pc               
    load     i64       9                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /1                     
    callf    i64 /3    &qq_runaux.k_cmp 
    store    i64       res              
    load     u64       x                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6668            
    setcall      /1/1                   
    load     u64       x                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6668: 
    load     u64       y                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6670            
    setcall      /1/1                   
    load     u64       y                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6670: 
    load     i64       1                
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     i64       res              
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6671: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64       sp               
    store    u64       x                
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall  i64 /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callf    i64 /2    &qq_vars.var_compare
    load     i64       0                
    jumpge   i64       #6673            
    load     u64       y                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6675            
    setcall      /1/1                   
    load     u64       y                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6675: 
    jump               #6672            
#6673: 
    load     u64       x                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6677            
    setcall      /1/1                   
    load     u64       x                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6677: 
    load     u64       y                
    iload    mem:16                     
    load     u64       sp               
    istore   mem:16                     
#6672: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6678: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64       sp               
    store    u64       x                
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall  i64 /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callf    i64 /2    &qq_vars.var_compare
    load     i64       0                
    jumplt   i64       #6680            
    load     u64       y                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6682            
    setcall      /1/1                   
    load     u64       y                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6682: 
    jump               #6679            
#6680: 
    load     u64       x                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6684            
    setcall      /1/1                   
    load     u64       x                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6684: 
    load     u64       y                
    iload    mem:16                     
    load     u64       sp               
    istore   mem:16                     
#6679: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6685: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64       sp               
    iload    mem:16                     
    store    mem:16       vx            
    setcall      /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /2    &qq_vars.var_concat
    load     u64       &vx              
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6687            
    setcall      /1/1                   
    load     u64       &vx              
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6687: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6688: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64       sp               
    iload    mem:16                     
    store    mem:16       vx            
    setcall      /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /2    &qq_vars.var_append
    load     u64       &vx              
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6690            
    setcall      /1/1                   
    load     u64       &vx              
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6690: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6691: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64       sp               
    store    u64       x                
    load     u64       x                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6693            
    load     u64       y                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6693            
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       y                
    load     i64       8                
    iloadx   u64 /1                     
    jumpne   u64       #6693            
    load     i64       1                
    store    i64       res              
    jump               #6692            
#6693: 
    load     i64       0                
    store    i64       res              
#6692: 
    load     u64       x                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6695            
    setcall      /1/1                   
    load     u64       x                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6695: 
    load     u64       y                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6697            
    setcall      /1/1                   
    load     u64       y                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6697: 
    load     i64       1                
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     i64       res              
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6698: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64       sp               
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       0                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       8                
    istorex  i64 /1                     
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /2    &qq_vars.var_power
    load     u64       &vx              
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6700            
    setcall      /1/1                   
    load     u64       &vx              
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6700: 
    load     u64       y                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6702            
    setcall      /1/1                   
    load     u64       y                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6702: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6703: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       x                
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       z                
    load     u64       pc               
    load     i64       16               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpne   i64       #6705            
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       14               
    jumpne   i64       #6705            
    startmx                             
    load     u64       z                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    swapstk      /1/2                   
    jumpne   i64 /1    #6706            
    load     i64       1                
    jumpne   i64       #6706            
    load     i64       1                
    resetmx  i64                        
    jump               #6707            
#6706: 
    load     i64       0                
    endmx    i64                        
#6707: 
    toboolt  u16/i64                    
    jumpf    u16       #6705            
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       z                
    load     i64       8                
    addpx    u64 /1                     
    addto    i64                        
    jump               #6704            
#6705: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /3/1                   
    load     u64       y                
    setarg   u64 /3                     
    load     u64       x                
    setarg   u64 /2                     
    load     u64       pc               
    load     i64       16               
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /1                     
    callp        /3    &qq_vars.var_inplace
    load     u64       y                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6709            
    setcall      /1/1                   
    load     u64       y                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6709: 
#6704: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6710: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       z                
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpne   i64       #6712            
    startmx                             
    load     u64       z                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    swapstk      /1/2                   
    jumpne   i64 /1    #6713            
    load     i64       1                
    jumpne   i64       #6713            
    load     i64       1                
    resetmx  i64                        
    jump               #6714            
#6713: 
    load     i64       0                
    endmx    i64                        
#6714: 
    toboolt  u16/i64                    
    jumpf    u16       #6712            
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       z                
    load     i64       8                
    addpx    u64 /1                     
    addto    i64                        
    jump               #6711            
#6712: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    load     i64       14               
    load     u64       &vx              
    load     i64       0                
    istorex  u32 /1                     
    load     u64       z                
    load     u64       &vx              
    load     i64       8                
    istorex  u64 /1                     
    setcall      /3/1                   
    load     u64       y                
    setarg   u64 /3                     
    load     u64       &vx              
    setarg   u64 /2                     
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /1                     
    callp        /3    &qq_vars.var_inplace
    load     u64       y                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6716            
    setcall      /1/1                   
    load     u64       y                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6716: 
#6711: 
    load     i64       2                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6717: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       z                
    load     u64       z                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    swapstk      /1/2                   
    jumpne   i64 /1    #6719            
    load     i64       1                
    jumpne   i64       #6719            
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       z                
    load     i64       8                
    addpx    u64 /1                     
    addto    i64                        
    jump               #6718            
#6719: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    load     i64       14               
    load     u64       &vx              
    load     i64       0                
    istorex  u32 /1                     
    load     u64       z                
    load     u64       &vx              
    load     i64       8                
    istorex  u64 /1                     
    setcall      /3/1                   
    load     u64       y                
    setarg   u64 /3                     
    load     u64       &vx              
    setarg   u64 /2                     
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /1                     
    callp        /3    &qq_vars.var_inplace
    load     u64       y                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6721            
    setcall      /1/1                   
    load     u64       y                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6721: 
#6718: 
    load     i64       2                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6722: 
    load     u64       fp               
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       z                
    load     u64       z                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpne   i64       #6724            
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    load     u64       z                
    load     i64       8                
    addpx    u64 /1                     
    addto    i64                        
    jump               #6723            
#6724: 
    jump               #6208            
#6723: 
    load     i64       3                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6725: 
    load     u64       fp               
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       z                
    load     u64       z                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpne   i64       #6727            
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    load     u64       z                
    load     i64       8                
    addpx    u64 /1                     
    subto    i64                        
    jump               #6726            
#6727: 
    jump               #6208            
#6726: 
    load     i64       3                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6728: 
    load     u64       fp               
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       z                
    load     u64       z                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpne   i64       #6730            
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    load     u64       z                
    load     i64       8                
    addpx    u64 /1                     
    shlto    i64                        
    jump               #6729            
#6730: 
    jump               #6208            
#6729: 
    load     i64       3                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6731: 
    load     u64       fp               
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       z                
    load     u64       z                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpne   i64       #6733            
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    load     u64       z                
    load     i64       8                
    addpx    u64 /1                     
    shrto    i64                        
    jump               #6732            
#6733: 
    jump               #6208            
#6732: 
    load     i64       3                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6734: 
    jump               #6180            
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6735: 
    jump               #6180            
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6736: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       px               
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64       px               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       14               
    jumpeq   i64       #6738            
    jump               #6739            
#6738: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall  i64 /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       px               
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /2    &qq_vars.var_appendto
    unload   i64                        
    jump               #6737            
#6739: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    setcall      /2/1                   
    load     u64       px               
    setarg   u64 /2                     
    load     u64       "Appendto"       
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#6737: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6740: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       px               
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64       px               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       14               
    jumpeq   i64       #6742            
    jump               #6743            
#6742: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall  i64 /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       px               
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /2    &qq_vars.var_concatto
    unload   i64                        
    jump               #6741            
#6743: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    setcall      /2/1                   
    load     u64       px               
    setarg   u64 /2                     
    load     u64       "Concatto"       
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#6741: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6744: 
    load     u64       &qq_decls.genfieldtable
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    iloadx   u64 /8/-8                  
    store    u64       g                
    load     u64       g                
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       0                
    jumpne   u64       #6746            
    load     u64       g                
    load     i64       0                
    iloadx   u64 /1                     
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       11               
    jumpne   i64       #6746            
    load     u64       &qq_decls.genfieldtable
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    iloadx   u64 /8/-8                  
    load     i64       0                
    iloadx   u64 /1                     
    store    u64       d                
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     u64       d                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       116              
    iloadx   i16 /1                     
    widen    i64/i16                    
    jumpeq   i64       #6748            
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Dot1: wrong type"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#6748: 
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       d                
    load     i64       108              
    iloadx   i16 /1                     
    widen    i64/i16                    
    load     i64       16               
    idiv     i64                        
    addpx    u64 /16                    
    store    u64       x                
    load     u64       x                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6750            
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#6750: 
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6752            
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6752: 
    load     u64       x                
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       0                
    istorex  i64 /1                     
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    jump               #6745            
#6746: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /2/1                   
    load     u64       g                
    setarg   u64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /2    &qq_runaux.k_dot 
#6745: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6753: 
    load     u64       &qq_decls.genfieldtable
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    iloadx   u64 /8/-8                  
    store    u64       g                
    load     u64       g                
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       0                
    jumpne   u64       #6755            
    load     u64       g                
    load     i64       0                
    iloadx   u64 /1                     
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       11               
    jumpne   i64       #6755            
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       x                
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       12               
    jumpeq   i64       #6757            
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Popdot1: not rec"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#6757: 
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    loadbit  i64                        
    jumpt    u64       #6759            
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /0/1                   
    callp        /0    &qq_lib.pcnotmut 
#6759: 
    load     u64       g                
    load     i64       0                
    iloadx   u64 /1                     
    store    u64       e                
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     u64       e                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       116              
    iloadx   i16 /1                     
    widen    i64/i16                    
    jumpeq   i64       #6761            
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Popdot1: wrong type"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#6761: 
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       e                
    load     i64       108              
    iloadx   i16 /1                     
    widen    i64/i16                    
    load     i64       16               
    idiv     i64                        
    addpx    u64 /16                    
    store    u64       z                
    load     u64       z                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6763            
    setcall      /1/1                   
    load     u64       z                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6763: 
    load     u64       y                
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       z                
    load     i64       0                
    istorex  i64 /1                     
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       z                
    load     i64       8                
    istorex  i64 /1                     
    load     u64       x                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6765            
    setcall      /1/1                   
    load     u64       x                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6765: 
    jump               #6754            
#6755: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall  u64 /2/1                   
    load     u64       g                
    setarg   u64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callf    u64 /2    &qq_runaux.k_popdot
    store    u64       sp               
#6754: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6766: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /2/1                   
    load     u64       &qq_decls.genfieldtable
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    iloadx   u64 /8/-8                  
    setarg   u64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /2    &qq_runaux.k_dotref
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6767: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64       sp               
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       0                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       8                
    istorex  i64 /1                     
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #6769            
    load     i64       4                
    jumpeq   i64       #6770            
    jump               #6771            
#6769: 
    setcall      /2/1                   
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /2    &qq_vars.var_getix
    jump               #6768            
#6770: 
    setcall      /3/1                   
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    setarg   i64 /3                     
    load     u64       y                
    load     i64       0                
    iloadx   i64 /1                     
    load     i64       16               
    load     i64       63               
    loadbf   i64                        
    setarg   i64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /3    &qq_vars.var_getslice
    jump               #6768            
#6771: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    setcall      /3/1                   
    load     u64       y                
    setarg   u64 /3                     
    load     u64       &vx              
    setarg   u64 /2                     
    load     u64       "Index"          
    setarg   u64 /1                     
    callp        /3    &qq_runaux.pcmxtypes
#6768: 
    load     u64       &vx              
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6773            
    setcall      /1/1                   
    load     u64       &vx              
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6773: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6774: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       z                
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       x                
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    load     u64       z                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #6776            
    load     i64       4                
    jumpeq   i64       #6777            
    jump               #6778            
#6776: 
    setcall      /3/1                   
    load     u64       x                
    setarg   u64 /3                     
    load     u64       z                
    load     i64       8                
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     u64       y                
    setarg   u64 /1                     
    callp        /3    &qq_vars.var_putix
    load     u64       y                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6780            
    setcall      /1/1                   
    load     u64       y                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6780: 
    jump               #6775            
#6777: 
    setcall      /4/1                   
    load     u64       x                
    setarg   u64 /4                     
    load     u64       z                
    load     i64       8                
    iloadx   i64 /1                     
    setarg   i64 /3                     
    load     u64       z                
    load     i64       0                
    iloadx   i64 /1                     
    load     i64       16               
    load     i64       63               
    loadbf   i64                        
    setarg   i64 /2                     
    load     u64       y                
    setarg   u64 /1                     
    callp        /4    &qq_vars.var_putslice
    load     u64       x                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6782            
    setcall      /1/1                   
    load     u64       x                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6782: 
    load     u64       y                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6784            
    setcall      /1/1                   
    load     u64       y                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6784: 
    jump               #6775            
#6778: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    setcall      /3/1                   
    load     u64       z                
    setarg   u64 /3                     
    load     u64       y                
    setarg   u64 /2                     
    load     u64       "Popix"          
    setarg   u64 /1                     
    callp        /3    &qq_runaux.pcmxtypes
#6775: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6785: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64       sp               
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       0                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       8                
    istorex  i64 /1                     
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64       #6787            
    jump               #6788            
#6787: 
    setcall      /2/1                   
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /2    &qq_vars.var_getixref
    jump               #6786            
#6788: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    setcall      /3/1                   
    load     u64       y                
    setarg   u64 /3                     
    load     u64       sp               
    setarg   u64 /2                     
    load     u64       "Indexref"       
    setarg   u64 /1                     
    callp        /3    &qq_runaux.pcmxtypes
#6786: 
    load     u64       &vx              
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6790            
    setcall      /1/1                   
    load     u64       &vx              
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6790: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6791: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall  u64 /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callf    u64 /1    &qq_runaux.k_keyindex
    store    u64       sp               
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6792: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall  u64 /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callf    u64 /1    &qq_runaux.k_popkeyindex
    store    u64       sp               
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6793: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall  u64 /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callf    u64 /1    &qq_runaux.k_keyindexref
    store    u64       sp               
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6794: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64       sp               
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       0                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       &vx              
    load     i64       8                
    istorex  i64 /1                     
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #6796            
    load     i64       4                
    jumpeq   i64       #6797            
    jump               #6798            
#6796: 
    setcall      /2/1                   
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /2    &qq_vars.var_getdotix
    jump               #6795            
#6797: 
    setcall      /3/1                   
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    setarg   i64 /3                     
    load     u64       y                
    load     i64       0                
    iloadx   i64 /1                     
    load     i64       16               
    load     i64       63               
    loadbf   i64                        
    setarg   i64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /3    &qq_vars.var_getdotslice
    jump               #6795            
#6798: 
    setcall      /3/1                   
    load     u64       y                
    setarg   u64 /3                     
    load     u64       &vx              
    setarg   u64 /2                     
    load     u64       "Dotindex"       
    setarg   u64 /1                     
    callp        /3    &qq_runaux.pcmxtypes
#6795: 
    load     u64       &vx              
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6800            
    setcall      /1/1                   
    load     u64       &vx              
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6800: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6801: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       z                
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       x                
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    load     u64       z                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #6803            
    load     i64       4                
    jumpeq   i64       #6804            
    jump               #6805            
#6803: 
    setcall      /3/1                   
    load     u64       x                
    setarg   u64 /3                     
    load     u64       z                
    load     i64       8                
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     u64       y                
    setarg   u64 /1                     
    callp        /3    &qq_vars.var_putdotix
    load     u64       y                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6807            
    setcall      /1/1                   
    load     u64       y                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6807: 
    jump               #6802            
#6804: 
    setcall      /4/1                   
    load     u64       x                
    setarg   u64 /4                     
    load     u64       z                
    load     i64       8                
    iloadx   i64 /1                     
    setarg   i64 /3                     
    load     u64       z                
    load     i64       0                
    iloadx   i64 /1                     
    load     i64       16               
    load     i64       63               
    loadbf   i64                        
    setarg   i64 /2                     
    load     u64       y                
    setarg   u64 /1                     
    callp        /4    &qq_vars.var_putdotslice
    load     u64       x                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6809            
    setcall      /1/1                   
    load     u64       x                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6809: 
    load     u64       y                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6811            
    setcall      /1/1                   
    load     u64       y                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6811: 
    jump               #6802            
#6805: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    setcall      /3/1                   
    load     u64       z                
    setarg   u64 /3                     
    load     u64       y                
    setarg   u64 /2                     
    load     u64       "Popdotindex"    
    setarg   u64 /1                     
    callp        /3    &qq_runaux.pcmxtypes
#6802: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6812: 
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #6814            
    load     i64       4                
    jumpeq   i64       #6815            
    jump               #6816            
#6814: 
    setcall      /2/1                   
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /2    &qq_vars.var_getdotixref
    jump               #6813            
#6815: 
    setcall      /3/1                   
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    setarg   i64 /3                     
    load     u64       y                
    load     i64       0                
    iloadx   i64 /1                     
    load     i64       16               
    load     i64       63               
    loadbf   i64                        
    setarg   i64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /3    &qq_vars.var_getdotsliceref
    jump               #6813            
#6816: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    setcall      /3/1                   
    load     u64       y                
    setarg   u64 /3                     
    load     u64       sp               
    setarg   u64 /2                     
    load     u64       "Dotindexref"    
    setarg   u64 /1                     
    callp        /3    &qq_runaux.pcmxtypes
#6813: 
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6817: 
    load     u64       sp               
    load     u64       pc               
    load     i64       9                
    iloadx   u8  /1                     
    widen    i64/u8                     
    addpx    u64 /16                    
    load     i64       1                
    subpx    u64 /16                    
    store    u64       x                
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /3/1                   
    load     u64       pc               
    load     i64       9                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /3                     
    load     u64       x                
    setarg   u64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /3    &qq_vars.var_expand
    load     u64       x                
    store    u64       sp               
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6818: 
    load     i64       21               
    load     u64 /1    &sp              
    incrload u64 /16                    
    load     i64       0                
    istorex  u32 /1                     
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    load     u64       sp               
    load     i64       8                
    istorex  u64 /1                     
    load     u64       fp               
    load     u64       sp               
    subp     i64 /1                     
    load     u64       sp               
    load     i64       4                
    istorex  i16 /1                     
    load     u64       pc               
    load     i64       12               
    iloadx   i16 /1                     
    load     u64       sp               
    load     i64       3                
    istorex  u8  /1                     
    load     u64       pc               
    load     i64       14               
    iloadx   i16 /1                     
    load     u64       sp               
    load     i64       6                
    istorex  i16 /1                     
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6819: 
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64       #6821            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Raise: not Int" 
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#6821: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    load     u64       fp               
    store    u64       qq_decls.frameptr
    setcall  u64 /1/1                   
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callf    u64 /1    &qq_runaux.raiseexception
    store    u64       pc               
    load     u64       qq_decls.sptr    
    store    u64       sp               
    load     u64       qq_decls.frameptr
    store    u64       fp               
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6822: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall  u64 /3/1                   
    load     u64       &newsp           
    setarg   u64 /3                     
    load     u64       pc               
    setarg   u64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callf    u64 /3    &qq_runaux.k_map 
    store    u64       pc               
    load     u64       newsp            
    store    u64       sp               
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6823: 
    load     u64       pc               
    load     i64       9                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64 /1    &sp              
    subpxto  u64 /16                    
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6824: 
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    iload    mem:16                     
    load     u64       sp               
    istore   mem:16                     
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6826            
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#6826: 
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     u64       fp               
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    iload    mem:16                     
    load     u64       sp               
    istore   mem:16                     
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6828            
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#6828: 
    load     i64       2                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6829: 
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       0                
    istorex  i64 /1                     
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6831            
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#6831: 
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     u64       fp               
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       0                
    istorex  i64 /1                     
    load     u64       fp               
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6833            
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#6833: 
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     u64       fp               
    load     u64       pc               
    load     i64       2                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       0                
    istorex  i64 /1                     
    load     u64       fp               
    load     u64       pc               
    load     i64       2                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6835            
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#6835: 
    load     i64       3                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6836: 
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       0                
    istorex  i64 /1                     
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6838            
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#6838: 
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     i64       1                
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     i64       2                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6839: 
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       0                
    istorex  i64 /1                     
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6841            
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#6841: 
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     i64       1                
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     i64       2                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6842: 
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       x                
    load     u64       fp               
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       y                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    swapstk      /1/2                   
    jumpne   i64 /1    #6844            
    load     i64       1                
    jumpne   i64       #6844            
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     i64       1                
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    add      i64                        
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     i64       3                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
    jump               #6843            
#6844: 
    jump               #6193            
#6843: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6845: 
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpne   i64       #6847            
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     i64       1                
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    add      i64                        
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     i64       3                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
    jump               #6846            
#6847: 
    jump               #6193            
#6846: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6848: 
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpne   i64       #6850            
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     i64       1                
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    sub      i64                        
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     i64       3                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
    jump               #6849            
#6850: 
    jump               #6193            
#6849: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6851: 
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpne   i64       #6853            
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       8                
    addpx    u64 /1                     
    addto    i64                        
    load     i64       2                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
    jump               #6852            
#6853: 
    jump               #6208            
#6852: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6854: 
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpne   i64       #6856            
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       8                
    addpx    u64 /1                     
    subto    i64                        
    load     i64       2                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
    jump               #6855            
#6856: 
    jump               #6208            
#6855: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6857: 
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpne   i64       #6859            
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       8                
    addpx    u64 /1                     
    bitandto i64                        
    load     i64       2                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
    jump               #6858            
#6859: 
    jump               #6208            
#6858: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6860: 
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpne   i64       #6862            
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       8                
    addpx    u64 /1                     
    shlto    i64                        
    load     i64       2                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
    jump               #6861            
#6862: 
    jump               #6208            
#6861: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6863: 
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpne   i64       #6865            
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       8                
    addpx    u64 /1                     
    shrto    i64                        
    load     i64       2                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
    jump               #6864            
#6865: 
    jump               #6208            
#6864: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6866: 
    load     u64       fp               
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       x                
    load     u64       x                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6868            
    setcall      /1/1                   
    load     u64       x                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6868: 
    load     i64       1                
    load     u64       x                
    load     i64       0                
    istorex  u32 /1                     
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    load     u64       x                
    load     i64       8                
    istorex  i64 /1                     
    load     i64       2                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6869: 
    load     u64       fp               
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       x                
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       y                
    load     u64       y                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6871            
    load     u64       y                
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#6871: 
    load     u64       x                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6873            
    setcall      /1/1                   
    load     u64       x                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6873: 
    load     u64       y                
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       x                
    load     i64       0                
    istorex  i64 /1                     
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       x                
    load     i64       8                
    istorex  i64 /1                     
    load     i64       2                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6874: 
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       x                
! qq_runx.disploop.doindexff:
#6875: 
    load     u64       fp               
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       y                
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     u64       x                
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       0                
    istorex  i64 /1                     
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #6877            
    load     i64       4                
    jumpeq   i64       #6878            
    jump               #6879            
#6877: 
    setcall      /2/1                   
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /2    &qq_vars.var_getix
    jump               #6876            
#6878: 
    setcall      /3/1                   
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    setarg   i64 /3                     
    load     u64       y                
    load     i64       0                
    iloadx   i64 /1                     
    load     i64       16               
    load     i64       63               
    loadbf   i64                        
    setarg   i64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /3    &qq_vars.var_getslice
    jump               #6876            
#6879: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    setcall      /3/1                   
    load     u64       y                
    setarg   u64 /3                     
    load     u64       x                
    setarg   u64 /2                     
    load     u64       "Indexff"        
    setarg   u64 /1                     
    callp        /3    &qq_runaux.pcmxtypes
#6876: 
    load     i64       3                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6880: 
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       x                
    jump               #6875            
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6881: 
    load     u64       sp               
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpne   i64       #6883            
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    jumpne   i64       #6885            
    load     u64 /1    &sp              
    decrto   u64 /16                    
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6884            
#6885: 
    load     i64       2                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
#6884: 
    jump               #6882            
#6883: 
    jump               #6208            
#6882: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6886: 
    load     u64       sp               
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpne   i64       #6888            
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    jumpeq   i64       #6890            
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6889            
#6890: 
    load     u64 /1    &sp              
    decrto   u64 /16                    
    load     i64       2                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
#6889: 
    jump               #6887            
#6888: 
    jump               #6208            
#6887: 
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6891: 
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       0                
    istorex  i64 /1                     
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6893            
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#6893: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    load     u64       sp               
    store    u64       qq_decls.sptr    
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_runaux.k_upb 
    load     i64       2                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6894: 
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       16               
    jumpne   i64       #6897            
    load     u64       x                
    load     i64       4                
    iloadx   u32 /1                     
    widen    i64/u32                    
    load     i64       27               
    jumpeq   i64       #6896            
#6897: 
    jump               #6197            
#6896: 
    jump               #6898            
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6899: 
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       16               
    jumpne   i64       #6902            
    load     u64       x                
    load     i64       4                
    iloadx   u32 /1                     
    widen    i64/u32                    
    load     i64       27               
    jumpeq   i64       #6901            
#6902: 
    jump               #6199            
#6901: 
! qq_runx.disploop.dopushipf:
#6898: 
    load     u64 /1    &sp              
    incrto   u64 /16                    
    load     i64       1                
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     u64       x                
    load     i64       4                
    iloadx   u32 /1                     
    widen    i64/u32                    
    load     i64       27               
    jumpeq   i64       #6904            
    jump               #6905            
#6904: 
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       12               
    iloadx   i16 /1                     
    widen    i64/i16                    
    load     u64       x                
    load     i64       8                
    addpx    u64 /1                     
    addpxto  u64 /1                     
    jump               #6903            
#6905: 
#6903: 
    load     i64       3                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6906: 
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       16               
    jumpne   i64       #6909            
    load     u64       x                
    load     i64       4                
    iloadx   u32 /1                     
    widen    i64/u32                    
    load     i64       27               
    jumpne   i64       #6909            
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64       #6908            
#6909: 
    jump               #6197            
#6908: 
    jump               #6910            
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6911: 
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       x                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       16               
    jumpne   i64       #6914            
    load     u64       x                
    load     i64       4                
    iloadx   u32 /1                     
    widen    i64/u32                    
    load     i64       27               
    jumpne   i64       #6914            
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64       #6913            
#6914: 
    jump               #6199            
#6913: 
! qq_runx.disploop.dopopipf:
#6910: 
    load     u64       x                
    load     i64       4                
    iloadx   u32 /1                     
    widen    i64/u32                    
    load     i64       27               
    jumpeq   i64       #6916            
    jump               #6917            
#6916: 
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    istore   u8                         
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    load     i64       12               
    iloadx   i16 /1                     
    widen    i64/i16                    
    load     u64       x                
    load     i64       8                
    addpx    u64 /1                     
    addpxto  u64 /1                     
    jump               #6915            
#6917: 
#6915: 
    load     u64 /1    &sp              
    decrto   u64 /16                    
    load     i64       3                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6918: 
    load     u64       fp               
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    addpx    u64 /1                     
    store    u64       x                
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6920            
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#6920: 
    load     u64       sp               
    load     i64       0                
    iloadx   i64 /1                     
    load     u64       x                
    load     i64       0                
    istorex  i64 /1                     
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       x                
    load     i64       8                
    istorex  i64 /1                     
    load     i64       2                
    load     u64 /1    &pc              
    addpxto  u64 /32                    
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6921: 
    jump               #6180            
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6177: 
! qq_runx.disploop.unimpl:
#6180: 
    load     u64       pc               
    store    u64       qq_decls.pcptr   
    setcall      /2/1                   
    load     u64       &qq_pcltabs.pclnames
    load     u64       pc               
    load     i64       8                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /2                     
    load     u64       "Unimpl op:"     
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
    load     i64       1                
    stop                                
    load     u64       pc               
    load     i64       0                
    iloadx   u64 /1                     
    ijump    u64                        
#6175: 
#6168: 
    retproc                             
endproc

proc qq_runx.start:
    load     i64       1                
    store    u8        qq_runx.getjt    
    setcall      /0/1                   
    callp        /0    &qq_runx.disploop
    load     i64       0                
    store    u8        qq_runx.getjt    
    retproc                             
endproc

proc qq_runx.fixupcode:
    param    u64       pm
    local    u64       pc
    load     u64       qq_runx.jumptable
    load     u64       0                
    jumpne   u64       #6925            
    jump               #6923            
#6925: 
    load     u64       pm               
    load     i64       56               
    iloadx   u64 /1                     
    store    u64       pc               
    jump               #6929            
#6926: 
    load     u64       qq_runx.jumptable
    load     u64       pc               
    load     i64       8                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    load     u64       pc               
    load     i64       0                
    istorex  u64 /1                     
    load     u64 /1    &pc              
    incrto   u64 /32                    
#6929: 
    load     u64       pc               
    load     i64       8                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       5                
    jumpne   i64       #6926            
#6923: 
    retproc                             
endproc

proc qq_runx.runqprogram:
    param    u64       sp
    param    i64       ismain
    local    i64       tt
    rettype  i64
    load     u8        qq_cli.runcode   
    widen    i64/u8                     
    load     i64       6                
    jumpge   i64       #6932            
    load     i64       0                
    jumpret  i64       #6930            
#6932: 
    load     u64       &qq_decls.varstack
    load     i64       0                
    addpx    u8  /1                     
    store    u64       qq_decls.sptr    
    load     u64       &qq_decls.varstack
    load     i64       1118384          
    addpx    u8  /1                     
    store    u64       qq_decls.stacklimit
    load     u64       &qq_decls.modules
    load     u64       sp               
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    iloadx   u64 /8                     
    load     i64       56               
    iloadx   u64 /1                     
    store    u64       qq_decls.pcptr   
    load     i64       0                
    store    i64       qq_decls.stopped 
    setcall  i32 /0/1                   
    callf    i32 /0    &clock           
    widen    i64/i32                    
    store    i64       tt               
    setcall      /0/1                   
    callp        /0    &qq_runx.disploop
    setcall  i32 /0/1                   
    callf    i32 /0    &clock           
    widen    i64/i32                    
    load     i64       tt               
    sub      i64                        
    store    i64       tt               
    load     u64       qq_decls.sptr    
    load     i64       8                
    iloadx   i64 /1                     
    jumpret  i64       #6930            
#6930: 
    retfn    i64                        
endproc

proc qq_runaux.pcerror:
    param    u64       mess
    param    u64       param
    setcall      /3/1                   
    load     u64       param            
    setarg   u64 /3                     
    load     u64       mess             
    setarg   u64 /2                     
    load     u64       qq_decls.pcptr   
    setarg   u64 /1                     
    callp        /3    &qq_runaux.reportpcerror
    retproc                             
endproc

proc qq_runaux.pcustype:
    param    u64       mess
    param    u64       x
    setcall      /2/1                   
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       mess             
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
    retproc                             
endproc

proc qq_runaux.pcustype_t:
    param    u64       mess
    param    i64       t
    local    mem:256       str
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "Type not supported: # : #"
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       mess             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &qq_tables.ttname
    load     i64       t                
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /3/1                   
    load     u64       ""               
    setarg   u64 /3                     
    load     u64       &str             
    setarg   u64 /2                     
    load     u64       qq_decls.pcptr   
    setarg   u64 /1                     
    callp        /3    &qq_runaux.reportpcerror
    retproc                             
endproc

proc qq_runaux.pcmxtypes:
    param    u64       mess
    param    u64       x
    param    u64       y
    setcall      /3/1                   
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /3                     
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       mess             
    setarg   u64 /1                     
    callp        /3    &qq_runaux.pcmxtypestt
    retproc                             
endproc

proc qq_runaux.pcmxtypestt:
    param    u64       mess
    param    i64       t
    param    i64       u
    local    mem:256       str
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "Types not supported: # : #/#"
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       mess             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &qq_tables.ttname
    load     i64       t                
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &qq_tables.ttname
    load     i64       u                
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /3/1                   
    load     u64       ""               
    setarg   u64 /3                     
    load     u64       &str             
    setarg   u64 /2                     
    load     u64       qq_decls.pcptr   
    setarg   u64 /1                     
    callp        /3    &qq_runaux.reportpcerror
    retproc                             
endproc

proc qq_runaux.reportpcerror:
    param    u64       pcptr
    param    u64       mess
    param    u64       param
    local    u64       s
    local    u64       send
    local    u64       pc
    local    i64       count
    local    u64       pm
    local    mem:48       loc
    local    mem:48       loc2
    setcall  mem:48 /1/1                
    load     u64       pcptr            
    setarg   u64 /1                     
    callf    mem:48 /1    &qq_runaux.getpcerrorpos
    store    mem:48       loc           
    load     u64       &loc             
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pm               
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /2/1                   
    load     u64       "80p*"           
    setarg   u64 /2                     
    load     u64       " "              
    setarg   u64 /1                     
    callp        /2    &msysc.m$print_str
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "PC Error:"      
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "    "           
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64       mess             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64       param            
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "Line:"          
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &loc             
    load     i64       32               
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       "in Module"      
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &loc             
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64       ".q:"            
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     u64       &loc             
    load     i64       16               
    iloadx   u64 /1                     
    jumpf    u64       #6940            
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "In function:"   
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &loc             
    load     i64       16               
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
#6940: 
    load     u64       qq_decls.sptr    
    store    u64       s                
    load     u64       &qq_decls.varstack
    load     i64       0                
    addpx    u8  /1                     
    store    u64       send             
    load     i64       0                
    store    i64       count            
    jump               #6942            
#6941: 
    load     u64       s                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       20               
    jumpne   i64       #6945            
    load     u64       s                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       1                
    subpx    u64 /32                    
    store    u64       pc               
    setcall  mem:48 /1/1                
    load     u64       pc               
    setarg   u64 /1                     
    callf    mem:48 /1    &qq_runaux.getpcerrorpos
    store    mem:48       loc2          
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "Called from line"
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &loc2            
    load     i64       32               
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       "in"             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &loc2            
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     u64 /1    &count           
    incrto   i64 /1                     
#6945: 
    load     u64 /1    &s               
    decrto   u64 /16                    
#6942: 
    load     u64       s                
    load     u64       send             
    jumplt   u64       #6946            
    load     i64       count            
    load     i64       5                
    jumplt   i64       #6941            
#6946: 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "PC/STOPC"       
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &loc             
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_ptr_nf
    setcall      /1/1                   
    load     u64       &loc             
    load     i64       32               
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       "LOC.PM.FILESPEC="
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &loc             
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     mem:48       loc           
    setarg   mem:48 /1                  
    callp        /1    &qq_lib.stopcompiler
    retproc                             
endproc

proc qq_runaux.getpcerrorpos:
    param    u64       pc
    local    i64       offset
    local    i64       pos
    local    i64       soffset
    local    i64       moduleno
    local    u64       pcstart
    local    u64       pcsrcstart
    local    u64       pm
    local    mem:48       loc
    rettype  mem:0
    load     u64       &loc             
    clear    mem:48                     
    load     u64       &qq_decls.modules
    setcall  i64 /1/1                   
    load     u64       pc               
    setarg   u64 /1                     
    callf    i64 /1    &qq_runaux.findmodulefrompc
    iloadx   u64 /8                     
    store    u64       pm               
    load     u64       pm               
    load     i64       56               
    iloadx   u64 /1                     
    store    u64       pcstart          
    load     u64       pm               
    load     i64       80               
    iloadx   u64 /1                     
    store    u64       pcsrcstart       
    setcall  i64 /2/1                   
    load     u64       pcstart          
    setarg   u64 /2                     
    load     u64       pc               
    setarg   u64 /1                     
    callf    i64 /2    &qq_lib.getpcloffset
    store    i64       offset           
    load     u64       pcsrcstart       
    load     i64       offset           
    iloadx   i32 /4                     
    widen    i64/i32                    
    store    i64       pos              
    load     i64       pos              
    load     i64       0                
    load     i64       23               
    loadbf   i64                        
    load     u64       &loc             
    load     i64       32               
    istorex  i64 /1                     
    load     i64       pos              
    load     i64       24               
    load     i64       31               
    loadbf   i64                        
    store    i64       moduleno         
    load     i64       moduleno         
    load     i64       0                
    jumpne   i64       #6949            
    load     i64       1                
    store    i64       moduleno         
    load     i64       0                
    store    i64       soffset          
#6949: 
    load     u64       &qq_decls.modules
    load     i64       moduleno         
    iloadx   u64 /8                     
    load     u64       &loc             
    load     i64       8                
    istorex  u64 /1                     
    load     u64       &qq_decls.subprogs
    load     u64       pm               
    load     i64       44               
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8/-8                  
    load     u64       &loc             
    load     i64       0                
    istorex  u64 /1                     
    load     u64       0                
    load     u64       &loc             
    load     i64       16               
    istorex  u64 /1                     
    load     mem:48       loc           
    jumpret  mem:48       #6947         
#6947: 
    retfn    mem:48                     
endproc

proc qq_runaux.findmodulefrompc:
    param    u64       pc
    local    i64       i
    rettype  i64
    load     i64       1                
    store    i64       i                
    load     i64       qq_decls.nmodules
    load     i64       1                
    jumplt   i64       #6953            
#6951: 
    load     u64       pc               
    load     u64       &qq_decls.modules
    load     i64       i                
    iloadx   u64 /8                     
    load     i64       56               
    iloadx   u64 /1                     
    jumplt   u64       #6955            
    load     u64       pc               
    load     u64       &qq_decls.modules
    load     i64       i                
    iloadx   u64 /8                     
    load     i64       64               
    iloadx   u64 /1                     
    jumpge   u64       #6955            
    load     i64       i                
    jumpret  i64       #6950            
#6955: 
    forup    i64 /1    #6951            
    opnd     i64       i                
    opnd     i64       qq_decls.nmodules
#6953: 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "Can't find pcptr module"
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       pc               
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_ptr_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     i64       1                
    stop                                
    load     i64       0                
    jumpret  i64       #6950            
#6950: 
    retfn    i64                        
endproc

proc qq_runaux.k_makelist:
    param    u64       sp
    param    i64       lower
    param    i64       n
    local    u64       x
    local    u64       y
    rettype  u64
    load     u64       sp               
    load     i64       n                
    subpx    u64 /16                    
    load     i64       1                
    addpx    u64 /16                    
    store    u64       x                
    load     u64       x                
    store    u64       sp               
    setcall      /4/1                   
    load     i64       lower            
    setarg   i64 /4                     
    load     i64       n                
    setarg   i64 /3                     
    load     u64       sp               
    setarg   u64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callp        /4    &qq_lists.var_make_list
    load     u64       0                
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       4                
    addpx    u64 /1                     
    load     i64       1                
    storebit u8                         
    load     u64       sp               
    jumpret  u64       #6956            
#6956: 
    retfn    u64                        
endproc

proc qq_runaux.k_len:
    param    u64       sp
    local    u64       p
    local    i64       n
    local    i64       t
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       10               
    jumpeq   i64 /1    #6959            
    load     i64       11               
    jumpeq   i64 /1    #6959            
    load     i64       6                
    jumpeq   i64 /1    #6959            
    load     i64       8                
    jumpeq   i64 /1    #6959            
    load     i64       9                
    jumpeq   i64 /1    #6960            
    load     i64       12               
    jumpeq   i64 /1    #6961            
    load     i64       7                
    jumpeq   i64 /1    #6961            
    load     i64       13               
    jumpeq   i64 /1    #6961            
    load     i64       5                
    jumpeq   i64 /1    #6962            
    load     i64       4                
    jumpeq   i64 /1    #6963            
    load     i64       3                
    jumpeq   i64 /1    #6964            
    load     i64       18               
    jumpeq   i64       #6965            
    jump               #6966            
#6959: 
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       n                
    jump               #6958            
#6960: 
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       n                
    jump               #6958            
#6961: 
    load     u64       &qq_tables.ttlength
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i64 /8                     
    store    i64       n                
    jump               #6958            
#6962: 
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       n                
    jump               #6958            
#6963: 
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       sp               
    load     i64       0                
    iloadx   i64 /1                     
    load     i64       16               
    load     i64       63               
    loadbf   i64                        
    sub      i64                        
    load     i64       1                
    add      i64                        
    store    i64       n                
    jump               #6958            
#6964: 
    setcall  i64 /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callf    i64 /1    &qq_decimal.obj_len_dec
    store    i64       n                
    jump               #6958            
#6965: 
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    store    i64       t                
    load     u64       &qq_tables.ttbasetype
    load     i64       t                
    iloadx   i16 /2                     
    widen    i64/i16                    
    load     i64       12               
    jumpeq   i64 /1    #6968            
    load     i64       7                
    jumpeq   i64 /1    #6968            
    load     i64       13               
    jumpeq   i64       #6968            
    jump               #6969            
#6968: 
    load     u64       &qq_tables.ttlength
    load     i64       t                
    iloadx   i64 /8                     
    store    i64       n                
    jump               #6967            
#6969: 
    load     u64       &qq_tables.ttlength
    load     i64       t                
    iloadx   i64 /8                     
    store    i64       n                
#6967: 
    jump               #6958            
#6966: 
    setcall      /2/1                   
    load     u64       sp               
    setarg   u64 /2                     
    load     u64       "Len"            
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#6958: 
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #6971            
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#6971: 
    load     i64       1                
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     i64       n                
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    retproc                             
endproc

proc qq_runaux.k_maths:
    param    u64       sp
    param    i64       opc
    local    r64       x
    load     u64       sp               
    load     i64       8                
    iloadx   r64 /1                     
    store    r64       x                
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #6974            
    load     i64       2                
    jumpeq   i64       #6975            
    jump               #6976            
#6974: 
    load     i64       opc              
    load     i64       2                
    jumpeq   i64       #6978            
    jump               #6979            
#6978: 
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    sqr      i64                        
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    jump               #6972            
    jump               #6977            
#6979: 
#6977: 
    load     i64       2                
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    float    r64/i64                    
    store    r64       x                
    jump               #6973            
#6975: 
    jump               #6973            
#6976: 
    setcall      /2/1                   
    load     u64       sp               
    setarg   u64 /2                     
    load     u64       "Maths:"         
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#6973: 
    load     i64       opc              
    load     i64       2                
    jumpeq   i64 /1    #6981            
    load     i64       1                
    jumpeq   i64 /1    #6982            
    load     i64       3                
    jumpeq   i64 /1    #6983            
    load     i64       4                
    jumpeq   i64 /1    #6984            
    load     i64       5                
    jumpeq   i64 /1    #6985            
    load     i64       6                
    jumpeq   i64 /1    #6986            
    load     i64       7                
    jumpeq   i64 /1    #6987            
    load     i64       8                
    jumpeq   i64 /1    #6988            
    load     i64       10               
    jumpeq   i64 /1    #6989            
    load     i64       11               
    jumpeq   i64 /1    #6990            
    load     i64       13               
    jumpeq   i64 /1    #6991            
    load     i64       14               
    jumpeq   i64 /1    #6992            
    load     i64       15               
    jumpeq   i64       #6993            
    jump               #6994            
#6981: 
    load     r64       x                
    sqr      r64                        
    store    r64       x                
    jump               #6980            
#6982: 
    load     r64       x                
    sqrt     r64                        
    store    r64       x                
    jump               #6980            
#6983: 
    load     r64       x                
    sin      r64                        
    store    r64       x                
    jump               #6980            
#6984: 
    load     r64       x                
    cos      r64                        
    store    r64       x                
    jump               #6980            
#6985: 
    load     r64       x                
    tan      r64                        
    store    r64       x                
    jump               #6980            
#6986: 
    load     r64       x                
    asin     r64                        
    store    r64       x                
    jump               #6980            
#6987: 
    load     r64       x                
    acos     r64                        
    store    r64       x                
    jump               #6980            
#6988: 
    load     r64       x                
    atan     r64                        
    store    r64       x                
    jump               #6980            
#6989: 
    load     r64       x                
    log      r64                        
    store    r64       x                
    jump               #6980            
#6990: 
    load     r64       x                
    log10    r64                        
    store    r64       x                
    jump               #6980            
#6991: 
    load     r64       x                
    load     r64       0.0000000000000000e+000
    jumplt   r64       #6996            
    load     r64       x                
    load     r64       5.0000000000000000e-001
    add      r64                        
    floor    r64                        
    store    r64       x                
    jump               #6995            
#6996: 
    load     r64       x                
    load     r64       5.0000000000000000e-001
    sub      r64                        
    ceil     r64                        
    store    r64       x                
#6995: 
    jump               #6980            
#6992: 
    load     r64       x                
    floor    r64                        
    store    r64       x                
    jump               #6980            
#6993: 
    load     r64       x                
    ceil     r64                        
    store    r64       x                
    jump               #6980            
#6994: 
    setcall      /2/1                   
    load     u64       &qq_tables.mathsnames
    load     i64       opc              
    iloadx   u64 /8/-8                  
    setarg   u64 /2                     
    load     u64       "Maths op:"      
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#6980: 
    load     r64       x                
    load     u64       sp               
    load     i64       8                
    istorex  r64 /1                     
#6972: 
    retproc                             
endproc

proc qq_runaux.k_maths2:
    param    u64       x
    param    u64       y
    param    i64       opc
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    swapstk      /1/2                   
    jumpne   i64 /1    #7000            
    load     i64       2                
    jumpeq   i64       #6999            
#7000: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "maths2"         
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#6999: 
    jump               #7002            
#7002: 
    setcall      /2/1                   
    load     u64       &qq_tables.mathsnames
    load     i64       opc              
    iloadx   u64 /8/-8                  
    setarg   u64 /2                     
    load     u64       "Maths2:"        
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
    retproc                             
endproc

proc qq_runaux.k_lwb:
    param    u64       sp
    local    u64       p
    local    i64       n
    local    i64       t
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       10               
    jumpeq   i64 /1    #7005            
    load     i64       9                
    jumpeq   i64 /1    #7006            
    load     i64       6                
    jumpeq   i64 /1    #7006            
    load     i64       11               
    jumpeq   i64 /1    #7007            
    load     i64       8                
    jumpeq   i64 /1    #7007            
    load     i64       12               
    jumpeq   i64 /1    #7008            
    load     i64       13               
    jumpeq   i64 /1    #7008            
    load     i64       7                
    jumpeq   i64 /1    #7009            
    load     i64       5                
    jumpeq   i64 /1    #7010            
    load     i64       4                
    jumpeq   i64       #7011            
    jump               #7012            
#7005: 
    load     u64       p                
    load     i64       6                
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       n                
    jump               #7004            
#7006: 
    load     i64       1                
    store    i64       n                
    jump               #7004            
#7007: 
    load     u64       p                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    loadbit  i64                        
    store    i64       n                
    jump               #7004            
#7008: 
    load     i64       1                
    store    i64       n                
    jump               #7004            
#7009: 
    load     u64       &qq_tables.ttlower
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i64 /8                     
    store    i64       n                
    jump               #7004            
#7010: 
    load     i64       0                
    store    i64       n                
    jump               #7004            
#7011: 
    load     u64       sp               
    load     i64       0                
    iloadx   i64 /1                     
    load     i64       16               
    load     i64       63               
    loadbf   i64                        
    store    i64       n                
    jump               #7004            
#7012: 
    setcall      /2/1                   
    load     u64       sp               
    setarg   u64 /2                     
    load     u64       "Lwb"            
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#7004: 
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #7014            
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#7014: 
    load     i64       1                
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     i64       n                
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    retproc                             
endproc

proc qq_runaux.k_upb:
    param    u64       sp
    local    u64       p
    local    i64       n
    local    i64       t
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       10               
    jumpeq   i64 /1    #7017            
    load     i64       9                
    jumpeq   i64 /1    #7018            
    load     i64       6                
    jumpeq   i64 /1    #7018            
    load     i64       11               
    jumpeq   i64 /1    #7019            
    load     i64       8                
    jumpeq   i64 /1    #7019            
    load     i64       12               
    jumpeq   i64 /1    #7020            
    load     i64       13               
    jumpeq   i64 /1    #7020            
    load     i64       7                
    jumpeq   i64 /1    #7021            
    load     i64       5                
    jumpeq   i64 /1    #7022            
    load     i64       4                
    jumpeq   i64 /1    #7023            
    load     i64       18               
    jumpeq   i64       #7024            
    jump               #7025            
#7017: 
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    load     u64       p                
    load     i64       6                
    iloadx   i16 /1                     
    widen    i64/i16                    
    add      i64                        
    load     i64       1                
    sub      i64                        
    store    i64       n                
    jump               #7016            
#7018: 
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       n                
    jump               #7016            
#7019: 
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    load     u64       p                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    loadbit  i64                        
    add      i64                        
    load     i64       1                
    sub      i64                        
    store    i64       n                
    jump               #7016            
#7020: 
    load     u64       &qq_tables.ttlength
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i64 /8                     
    store    i64       n                
    jump               #7016            
#7021: 
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    store    i64       t                
    jump               #7026            
    jump               #7016            
#7022: 
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       1                
    sub      i64                        
    store    i64       n                
    jump               #7016            
#7023: 
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    store    i64       n                
    jump               #7016            
#7024: 
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    store    i64       t                
! qq_runaux.k_upb.dotype:
#7026: 
    load     u64       &qq_tables.ttbasetype
    load     i64       t                
    iloadx   i16 /2                     
    widen    i64/i16                    
    load     i64       7                
    jumpeq   i64       #7028            
    jump               #7029            
#7028: 
    load     u64       &qq_tables.ttlength
    load     i64       t                
    iloadx   i64 /8                     
    load     u64       &qq_tables.ttlower
    load     i64       t                
    iloadx   i64 /8                     
    add      i64                        
    load     i64       1                
    sub      i64                        
    store    i64       n                
    jump               #7027            
#7029: 
    setcall      /2/1                   
    load     u64       sp               
    setarg   u64 /2                     
    load     u64       "t.upb"          
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#7027: 
    jump               #7016            
#7025: 
    setcall      /2/1                   
    load     u64       sp               
    setarg   u64 /2                     
    load     u64       "Upb"            
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#7016: 
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #7031            
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#7031: 
    load     i64       1                
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     i64       n                
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    retproc                             
endproc

proc qq_runaux.k_swap:
    param    u64       x
    param    u64       y
    local    mem:1024       tempbuffer
    local    mem:16       v
    local    i64       s
    local    i64       t
    local    i64       n
    local    u64       p
    local    u64       q
    local    i64       a
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    jumpeq   i64       #7034            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Swap mismatch"  
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7034: 
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       14               
    jumpeq   i64 /1    #7036            
    load     i64       16               
    jumpeq   i64       #7037            
    jump               #7038            
#7036: 
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    iload    mem:16                     
    store    mem:16       v             
    load     u64       y                
    load     i64       8                
    iloadx   u64 /1                     
    iload    mem:16                     
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    istore   mem:16                     
    load     mem:16       v             
    load     u64       y                
    load     i64       8                
    iloadx   u64 /1                     
    istore   mem:16                     
    jump               #7035            
#7037: 
    load     u64       x                
    load     i64       4                
    iloadx   u32 /1                     
    widen    i64/u32                    
    store    i64       s                
    load     u64       y                
    load     i64       4                
    iloadx   u32 /1                     
    widen    i64/u32                    
    store    i64       t                
    load     i64       s                
    load     i64       t                
    jumpeq   i64       #7040            
    jump               #7041            
#7040: 
    load     u64       &qq_tables.ttsize
    load     i64       s                
    iloadx   i64 /8                     
    store    i64       n                
    load     i64       n                
    load     i64       1                
    jumpeq   i64       #7043            
    jump               #7044            
#7043: 
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       y                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       p                
    iload    u8                         
    widen    i64/u8                     
    store    i64       a                
    load     u64       q                
    iload    u8                         
    load     u64       p                
    istore   u8                         
    load     i64       a                
    load     u64       q                
    istore   u8                         
    jump               #7042            
#7044: 
    load     u64       &qq_tables.ttsize
    load     i64       s                
    iloadx   i64 /8                     
    load     i64       1024             
    jumpgt   i64       #7046            
    setcall      /3/1                   
    load     i64       n                
    setarg   u64 /3                     
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       &tempbuffer      
    setarg   u64 /1                     
    callp        /3    &memcpy          
    setcall      /3/1                   
    load     i64       n                
    setarg   u64 /3                     
    load     u64       y                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &memcpy          
    setcall      /3/1                   
    load     i64       n                
    setarg   u64 /3                     
    load     u64       &tempbuffer      
    setarg   u64 /2                     
    load     u64       y                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &memcpy          
    jump               #7045            
#7046: 
    jump               #7041            
#7045: 
#7042: 
    jump               #7035            
#7038: 
! qq_runaux.k_swap.swaperror:
#7041: 
    setcall      /3/1                   
    load     u64       y                
    setarg   u64 /3                     
    load     u64       x                
    setarg   u64 /2                     
    load     u64       "Swap"           
    setarg   u64 /1                     
    callp        /3    &qq_runaux.pcmxtypes
#7035: 
    retproc                             
endproc

proc qq_runaux.k_bounds:
    param    u64       sp
    param    u64       lower
    param    u64       upper
    local    i64       a
    local    i64       b
    local    i64       m
    local    i64       t
    local    u64       p
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       m                
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     i64       m                
    load     i64       10               
    jumpeq   i64 /1    #7049            
    load     i64       11               
    jumpeq   i64 /1    #7050            
    load     i64       8                
    jumpeq   i64 /1    #7050            
    load     i64       9                
    jumpeq   i64 /1    #7051            
    load     i64       6                
    jumpeq   i64 /1    #7051            
    load     i64       4                
    jumpeq   i64 /1    #7052            
    load     i64       13               
    jumpeq   i64 /1    #7053            
    load     i64       12               
    jumpeq   i64 /1    #7053            
    load     i64       7                
    jumpeq   i64 /1    #7054            
    load     i64       5                
    jumpeq   i64 /1    #7055            
    load     i64       18               
    jumpeq   i64       #7056            
    jump               #7057            
#7049: 
    load     u64       p                
    load     i64       6                
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       a                
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       a                
    add      i64                        
    load     i64       1                
    sub      i64                        
    store    i64       b                
    jump               #7048            
#7050: 
    load     u64       p                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    loadbit  i64                        
    store    i64       a                
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       a                
    add      i64                        
    load     i64       1                
    sub      i64                        
    store    i64       b                
    jump               #7048            
#7051: 
    load     i64       1                
    store    i64       a                
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       b                
    jump               #7048            
#7052: 
    load     u64       sp               
    load     i64       0                
    iloadx   i64 /1                     
    load     i64       16               
    load     i64       63               
    loadbf   i64                        
    store    i64       a                
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    store    i64       b                
    jump               #7048            
#7053: 
    load     i64       1                
    store    i64       a                
    load     u64       &qq_tables.ttlength
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i64 /8                     
    store    i64       b                
    jump               #7048            
#7054: 
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    store    i64       t                
    jump               #7058            
    jump               #7048            
#7055: 
    load     i64       0                
    store    i64       a                
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       1                
    sub      i64                        
    store    i64       b                
    jump               #7048            
#7056: 
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    store    i64       t                
! qq_runaux.k_bounds.dotype:
#7058: 
    load     u64       &qq_tables.ttbasetype
    load     i64       t                
    iloadx   i16 /2                     
    widen    i64/i16                    
    load     i64       7                
    jumpeq   i64 /1    #7060            
    load     i64       13               
    jumpeq   i64       #7060            
    jump               #7061            
#7060: 
    load     u64       &qq_tables.ttlower
    load     i64       t                
    iloadx   i64 /8                     
    store    i64       a                
    load     u64       &qq_tables.ttlength
    load     i64       t                
    iloadx   i64 /8                     
    load     i64       a                
    add      i64                        
    load     i64       1                
    sub      i64                        
    store    i64       b                
    jump               #7059            
#7061: 
    setcall      /2/1                   
    load     u64       sp               
    setarg   u64 /2                     
    load     u64       "t.bounds"       
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#7059: 
    jump               #7048            
#7057: 
    setcall      /2/1                   
    load     u64       sp               
    setarg   u64 /2                     
    load     u64       "Bounds"         
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#7048: 
    load     i64       a                
    load     u64       lower            
    istore   i64                        
    load     i64       b                
    load     u64       upper            
    istore   i64                        
    retproc                             
endproc

proc qq_runaux.k_type:
    param    u64       sp
    param    i64       n
    local    i64       t
    rettype  i64
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       t                
    load     i64       n                
    load     i64       0                
    jumpeq   i64 /1    #7064            
    load     i64       1                
    jumpeq   i64       #7065            
    jump               #7066            
#7064: 
    jump               #7063            
#7065: 
    load     i64       t                
    load     i64       12               
    jumpeq   i64 /1    #7068            
    load     i64       13               
    jumpeq   i64 /1    #7068            
    load     i64       7                
    jumpeq   i64       #7068            
    jump               #7069            
#7068: 
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    store    i64       t                
    jump               #7067            
#7069: 
#7067: 
    jump               #7063            
#7066: 
    load     i64       t                
    load     i64       11               
    jumpeq   i64 /1    #7071            
    load     i64       8                
    jumpeq   i64 /1    #7071            
    load     i64       16               
    jumpeq   i64 /1    #7072            
    load     i64       14               
    jumpeq   i64 /1    #7072            
    load     i64       15               
    jumpeq   i64 /1    #7072            
    load     i64       5                
    jumpeq   i64 /1    #7073            
    load     i64       7                
    jumpeq   i64       #7074            
    jump               #7075            
#7071: 
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    store    i64       t                
    jump               #7070            
#7072: 
    load     u64       sp               
    load     i64       4                
    iloadx   u32 /1                     
    widen    i64/u32                    
    store    i64       t                
    jump               #7070            
#7073: 
    load     i64       33               
    store    i64       t                
    jump               #7070            
#7074: 
    load     u64       &qq_tables.tttarget
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i16 /2                     
    widen    i64/i16                    
    store    i64       t                
    jump               #7070            
#7075: 
    load     i64       0                
    store    i64       t                
#7070: 
#7063: 
    load     i64       t                
    jumpret  i64       #7062            
#7062: 
    retfn    i64                        
endproc

proc qq_runaux.k_dot:
    param    u64       sp
    param    u64       g
    local    u64       d
    local    u64       p
    local    u64       q
    local    i64       rectype
    local    mem:16       v
! qq_runaux.k_dot.restart:
#7077: 
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       12               
    jumpeq   i64 /1    #7079            
    load     i64       13               
    jumpeq   i64 /1    #7079            
    load     i64       14               
    jumpeq   i64       #7080            
    jump               #7081            
#7079: 
    jump               #7078            
#7080: 
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       sp               
    jump               #7077            
    jump               #7078            
#7081: 
    setcall      /2/1                   
    load     u64       sp               
    setarg   u64 /2                     
    load     u64       "1:dot/not record"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#7078: 
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    store    i64       rectype          
    setcall  u64 /2/1                   
    load     i64       rectype          
    setarg   i64 /2                     
    load     u64       g                
    setarg   u64 /1                     
    callf    u64 /2    &qq_runaux.resolvefield
    store    u64       d                
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       11               
    jumpeq   i64 /1    #7083            
    load     i64       12               
    jumpeq   i64 /1    #7084            
    load     i64       5                
    jumpeq   i64 /1    #7085            
    load     i64       21               
    jumpeq   i64       #7086            
    jump               #7087            
#7083: 
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       d                
    load     i64       108              
    iloadx   i16 /1                     
    widen    i64/i16                    
    load     i64       16               
    idiv     i64                        
    addpx    u64 /16                    
    store    u64       p                
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #7089            
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#7089: 
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #7091            
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#7091: 
    load     u64       p                
    iload    mem:16                     
    load     u64       sp               
    istore   mem:16                     
    jump               #7082            
#7084: 
    setcall      /4/1                   
    load     u64       0                
    setarg   u64 /4                     
    load     u64       &v               
    setarg   u64 /3                     
    load     u64       d                
    load     i64       116              
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /2                     
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       d                
    load     i64       108              
    iloadx   i16 /1                     
    widen    i64/i16                    
    addpx    u64 /1                     
    setarg   u64 /1                     
    callp        /4    &qq_packed.var_loadpacked
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #7093            
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#7093: 
    load     mem:16       v             
    load     u64       sp               
    istore   mem:16                     
    jump               #7082            
#7085: 
    load     i64       17               
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     u64       d                
    load     u64       sp               
    load     i64       8                
    istorex  u64 /1                     
    jump               #7082            
#7086: 
    load     i64       17               
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     u64       d                
    load     i64       56               
    iloadx   u64 /1                     
    load     u64       sp               
    load     i64       8                
    istorex  u64 /1                     
    jump               #7082            
#7087: 
    setcall      /2/1                   
    load     u64       &qq_tables.namenames
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /2                     
    load     u64       "DOT: can't do this fieldtype:"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7082: 
    retproc                             
endproc

proc qq_runaux.k_dotref:
    param    u64       sp
    param    u64       g
    local    u64       d
    local    u64       p
    local    u64       q
    local    i64       rectype
! qq_runaux.k_dotref.restart:
#7095: 
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       12               
    jumpeq   i64 /1    #7097            
    load     i64       13               
    jumpeq   i64 /1    #7097            
    load     i64       14               
    jumpeq   i64       #7098            
    jump               #7099            
#7097: 
    jump               #7096            
#7098: 
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       sp               
    jump               #7095            
    jump               #7096            
#7099: 
    setcall      /2/1                   
    load     u64       sp               
    setarg   u64 /2                     
    load     u64       "2:dot/not record"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#7096: 
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    store    i64       rectype          
    setcall  u64 /2/1                   
    load     i64       rectype          
    setarg   i64 /2                     
    load     u64       g                
    setarg   u64 /1                     
    callf    u64 /2    &qq_runaux.resolvefield
    store    u64       d                
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       11               
    jumpeq   i64 /1    #7101            
    load     i64       12               
    jumpeq   i64       #7102            
    jump               #7103            
#7101: 
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       d                
    load     i64       108              
    iloadx   i16 /1                     
    widen    i64/i16                    
    load     i64       16               
    idiv     i64                        
    addpx    u64 /16                    
    store    u64       p                
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #7105            
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#7105: 
    load     i64       14               
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     u64       p                
    load     u64       sp               
    load     i64       8                
    istorex  u64 /1                     
    jump               #7100            
#7102: 
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       d                
    load     i64       108              
    iloadx   i16 /1                     
    widen    i64/i16                    
    addpx    u64 /1                     
    store    u64       q                
    load     u64       sp               
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #7107            
    setcall      /1/1                   
    load     u64       sp               
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#7107: 
    load     i64       16               
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     u64       q                
    load     u64       sp               
    load     i64       8                
    istorex  u64 /1                     
    load     u64       d                
    load     i64       116              
    iloadx   i16 /1                     
    widen    i64/i16                    
    load     u64       sp               
    load     i64       4                
    istorex  u32 /1                     
    jump               #7100            
#7103: 
    setcall      /2/1                   
    load     u64       &qq_tables.namenames
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /2                     
    load     u64       "DOTREF: can't do this fieldtype:"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7100: 
    retproc                             
endproc

proc qq_runaux.k_popdot:
    param    u64       sp
    param    u64       g
    local    u64       d
    local    u64       p
    local    u64       x
    local    u64       y
    rettype  u64
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       x                
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       y                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       12               
    jumpeq   i64 /1    #7110            
    load     i64       13               
    jumpeq   i64       #7110            
    jump               #7111            
#7110: 
    jump               #7109            
#7111: 
    setcall      /2/1                   
    load     u64       x                
    setarg   u64 /2                     
    load     u64       "3:dot/not record"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#7109: 
    setcall  u64 /2/1                   
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    setarg   i64 /2                     
    load     u64       g                
    setarg   u64 /1                     
    callf    u64 /2    &qq_runaux.resolvefield
    store    u64       d                
    load     u64       x                
    load     i64       1                
    iloadx   u8  /1                     
    jumpt    u8        #7113            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "POPDOT"         
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7113: 
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    loadbit  i64                        
    jumpt    u64       #7115            
    setcall      /0/1                   
    callp        /0    &qq_lib.pcnotmut 
#7115: 
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       11               
    jumpeq   i64 /1    #7117            
    load     i64       12               
    jumpeq   i64       #7118            
    jump               #7119            
#7117: 
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       d                
    load     i64       108              
    iloadx   i16 /1                     
    widen    i64/i16                    
    load     i64       16               
    idiv     i64                        
    addpx    u64 /16                    
    store    u64       p                
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #7121            
    setcall      /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#7121: 
    load     u64       y                
    iload    mem:16                     
    load     u64       p                
    istore   mem:16                     
    load     u64       x                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #7123            
    setcall      /1/1                   
    load     u64       x                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#7123: 
    jump               #7116            
#7118: 
    setcall      /3/1                   
    load     u64       d                
    load     i64       116              
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /3                     
    load     u64       y                
    setarg   u64 /2                     
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       d                
    load     i64       108              
    iloadx   i16 /1                     
    widen    i64/i16                    
    addpx    u64 /1                     
    setarg   u64 /1                     
    callp        /3    &qq_packed.var_storepacked
    load     u64       x                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #7125            
    setcall      /1/1                   
    load     u64       x                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#7125: 
    jump               #7116            
#7119: 
    setcall      /2/1                   
    load     u64       &qq_tables.namenames
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /2                     
    load     u64       "POPDOT: can't do this fieldtype:"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7116: 
    load     u64       sp               
    jumpret  u64       #7108            
#7108: 
    retfn    u64                        
endproc

proc qq_runaux.resolvefield:
    param    u64       g
    param    i64       rectype
    local    u64       d
    rettype  u64
    jump               #7128            
#7127: 
    load     u64       g                
    load     i64       0                
    iloadx   u64 /1                     
    store    u64       d                
    load     u64       d                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       116              
    iloadx   i16 /1                     
    widen    i64/i16                    
    load     i64       rectype          
    jumpne   i64       #7131            
    load     u64       d                
    jumpret  u64       #7126            
#7131: 
    load     u64       g                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       g                
#7128: 
    load     u64       g                
    jumpt    u64       #7127            
    setcall      /2/1                   
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       "Can't resolve field:"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
    load     u64       0                
    jumpret  u64       #7126            
#7126: 
    retfn    u64                        
endproc

proc qq_runaux.k_convrefpack:
    param    u64       sp
    local    u64       a
    local    i64       tag
    local    i64       elemtype
    local    u64       p
    local    u64       pa
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       14               
    jumpeq   i64 /1    #7134            
    load     i64       16               
    jumpeq   i64 /1    #7135            
    load     i64       15               
    jumpeq   i64       #7135            
    jump               #7136            
#7134: 
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       a                
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pa               
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #7138            
    load     i64       16               
    jumpeq   i64 /1    #7138            
    load     i64       2                
    jumpeq   i64 /1    #7139            
    load     i64       11               
    jumpeq   i64 /1    #7140            
    load     i64       8                
    jumpeq   i64 /1    #7141            
    load     i64       5                
    jumpeq   i64 /1    #7142            
    load     i64       9                
    jumpeq   i64 /1    #7143            
    load     i64       13               
    jumpeq   i64 /1    #7144            
    load     i64       7                
    jumpeq   i64 /1    #7145            
    load     i64       3                
    jumpeq   i64       #7146            
    jump               #7147            
#7138: 
    load     u64       a                
    load     i64       8                
    addpx    u64 /1                     
    store    u64       p                
    load     i64       26               
    store    i64       elemtype         
    jump               #7137            
#7139: 
    load     u64       a                
    load     i64       8                
    addpx    u64 /1                     
    store    u64       p                
    load     i64       32               
    store    i64       elemtype         
    jump               #7137            
#7140: 
    load     u64       pa               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       pa               
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    store    i64       elemtype         
    jump               #7137            
#7141: 
    load     u64       pa               
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       sp               
    load     i64       8                
    istorex  u64 /1                     
    load     u64       pa               
    load     i64       7                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       &qq_tables.ttbitwidth
    load     u64       pa               
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   u8  /1                     
    widen    i64/u8                     
    mul      i64                        
    load     u64       sp               
    load     i64       2                
    istorex  u8  /1                     
    load     i64       0                
    load     u64       sp               
    load     i64       3                
    istorex  u8  /1                     
    load     i64       15               
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     u64       pa               
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     u64       sp               
    load     i64       4                
    istorex  u32 /1                     
    jump               #7132            
    jump               #7137            
#7142: 
    load     u64       pa               
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       sp               
    load     i64       8                
    istorex  u64 /1                     
    load     i64       0                
    load     u64       sp               
    load     i64       2                
    istorex  u8  /1                     
    load     i64       0                
    load     u64       sp               
    load     i64       3                
    istorex  u8  /1                     
    load     i64       15               
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     i64       33               
    load     u64       sp               
    load     i64       4                
    istorex  u32 /1                     
    jump               #7132            
    jump               #7137            
#7143: 
    load     u64       pa               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     i64       27               
    store    i64       elemtype         
    load     u64       p                
    load     u64       0                
    jumpne   u64       #7149            
    load     u64       ""               
    store    u64       p                
#7149: 
    jump               #7137            
#7144: 
    load     u64       pa               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       pa               
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    store    i64       elemtype         
    jump               #7137            
#7145: 
    load     u64       pa               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       pa               
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    store    i64       elemtype         
    jump               #7137            
#7146: 
    load     u64       pa               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     i64       25               
    store    i64       elemtype         
    jump               #7137            
#7147: 
    setcall      /2/1                   
    load     u64       a                
    setarg   u64 /2                     
    load     u64       "Getrefpack1"    
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#7137: 
    jump               #7133            
#7135: 
    jump               #7132            
    jump               #7133            
#7136: 
    setcall      /2/1                   
    load     u64       sp               
    setarg   u64 /2                     
    load     u64       "Getrefpack2"    
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#7133: 
! qq_runaux.k_convrefpack.done:
    load     i64       16               
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     u64       p                
    load     u64       sp               
    load     i64       8                
    istorex  u64 /1                     
    load     i64       elemtype         
    load     u64       sp               
    load     i64       4                
    istorex  u32 /1                     
#7132: 
    retproc                             
endproc

proc qq_runaux.k_incrptr:
    param    u64       p
    param    i64       step
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       14               
    jumpeq   i64 /1    #7153            
    load     i64       16               
    jumpeq   i64       #7154            
    jump               #7155            
#7153: 
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #7157            
    load     i64       14               
    jumpeq   i64 /1    #7158            
    load     i64       16               
    jumpeq   i64 /1    #7159            
    load     i64       2                
    jumpeq   i64       #7160            
    jump               #7161            
#7157: 
    load     i64       step             
    load     u64       p                
    load     i64       8                
    addpx    u64 /1                     
    addto    i64                        
    jump               #7156            
#7158: 
    load     i64       step             
    load     u64       p                
    load     i64       8                
    addpx    u64 /1                     
    addpxto  u64 /16                    
    jump               #7156            
#7159: 
    load     u64       &qq_tables.ttsize
    load     u64       p                
    load     i64       4                
    iloadx   u32 /1                     
    widen    i64/u32                    
    iloadx   i64 /8                     
    load     i64       step             
    mul      i64                        
    load     u64       p                
    load     i64       8                
    addpx    u64 /1                     
    addpxto  u64 /1                     
    jump               #7156            
#7160: 
    load     i64       step             
    float    r64/i64                    
    load     u64       p                
    load     i64       8                
    addpx    u64 /1                     
    addto    r64                        
    jump               #7156            
#7161: 
    setcall      /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     u64       "incrptr/refvar" 
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#7156: 
    jump               #7152            
#7154: 
    load     u64       p                
    load     i64       4                
    iloadx   u32 /1                     
    widen    i64/u32                    
    load     i64       27               
    jumpeq   i64 /1    #7163            
    load     i64       23               
    jumpeq   i64 /1    #7163            
    load     i64       28               
    jumpeq   i64 /1    #7164            
    load     i64       24               
    jumpeq   i64       #7164            
    jump               #7165            
#7163: 
    load     i64       step             
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    addto    u8                         
    jump               #7162            
#7164: 
    load     i64       step             
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    addto    u16                        
    jump               #7162            
#7165: 
    setcall      /2/1                   
    load     u64       p                
    load     i64       4                
    iloadx   u32 /1                     
    widen    i64/u32                    
    setarg   i64 /2                     
    load     u64       "incrptr/ref"    
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#7162: 
    jump               #7152            
#7155: 
    setcall      /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     u64       "incrptr"        
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#7152: 
    retproc                             
endproc

proc qq_runaux.k_cmp:
    param    i64       cc
    param    u64       x
    param    u64       y
    local    i64       res
    rettype  i64
    startmx                             
    load     i64       cc               
    load     i64       0                
    jumpeq   i64 /1    #7168            
    load     i64       1                
    jumpeq   i64       #7169            
    jump               #7170            
#7168: 
    setcall  i64 /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callf    i64 /2    &qq_vars.var_equal
    resetmx  i64                        
    jump               #7167            
#7169: 
    setcall  i64 /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callf    i64 /2    &qq_vars.var_equal
    toboolf  i64/i64                    
    resetmx  i64                        
    jump               #7167            
#7170: 
    setcall  i64 /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callf    i64 /2    &qq_vars.var_compare
    store    i64       res              
    startmx                             
    load     i64       cc               
    load     i64       2                
    jumpeq   i64 /1    #7172            
    load     i64       3                
    jumpeq   i64 /1    #7173            
    load     i64       4                
    jumpeq   i64       #7174            
    jump               #7175            
#7172: 
    load     i64       res              
    load     i64       0                
    setlt    i64                        
    resetmx  i64                        
    jump               #7171            
#7173: 
    load     i64       res              
    load     i64       0                
    setle    i64                        
    resetmx  i64                        
    jump               #7171            
#7174: 
    load     i64       res              
    load     i64       0                
    setge    i64                        
    resetmx  i64                        
    jump               #7171            
#7175: 
    load     i64       res              
    load     i64       0                
    setgt    i64                        
    endmx    i64                        
#7171: 
    endmx    i64                        
#7167: 
    jumpret  i64       #7166            
#7166: 
    retfn    i64                        
endproc

proc qq_runaux.k_bytesize:
    param    u64       sp
    local    i64       t
    local    u64       p
    rettype  i64
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       t                
    load     i64       t                
    load     i64       18               
    jumpeq   i64 /1    #7178            
    load     i64       13               
    jumpeq   i64 /1    #7179            
    load     i64       12               
    jumpeq   i64 /1    #7179            
    load     i64       7                
    jumpeq   i64       #7179            
    jump               #7180            
#7178: 
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    store    i64       t                
    jump               #7177            
#7179: 
    load     u64       sp               
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    store    i64       t                
    jump               #7177            
#7180: 
#7177: 
    startmx                             
    load     i64       t                
    load     i64       11               
    jumpeq   i64 /1    #7182            
    load     i64       5                
    jumpeq   i64 /1    #7183            
    load     i64       9                
    jumpeq   i64 /1    #7184            
    load     i64       8                
    jumpeq   i64 /1    #7185            
    load     i64       10               
    jumpeq   i64 /1    #7186            
    load     i64       6                
    jumpeq   i64 /1    #7186            
    load     i64       12               
    jumpeq   i64 /1    #7187            
    load     i64       13               
    jumpeq   i64 /1    #7187            
    load     i64       7                
    jumpeq   i64 /1    #7187            
    load     i64       3                
    jumpeq   i64       #7188            
    jump               #7189            
#7182: 
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    load     u64       &qq_tables.ttsize
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i64 /8                     
    mul      i64                        
    resetmx  i64                        
    jump               #7181            
#7183: 
    setcall  i64 /2/1                   
    load     i64       33               
    setarg   i64 /2                     
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callf    i64 /2    &qq_bits.getbitssize
    resetmx  i64                        
    jump               #7181            
#7184: 
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    resetmx  i64                        
    jump               #7181            
#7185: 
    setcall  i64 /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callf    i64 /1    &qq_bits.bits_bytesize
    resetmx  i64                        
    jump               #7181            
#7186: 
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       16               
    mul      i64                        
    resetmx  i64                        
    jump               #7181            
#7187: 
    load     u64       &qq_tables.ttsize
    load     i64       t                
    iloadx   i64 /8                     
    resetmx  i64                        
    jump               #7181            
#7188: 
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       4                
    mul      i64                        
    resetmx  i64                        
    jump               #7181            
#7189: 
    load     u64       &qq_tables.ttsize
    load     i64       t                
    iloadx   i64 /8                     
    endmx    i64                        
#7181: 
    jumpret  i64       #7176            
#7176: 
    retfn    i64                        
endproc

proc qq_runaux.k_when:
    param    u64       x
    param    u64       y
    rettype  i64
    startmx                             
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       16               
    shl      i64                        
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    bitor    i64                        
    load     i64       65540            
    jumpeq   i64 /1    #7192            
    load     i64       65541            
    jumpeq   i64 /1    #7193            
    load     i64       1179653          
    jumpeq   i64       #7193            
    jump               #7194            
#7192: 
    startmx                             
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       y                
    load     i64       0                
    iloadx   i64 /1                     
    load     i64       16               
    load     i64       63               
    loadbf   i64                        
    jumplt   i64 /1    #7196            
    load     u64       y                
    load     i64       8                
    iloadx   i64 /1                     
    jumpgt   i64       #7196            
    load     i64       1                
    resetmx  i64                        
    jump               #7195            
#7196: 
    load     i64       0                
    endmx    i64                        
#7195: 
    resetmx  i64                        
    jump               #7191            
#7193: 
    setcall  i64 /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callf    i64 /2    &qq_sets.var_in_set
    resetmx  i64                        
    jump               #7191            
#7194: 
    setcall  i64 /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callf    i64 /2    &qq_vars.var_equal
    endmx    i64                        
#7191: 
    jumpret  i64       #7190            
#7190: 
    retfn    i64                        
endproc

proc qq_runaux.raiseexception:
    param    i64       exceptno
    local    u64       stackend
    local    u64       oldsptr
    rettype  u64
    load     u64       &qq_decls.varstack
    load     i64       0                
    addpx    u8  /1                     
    store    u64       stackend         
    load     u64       qq_decls.sptr    
    store    u64       oldsptr          
#7198: 
    load     u64       qq_decls.sptr    
    load     u64       stackend         
    jumpgt   u64       #7201            
    load     u64       oldsptr          
    store    u64       qq_decls.sptr    
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "DEFAULT EXCEPTION"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7201: 
    load     u64       qq_decls.sptr    
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       21               
    jumpne   i64       #7203            
    load     i64       exceptno         
    load     i64       0                
    jumpeq   i64       #7204            
    load     u64       qq_decls.sptr    
    load     i64       3                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       exceptno         
    jumpne   i64       #7203            
#7204: 
    jump               #7199            
#7203: 
    load     u64       qq_decls.sptr    
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #7206            
    setcall      /1/1                   
    load     u64       qq_decls.sptr    
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#7206: 
    load     u64 /1    &qq_decls.sptr   
    decrto   u64 /16                    
    jump               #7198            
#7199: 
    load     u64       qq_decls.sptr    
    load     u64       qq_decls.sptr    
    load     i64       4                
    iloadx   i16 /1                     
    widen    i64/i16                    
    addpx    u64 /1                     
    store    u64       qq_decls.frameptr
    load     u64       qq_decls.sptr    
    load     i64       8                
    iloadx   u64 /1                     
    jumpret  u64       #7197            
#7197: 
    retfn    u64                        
endproc

proc qq_runaux.runproc_m:
    param    u64       amsg
    local    mem:16       a
    local    mem:16       b
    local    mem:16       dest
    local    i64       i
    local    i64       result
    local    mem:32       obj
    rettype  i64
    load     i64       qq_runaux.runproc_m.rmsg_typeno
    load     i64       0                
    jumpne   i64       #7209            
    load     i64       1                
    store    i64       i                
    load     i64       qq_tables.ntypes 
    load     i64       1                
    jumplt   i64       #7212            
#7210: 
    setcall  i64 /2/1                   
    load     u64       "ws_msg64"       
    setarg   u64 /2                     
    load     u64       &qq_tables.ttname
    load     i64       i                
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callf    i64 /2    &mlib.eqstring   
    jumpf    i64       #7214            
    load     i64       i                
    store    i64       qq_runaux.runproc_m.rmsg_typeno
    jump               #7212            
#7214: 
    forup    i64 /1    #7210            
    opnd     i64       i                
    opnd     i64       qq_tables.ntypes 
#7212: 
#7209: 
    load     i64       qq_runaux.runproc_m.rmsg_typeno
    load     i64       0                
    jumpne   i64       #7216            
    setcall      /1/1                   
    load     u64       "mainwndproc: can't find rmsg"
    setarg   u64 /1                     
    callp        /1    &mlib.abortprogram
#7216: 
    setcall      /3/1                   
    load     u64       32               
    setarg   u64 /3                     
    load     i64       0                
    setarg   i32 /2                     
    load     u64       &obj             
    setarg   u64 /1                     
    callp        /3    &memset          
    load     i64       99               
    load     u64       &obj             
    load     i64       0                
    istorex  u32 /1                     
    load     u64       amsg             
    load     u64       &obj             
    load     i64       8                
    istorex  u64 /1                     
    load     i64       qq_runaux.runproc_m.rmsg_typeno
    load     u64       &obj             
    load     i64       6                
    istorex  u16 /1                     
    load     i64       269              
    load     u64       &a               
    load     i64       0                
    istorex  u32 /1                     
    load     u64       &obj             
    load     u64       &a               
    load     i64       8                
    istorex  u64 /1                     
    setcall      /4/1                   
    load     u64       &dest            
    setarg   u64 /4                     
    load     u64       0                
    setarg   u64 /3                     
    load     u64       &a               
    setarg   u64 /2                     
    load     u64       qq_decls.pcl_callbackfn
    setarg   u64 /1                     
    callp        /4    &qq_runaux.runproc
    load     u64       &dest            
    load     i64       8                
    iloadx   i64 /1                     
    store    i64       result           
    load     i64       0                
    store    i64       result           
    load     i64       result           
    jumpret  i64       #7207            
#7207: 
    retfn    i64                        
endproc

proc qq_runaux.runproc:
    param    u64       fnptr
    param    u64       a
    param    u64       b
    param    u64       dest
    local    u64       oldsptr
    local    u64       oldframeptr
    local    u64       oldpcptr
    local    u8       oldstopped
    local    i64       nparams
    load     i64       1                
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     i64       0                
    load     u64       dest             
    load     i64       8                
    istorex  i64 /1                     
    load     i64       qq_decls.stopped 
    store    u8        oldstopped       
    load     u64       qq_decls.pcptr   
    store    u64       oldpcptr         
    load     u64       qq_decls.sptr    
    store    u64       oldsptr          
    load     u64       qq_decls.frameptr
    store    u64       oldframeptr      
    load     i64       999              
    load     u64 /1    &qq_decls.sptr   
    incrload u64 /16                    
    load     i64       0                
    istorex  u32 /1                     
    load     u64       b                
    jumpf    u64       #7219            
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    jumpf    u8        #7219            
    load     i64       2                
    store    i64       nparams          
    load     u64       a                
    iload    mem:16                     
    load     u64 /1    &qq_decls.sptr   
    incrload u64 /16                    
    istore   mem:16                     
    load     u64       b                
    iload    mem:16                     
    load     u64 /1    &qq_decls.sptr   
    incrload u64 /16                    
    istore   mem:16                     
    jump               #7218            
#7219: 
    load     u64       a                
    jumpf    u64       #7220            
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    jumpf    u8        #7220            
    load     i64       1                
    store    i64       nparams          
    load     u64       a                
    iload    mem:16                     
    load     u64 /1    &qq_decls.sptr   
    incrload u64 /16                    
    istore   mem:16                     
    jump               #7218            
#7220: 
    load     i64       0                
    store    i64       nparams          
#7218: 
    load     i64       20               
    load     u64 /1    &qq_decls.sptr   
    incrload u64 /16                    
    load     i64       0                
    istorex  u32 /1                     
    load     u64       qq_decls.stopseq 
    load     u64       qq_decls.sptr    
    load     i64       8                
    istorex  u64 /1                     
    load     u64       qq_decls.frameptr
    load     u64       qq_decls.sptr    
    load     i64       4                
    istorex  u32 /1                     
    load     u64       qq_decls.sptr    
    store    u64       qq_decls.frameptr
    load     u64       fnptr            
    store    u64       qq_decls.pcptr   
    setcall      /0/1                   
    callp        /0    &qq_runx.disploop
    load     u64       qq_decls.sptr    
    load     i64       11               
    subpx    u64 /16                    
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       20               
    jumpne   i64       #7222            
    load     u64       qq_decls.sptr    
    iload    mem:16                     
    load     u64       dest             
    istore   mem:16                     
    jump               #7221            
#7222: 
    load     u64 /1    &qq_decls.sptr   
    decrto   u64 /16                    
    load     u64       qq_decls.sptr    
    iload    mem:16                     
    load     u64       dest             
    istore   mem:16                     
    load     u64       dest             
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #7224            
    load     i64       1                
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     i64       0                
    load     u64       dest             
    load     i64       8                
    istorex  i64 /1                     
#7224: 
#7221: 
    load     u64       oldpcptr         
    store    u64       qq_decls.pcptr   
    load     u8        oldstopped       
    widen    i64/u8                     
    store    i64       qq_decls.stopped 
    load     u64       oldsptr          
    store    u64       qq_decls.sptr    
    load     u64       oldframeptr      
    store    u64       qq_decls.frameptr
    load     u8        oldstopped       
    widen    i64/u8                     
    store    i64       qq_decls.stopped 
    retproc                             
endproc

proc qq_runaux.k_keyindex:
    param    u64       sp
    local    u64       d
    local    u64       k
    local    u64       p
    local    u64       def
    rettype  u64
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       def              
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       k                
    load     u64       sp               
    store    u64       d                
    load     u64       d                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       6                
    jumpeq   i64       #7227            
    setcall      /2/1                   
    load     u64       d                
    setarg   u64 /2                     
    load     u64       "dict{}"         
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#7227: 
    setcall  u64 /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     u64       k                
    setarg   u64 /2                     
    load     u64       d                
    setarg   u64 /1                     
    callf    u64 /3    &qq_dicts.var_finddictitem
    store    u64       p                
    load     u64       d                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #7229            
    setcall      /1/1                   
    load     u64       d                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#7229: 
    load     u64       k                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #7231            
    setcall      /1/1                   
    load     u64       k                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#7231: 
    load     u64       p                
    jumpf    u64       #7233            
    load     u64       p                
    iload    mem:16                     
    load     u64       sp               
    istore   mem:16                     
    load     u64       def              
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #7235            
    setcall      /1/1                   
    load     u64       def              
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#7235: 
    jump               #7232            
#7233: 
    load     u64       def              
    iload    mem:16                     
    load     u64       sp               
    istore   mem:16                     
#7232: 
    load     u64       sp               
    jumpret  u64       #7225            
#7225: 
    retfn    u64                        
endproc

proc qq_runaux.k_popkeyindex:
    param    u64       sp
    local    u64       d
    local    u64       k
    local    u64       p
    local    u64       x
    rettype  u64
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       k                
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       d                
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       x                
    load     u64       d                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       6                
    jumpeq   i64       #7238            
    setcall      /2/1                   
    load     u64       d                
    setarg   u64 /2                     
    load     u64       "dict{}:="       
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#7238: 
    setcall  u64 /3/1                   
    load     i64       1                
    setarg   i64 /3                     
    load     u64       k                
    setarg   u64 /2                     
    load     u64       d                
    setarg   u64 /1                     
    callf    u64 /3    &qq_dicts.var_finddictitem
    store    u64       p                
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpeq   i64       #7240            
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #7242            
    setcall      /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#7242: 
#7240: 
    load     u64       x                
    iload    mem:16                     
    load     u64       p                
    istore   mem:16                     
    load     u64       d                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #7244            
    setcall      /1/1                   
    load     u64       d                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#7244: 
    load     u64       k                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #7246            
    setcall      /1/1                   
    load     u64       k                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#7246: 
    load     u64       sp               
    jumpret  u64       #7236            
#7236: 
    retfn    u64                        
endproc

proc qq_runaux.k_keyindexref:
    param    u64       sp
    local    u64       d
    local    u64       k
    local    u64       p
    local    u64       x
    rettype  u64
    load     u64 /1    &sp              
    loaddecr u64 /16                    
    store    u64       k                
    load     u64       sp               
    store    u64       d                
    load     u64       d                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       6                
    jumpeq   i64       #7249            
    setcall      /2/1                   
    load     u64       d                
    setarg   u64 /2                     
    load     u64       "&dict{}"        
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#7249: 
    setcall  u64 /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     u64       k                
    setarg   u64 /2                     
    load     u64       d                
    setarg   u64 /1                     
    callf    u64 /3    &qq_dicts.var_finddictitem
    store    u64       p                
    load     u64       p                
    load     u64       0                
    jumpne   u64       #7251            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "&dict{} not found"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7251: 
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #7253            
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#7253: 
    load     u64       k                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #7255            
    setcall      /1/1                   
    load     u64       k                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#7255: 
    load     u64       d                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #7257            
    setcall      /1/1                   
    load     u64       d                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#7257: 
    load     i64       14               
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     u64       p                
    load     u64       sp               
    load     i64       8                
    istorex  u64 /1                     
    load     u64       sp               
    jumpret  u64       #7247            
#7247: 
    retfn    u64                        
endproc

proc qq_runaux.k_map:
    param    u64       sp
    param    u64       pc
    param    u64       newsp
    local    i64       nargs
    rettype  u64
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       19               
    jumpeq   i64       #7260            
    jump               #7261            
#7260: 
    load     u64       qq_runx.jumptable
    load     u64       0                
    jumpne   u64       #7263            
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       &qq_runaux.k_map.codeseq
    load     i64       1                
    addpx    mem:32 /32/-32             
    load     i64       8                
    istorex  u8  /1                     
    jump               #7262            
#7263: 
    load     u64       qq_runx.jumptable
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    iloadx   u64 /8                     
    load     u64       &qq_runaux.k_map.codeseq
    load     i64       1                
    addpx    mem:32 /32/-32             
    load     i64       0                
    istorex  u64 /1                     
#7262: 
    load     u64 /1    &sp              
    decrto   u64 /16                    
    load     u64       pc               
    load     i64       1                
    addpx    u64 /32                    
    iload    mem:32                     
    load     u64       &qq_runaux.k_map.codeseq
    load     i64       2                
    istorex  mem:32 /32/-32             
    jump               #7259            
#7261: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Apply:no op"    
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7259: 
    load     u64       sp               
    load     u64       newsp            
    istore   u64                        
    load     u64       &qq_runaux.k_map.codeseq
    load     i64       0                
    addpx    u8  /1                     
    jumpret  u64       #7258            
#7258: 
    retfn    u64                        
endproc

proc qq_runaux.k_maxval:
    param    u64       sp
    local    i64       a
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       18               
    jumpne   i64       #7266            
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       0                
    istorex  u8  /1                     
#7266: 
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       27               
    jumpeq   i64 /1    #7268            
    load     i64       28               
    jumpeq   i64 /1    #7269            
    load     i64       29               
    jumpeq   i64 /1    #7270            
    load     i64       30               
    jumpeq   i64 /1    #7271            
    load     i64       23               
    jumpeq   i64 /1    #7272            
    load     i64       24               
    jumpeq   i64 /1    #7273            
    load     i64       25               
    jumpeq   i64 /1    #7274            
    load     i64       26               
    jumpeq   i64 /1    #7275            
    load     i64       1                
    jumpeq   i64       #7275            
    jump               #7276            
#7268: 
    load     i64       255              
    store    i64       a                
    jump               #7267            
#7269: 
    load     i64       65536            
    store    i64       a                
    jump               #7267            
#7270: 
    load     i64       4294967295       
    store    i64       a                
    jump               #7267            
#7271: 
    load     i64       -1               
    store    i64       a                
    jump               #7267            
#7272: 
    load     i64       127              
    store    i64       a                
    jump               #7267            
#7273: 
    load     i64       32767            
    store    i64       a                
    jump               #7267            
#7274: 
    load     i64       2147483647       
    store    i64       a                
    jump               #7267            
#7275: 
    load     i64       9223372036854775807
    store    i64       a                
    jump               #7267            
#7276: 
    setcall      /2/1                   
    load     u64       sp               
    setarg   u64 /2                     
    load     u64       "MAXVALUE"       
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#7267: 
    load     i64       1                
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     i64       a                
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     u64 /1    &qq_decls.pcptr  
    incrto   u64 /32                    
    retproc                             
endproc

proc qq_runaux.k_minval:
    param    u64       sp
    local    i64       a
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       18               
    jumpne   i64       #7279            
    load     u64       sp               
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       sp               
    load     i64       0                
    istorex  u8  /1                     
#7279: 
    load     u64       sp               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       27               
    jumpeq   i64 /1    #7281            
    load     i64       28               
    jumpeq   i64 /1    #7281            
    load     i64       29               
    jumpeq   i64 /1    #7281            
    load     i64       30               
    jumpeq   i64 /1    #7281            
    load     i64       23               
    jumpeq   i64 /1    #7282            
    load     i64       24               
    jumpeq   i64 /1    #7283            
    load     i64       25               
    jumpeq   i64 /1    #7284            
    load     i64       1                
    jumpeq   i64 /1    #7285            
    load     i64       26               
    jumpeq   i64       #7285            
    jump               #7286            
#7281: 
    load     i64       0                
    store    i64       a                
    jump               #7280            
#7282: 
    load     i64       -128             
    store    i64       a                
    jump               #7280            
#7283: 
    load     i64       -32768           
    store    i64       a                
    jump               #7280            
#7284: 
    load     i64       -2147483648      
    store    i64       a                
    jump               #7280            
#7285: 
    load     i64       -9223372036854775808
    store    i64       a                
    jump               #7280            
#7286: 
    setcall      /2/1                   
    load     u64       sp               
    setarg   u64 /2                     
    load     u64       "MINVALUE"       
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#7280: 
    load     i64       1                
    load     u64       sp               
    load     i64       0                
    istorex  u32 /1                     
    load     i64       a                
    load     u64       sp               
    load     i64       8                
    istorex  i64 /1                     
    load     u64 /1    &qq_decls.pcptr  
    incrto   u64 /32                    
    retproc                             
endproc

proc qq_sets.obj_free_set:
    param    u64       p
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    jumpf    i64       #7289            
    setcall      /2                     
    setcall  i64 /2                     
    load     i64       33               
    setarg   i64 /2                     
    load     u64       p                
    load     i64       24               
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callf    i64 /2    &qq_bits.getbitssize
    setarg   i64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_free   
#7289: 
    setcall      /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callp        /1    &mlib.pcm_free32 
    retproc                             
endproc

proc qq_sets.var_dupl_set:
    param    u64       a
    local    u64       p
    local    u64       q
    local    i64       nbytes
    local    i64       nbits
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       nbits            
    setcall  u64 /1/1                   
    load     i64       nbits            
    setarg   i64 /1                     
    callf    u64 /1    &qq_sets.obj_newset
    store    u64       q                
    load     i64       nbits            
    jumpf    i64       #7292            
    setcall      /3                     
    setcall  u64 /2                     
    load     i64       33               
    setarg   i64 /2                     
    load     i64       nbits            
    setarg   i64 /1                     
    callf    u64 /2    &qq_bits.getbitssize
    setarg   u64 /3                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &memcpy          
#7292: 
    load     u64       q                
    load     u64       a                
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_sets.var_equal_set:
    param    u64       x
    param    u64       y
    local    i64       xbytes
    local    i64       ybytes
    rettype  i64
    setcall  i64 /1/1                   
    load     u64       x                
    setarg   u64 /1                     
    callf    i64 /1    &qq_sets.getsetbytes
    store    i64       xbytes           
    setcall  i64 /1/1                   
    load     u64       y                
    setarg   u64 /1                     
    callf    i64 /1    &qq_sets.getsetbytes
    store    i64       ybytes           
    load     i64       xbytes           
    load     i64       ybytes           
    jumpeq   i64       #7295            
    load     i64       0                
    jumpret  i64       #7293            
#7295: 
    setcall  i64 /3/1                   
    load     i64       xbytes           
    setarg   i64 /3                     
    load     u64       y                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /3    &mlib.eqbytes    
    jumpret  i64       #7293            
#7293: 
    retfn    i64                        
endproc

proc qq_sets.getsetbytes:
    param    u64       x
    local    i64       nbits
    rettype  i64
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       nbits            
    startmx                             
    load     i64       nbits            
    jumpf    i64       #7298            
    startmx                             
    load     i64       nbits            
    load     i64       7                
    bitand   i64                        
    jumpf    i64       #7300            
    load     i64       nbits            
    load     i64       8                
    idiv     i64                        
    load     i64       1                
    add      i64                        
    resetmx  i64                        
    jump               #7299            
#7300: 
    load     i64       nbits            
    load     i64       8                
    idiv     i64                        
    endmx    i64                        
#7299: 
    resetmx  i64                        
    jump               #7297            
#7298: 
    load     i64       0                
    endmx    i64                        
#7297: 
    jumpret  i64       #7296            
#7296: 
    retfn    i64                        
endproc

proc qq_sets.var_make_set:
    param    u64       data
    param    u64       dest
    param    i64       n
    local    u64       q
    local    u64       p
    local    i64       top
    local    i64       a
    local    i64       b
    local    i64       i
    local    i64       j
    local    i64       t
    local    i64       size
    local    u8       alloc
    local    u64       s
    local    i64       av_1
    local    i64       av_2
    load     i64       n                
    load     i64       0                
    jumpne   i64       #7303            
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_sets.var_emptyset
    jump               #7301            
#7303: 
    load     i64       0                
    store    i64       top              
    load     u64       data             
    store    u64       q                
    load     i64       n                
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #7306            
#7304: 
    load     u64       q                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       4                
    jumpeq   i64 /1    #7308            
    load     i64       1                
    jumpeq   i64       #7309            
    jump               #7310            
#7308: 
    load     u64       q                
    load     i64       0                
    iloadx   i64 /1                     
    load     i64       16               
    load     i64       63               
    loadbf   i64                        
    store    i64       a                
    load     u64       q                
    load     i64       8                
    iloadx   i64 /1                     
    store    i64       b                
    jump               #7307            
#7309: 
    load     u64       q                
    load     i64       8                
    iloadx   i64 /1                     
    store    i64       a                
    load     i64       a                
    load     i64       0                
    jumpge   i64       #7312            
    load     i64       a                
    neg      i64                        
    load     i64       1                
    sub      i64                        
    store    i64       a                
    load     i64       a                
    load     i64       top              
    jumple   i64       #7314            
    load     i64       a                
    store    i64       top              
#7314: 
    jump               #7305            
#7312: 
    load     i64       a                
    store    i64       b                
    jump               #7307            
#7310: 
    setcall  i64 /1/1                   
    load     u64       q                
    setarg   u64 /1                     
    callf    i64 /1    &qq_vars.var_getintvalue
    double                              
    store    i64       a                
    store    i64       b                
#7307: 
    load     i64       a                
    load     i64       0                
    jumplt   i64       #7317            
    load     i64       b                
    load     i64       0                
    jumpge   i64       #7316            
#7317: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Neg range element"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7316: 
    load     i64       a                
    load     u64 /1    &top             
    maxto    i64                        
    load     i64       b                
    load     u64 /1    &top             
    maxto    i64                        
    load     u64 /1    &q               
    incrto   u64 /16                    
#7305: 
    to       i64       #7304            
    opnd     i64       av_1             
#7306: 
    setcall  u64 /1/1                   
    load     i64       top              
    load     i64       1                
    add      i64                        
    setarg   i64 /1                     
    callf    u64 /1    &qq_sets.obj_newset
    store    u64       s                
    load     u64       data             
    store    u64       q                
    load     i64       n                
    store    i64       av_2             
    load     i64       av_2             
    load     i64       0                
    jumple   i64       #7320            
#7318: 
    load     u64       q                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       4                
    jumpeq   i64 /1    #7322            
    load     i64       1                
    jumpeq   i64       #7323            
    jump               #7324            
#7322: 
    load     u64       q                
    load     i64       0                
    iloadx   i64 /1                     
    load     i64       16               
    load     i64       63               
    loadbf   i64                        
    store    i64       a                
    load     u64       q                
    load     i64       8                
    iloadx   i64 /1                     
    store    i64       b                
    load     i64       a                
    load     i64       b                
    jumple   i64       #7326            
    load     u64 /1    &a               
    load     u64 /1    &b               
    iswap    i64                        
#7326: 
    jump               #7321            
#7323: 
    load     u64       q                
    load     i64       8                
    iloadx   i64 /1                     
    double                              
    store    i64       a                
    store    i64       b                
    load     i64       a                
    load     i64       0                
    jumpge   i64       #7328            
    jump               #7319            
#7328: 
    jump               #7321            
#7324: 
    setcall  i64 /1/1                   
    load     u64       q                
    setarg   u64 /1                     
    callf    i64 /1    &qq_vars.var_getintvalue
    double                              
    store    i64       a                
    store    i64       b                
#7321: 
    setcall      /3/1                   
    load     i64       b                
    setarg   i64 /3                     
    load     i64       a                
    setarg   i64 /2                     
    load     u64       s                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &qq_lib.setelemblock
    load     u64 /1    &q               
    incrto   u64 /16                    
#7319: 
    to       i64       #7318            
    opnd     i64       av_2             
#7320: 
    setcall      /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     i64       5                
    setarg   i64 /1                     
    callp        /3    &qq_vars.var_objtovar
#7301: 
    retproc                             
endproc

proc qq_sets.obj_newset:
    param    i64       length
    local    u64       p
    local    u64       q
    local    i64       nbits
    local    i64       nbytes
    rettype  u64
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_vars.obj_new 
    store    u64       p                
    load     u64       1                
    load     u64       p                
    load     i64       4                
    addpx    u64 /1                     
    load     i64       1                
    storebit u8                         
    load     i64       length           
    load     u64       p                
    load     i64       16               
    istorex  i64 /1                     
    load     i64       length           
    load     i64       1                
    sub      i64                        
    load     i64       64               
    idiv     i64                        
    load     i64       1                
    add      i64                        
    load     i64       8                
    mul      i64                        
    store    i64       nbytes           
    load     i64       length           
    jumpf    i64       #7331            
    setcall  u64 /1/1                   
    load     i64       nbytes           
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    load     u64       p                
    load     i64       8                
    istorex  u64 /1                     
    load     i64       mlib.allocbytes  
    load     i64       8                
    mul      i64                        
    load     u64       p                
    load     i64       24               
    istorex  i64 /1                     
    setcall      /2/1                   
    load     i64       mlib.allocbytes  
    setarg   i64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_clearmem
    jump               #7330            
#7331: 
    load     u64       0                
    load     u64       p                
    load     i64       8                
    istorex  u64 /1                     
#7330: 
    load     u64       p                
    jumpret  u64       #7329            
#7329: 
    retfn    u64                        
endproc

proc qq_sets.var_emptyset:
    param    u64       dest
    setcall      /3                     
    load     u64       dest             
    setarg   u64 /3                     
    setcall  u64 /1                     
    load     i64       0                
    setarg   i64 /1                     
    callf    u64 /1    &qq_sets.obj_newset
    setarg   u64 /2                     
    load     i64       5                
    setarg   i64 /1                     
    callp        /3    &qq_vars.var_objtovar
    retproc                             
endproc

proc qq_sets.var_getix_set:
    param    u64       a
    param    i64       index
    local    u64       p
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     i64       index            
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    jumplt   u64       #7335            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "set[int] bounds"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7335: 
    load     i64       1                
    load     u64       a                
    load     i64       0                
    istorex  u32 /1                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       index            
    load     i64       3                
    shr      i64                        
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    load     i64       index            
    load     i64       7                
    bitand   i64                        
    shl      i64                        
    bitand   i64                        
    toboolt  i64/i64                    
    load     u64       a                
    load     i64       8                
    istorex  i64 /1                     
    retproc                             
endproc

proc qq_sets.var_putix_set:
    param    u64       a
    param    i64       index
    param    u64       x
    local    u64       p
    local    u64       q
    local    i64       newoffset
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       p                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    loadbit  i64                        
    jumpt    u64       #7338            
    setcall      /0/1                   
    callp        /0    &qq_lib.pcnotmut 
#7338: 
    load     i64       index            
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    jumplt   u64       #7340            
    load     i64       index            
    load     i64       0                
    jumpge   i64       #7342            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "lwb"            
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
    jump               #7341            
#7342: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "set[i]:=x bounds"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7341: 
#7340: 
    setcall  u64 /3/1                   
    load     u64       &newoffset       
    setarg   u64 /3                     
    load     i64       index            
    setarg   i64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /3    &qq_sets.getoffset
    store    u64       q                
    setcall      /5/1                   
    load     i64       0                
    setarg   i64 /5                     
    load     i64       33               
    setarg   i64 /4                     
    load     u64       x                
    setarg   u64 /3                     
    load     i64       newoffset        
    setarg   i64 /2                     
    load     u64       q                
    setarg   u64 /1                     
    callp        /5    &qq_vars.var_storebit
    retproc                             
endproc

proc qq_sets.var_getixref_set:
    param    u64       a
    param    i64       index
    local    mem:16       v
    local    u64       p
    local    u64       q
    local    i64       offset
    local    i64       newoffset
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       p                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    loadbit  i64                        
    jumpt    u64       #7345            
    setcall      /0/1                   
    callp        /0    &qq_lib.pcnotmut 
#7345: 
    load     i64       index            
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    jumplt   u64       #7347            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "&set[i] bounds" 
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7347: 
    setcall  u64 /3/1                   
    load     u64       &newoffset       
    setarg   u64 /3                     
    load     i64       index            
    setarg   i64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /3    &qq_sets.getoffset
    store    u64       q                
    load     i64       15               
    load     u64       a                
    load     i64       0                
    istorex  u32 /1                     
    load     i64       33               
    load     u64       a                
    load     i64       4                
    istorex  u32 /1                     
    load     u64       q                
    load     u64       a                
    load     i64       8                
    istorex  u64 /1                     
    load     i64       newoffset        
    load     u64       a                
    load     i64       2                
    istorex  u8  /1                     
    retproc                             
endproc

proc qq_sets.getoffset:
    param    u64       p
    param    i64       index
    param    u64       newoffset
    rettype  u64
    load     i64       index            
    load     i64       3                
    shr      i64                        
    load     u64 /1    &p               
    addpxto  u64 /1                     
    load     i64       index            
    load     i64       7                
    bitand   i64                        
    load     u64       newoffset        
    istore   i64                        
    load     u64       p                
    jumpret  u64       #7348            
#7348: 
    retfn    u64                        
endproc

proc qq_sets.var_in_set:
    param    u64       a
    param    u64       b
    local    i64       i
    local    i64       m
    local    u64       p
    rettype  i64
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    store    i64       i                
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     i64       i                
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    jumplt   u64       #7351            
    load     i64       0                
    jumpret  i64       #7349            
#7351: 
    startmx                             
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       i                
    load     i64       3                
    shr      i64                        
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       &qq_sets.var_in_set.masks
    load     i64       i                
    load     i64       7                
    bitand   i64                        
    iloadx   u8  /1                     
    widen    i64/u8                     
    bitand   i64                        
    jumpf    i64       #7353            
    load     i64       1                
    resetmx  i64                        
    jump               #7352            
#7353: 
    load     i64       0                
    endmx    i64                        
#7352: 
    jumpret  i64       #7349            
#7349: 
    retfn    i64                        
endproc

proc qq_sets.iresizeset:
    param    u64       p
    param    i64       n
    local    u64       pp
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pp               
    load     u64       pp               
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       n                
    jumplt   i64       #7356            
    jump               #7354            
#7356: 
    setcall      /2/1                   
    load     i64       n                
    setarg   i64 /2                     
    load     u64       pp               
    setarg   u64 /1                     
    callp        /2    &qq_sets.obj_resize_set
#7354: 
    retproc                             
endproc

proc qq_sets.obj_resize_set:
    param    u64       p
    param    i64       n
    local    u64       q
    local    i64       newsize
    local    i64       elemtype
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    store    i64       elemtype         
    load     i64       n                
    load     u64       p                
    load     i64       24               
    iloadx   i64 /1                     
    jumpgt   i64       #7359            
    load     i64       n                
    load     u64       p                
    load     i64       16               
    istorex  i64 /1                     
    jump               #7358            
#7359: 
    setcall  i64 /2/1                   
    load     i64       33               
    setarg   i64 /2                     
    load     i64       n                
    setarg   i64 /1                     
    callf    i64 /2    &qq_bits.getbitssize
    store    i64       newsize          
    setcall  u64 /1/1                   
    load     i64       newsize          
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_allocz 
    store    u64       q                
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    jumpf    i64       #7361            
    setcall      /3                     
    setcall  u64 /2                     
    load     i64       33               
    setarg   i64 /2                     
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callf    u64 /2    &qq_bits.getbitssize
    setarg   u64 /3                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       q                
    setarg   u64 /1                     
    callp        /3    &memcpy          
    setcall      /2                     
    setcall  i64 /2                     
    load     i64       33               
    setarg   i64 /2                     
    load     u64       p                
    load     i64       24               
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callf    i64 /2    &qq_bits.getbitssize
    setarg   i64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_free   
#7361: 
    load     u64       q                
    load     u64       p                
    load     i64       8                
    istorex  u64 /1                     
    load     i64       n                
    load     u64       p                
    load     i64       16               
    istorex  i64 /1                     
    load     i64       mlib.allocbytes  
    load     i64       8                
    mul      i64                        
    load     u64       p                
    load     i64       24               
    istorex  i64 /1                     
#7358: 
    retproc                             
endproc

proc qq_sets.iorsetbits:
    param    u64       p
    param    u64       q
    param    i64       n
    local    i64       av_1
    load     i64       n                
    load     i64       1                
    sub      i64                        
    load     i64       64               
    idiv     i64                        
    load     i64       1                
    add      i64                        
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #7365            
#7363: 
    load     u64 /1    &q               
    loadincr u64 /8                     
    iload    i64                        
    load     u64 /1    &p               
    loadincr u64 /8                     
    bitorto  i64                        
    to       i64       #7363            
    opnd     i64       av_1             
#7365: 
    retproc                             
endproc

proc qq_sets.ixorsetbits:
    param    u64       p
    param    u64       q
    param    i64       n
    local    i64       av_1
    load     i64       n                
    load     i64       1                
    sub      i64                        
    load     i64       64               
    idiv     i64                        
    load     i64       1                
    add      i64                        
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #7369            
#7367: 
    load     u64 /1    &q               
    loadincr u64 /8                     
    iload    i64                        
    load     u64 /1    &p               
    loadincr u64 /8                     
    bitxorto i64                        
    to       i64       #7367            
    opnd     i64       av_1             
#7369: 
    retproc                             
endproc

proc qq_sets.iandsetbits:
    param    u64       p
    param    u64       q
    param    i64       n
    local    i64       av_1
    load     i64       n                
    load     i64       1                
    sub      i64                        
    load     i64       64               
    idiv     i64                        
    load     i64       1                
    add      i64                        
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #7373            
#7371: 
    load     u64 /1    &q               
    loadincr u64 /8                     
    iload    i64                        
    load     u64 /1    &p               
    loadincr u64 /8                     
    bitandto u64                        
    to       i64       #7371            
    opnd     i64       av_1             
#7373: 
    retproc                             
endproc

proc qq_sets.inotsetbits:
    param    u64       p
    param    i64       n
    local    i64       av_1
    load     i64       n                
    load     i64       1                
    sub      i64                        
    load     i64       64               
    idiv     i64                        
    load     i64       1                
    add      i64                        
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #7377            
#7375: 
    load     u64       p                
    iload    u64                        
    bitnot   u64                        
    load     u64       p                
    istore   u64                        
    load     u64 /1    &p               
    incrto   u64 /8                     
    to       i64       #7375            
    opnd     i64       av_1             
#7377: 
    retproc                             
endproc

proc qq_sets.var_iorto_set:
    param    u64       x
    param    u64       y
    local    i64       xlen
    local    i64       ylen
    local    i64       n
    local    i64       i
    local    u64       p
    local    u64       px
    local    u64       py
    local    u64       pp
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       px               
    load     u64       y                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       py               
    load     u64       px               
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       xlen             
    load     u64       py               
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       ylen             
    load     i64       ylen             
    load     i64       0                
    jumpne   i64       #7380            
    jump               #7379            
#7380: 
    load     i64       xlen             
    load     i64       0                
    jumpne   i64       #7381            
    load     u64       y                
    iload    mem:16                     
    load     u64       x                
    istore   mem:16                     
    setcall      /1/1                   
    load     u64       x                
    setarg   u64 /1                     
    callp        /1    &qq_sets.var_dupl_set
    jump               #7379            
#7381: 
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       px               
    setcall      /2/1                   
    load     i64       ylen             
    setarg   i64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callp        /2    &qq_sets.iresizeset
    setcall      /3/1                   
    load     i64       ylen             
    setarg   i64 /3                     
    load     u64       py               
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       px               
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &qq_sets.iorsetbits
#7379: 
    retproc                             
endproc

proc qq_sets.var_iandto_set:
    param    u64       x
    param    u64       y
    local    i64       xlen
    local    i64       ylen
    local    i64       n
    local    i64       i
    local    u64       p
    local    u64       px
    local    u64       py
    local    u64       pp
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       px               
    load     u64       y                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       py               
    load     u64       px               
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       xlen             
    load     u64       py               
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       ylen             
    load     i64       ylen             
    load     i64       0                
    jumpne   i64       #7384            
    setcall      /1/1                   
    load     u64       x                
    setarg   u64 /1                     
    callp        /1    &qq_sets.var_emptyset
    jump               #7383            
#7384: 
    load     i64       xlen             
    load     i64       0                
    jumpne   i64       #7385            
    jump               #7383            
#7385: 
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       px               
    setcall      /2/1                   
    load     i64       ylen             
    setarg   i64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callp        /2    &qq_sets.iresizeset
    setcall      /3/1                   
    load     i64       ylen             
    setarg   i64 /3                     
    load     u64       py               
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       px               
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &qq_sets.iandsetbits
#7383: 
    retproc                             
endproc

proc qq_sets.var_ixorto_set:
    param    u64       x
    param    u64       y
    local    i64       xlen
    local    i64       ylen
    local    i64       n
    local    i64       i
    local    u64       p
    local    u64       px
    local    u64       py
    local    u64       pp
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       px               
    load     u64       y                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       py               
    load     u64       px               
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       xlen             
    load     u64       py               
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       ylen             
    load     i64       ylen             
    load     i64       0                
    jumpne   i64       #7388            
    setcall      /1/1                   
    load     u64       x                
    setarg   u64 /1                     
    callp        /1    &qq_sets.var_emptyset
    jump               #7387            
#7388: 
    load     i64       xlen             
    load     i64       0                
    jumpne   i64       #7389            
    load     u64       y                
    iload    mem:16                     
    load     u64       x                
    istore   mem:16                     
    setcall      /1/1                   
    load     u64       x                
    setarg   u64 /1                     
    callp        /1    &qq_sets.var_dupl_set
    jump               #7387            
#7389: 
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       px               
    setcall      /2/1                   
    load     i64       ylen             
    setarg   i64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callp        /2    &qq_sets.iresizeset
    setcall      /3/1                   
    load     i64       ylen             
    setarg   i64 /3                     
    load     u64       py               
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       px               
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &qq_sets.ixorsetbits
#7387: 
    retproc                             
endproc

proc qq_sets.var_inotto_set:
    param    u64       x
    local    i64       xlen
    local    u64       px
    local    u64       py
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       px               
    load     u64       px               
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       xlen             
    load     i64       xlen             
    jumpf    i64       #7392            
    setcall      /2/1                   
    load     i64       xlen             
    setarg   i64 /2                     
    load     u64       px               
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &qq_sets.inotsetbits
#7392: 
    retproc                             
endproc

proc qq_strings.start:
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_vars.obj_new 
    store    u64       qq_strings.emptystring
    load     i64       1                
    load     u64       qq_strings.emptystring
    load     i64       0                
    istorex  u32 /1                     
    load     i64       0                
    load     u64       qq_strings.emptystring
    load     i64       5                
    istorex  u8  /1                     
    retproc                             
endproc

proc qq_strings.var_empty_string:
    param    u64       dest
    param    i64       mutable
    load     i64       265              
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     i64       mutable          
    jumpt    i64       #7396            
    load     u64       qq_strings.emptystring
    load     u64       dest             
    load     i64       8                
    istorex  u64 /1                     
    load     u64       qq_strings.emptystring
    incrto   u32 /1                     
    jump               #7395            
#7396: 
    setcall  u64 /3/1                   
    load     i64       1                
    setarg   i64 /3                     
    load     i64       0                
    setarg   i64 /2                     
    load     u64       0                
    setarg   u64 /1                     
    callf    u64 /3    &qq_strings.obj_make_stringn
    load     u64       dest             
    load     i64       8                
    istorex  u64 /1                     
#7395: 
    retproc                             
endproc

proc qq_strings.var_make_string:
    param    u64       s
    param    u64       dest
    param    i64       mutable
    load     i64       265              
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    setcall  u64 /2/1                   
    load     i64       mutable          
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /2    &qq_strings.obj_make_string
    load     u64       dest             
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_strings.var_make_stringn:
    param    u64       s
    param    i64       length
    param    u64       dest
    param    i64       mutable
    load     i64       265              
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    setcall  u64 /3/1                   
    load     i64       mutable          
    setarg   i64 /3                     
    load     i64       length           
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /3    &qq_strings.obj_make_stringn
    load     u64       dest             
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_strings.obj_new_string:
    param    i64       n
    local    u64       p
    rettype  u64
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_vars.obj_new 
    store    u64       p                
    load     u64       1                
    load     u64       p                
    load     i64       4                
    addpx    u64 /1                     
    load     i64       1                
    storebit u8                         
    load     i64       n                
    load     u64       p                
    load     i64       16               
    istorex  i64 /1                     
    load     i64       0                
    load     u64       p                
    load     i64       5                
    istorex  u8  /1                     
    load     i64       n                
    jumpf    i64       #7401            
    setcall  u64 /1/1                   
    load     i64       n                
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    load     u64       p                
    load     i64       8                
    istorex  u64 /1                     
    load     i64       mlib.allocbytes  
    load     u64       p                
    load     i64       24               
    istorex  i64 /1                     
#7401: 
    load     u64       p                
    jumpret  u64       #7399            
#7399: 
    retfn    u64                        
endproc

proc qq_strings.obj_make_string:
    param    u64       s
    param    i64       mutable
    local    u64       p
    local    i64       n
    rettype  u64
    setcall  u64 /1                     
    setcall  i64 /1                     
    load     u64       s                
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    double                              
    store    i64       n                
    setarg   i64 /1                     
    callf    u64 /1    &qq_strings.obj_new_string
    store    u64       p                
    load     i64       mutable          
    load     u64       p                
    load     i64       4                
    addpx    u64 /1                     
    load     i64       1                
    storebit u8                         
    load     i64       n                
    jumpf    i64       #7404            
    setcall      /3/1                   
    load     i64       n                
    setarg   u64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &memcpy          
#7404: 
    load     u64       p                
    jumpret  u64       #7402            
#7402: 
    retfn    u64                        
endproc

proc qq_strings.obj_make_stringn:
    param    u64       s
    param    i64       length
    param    i64       mutable
    local    u64       p
    rettype  u64
    setcall  u64 /1/1                   
    load     i64       length           
    setarg   i64 /1                     
    callf    u64 /1    &qq_strings.obj_new_string
    store    u64       p                
    load     i64       mutable          
    load     u64       p                
    load     i64       4                
    addpx    u64 /1                     
    load     i64       1                
    storebit u8                         
    load     i64       length           
    jumpf    i64       #7407            
    load     u64       s                
    jumpf    u64       #7409            
    setcall      /3/1                   
    load     i64       length           
    setarg   u64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &memcpy          
    jump               #7408            
#7409: 
    setcall      /3/1                   
    load     i64       length           
    setarg   u64 /3                     
    load     i64       0                
    setarg   i32 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &memset          
#7408: 
#7407: 
    load     u64       p                
    jumpret  u64       #7405            
#7405: 
    retfn    u64                        
endproc

proc qq_strings.obj_free_string:
    param    u64       p
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    jumpf    i64       #7412            
    setcall      /2/1                   
    load     u64       p                
    load     i64       24               
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_free   
#7412: 
    setcall      /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callp        /1    &mlib.pcm_free32 
    retproc                             
endproc

proc qq_strings.var_dupl_string:
    param    u64       a
    local    u64       p
    local    u64       q
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    setcall  u64 /1/1                   
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callf    u64 /1    &qq_strings.obj_new_string
    store    u64       q                
    load     u64       q                
    load     u64       a                
    load     i64       8                
    istorex  u64 /1                     
    load     u64       q                
    load     i64       16               
    iloadx   i64 /1                     
    jumpf    i64       #7415            
    setcall      /3/1                   
    load     u64       q                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /3                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &memcpy          
#7415: 
    retproc                             
endproc

proc qq_strings.var_getix_string:
    param    u64       a
    param    i64       index
    local    u64       q
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     i64       index            
    load     i64       1                
    sub      u64                        
    load     u64       q                
    load     i64       16               
    iloadx   u64 /1                     
    jumplt   u64       #7418            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "getstring[int] bounds"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7418: 
    setcall      /4/1                   
    load     u64       a                
    setarg   u64 /4                     
    load     i64       index            
    setarg   i64 /3                     
    load     i64       index            
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /4    &qq_strings.stringslice
    retproc                             
endproc

proc qq_strings.var_getixref_string:
    param    u64       a
    param    i64       index
    local    u64       q
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     i64       index            
    load     i64       1                
    sub      u64                        
    load     u64       q                
    load     i64       16               
    iloadx   u64 /1                     
    jumplt   u64       #7421            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "getixref[int] bounds"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7421: 
    load     i64       16               
    load     u64       a                
    load     i64       0                
    istorex  u32 /1                     
    load     i64       27               
    load     u64       a                
    load     i64       4                
    istorex  u32 /1                     
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       index            
    addpx    u64 /1                     
    load     i64       1                
    subpx    u64 /1                     
    load     u64       a                
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_strings.var_getdotix_string:
    param    u64       a
    param    i64       index
    local    u64       q
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     i64       index            
    load     i64       1                
    sub      u64                        
    load     u64       q                
    load     i64       16               
    iloadx   u64 /1                     
    jumplt   u64       #7424            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "x.[] bounds"    
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7424: 
    load     i64       1                
    load     u64       a                
    load     i64       0                
    istorex  u32 /1                     
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       index            
    addpx    u64 /1                     
    load     i64       1                
    subpx    u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    load     u64       a                
    load     i64       8                
    istorex  i64 /1                     
    retproc                             
endproc

proc qq_strings.var_getdotixref_string:
    param    u64       a
    param    i64       index
    param    u64       dest
    local    u64       q
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64 /1    &index           
    decrto   i64 /1                     
    load     i64       index            
    load     u64       q                
    load     i64       16               
    iloadx   u64 /1                     
    jumplt   u64       #7427            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "x.[] bounds"    
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7427: 
    load     i64       16               
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     i64       27               
    load     u64       dest             
    load     i64       4                
    istorex  u32 /1                     
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       index            
    addpx    u64 /1                     
    load     u64       dest             
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_strings.var_getslice_string:
    param    u64       a
    param    i64       i
    param    i64       j
    local    u64       p
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     i64       i                
    load     i64       1                
    jumplt   i64       #7431            
    load     i64       j                
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    jumpgt   i64       #7431            
    load     i64       i                
    load     i64       j                
    jumple   i64       #7430            
#7431: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "string/slice bounds"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7430: 
    setcall      /4/1                   
    load     u64       a                
    setarg   u64 /4                     
    load     i64       j                
    setarg   i64 /3                     
    load     i64       i                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /4    &qq_strings.stringslice
    retproc                             
endproc

proc qq_strings.stringslice:
    param    u64       a
    param    i64       i
    param    i64       j
    param    u64       dest
    local    u64       p
    local    u64       q
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_vars.obj_new 
    store    u64       q                
    load     u64       p                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    loadbit  i64                        
    load     u64       q                
    load     i64       4                
    addpx    u64 /1                     
    load     i64       1                
    storebit u8                         
    load     i64       j                
    load     i64       i                
    sub      i64                        
    load     i64       1                
    add      i64                        
    load     u64       q                
    load     i64       16               
    istorex  i64 /1                     
    load     i64       1                
    load     u64       q                
    load     i64       5                
    istorex  u8  /1                     
    load     u64       p                
    load     i64       5                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #7434            
    load     i64       2                
    jumpeq   i64       #7435            
    jump               #7436            
#7434: 
    load     u64       p                
    load     i64       24               
    iloadx   u64 /1                     
    load     u64       q                
    load     i64       24               
    istorex  u64 /1                     
    load     u64       q                
    load     i64       24               
    iloadx   u64 /1                     
    incrto   u32 /1                     
    jump               #7433            
#7435: 
    load     u64       0                
    load     u64       q                
    load     i64       24               
    istorex  u64 /1                     
    load     i64       2                
    load     u64       q                
    load     i64       5                
    istorex  u8  /1                     
    jump               #7433            
#7436: 
    load     u64       p                
    incrto   u32 /1                     
    load     u64       p                
    load     u64       q                
    load     i64       24               
    istorex  u64 /1                     
#7433: 
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       i                
    addpx    u64 /1                     
    load     i64       1                
    subpx    u64 /1                     
    load     u64       q                
    load     i64       8                
    istorex  u64 /1                     
    load     u64       a                
    load     i64       0                
    iloadx   u32 /1                     
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     u64       q                
    load     u64       dest             
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_strings.var_putix_string:
    param    u64       a
    param    i64       index
    param    u64       x
    local    u64       s
    local    u64       p
    local    u64       q
    local    i64       length
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       p                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    loadbit  i64                        
    jumpt    u64       #7439            
    setcall      /0/1                   
    callp        /0    &qq_lib.pcnotmut 
#7439: 
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       length           
    load     i64       index            
    load     i64       1                
    jumplt   i64 /1    #7442            
    load     i64       length           
    jumple   i64       #7441            
#7442: 
    load     i64       index            
    load     i64       length           
    load     i64       1                
    add      i64                        
    jumpne   i64       #7444            
    setcall      /2/1                   
    load     u64       x                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_strings.var_addto_string
    jump               #7437            
    jump               #7443            
#7444: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "putstring[int] bounds"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7443: 
#7441: 
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       index            
    addpx    u64 /1                     
    load     i64       1                
    subpx    u64 /1                     
    store    u64       s                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       9                
    jumpeq   i64       #7446            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "s[i]:= not str" 
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7446: 
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       q                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       0                
    jumpne   i64       #7448            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "s[i]:=\"\""     
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7448: 
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    iload    u8                         
    load     u64       s                
    istore   u8                         
#7437: 
    retproc                             
endproc

proc qq_strings.var_putslice_string:
    param    u64       a
    param    i64       i
    param    i64       j
    param    u64       x
    local    u64       s
    local    u64       p
    local    u64       q
    local    i64       length
    local    i64       sublength
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       p                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    loadbit  i64                        
    jumpt    u64       #7451            
    setcall      /0/1                   
    callp        /0    &qq_lib.pcnotmut 
#7451: 
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       length           
    load     i64       i                
    load     i64       1                
    jumplt   i64       #7454            
    load     i64       j                
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    jumpgt   i64       #7454            
    load     i64       i                
    load     i64       j                
    jumple   i64       #7453            
#7454: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "string/slice bounds"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7453: 
    load     i64       j                
    load     i64       i                
    sub      i64                        
    load     i64       1                
    add      i64                        
    store    i64       sublength        
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       i                
    addpx    u64 /1                     
    load     i64       1                
    subpx    u64 /1                     
    store    u64       s                
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       9                
    jumpeq   i64       #7456            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "s[i..j]:= not str"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7456: 
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       q                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       sublength        
    jumpge   i64       #7458            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "substr too short"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7458: 
    setcall      /3/1                   
    load     i64       sublength        
    setarg   u64 /3                     
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callp        /3    &memcpy          
    retproc                             
endproc

proc qq_strings.var_putdotix_string:
    param    u64       a
    param    i64       index
    param    u64       x
    local    u64       s
    local    u64       p
    local    u64       q
    local    i64       length
    local    i64       ch
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64       #7461            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "s.[i]:= not int"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7461: 
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    store    i64       ch               
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       p                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    loadbit  i64                        
    jumpt    u64       #7463            
    setcall      /0/1                   
    callp        /0    &qq_lib.pcnotmut 
#7463: 
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       length           
    load     i64       index            
    load     i64       1                
    jumplt   i64 /1    #7466            
    load     i64       length           
    jumple   i64       #7465            
#7466: 
    load     i64       index            
    load     i64       length           
    load     i64       1                
    add      i64                        
    jumpne   i64       #7468            
    setcall      /2/1                   
    load     i64       ch               
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_strings.var_addto_string_ch
    jump               #7459            
    jump               #7467            
#7468: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "str.[int] bounds"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7467: 
#7465: 
    load     i64       ch               
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       index            
    addpx    u64 /1                     
    load     i64       1                
    subpx    u64 /1                     
    istore   u8                         
#7459: 
    retproc                             
endproc

proc qq_strings.obj_resize_string:
    param    u64       p
    param    i64       n
    local    u64       s
    local    i64       oldalloc
    load     i64       n                
    load     u64       p                
    load     i64       24               
    iloadx   i64 /1                     
    jumpgt   i64       #7471            
    load     i64       n                
    load     u64       p                
    load     i64       16               
    istorex  i64 /1                     
    jump               #7470            
#7471: 
    load     u64       p                
    load     i64       24               
    iloadx   i64 /1                     
    store    i64       oldalloc         
    setcall  u64 /1/1                   
    load     i64       n                
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    store    u64       s                
    load     i64       mlib.allocbytes  
    load     u64       p                
    load     i64       24               
    istorex  i64 /1                     
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    jumpf    i64       #7473            
    setcall      /3/1                   
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /3                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callp        /3    &memcpy          
    setcall      /2/1                   
    load     i64       oldalloc         
    setarg   i64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &mlib.pcm_free   
#7473: 
    load     u64       s                
    load     u64       p                
    load     i64       8                
    istorex  u64 /1                     
    load     i64       n                
    load     u64       p                
    load     i64       16               
    istorex  i64 /1                     
#7470: 
    retproc                             
endproc

proc qq_strings.var_add_string:
    param    u64       a
    param    u64       b
    local    u64       p
    local    u64       q
    local    u64       r
    local    i64       alen
    local    i64       blen
    local    i64       newlen
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       alen             
    load     u64       q                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       blen             
    load     i64       blen             
    load     i64       0                
    jumpne   i64       #7476            
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
    jump               #7474            
    jump               #7475            
#7476: 
    load     i64       alen             
    load     i64       0                
    jumpne   i64       #7477            
    setcall      /4/1                   
    load     i64       1                
    setarg   i64 /4                     
    load     u64       a                
    setarg   u64 /3                     
    load     i64       blen             
    setarg   i64 /2                     
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /4    &qq_strings.var_make_stringn
    jump               #7474            
#7477: 
#7475: 
    load     i64       alen             
    load     i64       blen             
    add      i64                        
    store    i64       newlen           
    setcall  u64 /1/1                   
    load     i64       newlen           
    setarg   i64 /1                     
    callf    u64 /1    &qq_strings.obj_new_string
    store    u64       r                
    setcall      /3/1                   
    load     i64       alen             
    setarg   u64 /3                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       r                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &memcpy          
    setcall      /3/1                   
    load     i64       blen             
    setarg   u64 /3                     
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       r                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       alen             
    addpx    u64 /1                     
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     u64       r                
    load     u64       a                
    load     i64       8                
    istorex  u64 /1                     
#7474: 
    retproc                             
endproc

proc qq_strings.var_addto_string:
    param    u64       a
    param    u64       b
    local    u64       p
    local    u64       q
    local    i64       alen
    local    i64       blen
    local    i64       newlen
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       alen             
    load     u64       q                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       blen             
    load     u64       p                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    loadbit  i64                        
    jumpt    u64       #7480            
    setcall      /0/1                   
    callp        /0    &qq_lib.pcnotmut 
#7480: 
    load     i64       blen             
    load     i64       0                
    jumpne   i64       #7482            
    jump               #7478            
    jump               #7481            
#7482: 
    load     i64       alen             
    load     i64       0                
    jumpne   i64       #7483            
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
    load     u64       b                
    iload    mem:16                     
    load     u64       a                
    istore   mem:16                     
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_duplu
    jump               #7478            
#7483: 
#7481: 
    load     i64       alen             
    load     i64       blen             
    add      i64                        
    store    i64       newlen           
    setcall      /2/1                   
    load     i64       newlen           
    setarg   i64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /2    &qq_strings.obj_resize_string
    setcall      /3/1                   
    load     i64       blen             
    setarg   u64 /3                     
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       alen             
    addpx    u64 /1                     
    setarg   u64 /1                     
    callp        /3    &memcpy          
#7478: 
    retproc                             
endproc

proc qq_strings.var_addto_string_ch:
    param    u64       a
    param    i64       ch
    local    u64       p
    local    i64       alen
    local    i64       n
    local    mem:32       str
    local    u64       s
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       alen             
    load     u64       p                
    load     i64       4                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    loadbit  i64                        
    jumpt    u64       #7486            
    setcall      /0/1                   
    callp        /0    &qq_lib.pcnotmut 
#7486: 
    setcall      /2/1                   
    load     i64       alen             
    load     i64       1                
    add      i64                        
    setarg   i64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /2    &qq_strings.obj_resize_string
    load     i64       ch               
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       alen             
    istorex  u8  /1                     
    retproc                             
endproc

proc qq_strings.var_equal_string:
    param    u64       x
    param    u64       y
    local    i64       n
    local    i64       res
    local    u64       px
    local    u64       py
    rettype  i64
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       px               
    load     u64       y                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       py               
    load     u64       px               
    load     u64       py               
    jumpne   u64       #7489            
    load     i64       1                
    jumpret  i64       #7487            
#7489: 
    load     u64       px               
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       n                
    startmx                             
    load     i64       n                
    load     u64       py               
    load     i64       16               
    iloadx   i64 /1                     
    jumpeq   i64       #7491            
    load     i64       0                
    resetmx  i64                        
    jump               #7490            
#7491: 
    load     i64       n                
    load     i64       0                
    jumpne   i64       #7492            
    load     i64       1                
    resetmx  i64                        
    jump               #7490            
#7492: 
    setcall  i64 /3/1                   
    load     i64       n                
    setarg   i64 /3                     
    load     u64       py               
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       px               
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /3    &mlib.eqbytes    
    endmx    i64                        
#7490: 
    jumpret  i64       #7487            
#7487: 
    retfn    i64                        
endproc

proc qq_strings.var_compare_string:
    param    u64       x
    param    u64       y
    local    i64       res
    local    u64       px
    local    u64       py
    rettype  i64
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       px               
    load     u64       y                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       py               
    setcall  i64 /4/1                   
    load     u64       py               
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /4                     
    load     u64       px               
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /3                     
    load     u64       py               
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       px               
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /4    &qq_strings.cmpstring_len
    store    i64       res              
    load     i64       res              
    jumpret  i64       #7493            
#7493: 
    retfn    i64                        
endproc

proc qq_strings.cmpstring_len:
    param    u64       s
    param    u64       t
    param    i64       slen
    param    i64       tlen
    rettype  i64
    startmx                             
    load     i64       slen             
    load     i64       0                
    jumpne   i64       #7496            
    startmx                             
    load     i64       tlen             
    load     i64       0                
    jumpne   i64       #7498            
    load     i64       0                
    resetmx  i64                        
    jump               #7497            
#7498: 
    load     i64       -1               
    endmx    i64                        
#7497: 
    resetmx  i64                        
    jump               #7495            
#7496: 
    load     i64       tlen             
    load     i64       0                
    jumpne   i64       #7499            
    load     i64       1                
    resetmx  i64                        
    jump               #7495            
#7499: 
    startmx                             
    load     i64       slen             
    load     i64       tlen             
    jumpne   i64       #7501            
    load     i64       slen             
    load     i64       1                
    jumpne   i64       #7503            
    load     u64       s                
    iload    u8                         
    widen    u64/u8                     
    load     u64       t                
    iload    u8                         
    widen    u64/u8                     
    jumpge   u64       #7505            
    load     i64       -1               
    jumpret  i64       #7494            
    jump               #7504            
#7505: 
    load     u64       s                
    iload    u8                         
    widen    u64/u8                     
    load     u64       t                
    iload    u8                         
    widen    u64/u8                     
    jumple   u64       #7506            
    load     i64       1                
    jumpret  i64       #7494            
    jump               #7504            
#7506: 
    load     i64       0                
    jumpret  i64       #7494            
#7504: 
#7503: 
    setcall  i64 /3/1                   
    load     i64       slen             
    setarg   i64 /3                     
    load     u64       t                
    setarg   u64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    i64 /3    &mlib.cmpstringn 
    resetmx  i64                        
    jump               #7500            
#7501: 
    setcall  i64 /2                     
    setcall  u64 /2                     
    load     i64       tlen             
    setarg   i64 /2                     
    load     u64       t                
    setarg   u64 /1                     
    callf    u64 /2    &qq_lib.convtostringz
    setarg   u64 /2                     
    setcall  u64 /2                     
    load     i64       slen             
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /2    &qq_lib.convtostringz
    setarg   u64 /1                     
    callf    i64 /2    &mlib.cmpstring  
    endmx    i64                        
#7500: 
    endmx    i64                        
#7495: 
    jumpret  i64       #7494            
#7494: 
    retfn    i64                        
endproc

proc qq_strings.var_inx_string:
    param    u64       x
    param    u64       y
    local    i64       xlen
    local    i64       ylen
    local    i64       result
    local    i64       i
    local    i64       j
    local    i64       k
    local    u64       sx
    local    u64       sy
    local    u64       px
    local    u64       py
    rettype  i64
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       px               
    load     u64       y                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       py               
    load     u64       px               
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       xlen             
    load     u64       py               
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       ylen             
    load     i64       xlen             
    load     i64       0                
    jumpeq   i64       #7510            
    load     i64       ylen             
    load     i64       0                
    jumpne   i64       #7509            
#7510: 
    load     i64       -9223372036854775808
    jumpret  i64       #7507            
#7509: 
    load     i64       ylen             
    load     i64       xlen             
    sub      i64                        
    store    i64       k                
    load     i64       0                
    store    i64       i                
    load     i64       k                
    load     i64       0                
    jumplt   i64       #7513            
#7511: 
    load     u64       px               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       sx               
    load     u64       py               
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       i                
    addpx    u64 /1                     
    store    u64       sy               
    load     i64       1                
    store    i64       j                
    load     i64       xlen             
    load     i64       1                
    jumplt   i64       #7516            
#7514: 
    load     u64       sx               
    iload    u8                         
    widen    u64/u8                     
    load     u64       sy               
    iload    u8                         
    widen    u64/u8                     
    jumpeq   u64       #7518            
    jump               #7519            
#7518: 
    load     u64 /1    &sx              
    incrto   u64 /1                     
    load     u64 /1    &sy              
    incrto   u64 /1                     
    forup    i64 /1    #7514            
    opnd     i64       j                
    opnd     i64       xlen             
#7516: 
    load     i64       i                
    load     i64       1                
    add      i64                        
    jumpret  i64       #7507            
! qq_strings.var_inx_string.nextpos:
#7519: 
    forup    i64 /1    #7511            
    opnd     i64       i                
    opnd     i64       k                
#7513: 
    load     i64       -9223372036854775808
    jumpret  i64       #7507            
#7507: 
    retfn    i64                        
endproc

proc qq_strings.var_iconvcase:
    param    u64       a
    param    u64       b
    param    i64       upper
    local    i64       i
    local    i64       n
    local    u64       s
    local    u64       pa
    local    i64       av_1
    local    i64       av_2
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pa               
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumple   i64       #7522            
    setcall  i64 /1/1                   
    load     u64       b                
    setarg   u64 /1                     
    callf    i64 /1    &qq_vars.var_getintvalue
    store    i64       n                
    jump               #7521            
#7522: 
    load     u64       pa               
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       n                
#7521: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       9                
    jumpeq   i64       #7524            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "convcase/notstr"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7524: 
    load     i64       n                
    load     i64       0                
    jumpge   i64       #7526            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "CONVCASE N<0"   
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7526: 
    load     i64       n                
    load     i64       0                
    jumpne   i64       #7528            
    jump               #7520            
#7528: 
    load     i64       n                
    load     u64       pa               
    load     i64       16               
    iloadx   i64 /1                     
    jumple   i64       #7530            
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "N="             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     i64       n                
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       pa               
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "convcase/N?"    
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7530: 
    load     u64       pa               
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       s                
    load     i64       upper            
    jumpf    i64       #7532            
    load     i64       n                
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #7535            
#7533: 
    setcall  i32 /1/1                   
    load     u64       s                
    iload    u8                         
    widen    u64/u8                     
    setarg   i32 /1                     
    callf    i32 /1    &toupper         
    load     u64       s                
    istore   u8                         
    load     u64 /1    &s               
    incrto   u64 /1                     
    to       i64       #7533            
    opnd     i64       av_1             
#7535: 
    jump               #7531            
#7532: 
    load     i64       n                
    store    i64       av_2             
    load     i64       av_2             
    load     i64       0                
    jumple   i64       #7538            
#7536: 
    setcall  i32 /1/1                   
    load     u64       s                
    iload    u8                         
    widen    u64/u8                     
    setarg   i32 /1                     
    callf    i32 /1    &tolower         
    load     u64       s                
    istore   u8                         
    load     u64 /1    &s               
    incrto   u64 /1                     
    to       i64       #7536            
    opnd     i64       av_2             
#7538: 
#7531: 
#7520: 
    retproc                             
endproc

proc qq_strings.var_makestrslicexobj:
    param    u64       s
    param    i64       length
    param    u64       dest
    load     i64       265              
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    setcall  u64 /2/1                   
    load     i64       length           
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callf    u64 /2    &qq_strings.obj_make_strslicexobj
    load     u64       dest             
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_strings.obj_make_strslicexobj:
    param    u64       s
    param    i64       length
    local    u64       p
    rettype  u64
    load     i64       length           
    load     i64       0                
    jumpne   i64       #7542            
    load     u64       0                
    store    u64       s                
#7542: 
    setcall  u64 /0/1                   
    callf    u64 /0    &qq_vars.obj_new 
    store    u64       p                
    load     u64       s                
    load     u64       p                
    load     i64       8                
    istorex  u64 /1                     
    load     u64       1                
    load     u64       p                
    load     i64       4                
    addpx    u64 /1                     
    load     i64       1                
    storebit u8                         
    load     i64       length           
    load     u64       p                
    load     i64       16               
    istorex  i64 /1                     
    load     i64       2                
    load     u64       p                
    load     i64       5                
    istorex  u8  /1                     
    load     u64       p                
    jumpret  u64       #7540            
#7540: 
    retfn    u64                        
endproc

proc qq_strings.var_asc:
    param    u64       a
    local    u64       p
    rettype  i64
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       9                
    jumpeq   i64       #7545            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Asc:not str"    
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7545: 
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       1                
    jumpge   i64       #7547            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Asc:empty"      
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7547: 
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    jumpret  i64       #7543            
#7543: 
    retfn    i64                        
endproc

proc qq_strings.var_new_string:
    param    u64       a
    param    u64       b
    param    u64       dest
    local    i64       length
    local    i64       ch
    setcall  i64 /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /1    &qq_vars.var_getintvalue
    store    i64       length           
    load     i64       length           
    load     i64       0                
    jumpge   i64       #7550            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Length<0"       
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7550: 
    setcall      /4/1                   
    load     i64       0                
    setarg   i64 /4                     
    load     u64       dest             
    setarg   u64 /3                     
    load     i64       length           
    setarg   i64 /2                     
    load     u64       0                
    setarg   u64 /1                     
    callp        /4    &qq_strings.var_make_stringn
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #7552            
    load     i64       9                
    jumpeq   i64 /1    #7553            
    load     i64       0                
    jumpeq   i64       #7554            
    jump               #7555            
#7552: 
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    store    i64       ch               
    jump               #7551            
#7553: 
    setcall  i64 /1/1                   
    load     u64       b                
    setarg   u64 /1                     
    callf    i64 /1    &qq_strings.var_asc
    store    i64       ch               
    jump               #7551            
#7554: 
    load     i64       32               
    store    i64       ch               
    jump               #7551            
#7555: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Not int/str"    
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7551: 
    load     i64       length           
    jumpf    i64       #7557            
    setcall      /3/1                   
    load     i64       length           
    setarg   u64 /3                     
    load     i64       ch               
    setarg   i32 /2                     
    load     u64       dest             
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &memset          
#7557: 
    retproc                             
endproc

proc qq_strings.var_new_stringn:
    param    i64       length
    param    u64       dest
    load     i64       length           
    load     i64       0                
    jumpge   i64       #7560            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Length<0"       
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7560: 
    setcall      /4/1                   
    load     i64       0                
    setarg   i64 /4                     
    load     u64       dest             
    setarg   u64 /3                     
    load     i64       length           
    setarg   i64 /2                     
    load     u64       0                
    setarg   u64 /1                     
    callp        /4    &qq_strings.var_make_stringn
    retproc                             
endproc

proc qq_strings.var_mul_string:
    param    u64       a
    param    i64       m
    local    i64       i
    local    i64       oldlen
    local    i64       newlen
    local    u64       newptr
    local    u64       p
    local    mem:16       v
    local    u64       pa
    local    u64       s
    local    i64       av_1
    load     i64       m                
    load     i64       0                
    jumpge   i64       #7563            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "neg str mul"    
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
    jump               #7562            
#7563: 
    load     i64       m                
    load     i64       0                
    jumpne   i64       #7564            
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_strings.var_empty_string
    jump               #7561            
    jump               #7562            
#7564: 
    load     i64       m                
    load     i64       1                
    jumpne   i64       #7565            
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
    jump               #7561            
    jump               #7562            
#7565: 
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       pa               
    load     u64       pa               
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       oldlen           
    load     i64       oldlen           
    jumpf    i64       #7567            
    load     i64       oldlen           
    load     i64       m                
    mul      i64                        
    store    i64       newlen           
    setcall  u64 /1/1                   
    load     i64       newlen           
    setarg   i64 /1                     
    callf    u64 /1    &qq_strings.obj_new_string
    load     u64       &v               
    load     i64       8                
    istorex  u64 /1                     
    load     i64       265              
    load     u64       &v               
    load     i64       0                
    istorex  u32 /1                     
    load     u64       &v               
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     i64       oldlen           
    load     i64       1                
    jumpne   i64       #7569            
    setcall      /3/1                   
    load     i64       m                
    setarg   u64 /3                     
    load     u64       pa               
    load     i64       8                
    iloadx   u64 /1                     
    iload    u8                         
    widen    u64/u8                     
    setarg   i32 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &memset          
    jump               #7568            
#7569: 
    load     i64       m                
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #7572            
#7570: 
    setcall      /3/1                   
    load     i64       oldlen           
    setarg   u64 /3                     
    load     u64       pa               
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     i64       oldlen           
    load     u64 /1    &p               
    addpxto  u64 /1                     
    to       i64       #7570            
    opnd     i64       av_1             
#7572: 
#7568: 
    load     mem:16       v             
    load     u64       a                
    istore   mem:16                     
    jump               #7566            
#7567: 
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_strings.var_empty_string
    jump               #7561            
#7566: 
#7562: 
#7561: 
    retproc                             
endproc

proc qq_strings.var_convert_string_list:
    param    u64       a
    param    i64       t
    param    u64       dest
    local    u64       p
    local    u64       q
    local    i64       length
    local    u64       s
    local    i64       av_1
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       length           
    setcall      /4/1                   
    load     i64       1                
    setarg   i64 /4                     
    load     i64       length           
    setarg   i64 /3                     
    load     u64       dest             
    setarg   u64 /2                     
    load     u64       0                
    setarg   u64 /1                     
    callp        /4    &qq_lists.var_make_list
    load     u64       dest             
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       s                
    load     i64       length           
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #7576            
#7574: 
    setcall      /4/1                   
    load     i64       1                
    setarg   i64 /4                     
    load     u64       q                
    setarg   u64 /3                     
    load     i64       1                
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callp        /4    &qq_strings.var_make_stringn
    load     u64 /1    &s               
    incrto   u64 /1                     
    load     u64 /1    &q               
    incrto   u64 /16                    
    to       i64       #7574            
    opnd     i64       av_1             
#7576: 
    retproc                             
endproc

proc qq_strings.var_expand_string:
    param    u64       a
    param    u64       dest
    param    i64       m
    local    u64       b
    local    u64       c
    local    u64       p
    local    u64       s
    local    i64       n
    local    i64       av_1
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       dest             
    store    u64       b                
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       s                
    load     i64       1                
    store    i64       n                
    load     i64       m                
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #7580            
#7578: 
    load     i64       n                
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    jumple   i64       #7582            
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callp        /2    &qq_strings.var_empty_string
    jump               #7581            
#7582: 
    setcall      /4/1                   
    load     i64       1                
    setarg   i64 /4                     
    load     u64       dest             
    setarg   u64 /3                     
    load     i64       1                
    setarg   i64 /2                     
    load     u64       s                
    setarg   u64 /1                     
    callp        /4    &qq_strings.var_make_stringn
    load     u64 /1    &s               
    incrto   u64 /1                     
#7581: 
    load     u64 /1    &n               
    incrto   i64 /1                     
    load     u64 /1    &dest            
    decrto   u64 /16                    
    to       i64       #7578            
    opnd     i64       av_1             
#7580: 
    retproc                             
endproc

proc qq_strings.var_makechar:
    param    i64       ch
    param    u64       dest
    local    mem:16       v
    local    u64       str
    local    u64       p
    load     i64       ch               
    load     i64       0                
    jumplt   i64 /1    #7586            
    load     i64       255              
    jumple   i64       #7585            
#7586: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "chr range"      
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#7585: 
    load     u64       &qq_decls.chrtable
    load     i64       ch               
    iloadx   u64 /8                     
    store    u64       p                
    load     u64       p                
    load     u64       0                
    jumpne   u64       #7588            
    load     i64       ch               
    load     u64       &str             
    load     i64       1                
    istorex  u8  /1/-1                  
    load     u64       0                
    load     u64       &str             
    load     i64       2                
    istorex  u8  /1/-1                  
    setcall      /4/1                   
    load     i64       0                
    setarg   i64 /4                     
    load     u64       &v               
    setarg   u64 /3                     
    load     i64       1                
    setarg   i64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callp        /4    &qq_strings.var_make_stringn
    load     u64       &v               
    load     i64       8                
    iloadx   u64 /1                     
    double                              
    store    u64       p                
    load     u64       &qq_decls.chrtable
    load     i64       ch               
    istorex  u64 /8                     
#7588: 
    load     u64       p                
    incrto   u32 /1                     
    load     i64       265              
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     u64       p                
    load     u64       dest             
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_syslibs.findsyslib:
    param    u64       filename
    local    i64       av_1
    local    i64       i
    rettype  u64
    load     i64       1                
    store    i64       i                
    load     i64       17               
    store    i64       av_1             
    load     i64       av_1             
    load     i64       1                
    jumplt   i64       #7592            
#7590: 
    setcall  i64 /2/1                   
    load     u64       &qq_syslibs.syslibnames
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /2                     
    load     u64       filename         
    setarg   u64 /1                     
    callf    i64 /2    &mlib.eqstring   
    jumpf    i64       #7594            
    load     u64       &qq_syslibs.libtext
    load     i64       i                
    iloadx   u64 /8/-8                  
    jumpret  u64       #7589            
#7594: 
    forup    i64 /1    #7590            
    opnd     i64       i                
    opnd     i64       av_1             
#7592: 
    load     u64       0                
    jumpret  u64       #7589            
#7589: 
    retfn    u64                        
endproc

proc qq_syslibs.loadsysmodule:
    param    u64       pm
    local    u64       source
    rettype  i64
    setcall  u64 /1/1                   
    load     u64       pm               
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /1    &qq_syslibs.findsyslib
    store    u64       source           
    startmx                             
    load     u64       source           
    jumpf    u64       #7597            
    load     u64       source           
    load     u64       pm               
    load     i64       24               
    istorex  u64 /1                     
    setcall  i64 /1/1                   
    load     u64       source           
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    load     u64       pm               
    load     i64       32               
    istorex  i64 /1                     
    load     i64       1                
    resetmx  i64                        
    jump               #7596            
#7597: 
    load     i64       0                
    endmx    i64                        
#7596: 
    jumpret  i64       #7595            
#7595: 
    retfn    i64                        
endproc

proc qq_tables.start:
    local    i64       i
    local    i64       av_1
    local    i64       av_2
    local    i64       av_3
    local    i64       av_4
    local    i64       av_5
    local    i64       av_6
    load     i64       1                
    store    i64       i                
    load     i64       27               
    store    i64       av_1             
    load     i64       av_1             
    load     i64       1                
    jumplt   i64       #7601            
#7599: 
    load     i64       1                
    load     u64       &qq_tables.binopset
    load     u64       &qq_tables.d_binopset
    load     i64       i                
    iloadx   u8  /1/-1                  
    widen    i64/u8                     
    istorex  u8  /1                     
    load     i64       1                
    load     u64       &qq_tables.exprstarterset
    load     u64       &qq_tables.d_binopset
    load     i64       i                
    iloadx   u8  /1/-1                  
    widen    i64/u8                     
    istorex  u8  /1                     
    forup    i64 /1    #7599            
    opnd     i64       i                
    opnd     i64       av_1             
#7601: 
    load     i64       1                
    store    i64       i                
    load     i64       7                
    store    i64       av_2             
    load     i64       av_2             
    load     i64       1                
    jumplt   i64       #7604            
#7602: 
    load     i64       1                
    load     u64       &qq_tables.unaryopset
    load     u64       &qq_tables.d_unaryopset
    load     i64       i                
    iloadx   u8  /1/-1                  
    widen    i64/u8                     
    istorex  u8  /1                     
    load     i64       1                
    load     u64       &qq_tables.exprstarterset
    load     u64       &qq_tables.d_unaryopset
    load     i64       i                
    iloadx   u8  /1/-1                  
    widen    i64/u8                     
    istorex  u8  /1                     
    forup    i64 /1    #7602            
    opnd     i64       i                
    opnd     i64       av_2             
#7604: 
    load     i64       1                
    store    i64       i                
    load     i64       26               
    store    i64       av_3             
    load     i64       av_3             
    load     i64       1                
    jumplt   i64       #7607            
#7605: 
    load     i64       1                
    load     u64       &qq_tables.exprstarterset
    load     u64       &qq_tables.d_exprstarterset
    load     i64       i                
    iloadx   i64 /8/-8                  
    istorex  u8  /1                     
    forup    i64 /1    #7605            
    opnd     i64       i                
    opnd     i64       av_3             
#7607: 
    load     i64       1                
    load     u64       &qq_tables.exprendset
    load     i64       4                
    istorex  u8  /1                     
    load     i64       1                
    load     u64       &qq_tables.exprendset
    load     i64       3                
    istorex  u8  /1                     
    load     i64       1                
    load     u64       &qq_tables.exprendset
    load     i64       12               
    istorex  u8  /1                     
    load     i64       1                
    load     u64       &qq_tables.exprendset
    load     i64       10               
    istorex  u8  /1                     
    load     i64       1                
    load     u64       &qq_tables.exprendset
    load     i64       79               
    istorex  u8  /1                     
    load     i64       1                
    load     u64       &qq_tables.exprendset
    load     i64       87               
    istorex  u8  /1                     
    load     i64       1                
    load     u64       &qq_tables.exprendset
    load     i64       85               
    istorex  u8  /1                     
    load     i64       1                
    store    i64       i                
    load     i64       10               
    store    i64       av_4             
    load     i64       av_4             
    load     i64       1                
    jumplt   i64       #7610            
#7608: 
    load     i64       1                
    load     u64       &qq_tables.addopset
    load     u64       &qq_tables.d_addopset
    load     i64       i                
    iloadx   u8  /1/-1                  
    widen    i64/u8                     
    istorex  u8  /1                     
    forup    i64 /1    #7608            
    opnd     i64       i                
    opnd     i64       av_4             
#7610: 
    load     i64       1                
    store    i64       i                
    load     i64       7                
    store    i64       av_5             
    load     i64       av_5             
    load     i64       1                
    jumplt   i64       #7613            
#7611: 
    load     i64       1                
    load     u64       &qq_tables.mulopset
    load     u64       &qq_tables.d_mulopset
    load     i64       i                
    iloadx   u8  /1/-1                  
    widen    i64/u8                     
    istorex  u8  /1                     
    forup    i64 /1    #7611            
    opnd     i64       i                
    opnd     i64       av_5             
#7613: 
    load     i64       1                
    store    i64       i                
    load     i64       6                
    store    i64       av_6             
    load     i64       av_6             
    load     i64       1                
    jumplt   i64       #7616            
#7614: 
    load     i64       1                
    load     u64       &qq_tables.cmpopset
    load     u64       &qq_tables.d_cmpopset
    load     i64       i                
    iloadx   u8  /1/-1                  
    widen    i64/u8                     
    istorex  u8  /1                     
    forup    i64 /1    #7614            
    opnd     i64       i                
    opnd     i64       av_6             
#7616: 
    load     i64       0                
    store    i64       i                
#7617: 
    load     u64       &qq_tables.stdtypenames
    load     i64       i                
    iloadx   u64 /8                     
    load     u64       &qq_tables.ttname
    load     i64       i                
    istorex  u64 /8                     
    load     i64       i                
    load     u64       &qq_tables.ttbasetype
    load     i64       i                
    istorex  i16 /2                     
    load     i64       1                
    load     u64       &qq_tables.ttlower
    load     i64       i                
    istorex  i64 /8                     
    load     u64       &qq_tables.stdtypewidths
    load     i64       i                
    iloadx   u8  /1                     
    load     u64       &qq_tables.ttbitwidth
    load     i64       i                
    istorex  u8  /1                     
    load     u64       &qq_tables.stdtypewidths
    load     i64       i                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       8                
    idiv     i64                        
    load     u64       &qq_tables.ttsize
    load     i64       i                
    istorex  i64 /8                     
    forup    i64 /1    #7617            
    opnd     i64       i                
    opnd     i64       40               
    load     i64       40               
    store    i64       qq_tables.ntypes 
    retproc                             
endproc

proc qq_show.printunit:
    param    u64       p
    param    i64       level
    param    u64       prefix
    param    u64       dev
    local    u64       q
    local    u64       d
    local    i64       t
    local    i64       flags
    local    u64       idname
    local    i64       a
    local    r32       x32
    local    i64       i
    load     u64       p                
    load     u64       0                
    jumpne   u64       #7622            
    jump               #7620            
#7622: 
    load     u64       p                
    load     i64       4                
    iloadx   i32 /1                     
    widen    i64/i32                    
    load     i64       16777215         
    bitand   i64                        
    store    i64       qq_show.currlineno
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_ptr_nf
    setcall      /1/1                   
    load     u64       ":"              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1                     
    setcall  u64 /3                     
    load     u64       p                
    setarg   u64 /3                     
    load     u64       prefix           
    setarg   u64 /2                     
    load     i64       level            
    setarg   i64 /1                     
    callf    u64 /3    &qq_show.getprefix
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     u64       &qq_tables.jtagnames
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    store    u64       idname           
    load     u64       idname           
    iload    u8                         
    widen    u64/u8                     
    load     u64       106              
    jumpne   u64       #7624            
    load     u64 /1    &idname          
    incrto   u64 /1                     
#7624: 
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       idname           
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64       ": "             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       39               
    jumpeq   i64 /1    #7626            
    load     i64       41               
    jumpeq   i64 /1    #7627            
    load     i64       42               
    jumpeq   i64 /1    #7628            
    load     i64       43               
    jumpeq   i64 /1    #7629            
    load     i64       44               
    jumpeq   i64 /1    #7630            
    load     i64       71               
    jumpeq   i64 /1    #7631            
    load     i64       38               
    jumpeq   i64 /1    #7632            
    load     i64       5                
    jumpeq   i64 /1    #7633            
    load     i64       2                
    jumpeq   i64 /1    #7634            
    load     i64       76               
    jumpeq   i64 /1    #7634            
    load     i64       68               
    jumpeq   i64 /1    #7634            
    load     i64       70               
    jumpeq   i64 /1    #7634            
    load     i64       60               
    jumpeq   i64 /1    #7634            
    load     i64       61               
    jumpeq   i64 /1    #7634            
    load     i64       52               
    jumpeq   i64 /1    #7634            
    load     i64       15               
    jumpeq   i64 /1    #7634            
    load     i64       16               
    jumpeq   i64 /1    #7634            
    load     i64       54               
    jumpeq   i64 /1    #7634            
    load     i64       55               
    jumpeq   i64 /1    #7634            
    load     i64       59               
    jumpeq   i64 /1    #7634            
    load     i64       63               
    jumpeq   i64 /1    #7635            
    load     i64       62               
    jumpeq   i64 /1    #7635            
    load     i64       66               
    jumpeq   i64 /1    #7635            
    load     i64       79               
    jumpeq   i64 /1    #7635            
    load     i64       78               
    jumpeq   i64 /1    #7635            
    load     i64       64               
    jumpeq   i64 /1    #7636            
    load     i64       65               
    jumpeq   i64 /1    #7636            
    load     i64       88               
    jumpeq   i64 /1    #7637            
    load     i64       34               
    jumpeq   i64 /1    #7638            
    load     i64       35               
    jumpeq   i64 /1    #7638            
    load     i64       36               
    jumpeq   i64 /1    #7638            
    load     i64       27               
    jumpeq   i64       #7639            
    jump               #7640            
#7626: 
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       d                
    load     u64       d                
    load     i64       8                
    iloadx   u64 /1                     
    jumpf    u64       #7642            
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       d                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64       "."              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
#7642: 
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &qq_tables.namenames
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       "Module:"        
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       p                
    load     i64       4                
    iloadx   i32 /1                     
    widen    i64/i32                    
    load     i64       24               
    load     i64       31               
    loadbf   i64                        
    setarg   u64 /1                     
    callp        /2    &msysc.m$print_u64
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     u64       d                
    load     i64       80               
    iloadx   u64 /1                     
    jumpf    u64       #7644            
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       7                
    jumpne   i64       #7644            
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       " "              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       d                
    load     i64       80               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
#7644: 
    jump               #7625            
#7627: 
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7625            
#7628: 
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       p                
    load     i64       16               
    iloadx   r64 /1                     
    setarg   r64 /1                     
    callp        /2    &msysc.m$print_r64
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7625            
#7629: 
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "\"#\""          
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7625            
#7630: 
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64       "L"              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7625            
#7631: 
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       &qq_tables.condnames
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7625            
#7632: 
    load     i64       1                
    store    i64       i                
#7645: 
    load     u64       p                
    load     i64       24               
    addpx    u64 /1                     
    load     i64       i                
    iloadx   u8  /1/-1                  
    widen    i64/u8                     
    load     i64       0                
    jumpne   i64       #7649            
    jump               #7647            
#7649: 
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       &qq_tables.condnames
    load     u64       p                
    load     i64       24               
    addpx    u64 /1                     
    load     i64       i                
    iloadx   u8  /1/-1                  
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_space
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    forup    i64 /1    #7645            
    opnd     i64       i                
    opnd     i64       4                
#7647: 
    jump               #7625            
#7633: 
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       &qq_pcltabs.pclnames
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7625            
#7634: 
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7625            
#7635: 
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "<#>"            
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       &qq_pcltabs.pclnames
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    load     i64       1                
    addpx    u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7625            
#7636: 
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "<#>"            
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       &qq_tables.mathsnames
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8/-8                  
    load     i64       3                
    addpx    u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7625            
#7637: 
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       p                
    load     i64       28               
    iloadx   i32 /1                     
    widen    i64/i32                    
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64       ":"              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       "P.LENGTH="      
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       p                
    load     i64       24               
    iloadx   i32 /1                     
    widen    i64/i32                    
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       &qq_tables.ttname
    load     u64       p                
    load     i64       1                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7625            
#7638: 
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       &qq_tables.ttname
    load     u64       p                
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7625            
#7639: 
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       &qq_tables.hostfnnames
    load     u64       p                
    load     i64       24               
    iloadx   i64 /1                     
    iloadx   u64 /8                     
    load     i64       2                
    addpx    u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7625            
#7640: 
#7625: 
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     u64       &qq_tables.jflags
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       flags            
    load     i64       flags            
    load     i64       1                
    jumplt   i64       #7651            
    setcall      /4/1                   
    load     u64       "1"              
    setarg   u64 /4                     
    load     i64       level            
    load     i64       1                
    add      i64                        
    setarg   i64 /3                     
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       dev              
    setarg   u64 /1                     
    callp        /4    &qq_show.printunitlist
#7651: 
    load     i64       flags            
    load     i64       2                
    jumpne   i64       #7653            
    setcall      /4/1                   
    load     u64       "2"              
    setarg   u64 /4                     
    load     i64       level            
    load     i64       1                
    add      i64                        
    setarg   i64 /3                     
    load     u64       p                
    load     i64       24               
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       dev              
    setarg   u64 /1                     
    callp        /4    &qq_show.printunitlist
#7653: 
#7620: 
    retproc                             
endproc

proc qq_show.printunitlist:
    param    u64       dev
    param    u64       p
    param    i64       level
    param    u64       prefix
    load     u64       p                
    load     u64       0                
    jumpne   u64       #7656            
    jump               #7654            
#7656: 
    jump               #7658            
#7657: 
    setcall      /4/1                   
    load     u64       dev              
    setarg   u64 /4                     
    load     u64       prefix           
    setarg   u64 /3                     
    load     i64       level            
    setarg   i64 /2                     
    load     u64       p                
    setarg   u64 /1                     
    callp        /4    &qq_show.printunit
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
#7658: 
    load     u64       p                
    jumpt    u64       #7657            
#7654: 
    retproc                             
endproc

proc qq_show.getprefix:
    param    i64       level
    param    u64       prefix
    param    u64       p
    local    mem:1024       indentstr
    local    mem:16384       modestr
    local    i64       av_1
    rettype  u64
    load     u64       0                
    load     u64       &indentstr       
    load     i64       1                
    istorex  u8  /1/-1                  
    load     i64       level            
    load     i64       20               
    jumple   i64       #7662            
    load     i64       10               
    store    i64       level            
#7662: 
    load     i64       level            
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #7665            
#7663: 
    setcall  u64 /2/1                   
    load     u64       "- "             
    setarg   u64 /2                     
    load     u64       &indentstr       
    setarg   u64 /1                     
    callf    u64 /2    &strcat          
    unload   u64                        
    to       i64       #7663            
    opnd     i64       av_1             
#7665: 
    setcall  u64 /2                     
    setcall  u64 /0                     
    callf    u64 /0    &qq_show.getlineinfok
    setarg   u64 /2                     
    load     u64       &qq_show.getprefix.str
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    setcall  u64 /2/1                   
    load     u64       &indentstr       
    setarg   u64 /2                     
    load     u64       &qq_show.getprefix.str
    setarg   u64 /1                     
    callf    u64 /2    &strcat          
    unload   u64                        
    setcall  u64 /2/1                   
    load     u64       prefix           
    setarg   u64 /2                     
    load     u64       &qq_show.getprefix.str
    setarg   u64 /1                     
    callf    u64 /2    &strcat          
    unload   u64                        
    load     u64       prefix           
    iload    u8                         
    jumpf    u8        #7667            
    setcall  u64 /2/1                   
    load     u64       " "              
    setarg   u64 /2                     
    load     u64       &qq_show.getprefix.str
    setarg   u64 /1                     
    callf    u64 /2    &strcat          
    unload   u64                        
#7667: 
    load     u64       &qq_show.getprefix.str
    jumpret  u64       #7660            
#7660: 
    retfn    u64                        
endproc

proc qq_show.getlineinfok:
    rettype  u64
    setcall  u64 /2                     
    setcall  u64 /2                     
    load     u64       "z4"             
    setarg   u64 /2                     
    load     i64       qq_show.currlineno
    setarg   i64 /1                     
    callf    u64 /2    &msysc.strint    
    setarg   u64 /2                     
    load     u64       &qq_show.getlineinfok.str
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    load     u64       &qq_show.getlineinfok.str
    jumpret  u64       #7668            
#7668: 
    retfn    u64                        
endproc

proc qq_show.printglobalsymbols:
    param    u64       f
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "PROC Global Symbol Table"
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     u64       qq_decls.stprogram
    setarg   u64 /2                     
    load     u64       f                
    setarg   u64 /1                     
    callp        /3    &qq_show.printst 
    retproc                             
endproc

proc qq_show.printst:
    param    u64       f
    param    u64       p
    param    i64       level
    local    u64       q
    setcall      /3/1                   
    load     i64       level            
    setarg   i64 /3                     
    load     u64       p                
    setarg   u64 /2                     
    load     u64       f                
    setarg   u64 /1                     
    callp        /3    &qq_show.printstrec
    load     u64       p                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       q                
    jump               #7672            
#7671: 
    setcall      /3/1                   
    load     i64       level            
    load     i64       1                
    add      i64                        
    setarg   i64 /3                     
    load     u64       q                
    setarg   u64 /2                     
    load     u64       f                
    setarg   u64 /1                     
    callp        /3    &qq_show.printst 
    load     u64       q                
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       q                
#7672: 
    load     u64       q                
    load     u64       0                
    jumpne   u64       #7671            
    retproc                             
endproc

proc qq_show.printstrec:
    param    u64       f
    param    u64       p
    param    i64       level
    local    mem:128       dd
    local    u64       q
    local    mem:16       v
    local    u64       d
    local    i64       col
    local    i64       offset
    local    i64       n
    local    mem:256       str
    local    u64       s
    local    i64       av_1
    local    u64       tab
    load     u64       &v               
    store    u64       d                
    load     i64       0                
    store    i64       offset           
    load     i64       level            
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #7677            
#7675: 
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "    "           
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     i64       4                
    load     u64 /1    &offset          
    addto    i64                        
    load     i64       4                
    load     u64 /1    &col             
    addto    i64                        
    to       i64       #7675            
    opnd     i64       av_1             
#7677: 
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1                     
    setcall  u64 /3                     
    load     u64       "-"              
    setarg   u64 /3                     
    load     i64       22               
    load     i64       offset           
    sub      i64                        
    setarg   i64 /2                     
    load     u64       p                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /3    &mlib.padstr     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1                     
    setcall  u64 /3                     
    load     u64       "."              
    setarg   u64 /3                     
    load     i64       12               
    setarg   i64 /2                     
    load     u64       &qq_tables.namenames
    load     u64       p                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callf    u64 /3    &mlib.padstr     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     i64       40               
    store    i64       col              
    load     u64       p                
    iload    mem:128                    
    store    mem:128       dd           
    load     u64       &dd              
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       2                
    loadbit  i64                        
    jumpf    u64       #7679            
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "Imp "           
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7678            
#7679: 
    load     u64       &dd              
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       0                
    load     i64       1                
    loadbf   i64                        
    jumpf    u64       #7680            
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    startmx                             
    load     u64       &dd              
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       0                
    load     i64       1                
    loadbf   i64                        
    switch   i64 /1/2  #7682            
    opnd     i64       #7683            
#7682: 
    swlabel            #7684            
    swlabel            #7685            
    endsw                               
#7684: 
    load     u64       "Glob "          
    resetmx  u64                        
    jump               #7681            
#7685: 
    load     u64       "Exp "           
    resetmx  u64                        
    jump               #7681            
#7683: 
    load     u64       "Local "         
    endmx    u64                        
#7681: 
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
#7680: 
#7678: 
    load     u64       &dd              
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       5                
    loadbit  i64                        
    jumpf    u64       #7687            
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "byref "         
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
#7687: 
    load     u64       &dd              
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       7                
    loadbit  i64                        
    jumpf    u64       #7689            
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "opt "           
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
#7689: 
    load     u64       &dd              
    load     i64       114              
    iloadx   u8  /1                     
    jumpf    u8        #7691            
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "Modno:#"        
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       &dd              
    load     i64       114              
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
#7691: 
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "=========="     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     u64       &dd              
    load     i64       8                
    iloadx   u64 /1                     
    jumpf    u64       #7693            
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "(#)"            
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       &dd              
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1                     
    setcall  u64 /3                     
    load     u64       "-"              
    setarg   u64 /3                     
    load     i64       18               
    setarg   i64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /3    &mlib.padstr     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7692            
#7693: 
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1                     
    setcall  u64 /3                     
    load     u64       "-"              
    setarg   u64 /3                     
    load     i64       18               
    setarg   i64 /2                     
    load     u64       "()"             
    setarg   u64 /1                     
    callf    u64 /3    &mlib.padstr     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
#7692: 
    load     u64       &dd              
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       11               
    jumpeq   i64 /1    #7695            
    load     i64       14               
    jumpeq   i64 /1    #7695            
    load     i64       15               
    jumpeq   i64 /1    #7695            
    load     i64       19               
    jumpeq   i64 /1    #7695            
    load     i64       12               
    jumpeq   i64 /1    #7696            
    load     i64       9                
    jumpeq   i64 /1    #7697            
    load     i64       5                
    jumpeq   i64 /1    #7698            
    load     i64       7                
    jumpeq   i64 /1    #7698            
    load     i64       6                
    jumpeq   i64       #7698            
    jump               #7699            
#7695: 
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       " Ix:"           
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &dd              
    load     i64       96               
    iloadx   i32 /1                     
    widen    i64/i32                    
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64       " "              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     u64       &dd              
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       11               
    jumpne   i64       #7701            
    load     u64       &dd              
    load     i64       80               
    iloadx   u64 /1                     
    jumpf    u64       #7701            
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "@"              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &dd              
    load     i64       80               
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_space
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
#7701: 
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       " Offset:"       
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &dd              
    load     i64       108              
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64       " "              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7694            
#7696: 
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       " Offset:"       
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &dd              
    load     i64       108              
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64       " Ix:"           
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &dd              
    load     i64       96               
    iloadx   i32 /1                     
    widen    i64/i32                    
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_space
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7694            
#7697: 
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       " Nfields:"      
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &dd              
    load     i64       104              
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64       " "              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7694            
#7698: 
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       " Nparms:# "     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       &dd              
    load     i64       104              
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       "DD.MISFUNC="    
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       &dd              
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       4                
    loadbit  i64                        
    setarg   u64 /1                     
    callp        /2    &msysc.m$print_u64
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7694            
#7699: 
#7694: 
    load     u64       &dd              
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       14               
    jumpeq   i64 /1    #7703            
    load     i64       13               
    jumpeq   i64 /1    #7703            
    load     i64       18               
    jumpeq   i64 /1    #7703            
    load     i64       22               
    jumpeq   i64 /1    #7703            
    load     i64       15               
    jumpeq   i64 /1    #7703            
    load     i64       16               
    jumpeq   i64       #7703            
    jump               #7704            
#7703: 
    load     u64       &dd              
    load     i64       88               
    iloadx   u64 /1                     
    jumpf    u64       #7706            
    load     u64       &dd              
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       11               
    load     i64       12               
    loadbf   i64                        
    load     u64       3                
    jumpeq   u64 /1    #7708            
    load     u64       2                
    jumpeq   u64       #7709            
    jump               #7710            
#7708: 
    load     u64       "::="            
    store    u64       s                
    jump               #7707            
#7709: 
    load     u64       ":="             
    store    u64       s                
    jump               #7707            
#7710: 
    load     u64       "="              
    store    u64       s                
#7707: 
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       s                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1                     
    setcall  u64 /1                     
    load     u64       &dd              
    load     i64       88               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    u64 /1    &qq_lib.strexpr  
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_space
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
#7706: 
    jump               #7702            
#7704: 
#7702: 
    load     u64       &dd              
    load     i64       116              
    iloadx   i16 /1                     
    jumpf    i16       #7712            
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "Mode:#"         
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1                     
    setcall  u64 /2                     
    load     i64       0                
    setarg   i64 /2                     
    load     u64       &dd              
    load     i64       116              
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /1                     
    callf    u64 /2    &qq_show.strmode 
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &dd              
    load     i64       116              
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
#7712: 
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     u64       "          "     
    store    u64       tab              
    retproc                             
endproc

proc qq_show.printtypetables:
    param    u64       f
    local    u64       d
    local    u64       p
    local    i64       m
    local    i64       i
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "PRINT TYPE TABLES"
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     i64       qq_tables.nuserxtypes
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "PROC TYPE TABLES"
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     i64       0                
    store    i64       m                
    load     i64       qq_tables.ntypes 
    load     i64       0                
    jumplt   i64       #7716            
#7714: 
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "#: # "          
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /2/1                   
    load     u64       "3"              
    setarg   u64 /2                     
    load     i64       m                
    setarg   i64 /1                     
    callp        /2    &msysc.m$print_i64
    setcall      /2/1                   
    load     u64       "jl12"           
    setarg   u64 /2                     
    load     u64       &qq_tables.ttname
    load     i64       m                
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /2    &msysc.m$print_str
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     u64       &qq_tables.ttnamedef
    load     i64       m                
    iloadx   u64 /8                     
    store    u64       d                
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "\tST="          
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       d                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_ptr_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "\tLen="         
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &qq_tables.ttlength
    load     i64       m                
    iloadx   i64 /8                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       "Lower"          
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &qq_tables.ttlower
    load     i64       m                
    iloadx   i64 /8                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "\tSize="        
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &qq_tables.ttsize
    load     i64       m                
    iloadx   i64 /8                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "\tBasetype="    
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &qq_tables.ttbasetype
    load     i64       m                
    iloadx   i16 /2                     
    widen    i64/i16                    
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       &qq_tables.ttname
    load     u64       &qq_tables.ttbasetype
    load     i64       m                
    iloadx   i16 /2                     
    widen    i64/i16                    
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "\tTarget="      
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &qq_tables.tttarget
    load     i64       m                
    iloadx   i16 /2                     
    widen    i64/i16                    
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       &qq_tables.ttname
    load     u64       &qq_tables.tttarget
    load     i64       m                
    iloadx   i16 /2                     
    widen    i64/i16                    
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "\tCaligned="    
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &qq_tables.ttcaligned
    load     i64       m                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     u64       &qq_tables.ttfields
    load     i64       m                
    iloadx   u64 /8                     
    store    u64       d                
    load     u64       d                
    jumpf    u64       #7718            
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "\tFields:"      
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7720            
#7719: 
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "\t\t"           
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1                     
    startmx                             
    load     u64       d                
    load     i64       116              
    iloadx   i16 /1                     
    jumpf    i16       #7723            
    setcall  u64 /2                     
    load     i64       0                
    setarg   i64 /2                     
    load     u64       d                
    load     i64       116              
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /1                     
    callf    u64 /2    &qq_show.strmode 
    resetmx  u64                        
    jump               #7722            
#7723: 
    load     u64       ""               
    endmx    u64                        
#7722: 
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     u64       d                
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       d                
#7720: 
    load     u64       d                
    jumpt    u64       #7719            
#7718: 
    forup    i64 /1    #7714            
    opnd     i64       m                
    opnd     i64       qq_tables.ntypes 
#7716: 
    load     u64       qq_tables.userxmodelist
    store    u64       p                
    load     i64       1                
    store    i64       i                
    load     i64       qq_tables.nuserxtypes
    load     i64       1                
    jumplt   i64       #7726            
#7724: 
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     i64       i                
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     i64       i                
    neg      i64                        
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       &qq_tables.ttnamedefx
    load     i64       i                
    iloadx   u64 /8                     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    forup    i64 /1    #7724            
    opnd     i64       i                
    opnd     i64       qq_tables.nuserxtypes
#7726: 
    retproc                             
endproc

proc qq_show.showsttree:
    local    u64       f
    local    u64       m
    local    u64       d
    local    u64       g
    local    u64       p
    local    i64       i
    load     u8        qq_cli.fshowst   
    jumpt    u8        #7729            
    jump               #7727            
#7729: 
    setcall  u64 /2/1                   
    load     u64       "w"              
    setarg   u64 /2                     
    load     u64       "ST"             
    setarg   u64 /1                     
    callf    u64 /2    &fopen           
    store    u64       f                
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &qq_show.printglobalsymbols
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "Modules"        
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     i64       qq_decls.nmodules
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     i64       1                
    store    i64       i                
    load     i64       qq_decls.nmodules
    load     i64       1                
    jumplt   i64       #7732            
#7730: 
    load     u64       &qq_decls.modules
    load     i64       i                
    iloadx   u64 /8                     
    store    u64       m                
    load     u64       m                
    jumpf    u64       #7734            
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "\t"             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     i64       i                
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64       ":"              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       m                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       "M.COMPILED="    
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       m                
    load     i64       43               
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       "M.PCSTART="     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       m                
    load     i64       56               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_ptr_nf
    setcall      /1/1                   
    load     u64       "M.PCSIZE="      
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       m                
    load     i64       72               
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7733            
#7734: 
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "MODULE"         
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     i64       i                
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       "MISSING"        
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
#7733: 
    forup    i64 /1    #7730            
    opnd     i64       i                
    opnd     i64       qq_decls.nmodules
#7732: 
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "PROC Global GenField Table"
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     i64       qq_decls.ngenfields
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     i64       1                
    store    i64       i                
    load     i64       qq_decls.ngenfields
    load     i64       1                
    jumplt   i64       #7737            
#7735: 
    load     u64       &qq_decls.genfieldtable
    load     i64       i                
    iloadx   u64 /8/-8                  
    store    u64       g                
    load     u64       g                
    load     u64       0                
    jumpne   u64       #7739            
    jump               #7736            
#7739: 
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "   #) #:"       
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     i64       i                
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       g                
    load     i64       0                
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7741            
#7740: 
    load     u64       g                
    load     i64       0                
    iloadx   u64 /1                     
    store    u64       d                
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "      "         
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &qq_tables.namenames
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       d                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     u64       g                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       g                
#7741: 
    load     u64       g                
    jumpt    u64       #7740            
#7736: 
    forup    i64 /1    #7735            
    opnd     i64       i                
    opnd     i64       qq_decls.ngenfields
#7737: 
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "DLL Table"      
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     i64       qq_decls.nlibfiles
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     i64       1                
    store    i64       i                
    load     i64       qq_decls.nlibfiles
    load     i64       1                
    jumplt   i64       #7745            
#7743: 
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     i64       i                
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       ":"              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &qq_decls.libtable
    load     i64       i                
    iloadx   u64 /8/-8                  
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       &qq_decls.dllinsttable
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /1                     
    callp        /2    &msysc.m$print_u64
    setcall      /2/1                   
    load     u64       "c"              
    setarg   u64 /2                     
    load     u64       &qq_decls.libtypes
    load     i64       i                
    iloadx   u8  /1/-1                  
    widen    i64/u8                     
    setarg   i64 /1                     
    callp        /2    &msysc.m$print_i64
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    forup    i64 /1    #7743            
    opnd     i64       i                
    opnd     i64       qq_decls.nlibfiles
#7745: 
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "DLL Proc Table" 
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     i64       qq_decls.ndllprocs
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     i64       1                
    store    i64       i                
    load     i64       qq_decls.ndllprocs
    load     i64       1                
    jumplt   i64       #7748            
#7746: 
    load     u64       &qq_decls.dllproctable
    load     i64       i                
    iloadx   u64 /8/-8                  
    store    u64       d                
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     i64       i                
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       ":"              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &qq_decls.dllproclibindex
    load     i64       i                
    iloadx   u8  /1/-1                  
    widen    i64/u8                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       &qq_decls.dllprocaddr
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_ptr_nf
    setcall      /1/1                   
    startmx                             
    load     u64       d                
    load     i64       120              
    iloadx   u16 /1                     
    widen    i64/u16                    
    load     i64       8                
    loadbit  i64                        
    jumpf    u64       #7750            
    load     u64       "Variadic"       
    resetmx  u64                        
    jump               #7749            
#7750: 
    load     u64       ""               
    endmx    u64                        
#7749: 
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /2/1                   
    load     u64       "c"              
    setarg   u64 /2                     
    load     u64       &qq_decls.libtypes
    load     u64       &qq_decls.dllproclibindex
    load     i64       i                
    iloadx   u8  /1/-1                  
    widen    i64/u8                     
    iloadx   u8  /1/-1                  
    widen    i64/u8                     
    setarg   i64 /1                     
    callp        /2    &msysc.m$print_i64
    setcall      /1/1                   
    load     u64       "D.INDEX="       
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       d                
    load     i64       96               
    iloadx   i32 /1                     
    widen    i64/i32                    
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       "DLLPROCTABLE[D.INDEX]="
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &qq_decls.dllproctable
    load     u64       d                
    load     i64       96               
    iloadx   i32 /1                     
    widen    i64/i32                    
    iloadx   u64 /8/-8                  
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_ptr_nf
    setcall      /1/1                   
    load     u64       "D="             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       d                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_ptr_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    forup    i64 /1    #7746            
    opnd     i64       i                
    opnd     i64       qq_decls.ndllprocs
#7748: 
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "All Proc Table" 
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     i64       qq_decls.nproclist
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     u64       qq_decls.proclist
    store    u64       p                
    jump               #7752            
#7751: 
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "Proc:"          
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       p                
    load     i64       0                
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       p                
    load     i64       0                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
#7752: 
    load     u64       p                
    jumpt    u64       #7751            
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall  i32 /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callf    i32 /1    &fclose          
    unload   i32                        
#7727: 
    retproc                             
endproc

proc qq_show.showtypes:
    local    u64       f
    local    u64       m
    load     u8        qq_cli.fshowtypes
    jumpt    u8        #7756            
    jump               #7754            
#7756: 
    load     u8        qq_cli.runcode   
    widen    i64/u8                     
    load     i64       6                
    jumpne   i64       #7758            
    jump               #7754            
#7758: 
    setcall  u64 /2/1                   
    load     u64       "w"              
    setarg   u64 /2                     
    load     u64       "TYPES"          
    setarg   u64 /1                     
    callf    u64 /2    &fopen           
    store    u64       f                
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &qq_show.printtypetables
    setcall  i32 /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callf    i32 /1    &fclose          
    unload   i32                        
#7754: 
    retproc                             
endproc

proc qq_show.showast:
    param    u64       sp
    param    u64       file
    local    u64       f
    local    u64       pm
    local    u64       d
    local    i64       k
    local    i64       i
    load     u8        qq_cli.runcode   
    widen    i64/u8                     
    load     i64       6                
    jumpne   i64       #7761            
    jump               #7759            
#7761: 
    setcall  u64 /2/1                   
    load     u64       "w"              
    setarg   u64 /2                     
    load     u64       file             
    setarg   u64 /1                     
    callf    u64 /2    &fopen           
    store    u64       f                
    load     u64       f                
    jumpt    u64       #7763            
    jump               #7759            
#7763: 
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "PROC"           
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       file             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64       ":"              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     u64       sp               
    jumpf    u64       #7765            
    setcall      /2/1                   
    load     u64       sp               
    setarg   u64 /2                     
    load     u64       f                
    setarg   u64 /1                     
    callp        /2    &qq_show.showast2
    jump               #7764            
#7765: 
    load     i64       1                
    store    i64       i                
    load     i64       qq_decls.nsubprogs
    load     i64       1                
    jumplt   i64       #7768            
#7766: 
    setcall      /2/1                   
    load     u64       &qq_decls.subprogs
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /2                     
    load     u64       f                
    setarg   u64 /1                     
    callp        /2    &qq_show.showast2
    forup    i64 /1    #7766            
    opnd     i64       i                
    opnd     i64       qq_decls.nsubprogs
#7768: 
#7764: 
    setcall  i32 /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callf    i32 /1    &fclose          
    unload   i32                        
#7759: 
    retproc                             
endproc

proc qq_show.showast2:
    param    u64       f
    param    u64       sp
    local    u64       pm
    local    u64       d
    local    u64       e
    local    i64       k
    local    i64       i
    local    i64       av_1
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "Proc Subprog"   
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       sp               
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64       ": ******\n"     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     u64       sp               
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       i                
    load     u64       sp               
    load     i64       26               
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       av_1             
    load     i64       i                
    load     i64       av_1             
    jumpgt   i64       #7772            
#7770: 
    load     u64       &qq_decls.modules
    load     i64       i                
    iloadx   u64 /8                     
    store    u64       pm               
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "Module:"        
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       pm               
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /4/1                   
    load     u64       f                
    setarg   u64 /4                     
    load     u64       "*"              
    setarg   u64 /3                     
    load     i64       0                
    setarg   i64 /2                     
    load     u64       pm               
    load     i64       48               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /4    &qq_show.printunit
    load     u64       pm               
    load     i64       88               
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       d                
    jump               #7776            
#7773: 
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       5                
    jumpne   i64       #7778            
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "\n---PROC"      
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /4/1                   
    load     u64       f                
    setarg   u64 /4                     
    load     u64       "*"              
    setarg   u64 /3                     
    load     i64       0                
    setarg   i64 /2                     
    load     u64       d                
    load     i64       88               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /4    &qq_show.printunit
    load     u64       d                
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       e                
    jump               #7782            
#7779: 
    load     u64       e                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       6                
    jumpne   i64       #7784            
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "\n---ANONPROC"  
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       e                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "ANON"           
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       e                
    load     i64       88               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_ptr_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /4/1                   
    load     u64       f                
    setarg   u64 /4                     
    load     u64       "*"              
    setarg   u64 /3                     
    load     i64       0                
    setarg   i64 /2                     
    load     u64       e                
    load     i64       88               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /4    &qq_show.printunit
#7784: 
    load     u64       e                
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       e                
#7782: 
    load     u64       e                
    jumpt    u64       #7779            
#7778: 
    load     u64       d                
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       d                
#7776: 
    load     u64       d                
    jumpt    u64       #7773            
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    forup    i64 /1    #7770            
    opnd     i64       i                
    opnd     i64       av_1             
#7772: 
    retproc                             
endproc

proc qq_show.showlogfile:
    local    mem:256       str
    local    u64       logdev
    load     u8        qq_cli.fshowpcl1 
    widen    i64/u8                     
    load     u8        qq_cli.fshowpcl2 
    widen    i64/u8                     
    add      i64                        
    load     u8        qq_cli.fshowast1 
    widen    i64/u8                     
    add      i64                        
    load     u8        qq_cli.fshowast2 
    widen    i64/u8                     
    add      i64                        
    load     u8        qq_cli.fshowst   
    widen    i64/u8                     
    add      i64                        
    load     u8        qq_cli.fshowtypes
    widen    i64/u8                     
    add      i64                        
    load     u8        qq_cli.fshowmodules
    widen    i64/u8                     
    add      i64                        
    load     u8        qq_cli.fshowstflat
    widen    i64/u8                     
    add      i64                        
    load     i64       0                
    jumpne   i64       #7787            
    jump               #7785            
#7787: 
    load     u8        qq_cli.runcode   
    widen    i64/u8                     
    load     i64       6                
    jumpne   i64       #7789            
    jump               #7785            
#7789: 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "PRESS KEY"      
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall  i64 /0/1                   
    callf    i64 /0    &mlinux.os_getch 
    load     i64       27               
    jumpne   i64       #7791            
    load     i64       0                
    stop                                
#7791: 
    load     u8        qq_cli.fshowst   
    jumpf    u8        #7793            
    setcall      /0/1                   
    callp        /0    &qq_show.showsttree
#7793: 
    load     u8        qq_cli.fshowstflat
    jumpf    u8        #7795            
    setcall      /0/1                   
    callp        /0    &qq_show.showstflat
#7795: 
    load     u8        qq_cli.fshowtypes
    jumpf    u8        #7797            
    setcall      /0/1                   
    callp        /0    &qq_show.showtypes
#7797: 
    setcall  u64 /2/1                   
    load     u64       "w"              
    setarg   u64 /2                     
    load     u64       "qq.log"         
    setarg   u64 /1                     
    callf    u64 /2    &fopen           
    store    u64       logdev           
    load     u8        qq_cli.fshowmodules
    jumpf    u8        #7799            
    setcall      /1/1                   
    load     u64       logdev           
    setarg   u64 /1                     
    callp        /1    &qq_show.showmoduleinfo
#7799: 
    load     u8        qq_cli.runcode   
    widen    i64/u8                     
    load     i64       4                
    jumplt   i64       #7801            
    load     u8        qq_cli.fshowpcl2 
    jumpf    u8        #7801            
    setcall      /2/1                   
    load     u64       logdev           
    setarg   u64 /2                     
    load     u64       "PCL2"           
    setarg   u64 /1                     
    callp        /2    &qq_show.addtolog
#7801: 
    load     u8        qq_cli.runcode   
    widen    i64/u8                     
    load     i64       4                
    jumplt   i64       #7803            
    load     u8        qq_cli.fshowpcl1 
    jumpf    u8        #7803            
    setcall      /2/1                   
    load     u64       logdev           
    setarg   u64 /2                     
    load     u64       "PCL1"           
    setarg   u64 /1                     
    callp        /2    &qq_show.addtolog
#7803: 
    load     u8        qq_cli.runcode   
    widen    i64/u8                     
    load     i64       3                
    jumplt   i64       #7805            
    load     u8        qq_cli.fshowast2 
    jumpf    u8        #7805            
    setcall      /2/1                   
    load     u64       logdev           
    setarg   u64 /2                     
    load     u64       "AST2"           
    setarg   u64 /1                     
    callp        /2    &qq_show.addtolog
#7805: 
    load     u8        qq_cli.runcode   
    widen    i64/u8                     
    load     i64       2                
    jumplt   i64       #7807            
    load     u8        qq_cli.fshowast1 
    jumpf    u8        #7807            
    setcall      /2/1                   
    load     u64       logdev           
    setarg   u64 /2                     
    load     u64       "AST1"           
    setarg   u64 /1                     
    callp        /2    &qq_show.addtolog
#7807: 
    load     u8        qq_cli.fshowst   
    jumpf    u8        #7809            
    setcall      /2/1                   
    load     u64       logdev           
    setarg   u64 /2                     
    load     u64       "ST"             
    setarg   u64 /1                     
    callp        /2    &qq_show.addtolog
#7809: 
    load     u8        qq_cli.fshowstflat
    jumpf    u8        #7811            
    setcall      /2/1                   
    load     u64       logdev           
    setarg   u64 /2                     
    load     u64       "STFLAT"         
    setarg   u64 /1                     
    callp        /2    &qq_show.addtolog
#7811: 
    load     u8        qq_cli.fshowtypes
    jumpf    u8        #7813            
    setcall      /2/1                   
    load     u64       logdev           
    setarg   u64 /2                     
    load     u64       "TYPES"          
    setarg   u64 /1                     
    callp        /2    &qq_show.addtolog
#7813: 
    setcall  i32 /1/1                   
    load     u64       logdev           
    setarg   u64 /1                     
    callf    i32 /1    &fclose          
    unload   i32                        
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "c:/m/scripts/med.bat #"
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       "qq.log"         
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall  i64 /3/1                   
    load     u64       0                
    setarg   u64 /3                     
    load     i64       0                
    setarg   i64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    i64 /3    &mlinux.os_execwait
    unload   i64                        
#7785: 
    retproc                             
endproc

proc qq_show.addtolog:
    param    u64       filename
    param    u64       logdest
    local    u64       f
    local    i64       c
    setcall  u64 /2/1                   
    load     u64       "rb"             
    setarg   u64 /2                     
    load     u64       filename         
    setarg   u64 /1                     
    callf    u64 /2    &fopen           
    store    u64       f                
    load     u64       f                
    load     u64       0                
    jumpne   u64       #7816            
    jump               #7814            
#7816: 
#7817: 
    setcall  i32 /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callf    i32 /1    &fgetc           
    widen    i64/i32                    
    store    i64       c                
    load     i64       c                
    load     i64       -1               
    jumpne   i64       #7820            
    jump               #7818            
#7820: 
    setcall  i32 /2/1                   
    load     u64       logdest          
    setarg   u64 /2                     
    load     i64       c                
    setarg   i32 /1                     
    callf    i32 /2    &fputc           
    unload   i32                        
    jump               #7817            
#7818: 
    setcall  i32 /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callf    i32 /1    &fclose          
    unload   i32                        
#7814: 
    retproc                             
endproc

proc qq_show.showstflat:
    local    u64       f
    local    u64       p
    local    i64       sym
    local    i64       av_1
    local    i64       i
    load     u8        qq_cli.fshowstflat
    jumpt    u8        #7823            
    jump               #7821            
#7823: 
    setcall  u64 /2/1                   
    load     u64       "w"              
    setarg   u64 /2                     
    load     u64       "STFLAT"         
    setarg   u64 /1                     
    callf    u64 /2    &fopen           
    store    u64       f                
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "GLOBAL FLAT SYMBOL TABLE:"
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     i64       0                
    store    i64       i                
    load     i64       32766            
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumplt   i64       #7826            
#7824: 
    load     u64       &qq_lex.hashtable
    load     i64       i                
    addpx    mem:128 /128               
    store    u64       p                
    load     u64       p                
    load     i64       0                
    iloadx   u64 /1                     
    jumpf    u64       #7828            
    load     u64       p                
    load     i64       123              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       69               
    jumpeq   i64       #7830            
    jump               #7831            
#7830: 
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     i64       i                
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_ptr_nf
    setcall      /1/1                   
    load     u64       ":"              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       p                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /2/1                   
    load     u64       "m"              
    setarg   u64 /2                     
    load     u64       &qq_tables.symbolnames
    load     u64       p                
    load     i64       123              
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8/-8                  
    setarg   u64 /1                     
    callp        /2    &msysc.m$print_u64
    setcall      /1/1                   
    load     u64       &qq_tables.namenames
    load     u64       p                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     u64       p                
    load     i64       40               
    iloadx   u64 /1                     
    store    u64       p                
    jump               #7833            
#7832: 
    load     u64       p                
    load     i64       123              
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       sym              
    load     i64       sym              
    load     i64       0                
    jumpne   i64       #7836            
    load     i64       1                
    store    i64       sym              
#7836: 
    setcall      /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "\t"             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_ptr_nf
    setcall      /1/1                   
    load     u64       p                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /2/1                   
    load     u64       "m"              
    setarg   u64 /2                     
    load     u64       &qq_tables.symbolnames
    load     i64       sym              
    iloadx   u64 /8/-8                  
    setarg   u64 /1                     
    callp        /2    &msysc.m$print_u64
    setcall      /1/1                   
    load     u64       &qq_tables.namenames
    load     u64       p                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       "(From"          
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    startmx                             
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    jumpf    u64       #7838            
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   u64 /1                     
    resetmx  u64                        
    jump               #7837            
#7838: 
    load     u64       "-"              
    endmx    u64                        
#7837: 
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64       ")"              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     u64       p                
    load     i64       40               
    iloadx   u64 /1                     
    store    u64       p                
#7833: 
    load     u64       p                
    jumpt    u64       #7832            
    jump               #7829            
#7831: 
#7829: 
#7828: 
    forup    i64 /1    #7824            
    opnd     i64       i                
    opnd     i64       av_1             
#7826: 
    setcall  i32 /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callf    i32 /1    &fclose          
    unload   i32                        
#7821: 
    retproc                             
endproc

proc qq_show.showmoduleinfo:
    param    u64       dev
    local    u64       pm
    local    u64       ps
    local    i64       av_1
    local    u64       d
    local    u64       id
    local    i64       i
    local    i64       j
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "SMI0"           
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "Project Structure:"
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "---------------------------------------"
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "Modules"        
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     i64       qq_decls.nmodules
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     i64       1                
    store    i64       i                
    load     i64       qq_decls.nmodules
    load     i64       1                
    jumplt   i64       #7842            
#7840: 
    load     u64       &qq_decls.modules
    load     i64       i                
    iloadx   u64 /8                     
    store    u64       pm               
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       qq_show.showmoduleinfo.tab
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /2/1                   
    load     u64       "2"              
    setarg   u64 /2                     
    load     i64       i                
    setarg   i64 /1                     
    callp        /2    &msysc.m$print_i64
    setcall      /2/1                   
    load     u64       "16jl"           
    setarg   u64 /2                     
    load     u64       pm               
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &msysc.m$print_str
    setcall      /1/1                   
    load     u64       "Lead:"          
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       pm               
    load     i64       45               
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       "Sys:"           
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       pm               
    load     i64       41               
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       "Path:"          
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       pm               
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       "Sub:"           
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &qq_decls.subprogs
    load     u64       pm               
    load     i64       44               
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8/-8                  
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       "File:"          
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       pm               
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    forup    i64 /1    #7840            
    opnd     i64       i                
    opnd     i64       qq_decls.nmodules
#7842: 
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "Subprograms"    
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     i64       qq_decls.nsubprogs
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     i64       1                
    store    i64       i                
    load     i64       qq_decls.nsubprogs
    load     i64       1                
    jumplt   i64       #7845            
#7843: 
    load     u64       &qq_decls.subprogs
    load     i64       i                
    iloadx   u64 /8/-8                  
    store    u64       ps               
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       qq_show.showmoduleinfo.tab
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     i64       i                
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       ps               
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       "Sys:"           
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       ps               
    load     i64       30               
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       "Path:"          
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       ps               
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       "Spec:"          
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       ps               
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       "Comp:"          
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       ps               
    load     i64       28               
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     u64       ps               
    load     i64       24               
    iloadx   i16 /1                     
    jumpf    i16       #7847            
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       qq_show.showmoduleinfo.tab
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       qq_show.showmoduleinfo.tab
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       ps               
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       ps               
    load     i64       26               
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_nogap
    setcall      /1/1                   
    load     u64       ": "             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     u64       ps               
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       j                
    load     u64       ps               
    load     i64       26               
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       av_1             
    load     i64       j                
    load     i64       av_1             
    jumpgt   i64       #7850            
#7848: 
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       &qq_decls.modules
    load     i64       j                
    iloadx   u64 /8                     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_space
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    forup    i64 /1    #7848            
    opnd     i64       j                
    opnd     i64       av_1             
#7850: 
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
#7847: 
    forup    i64 /1    #7843            
    opnd     i64       i                
    opnd     i64       qq_decls.nsubprogs
#7845: 
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     u64       qq_decls.stprogram
    jumpt    u64       #7852            
    jump               #7839            
#7852: 
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "Symboltable:"   
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     u64       qq_decls.stprogram
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       d                
    jump               #7856            
#7853: 
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       3                
    jumpeq   i64 /1    #7858            
    load     i64       2                
    jumpeq   i64       #7859            
    jump               #7860            
#7858: 
    load     u64       "Mod"            
    store    u64       id               
    jump               #7857            
#7859: 
    load     u64       "Sub"            
    store    u64       id               
    jump               #7857            
#7860: 
    load     u64       "---"            
    store    u64       id               
#7857: 
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /1/1                   
    load     u64       "    # # (m#, s#)"
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       id               
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       d                
    load     i64       114              
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       d                
    load     i64       115              
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     u64       d                
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       d                
#7856: 
    load     u64       d                
    jumpt    u64       #7853            
    setcall      /1/1                   
    load     u64       dev              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startfile
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
#7839: 
    retproc                             
endproc

proc qq_show.printsymbol:
    param    u64       lp
    local    mem:16       l
    load     u64       lp               
    iload    mem:16                     
    store    mem:16       l             
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /2/1                   
    load     u64       "m 18 jl"        
    setarg   u64 /2                     
    load     u64       &qq_tables.symbolnames
    load     u64       &l               
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8/-8                  
    setarg   u64 /1                     
    callp        /2    &msysc.m$print_u64
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     u64       &l               
    load     i64       12               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       69               
    jumpeq   i64 /1    #7863            
    load     i64       63               
    jumpeq   i64 /1    #7864            
    load     i64       65               
    jumpeq   i64 /1    #7865            
    load     i64       67               
    jumpeq   i64 /1    #7866            
    load     i64       66               
    jumpeq   i64 /1    #7867            
    load     i64       64               
    jumpeq   i64 /1    #7868            
    load     i64       6                
    jumpeq   i64 /1    #7869            
    load     i64       19               
    jumpeq   i64 /1    #7869            
    load     i64       15               
    jumpeq   i64 /1    #7869            
    load     i64       20               
    jumpeq   i64       #7869            
    jump               #7870            
#7863: 
    setcall      /2/1                   
    load     u64       &l               
    load     i64       0                
    iloadx   u64 /1                     
    load     i64       126              
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       &l               
    load     i64       0                
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &msysc.printstr_n
    jump               #7862            
#7864: 
    load     u64       &l               
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64       #7872            
    jump               #7873            
#7872: 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       &l               
    load     i64       0                
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       "int"            
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7871            
#7873: 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       &l               
    load     i64       0                
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
#7871: 
    jump               #7862            
#7865: 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       &l               
    load     i64       0                
    iloadx   r64 /1                     
    setarg   r64 /1                     
    callp        /2    &msysc.m$print_r64
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7862            
#7866: 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "\""             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_space
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       &l               
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.printstr  
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /0/1                   
    callp        /0    &msysc.m$print_space
    setcall      /1/1                   
    load     u64       "\""             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7862            
#7867: 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "'"              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_space
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       &l               
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.printstr  
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /0/1                   
    callp        /0    &msysc.m$print_space
    setcall      /1/1                   
    load     u64       "'"              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7862            
#7868: 
    setcall      /1/1                   
    load     u64       &l               
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.printstr  
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "L"              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7862            
#7869: 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       &qq_tables.jtagnames
    load     u64       &l               
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7862            
#7870: 
    load     u64       &l               
    load     i64       13               
    iloadx   u8  /1                     
    jumpf    u8        #7875            
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       "#"              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       &l               
    load     i64       13               
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
#7875: 
#7862: 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    retproc                             
endproc

proc qq_show.strmode:
    param    i64       t
    param    i64       expand
    rettype  u64
    setcall      /3/1                   
    load     i64       expand           
    setarg   i64 /3                     
    load     u64       &qq_show.strmode.str
    setarg   u64 /2                     
    load     i64       t                
    setarg   i64 /1                     
    callp        /3    &qq_show.istrmode
    load     u64       &qq_show.strmode.str
    jumpret  u64       #7876            
#7876: 
    retfn    u64                        
endproc

proc qq_show.istrmode:
    param    i64       t
    param    u64       dest
    param    i64       expand
    local    u64       d
    load     i64       t                
    load     i64       0                
    jumpge   i64       #7879            
    setcall  u64 /2/1                   
    load     u64       "*"              
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    setcall  u64 /2/1                   
    load     u64       &qq_tables.ttnamedefx
    load     i64       t                
    neg      i64                        
    iloadx   u64 /8                     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callf    u64 /2    &strcat          
    unload   u64                        
    jump               #7877            
#7879: 
    load     i64       t                
    load     i64       40               
    jumpge   i64       #7881            
    setcall  u64 /2/1                   
    load     u64       &qq_tables.ttname
    load     i64       t                
    iloadx   u64 /8                     
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    jump               #7877            
#7881: 
    load     u64       &qq_tables.ttbasetype
    load     i64       t                
    iloadx   i16 /2                     
    widen    i64/i16                    
    load     i64       16               
    jumpeq   i64 /1    #7883            
    load     i64       7                
    jumpeq   i64 /1    #7884            
    load     i64       13               
    jumpeq   i64 /1    #7885            
    load     i64       12               
    jumpeq   i64       #7886            
    jump               #7887            
#7883: 
    setcall  u64 /2/1                   
    load     u64       "ref "           
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    setcall      /3                     
    load     i64       0                
    setarg   i64 /3                     
    load     u64       dest             
    setcall  i64 /1                     
    load     u64       dest             
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    addpx    u64 /1                     
    setarg   u64 /2                     
    load     u64       &qq_tables.tttarget
    load     i64       t                
    iloadx   i16 /2                     
    widen    i64/i16                    
    setarg   i64 /1                     
    callp        /3    &qq_show.istrmode
    jump               #7882            
#7884: 
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "[#..#]"         
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       &qq_tables.ttlower
    load     i64       t                
    iloadx   i64 /8                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       &qq_tables.ttlength
    load     i64       t                
    iloadx   i64 /8                     
    load     u64       &qq_tables.ttlower
    load     i64       t                
    iloadx   i64 /8                     
    add      i64                        
    load     i64       1                
    sub      i64                        
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /3                     
    load     i64       0                
    setarg   i64 /3                     
    load     u64       dest             
    setcall  i64 /1                     
    load     u64       dest             
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    addpx    u64 /1                     
    setarg   u64 /2                     
    load     u64       &qq_tables.tttarget
    load     i64       t                
    iloadx   i16 /2                     
    widen    i64/i16                    
    setarg   i64 /1                     
    callp        /3    &qq_show.istrmode
    jump               #7882            
#7885: 
    load     i64       expand           
    jumpt    i64       #7889            
    jump               #7890            
#7889: 
    setcall  u64 /2/1                   
    load     u64       "struct("        
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
! qq_show.istrmode.dostruct:
#7891: 
    load     u64       &qq_tables.ttfields
    load     i64       t                
    iloadx   u64 /8                     
    store    u64       d                
    jump               #7895            
#7892: 
    setcall      /3                     
    load     i64       0                
    setarg   i64 /3                     
    load     u64       dest             
    setcall  i64 /1                     
    load     u64       dest             
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    addpx    u64 /1                     
    setarg   u64 /2                     
    load     u64       d                
    load     i64       116              
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /1                     
    callp        /3    &qq_show.istrmode
    setcall  u64 /2/1                   
    load     u64       " "              
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callf    u64 /2    &strcat          
    unload   u64                        
    setcall  u64 /2/1                   
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callf    u64 /2    &strcat          
    unload   u64                        
    load     u64       d                
    load     i64       32               
    iloadx   u64 /1                     
    jumpf    u64       #7897            
    setcall  u64 /2/1                   
    load     u64       ", "             
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callf    u64 /2    &strcat          
    unload   u64                        
#7897: 
    load     u64       d                
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       d                
#7895: 
    load     u64       d                
    jumpt    u64       #7892            
    setcall  u64 /2/1                   
    load     u64       ")"              
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callf    u64 /2    &strcat          
    unload   u64                        
    jump               #7882            
#7886: 
    load     i64       expand           
    jumpt    i64       #7899            
    jump               #7890            
#7899: 
    setcall  u64 /2/1                   
    load     u64       "record("        
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    jump               #7891            
    jump               #7882            
#7887: 
! qq_show.istrmode.$else:
#7890: 
    setcall  u64 /2/1                   
    load     u64       &qq_tables.ttname
    load     i64       t                
    iloadx   u64 /8                     
    setarg   u64 /2                     
    load     u64       dest             
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
#7882: 
#7877: 
    retproc                             
endproc

proc qq_show.deletetempfiles:
    setcall  i32 /1/1                   
    load     u64       "PCL1"           
    setarg   u64 /1                     
    callf    i32 /1    &remove          
    unload   i32                        
    setcall  i32 /1/1                   
    load     u64       "PCL2"           
    setarg   u64 /1                     
    callf    i32 /1    &remove          
    unload   i32                        
    setcall  i32 /1/1                   
    load     u64       "PCL3"           
    setarg   u64 /1                     
    callf    i32 /1    &remove          
    unload   i32                        
    setcall  i32 /1/1                   
    load     u64       "AST1"           
    setarg   u64 /1                     
    callf    i32 /1    &remove          
    unload   i32                        
    setcall  i32 /1/1                   
    load     u64       "AST2"           
    setarg   u64 /1                     
    callf    i32 /1    &remove          
    unload   i32                        
    setcall  i32 /1/1                   
    load     u64       "TYPES"          
    setarg   u64 /1                     
    callf    i32 /1    &remove          
    unload   i32                        
    setcall  i32 /1/1                   
    load     u64       "STFLAT"         
    setarg   u64 /1                     
    callf    i32 /1    &remove          
    unload   i32                        
    setcall  i32 /1/1                   
    load     u64       "ST"             
    setarg   u64 /1                     
    callf    i32 /1    &remove          
    unload   i32                        
    retproc                             
endproc

proc qq_showpcl.writepcl:
    param    u64       pcstart
    param    u64       pc
    param    u64       pclsource
    param    i64       pass
    param    u64       sourcecode
    local    mem:512       str
    local    i64       cmdcode
    local    i64       a
    local    i64       soffset
    local    i64       moduleno
    local    i64       offset
    local    i64       attrs
    local    u64       d
    local    i64       av_1
    load     u64       pc               
    load     i64       8                
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       cmdcode          
    load     i64       cmdcode          
    load     i64       1                
    jumpeq   i64 /1    #7903            
    load     i64       2                
    jumpeq   i64 /1    #7904            
    load     i64       4                
    jumpeq   i64       #7905            
    jump               #7906            
#7903: 
    jump               #7901            
    jump               #7902            
#7904: 
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       qq_showpcl.currpclproc
    setcall      /1/1                   
    load     u64       "!      ----------"
    setarg   u64 /1                     
    callp        /1    &qq_showpcl.gstr 
    setcall      /1/1                   
    load     u64       "Procdef:"       
    setarg   u64 /1                     
    callp        /1    &qq_showpcl.gstr 
    setcall      /1/1                   
    load     u64       qq_showpcl.currpclproc
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_showpcl.gstr 
    setcall      /0/1                   
    callp        /0    &qq_showpcl.gline
    jump               #7901            
    jump               #7902            
#7905: 
    setcall      /1/1                   
    load     u64       "!      ----------"
    setarg   u64 /1                     
    callp        /1    &qq_showpcl.gstr 
    load     u64       pc               
    load     i64       11               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    loadbit  i64                        
    jumpf    u64       #7908            
    setcall      /1/1                   
    load     u64       "<LABEL>"        
    setarg   u64 /1                     
    callp        /1    &qq_showpcl.gstr 
#7908: 
    setcall      /1/1                   
    load     u64       "End"            
    setarg   u64 /1                     
    callp        /1    &qq_showpcl.gstrln
    jump               #7901            
    jump               #7902            
#7906: 
#7902: 
    load     u64       pc               
    load     i64       11               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    loadbit  i64                        
    jumpf    u64       #7910            
    setcall      /1/1                   
    load     u64       "                 "
    setarg   u64 /1                     
    callp        /1    &qq_showpcl.gstr 
    setcall      /2/1                   
    load     u64       pc               
    setarg   u64 /2                     
    load     u64       pcstart          
    setarg   u64 /1                     
    callp        /2    &qq_showpcl.glabeldef
#7910: 
    setcall  i64 /2/1                   
    load     u64       pcstart          
    setarg   u64 /2                     
    load     u64       pc               
    setarg   u64 /1                     
    callf    i64 /2    &qq_lib.getpcloffset
    load     i64       1                
    add      i64                        
    store    i64       offset           
    load     u64       pclsource        
    load     i64       offset           
    iloadx   i32 /4                     
    widen    i64/i32                    
    store    i64       soffset          
    load     i64       soffset          
    load     i64       16777215         
    bitand   i64                        
    store    i64       qq_showpcl.currlineno
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "#: [#]: "       
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /2                     
    load     u64       "4"              
    setarg   u64 /2                     
    setcall  i64 /2                     
    load     u64       pcstart          
    setarg   u64 /2                     
    load     u64       pc               
    setarg   u64 /1                     
    callf    i64 /2    &qq_lib.getpcloffset
    load     i64       1                
    add      i64                        
    setarg   i64 /1                     
    callp        /2    &msysc.m$print_i64
    setcall      /2/1                   
    load     u64       "05jr"           
    setarg   u64 /2                     
    load     i64       qq_showpcl.currlineno
    setarg   i64 /1                     
    callp        /2    &msysc.m$print_i64
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &qq_showpcl.gstr 
    load     i64       cmdcode          
    load     i64       2                
    jumpeq   i64 /1    #7912            
    load     i64       6                
    jumpeq   i64       #7913            
    jump               #7914            
#7912: 
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       qq_showpcl.currpclproc
    jump               #7901            
    jump               #7911            
#7913: 
    setcall      /1/1                   
    load     u64       "! "             
    setarg   u64 /1                     
    callp        /1    &qq_showpcl.gstr 
    setcall      /1/1                   
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_showpcl.gstrln
    jump               #7901            
    jump               #7911            
#7914: 
#7911: 
    load     u64       0                
    load     u64       &str             
    load     i64       1                
    istorex  u8  /1/-1                  
    load     u64       pc               
    load     i64       11               
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    loadbit  i64                        
    jumpf    u64       #7916            
    setcall  u64 /2/1                   
    load     u64       "*"              
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /2    &strcat          
    unload   u64                        
#7916: 
    setcall  u64 /2/1                   
    load     u64       &qq_pcltabs.pclnames
    load     i64       cmdcode          
    iloadx   u64 /8                     
    load     i64       1                
    addpx    u64 /1                     
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /2    &strcat          
    unload   u64                        
    load     i64       1                
    store    i64       a                
    setcall      /4/1                   
    load     i64       45               
    setarg   i64 /4                     
    load     i64       7                
    setarg   i64 /3                     
    load     u64       " "              
    setarg   u64 /2                     
    load     u64       qq_show.pcldest  
    setarg   u64 /1                     
    callp        /4    &mlib.gs_leftstr 
    setcall      /4/1                   
    load     i64       32               
    setarg   i64 /4                     
    load     i64       11               
    setarg   i64 /3                     
    load     u64       &str             
    setarg   u64 /2                     
    load     u64       qq_show.pcldest  
    setarg   u64 /1                     
    callp        /4    &mlib.gs_leftstr 
    load     u64       &qq_pcltabs.pclopnd
    load     i64       cmdcode          
    iloadx   u8  /1                     
    jumpf    u8        #7918            
    setcall  u64 /2                     
    setcall  u64 /3                     
    load     i64       pass             
    setarg   i64 /3                     
    load     u64       pc               
    setarg   u64 /2                     
    load     u64       pcstart          
    setarg   u64 /1                     
    callf    u64 /3    &qq_showpcl.writepclopnd
    setarg   u64 /2                     
    load     u64       &str             
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    setcall      /1/1                   
    load     u64       &str             
    setarg   u64 /1                     
    callp        /1    &qq_showpcl.gstr 
    setcall      /1/1                   
    load     u64       " "              
    setarg   u64 /1                     
    callp        /1    &qq_showpcl.gstr 
#7918: 
    load     u64       &qq_pcltabs.pclattrs
    load     i64       cmdcode          
    iloadx   u32 /4                     
    widen    i64/u32                    
    store    i64       attrs            
    load     i64       attrs            
    load     i64       538976288        
    jumpeq   i64       #7920            
    setcall      /1/1                   
    load     u64       "<"              
    setarg   u64 /1                     
    callp        /1    &qq_showpcl.gstr 
    load     i64       4                
    store    i64       av_1             
#7921: 
    load     i64       attrs            
    load     i64       0                
    load     i64       7                
    loadbf   i64                        
    load     u64       32               
    jumpeq   u64 /1    #7925            
    load     u64       110              
    jumpeq   u64 /1    #7926            
    load     u64       98               
    jumpeq   u64 /1    #7926            
    load     u64       120              
    jumpeq   u64 /1    #7927            
    load     u64       121              
    jumpeq   u64 /1    #7928            
    load     u64       99               
    jumpeq   u64 /1    #7929            
    load     u64       117              
    jumpeq   u64 /1    #7930            
    load     u64       118              
    jumpeq   u64       #7931            
    jump               #7932            
#7925: 
    jump               #7923            
    jump               #7924            
#7926: 
    setcall      /1/1                   
    load     u64       pc               
    load     i64       9                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /1                     
    callp        /1    &qq_showpcl.gstrint
    jump               #7924            
#7927: 
    setcall      /1/1                   
    load     u64       pc               
    load     i64       12               
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /1                     
    callp        /1    &qq_showpcl.gstrint
    jump               #7924            
#7928: 
    setcall      /1/1                   
    load     u64       pc               
    load     i64       14               
    iloadx   i16 /1                     
    widen    i64/i16                    
    setarg   i64 /1                     
    callp        /1    &qq_showpcl.gstrint
    jump               #7924            
#7929: 
    setcall      /1/1                   
    load     u64       &qq_tables.condnames
    load     u64       pc               
    load     i64       9                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &qq_showpcl.gstr 
    jump               #7924            
#7930: 
    setcall      /1/1                   
    load     u64       &qq_tables.ttname
    load     u64       pc               
    load     i64       16               
    iloadx   i32 /1                     
    widen    i64/i32                    
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &qq_showpcl.gstr 
    jump               #7924            
#7931: 
    setcall      /1/1                   
    load     u64       &qq_tables.ttname
    load     u64       pc               
    load     i64       20               
    iloadx   i32 /1                     
    widen    i64/i32                    
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &qq_showpcl.gstr 
    jump               #7924            
#7932: 
#7924: 
    load     i64       8                
    load     u64 /1    &attrs           
    shrto    i64                        
    load     i64       attrs            
    load     i64       255              
    bitand   i64                        
    load     i64       32               
    jumpeq   i64       #7934            
    setcall      /1/1                   
    load     u64       " "              
    setarg   u64 /1                     
    callp        /1    &qq_showpcl.gstr 
#7934: 
    to       i64       #7921            
    opnd     i64       av_1             
#7923: 
    setcall      /1/1                   
    load     u64       ">"              
    setarg   u64 /1                     
    callp        /1    &qq_showpcl.gstr 
#7920: 
    setcall      /0/1                   
    callp        /0    &qq_showpcl.gline
#7901: 
    retproc                             
endproc

proc qq_showpcl.writepclopnd:
    param    u64       pcstart
    param    u64       pc
    param    i64       pass
    local    u64       d
    local    u64       suffix
    local    u64       s
    local    i64       slen
    local    u64       p
    rettype  u64
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       d                
    load     u64       &qq_pcltabs.pclopnd
    load     u64       pc               
    load     i64       8                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       7                
    jumpeq   i64 /1    #7937            
    load     i64       8                
    jumpeq   i64 /1    #7938            
    load     i64       9                
    jumpeq   i64 /1    #7939            
    load     i64       10               
    jumpeq   i64 /1    #7940            
    load     i64       1                
    jumpeq   i64 /1    #7941            
    load     i64       2                
    jumpeq   i64 /1    #7942            
    load     i64       12               
    jumpeq   i64 /1    #7943            
    load     i64       3                
    jumpeq   i64 /1    #7944            
    load     i64       4                
    jumpeq   i64 /1    #7945            
    load     i64       15               
    jumpeq   i64 /1    #7946            
    load     i64       5                
    jumpeq   i64 /1    #7947            
    load     i64       11               
    jumpeq   i64 /1    #7948            
    load     i64       6                
    jumpeq   i64 /1    #7949            
    load     i64       13               
    jumpeq   i64 /1    #7950            
    load     i64       16               
    jumpeq   i64 /1    #7951            
    load     i64       14               
    jumpeq   i64       #7952            
    jump               #7953            
#7937: 
    setcall      /1/1                   
    load     u64       &qq_showpcl.writepclopnd.str
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7936            
#7938: 
    setcall      /1/1                   
    load     u64       &qq_showpcl.writepclopnd.str
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       pc               
    load     i64       16               
    iloadx   r64 /1                     
    setarg   r64 /1                     
    callp        /2    &msysc.m$print_r64
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7936            
#7939: 
    load     i64       pass             
    load     i64       1                
    jumpne   i64       #7955            
    jump               #7956            
#7955: 
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    double                              
    store    i64       slen             
    load     i64       0                
    jumpne   i64       #7958            
    load     u64       "\""             
    jumpret  u64       #7935            
#7958: 
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       s                
    jump               #7959            
    jump               #7936            
#7940: 
! qq_showpcl.writepclopnd.docstringz:
#7956: 
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       s                
    setcall  i64 /1/1                   
    load     u64       s                
    setarg   u64 /1                     
    callf    i64 /1    &strlen          
    store    i64       slen             
! qq_showpcl.writepclopnd.dostring:
#7959: 
    load     i64       slen             
    load     i64       255              
    jumplt   i64       #7961            
    load     i64       255              
    store    i64       slen             
#7961: 
    setcall      /3/1                   
    load     i64       slen             
    setarg   u64 /3                     
    load     u64       s                
    setarg   u64 /2                     
    load     u64       &qq_showpcl.writepclopnd.str
    setarg   u64 /1                     
    callp        /3    &memcpy          
    load     u64       0                
    load     u64       &qq_showpcl.writepclopnd.str
    load     i64       slen             
    istorex  u8  /1                     
    setcall      /2/1                   
    load     u64       &qq_showpcl.writepclopnd.str2
    setarg   u64 /2                     
    load     u64       &qq_showpcl.writepclopnd.str
    setarg   u64 /1                     
    callp        /2    &qq_lib.convertstring
    setcall      /1/1                   
    load     u64       &qq_showpcl.writepclopnd.str
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "\"#\""          
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       &qq_showpcl.writepclopnd.str2
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7936            
#7941: 
    load     i64       pass             
    load     i64       1                
    jumpne   i64       #7963            
    setcall  u64 /2/1                   
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       &qq_showpcl.writepclopnd.str
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    jump               #7962            
#7963: 
    load     u64       qq_cli.allstaticdefs
    store    u64       d                
    jump               #7967            
#7964: 
    load     u64       d                
    load     i64       80               
    iloadx   u64 /1                     
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    jumpne   u64       #7969            
    jump               #7966            
#7969: 
    load     u64       d                
    load     i64       64               
    iloadx   u64 /1                     
    store    u64       d                
#7967: 
    load     u64       d                
    jumpt    u64       #7964            
#7966: 
    setcall      /1/1                   
    load     u64       &qq_showpcl.writepclopnd.str
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "[#] (#:#)"      
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /2/1                   
    load     u64       "h"              
    setarg   u64 /2                     
    load     u64       d                
    load     i64       80               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /2    &msysc.m$print_ptr
    setcall      /1/1                   
    startmx                             
    load     u64       d                
    jumpf    u64       #7971            
    load     u64       d                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   u64 /1                     
    resetmx  u64                        
    jump               #7970            
#7971: 
    load     u64       "?"              
    endmx    u64                        
#7970: 
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    startmx                             
    load     u64       d                
    jumpf    u64       #7973            
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    resetmx  u64                        
    jump               #7972            
#7973: 
    load     u64       "?"              
    endmx    u64                        
#7972: 
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
#7962: 
    jump               #7936            
#7942: 
    load     i64       pass             
    load     i64       1                
    jumpne   i64       #7975            
    setcall  u64 /2/1                   
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       &qq_showpcl.writepclopnd.str
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    jump               #7974            
#7975: 
    load     u64       qq_showpcl.currpclproc
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       d                
    jump               #7977            
#7976: 
    load     u64       d                
    load     i64       124              
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       14               
    jumpeq   i64 /1    #7981            
    load     i64       15               
    jumpne   i64       #7980            
#7981: 
    load     u64       d                
    load     i64       96               
    iloadx   i32 /1                     
    widen    i64/i32                    
    load     i64       16               
    mul      i64                        
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    jumpne   i64       #7980            
    setcall      /1/1                   
    load     u64       &qq_showpcl.writepclopnd.str
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "[#] (#)"        
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       16               
    idiv     i64                        
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    load     u64       &qq_showpcl.writepclopnd.str
    jumpret  u64       #7935            
#7980: 
    load     u64       d                
    load     i64       32               
    iloadx   u64 /1                     
    store    u64       d                
#7977: 
    load     u64       d                
    jumpt    u64       #7976            
#7974: 
    jump               #7936            
#7943: 
    setcall      /1/1                   
    load     u64       &qq_showpcl.writepclopnd.str
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "#.$"            
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7936            
#7944: 
    load     i64       pass             
    load     i64       1                
    jumpne   i64       #7983            
    setcall  u64 /2/1                   
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /2                     
    load     u64       &qq_showpcl.writepclopnd.str
    setarg   u64 /1                     
    callf    u64 /2    &strcpy          
    unload   u64                        
    jump               #7982            
#7983: 
    load     u64       qq_cli.allprocdefs
    store    u64       d                
    jump               #7987            
#7984: 
    load     u64       d                
    load     i64       80               
    iloadx   u64 /1                     
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    jumpne   u64       #7989            
    jump               #7986            
#7989: 
    load     u64       d                
    load     i64       72               
    iloadx   u64 /1                     
    store    u64       d                
#7987: 
    load     u64       d                
    jumpt    u64       #7984            
#7986: 
    setcall      /1/1                   
    load     u64       &qq_showpcl.writepclopnd.str
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "[#] (#:#)"      
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_ptr_nf
    setcall      /1/1                   
    startmx                             
    load     u64       d                
    jumpf    u64       #7991            
    load     u64       d                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   u64 /1                     
    resetmx  u64                        
    jump               #7990            
#7991: 
    load     u64       "?"              
    endmx    u64                        
#7990: 
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    startmx                             
    load     u64       d                
    jumpf    u64       #7993            
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    resetmx  u64                        
    jump               #7992            
#7993: 
    load     u64       "?"              
    endmx    u64                        
#7992: 
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
#7982: 
    jump               #7936            
#7945: 
    setcall      /1/1                   
    load     u64       &qq_showpcl.writepclopnd.str
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "[DLL:#]"        
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7936            
#7946: 
    setcall      /1/1                   
    load     u64       &qq_showpcl.writepclopnd.str
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       &qq_tables.hostfnnames
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    iloadx   u64 /8                     
    load     i64       2                
    addpx    u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7936            
#7947: 
    load     i64       pass             
    load     i64       1                
    jumpne   i64       #7995            
    setcall      /1/1                   
    load     u64       &qq_showpcl.writepclopnd.str
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       ".#"             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       d                
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7994            
#7995: 
    setcall      /1/1                   
    load     u64       &qq_showpcl.writepclopnd.str
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "## (#)"         
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       "#"              
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       &qq_decls.genfieldtable
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    iloadx   u64 /8/-8                  
    load     i64       0                
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
#7994: 
    jump               #7936            
#7948: 
    setcall      /1/1                   
    load     u64       &qq_showpcl.writepclopnd.str
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "T:# (#)"        
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1                     
    setcall  u64 /2                     
    load     i64       0                
    setarg   i64 /2                     
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callf    u64 /2    &qq_show.strmode 
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /1/1                   
    load     u64       pc               
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7936            
#7949: 
    setcall      /1/1                   
    load     u64       &qq_showpcl.writepclopnd.str
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "L#"             
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1                     
    setcall  i64 /2                     
    load     u64       pcstart          
    setarg   u64 /2                     
    load     u64       pc               
    load     i64       16               
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /2    &qq_lib.getpcloffset
    load     i64       1                
    add      i64                        
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7936            
#7950: 
    setcall      /1/1                   
    load     u64       &qq_showpcl.writepclopnd.str
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "(#)"            
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       &qq_pcltabs.pclnames
    load     u64       pc               
    load     i64       16               
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7936            
#7951: 
    setcall      /1/1                   
    load     u64       &qq_showpcl.writepclopnd.str
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "(# #)"          
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       pc               
    load     i64       16               
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /1                     
    callp        /1    &msysc.m$print_i64_nf
    setcall      /1/1                   
    load     u64       &qq_pcltabs.pclnames
    load     u64       &qq_pcltabs.bintotable
    load     u64       pc               
    load     i64       16               
    iloadx   u8  /1                     
    widen    i64/u8                     
    addpx    mem:24 /24/-24             
    load     i64       0                
    iloadx   i64 /1                     
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7936            
#7952: 
    setcall      /1/1                   
    load     u64       &qq_showpcl.writepclopnd.str
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "<#>"            
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       &qq_tables.mathsnames
    load     u64       pc               
    load     i64       16               
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8/-8                  
    load     i64       3                
    addpx    u64 /1                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    jump               #7936            
#7953: 
! qq_showpcl.writepclopnd.other:
    setcall      /1/1                   
    load     u64       &qq_showpcl.writepclopnd.str
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_startstr
    setcall      /1/1                   
    load     u64       "<#>"            
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_setfmt
    setcall      /1/1                   
    load     u64       &qq_pcltabs.opndnames
    load     u64       &qq_pcltabs.pclopnd
    load     u64       pc               
    load     i64       8                
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u8  /1                     
    widen    i64/u8                     
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
#7936: 
    load     u64       &qq_showpcl.writepclopnd.str
    jumpret  u64       #7935            
#7935: 
    retfn    u64                        
endproc

proc qq_showpcl.writeallpcl:
    param    u64       pm
    param    i64       pass
    local    i64       cmd
    local    u64       pc
    local    u64       pclcode
    local    u64       pclsource
    local    u64       sourcecode
    load     i64       0                
    store    i64       qq_showpcl.currlineno
    setcall      /1/1                   
    load     u64       "PCL FOR MODULE:"
    setarg   u64 /1                     
    callp        /1    &qq_showpcl.gstr 
    setcall      /1/1                   
    load     u64       pm               
    load     i64       0                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /1    &qq_showpcl.gstrln
    load     u64       pm               
    load     i64       56               
    iloadx   u64 /1                     
    double                              
    store    u64       pclcode          
    store    u64       pc               
    load     u64       pm               
    load     i64       80               
    iloadx   u64 /1                     
    store    u64       pclsource        
    load     u64       pm               
    load     i64       24               
    iloadx   u64 /1                     
    store    u64       sourcecode       
#7998: 
    load     u64       pc               
    load     i64       8                
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       cmd              
    setcall      /5/1                   
    load     u64       sourcecode       
    setarg   u64 /5                     
    load     i64       pass             
    setarg   i64 /4                     
    load     u64       pclsource        
    setarg   u64 /3                     
    load     u64       pc               
    setarg   u64 /2                     
    load     u64       pclcode          
    setarg   u64 /1                     
    callp        /5    &qq_showpcl.writepcl
    load     u64 /1    &pc              
    incrto   u64 /32                    
    load     i64       cmd              
    load     i64       5                
    jumpne   i64       #7998            
    setcall      /0/1                   
    callp        /0    &qq_showpcl.gline
    retproc                             
endproc

proc qq_showpcl.showpcl:
    param    u64       sp
    param    i64       pass
    local    u64       f
    local    i64       i
    load     u8        qq_cli.runcode   
    widen    i64/u8                     
    load     i64       6                
    jumpne   i64       #8003            
    jump               #8001            
#8003: 
    setcall      /1/1                   
    load     u64       qq_show.pcldest  
    setarg   u64 /1                     
    callp        /1    &mlib.gs_init    
    setcall      /2/1                   
    load     u64       "PROC ALL PCL pass:"
    setarg   u64 /2                     
    load     u64       qq_show.pcldest  
    setarg   u64 /1                     
    callp        /2    &mlib.gs_str     
    setcall      /2/1                   
    load     i64       pass             
    setarg   i64 /2                     
    load     u64       qq_show.pcldest  
    setarg   u64 /1                     
    callp        /2    &mlib.gs_strint  
    setcall      /1/1                   
    load     u64       qq_show.pcldest  
    setarg   u64 /1                     
    callp        /1    &mlib.gs_line    
    load     u64       sp               
    jumpf    u64       #8005            
    setcall      /2/1                   
    load     i64       pass             
    setarg   i64 /2                     
    load     u64       sp               
    setarg   u64 /1                     
    callp        /2    &qq_showpcl.showpcl2
    jump               #8004            
#8005: 
    load     i64       1                
    store    i64       i                
    load     i64       qq_decls.nsubprogs
    load     i64       1                
    jumplt   i64       #8008            
#8006: 
    setcall      /2/1                   
    load     i64       pass             
    setarg   i64 /2                     
    load     u64       &qq_decls.subprogs
    load     i64       i                
    iloadx   u64 /8/-8                  
    setarg   u64 /1                     
    callp        /2    &qq_showpcl.showpcl2
    forup    i64 /1    #8006            
    opnd     i64       i                
    opnd     i64       qq_decls.nsubprogs
#8008: 
#8004: 
    setcall  u64 /2/1                   
    load     u64       "w"              
    setarg   u64 /2                     
    startmx                             
    load     i64       pass             
    switch   i64 /1/2  #8010            
    opnd     i64       #8011            
#8010: 
    swlabel            #8012            
    swlabel            #8013            
    endsw                               
#8012: 
    load     u64       "PCL1"           
    resetmx  u64                        
    jump               #8009            
#8013: 
    load     u64       "PCL2"           
    resetmx  u64                        
    jump               #8009            
#8011: 
    load     u64       "PCL3"           
    endmx    u64                        
#8009: 
    setarg   u64 /1                     
    callf    u64 /2    &fopen           
    store    u64       f                
    load     u64       f                
    jumpt    u64       #8015            
    jump               #8001            
#8015: 
    setcall      /2/1                   
    load     u64       f                
    setarg   u64 /2                     
    load     u64       qq_show.pcldest  
    setarg   u64 /1                     
    callp        /2    &mlib.gs_println 
    setcall  i32 /1/1                   
    load     u64       f                
    setarg   u64 /1                     
    callf    i32 /1    &fclose          
    unload   i32                        
#8001: 
    retproc                             
endproc

proc qq_showpcl.showpcl2:
    param    u64       sp
    param    i64       pass
    local    i64       av_1
    local    i64       i
    load     u64       sp               
    load     i64       24               
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       i                
    load     u64       sp               
    load     i64       26               
    iloadx   i16 /1                     
    widen    i64/i16                    
    store    i64       av_1             
    load     i64       i                
    load     i64       av_1             
    jumpgt   i64       #8019            
#8017: 
    setcall      /2/1                   
    load     i64       pass             
    setarg   i64 /2                     
    load     u64       &qq_decls.modules
    load     i64       i                
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /2    &qq_showpcl.writeallpcl
    forup    i64 /1    #8017            
    opnd     i64       i                
    opnd     i64       av_1             
#8019: 
    retproc                             
endproc

proc qq_showpcl.gstr:
    param    u64       s
    setcall      /2/1                   
    load     u64       s                
    setarg   u64 /2                     
    load     u64       qq_show.pcldest  
    setarg   u64 /1                     
    callp        /2    &mlib.gs_str     
    retproc                             
endproc

proc qq_showpcl.gstrln:
    param    u64       s
    setcall      /2/1                   
    load     u64       s                
    setarg   u64 /2                     
    load     u64       qq_show.pcldest  
    setarg   u64 /1                     
    callp        /2    &mlib.gs_strln   
    retproc                             
endproc

proc qq_showpcl.gline:
    setcall      /1/1                   
    load     u64       qq_show.pcldest  
    setarg   u64 /1                     
    callp        /1    &mlib.gs_line    
    retproc                             
endproc

proc qq_showpcl.gstrint:
    param    i64       a
    setcall      /2/1                   
    load     i64       a                
    setarg   i64 /2                     
    load     u64       qq_show.pcldest  
    setarg   u64 /1                     
    callp        /2    &mlib.gs_strint  
    retproc                             
endproc

proc qq_showpcl.glabeldef:
    param    u64       pcstart
    param    u64       pc
    setcall      /1/1                   
    load     u64       "L"              
    setarg   u64 /1                     
    callp        /1    &qq_showpcl.gstr 
    setcall      /1                     
    setcall  i64 /2                     
    load     u64       pcstart          
    setarg   u64 /2                     
    load     u64       pc               
    setarg   u64 /1                     
    callf    i64 /2    &qq_lib.getpcloffset
    load     i64       1                
    add      i64                        
    setarg   i64 /1                     
    callp        /1    &qq_showpcl.gstrint
    setcall      /1/1                   
    load     u64       ": "             
    setarg   u64 /1                     
    callp        /1    &qq_showpcl.gstrln
    retproc                             
endproc

proc qq_vars.var_unshareu:
    param    u64       p
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    decrload u32 /1                     
    widen    i64/u32                    
    load     i64       0                
    jumpgt   i64       #8027            
    setcall      /1/1                   
    load     u64       p                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_free
#8027: 
    retproc                             
endproc

proc qq_vars.obj_shareu:
    param    u64       p
    load     u64       p                
    incrto   u32 /1                     
    retproc                             
endproc

proc qq_vars.void_new:
    local    u64       p
    rettype  u64
    setcall  u64 /1/1                   
    load     i64       16               
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    store    u64       p                
    load     i64       0                
    load     u64       p                
    load     i64       0                
    istorex  u32 /1                     
    load     u64       p                
    jumpret  u64       #8029            
#8029: 
    retfn    u64                        
endproc

proc qq_vars.obj_new:
    local    u64       p
    rettype  u64
    setcall  u64 /1/1                   
    load     i64       32               
    setarg   i64 /1                     
    callf    u64 /1    &mlib.pcm_alloc  
    store    u64       p                
    load     mem:32       qq_vars.zeroobj
    load     u64       p                
    istore   mem:32                     
    load     i64       1                
    load     u64       p                
    load     i64       0                
    istorex  u32 /1                     
    load     u64       p                
    jumpret  u64       #8030            
#8030: 
    retfn    u64                        
endproc

proc qq_vars.var_getintvalue:
    param    u64       p
    rettype  i64
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #8033            
    load     i64       18               
    jumpeq   i64 /1    #8033            
    load     i64       2                
    jumpeq   i64       #8034            
    jump               #8035            
#8033: 
    load     u64       p                
    load     i64       8                
    iloadx   i64 /1                     
    jumpret  i64       #8031            
    jump               #8032            
#8034: 
    load     u64       p                
    load     i64       8                
    iloadx   r64 /1                     
    fix      i64/r64                    
    jumpret  i64       #8031            
    jump               #8032            
#8035: 
    setcall      /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     u64       "getintvalue"    
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#8032: 
    load     i64       0                
    jumpret  i64       #8031            
#8031: 
    retfn    i64                        
endproc

proc qq_vars.var_fromobj:
    param    i64       tag
    param    u64       p
    param    u64       dest
    load     i64       tag              
    load     i64       256              
    bitor    i64                        
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     u64       p                
    load     u64       dest             
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_vars.var_free:
    param    u64       a
    local    mem:16       v
    local    u64       q
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       q                
    load     i64       5                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       0                
    jumpeq   i64 /1    #8039            
    load     i64       1                
    jumpeq   i64       #8040            
    jump               #8041            
#8039: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       10               
    jumpeq   i64 /1    #8043            
    load     i64       12               
    jumpeq   i64 /1    #8044            
    load     i64       9                
    jumpeq   i64 /1    #8045            
    load     i64       11               
    jumpeq   i64 /1    #8046            
    load     i64       7                
    jumpeq   i64 /1    #8047            
    load     i64       8                
    jumpeq   i64 /1    #8048            
    load     i64       13               
    jumpeq   i64 /1    #8049            
    load     i64       6                
    jumpeq   i64 /1    #8050            
    load     i64       5                
    jumpeq   i64 /1    #8051            
    load     i64       3                
    jumpeq   i64       #8052            
    jump               #8053            
#8043: 
    setcall      /1/1                   
    load     u64       q                
    setarg   u64 /1                     
    callp        /1    &qq_lists.obj_free_list
    jump               #8042            
#8044: 
    setcall      /1/1                   
    load     u64       q                
    setarg   u64 /1                     
    callp        /1    &qq_records.obj_free_record
    jump               #8042            
#8045: 
    setcall      /1/1                   
    load     u64       q                
    setarg   u64 /1                     
    callp        /1    &qq_strings.obj_free_string
    jump               #8042            
#8046: 
    setcall      /1/1                   
    load     u64       q                
    setarg   u64 /1                     
    callp        /1    &qq_arrays.obj_free_array
    jump               #8042            
#8047: 
    setcall      /1/1                   
    load     u64       q                
    setarg   u64 /1                     
    callp        /1    &qq_arrays.obj_free_vector
    jump               #8042            
#8048: 
    setcall      /2/1                   
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       q                
    setarg   u64 /1                     
    callp        /2    &qq_bits.obj_free_bits
    jump               #8042            
#8049: 
    setcall      /1/1                   
    load     u64       q                
    setarg   u64 /1                     
    callp        /1    &qq_packed.obj_free_struct
    jump               #8042            
#8050: 
    setcall      /2/1                   
    load     i64       0                
    setarg   i64 /2                     
    load     u64       q                
    setarg   u64 /1                     
    callp        /2    &qq_dicts.obj_free_dict
    jump               #8042            
#8051: 
    setcall      /1/1                   
    load     u64       q                
    setarg   u64 /1                     
    callp        /1    &qq_sets.obj_free_set
    jump               #8042            
#8052: 
    setcall      /1/1                   
    load     u64       q                
    setarg   u64 /1                     
    callp        /1    &qq_decimal.obj_free_dec
    jump               #8042            
#8053: 
    setcall      /2/1                   
    load     u64       a                
    setarg   u64 /2                     
    load     u64       "free"           
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#8042: 
    jump               #8038            
#8040: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       &v               
    load     i64       0                
    istorex  u32 /1                     
    load     u64       q                
    load     i64       24               
    iloadx   u64 /1                     
    load     u64       &v               
    load     i64       8                
    istorex  u64 /1                     
    setcall      /1/1                   
    load     u64       &v               
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
    setcall      /1/1                   
    load     u64       q                
    setarg   u64 /1                     
    callp        /1    &mlib.pcm_free32 
    jump               #8038            
#8041: 
    setcall      /1/1                   
    load     u64       q                
    setarg   u64 /1                     
    callp        /1    &mlib.pcm_free32 
#8038: 
    retproc                             
endproc

proc qq_vars.var_duplu:
    param    u64       a
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       9                
    jumpeq   i64 /1    #8056            
    load     i64       5                
    jumpeq   i64 /1    #8057            
    load     i64       10               
    jumpeq   i64 /1    #8058            
    load     i64       6                
    jumpeq   i64 /1    #8059            
    load     i64       11               
    jumpeq   i64 /1    #8060            
    load     i64       7                
    jumpeq   i64 /1    #8061            
    load     i64       8                
    jumpeq   i64 /1    #8062            
    load     i64       12               
    jumpeq   i64 /1    #8063            
    load     i64       13               
    jumpeq   i64 /1    #8064            
    load     i64       3                
    jumpeq   i64       #8065            
    jump               #8066            
#8056: 
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_strings.var_dupl_string
    jump               #8055            
#8057: 
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_sets.var_dupl_set
    jump               #8055            
#8058: 
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_lists.var_dupl_list
    jump               #8055            
#8059: 
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_dicts.var_dupl_dict
    jump               #8055            
#8060: 
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_arrays.var_dupl_array
    jump               #8055            
#8061: 
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_arrays.var_dupl_vector
    jump               #8055            
#8062: 
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_bits.var_dupl_bits
    jump               #8055            
#8063: 
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_records.var_dupl_record
    jump               #8055            
#8064: 
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_packed.var_dupl_struct
    jump               #8055            
#8065: 
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_decimal.var_dupl_dec
    jump               #8055            
#8066: 
    setcall      /2/1                   
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       "dupl"           
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8055: 
    retproc                             
endproc

proc qq_vars.var_neg:
    param    u64       a
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #8069            
    load     i64       2                
    jumpeq   i64 /1    #8070            
    load     i64       3                
    jumpeq   i64 /1    #8071            
    load     i64       5                
    jumpeq   i64       #8072            
    jump               #8073            
#8069: 
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    neg      i64                        
    load     u64       a                
    load     i64       8                
    istorex  i64 /1                     
    jump               #8068            
#8070: 
    load     u64       a                
    load     i64       8                
    iloadx   r64 /1                     
    neg      r64                        
    load     u64       a                
    load     i64       8                
    istorex  r64 /1                     
    jump               #8068            
#8071: 
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_decimal.var_dupl_dec
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_decimal.var_neg_dec
    jump               #8068            
#8072: 
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_sets.var_dupl_set
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_sets.var_inotto_set
    jump               #8068            
#8073: 
    setcall      /2/1                   
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       "neg"            
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8068: 
    retproc                             
endproc

proc qq_vars.var_abs:
    param    u64       a
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #8076            
    load     i64       2                
    jumpeq   i64 /1    #8077            
    load     i64       3                
    jumpeq   i64       #8078            
    jump               #8079            
#8076: 
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    abs      i64                        
    load     u64       a                
    load     i64       8                
    istorex  i64 /1                     
    jump               #8075            
#8077: 
    load     u64       a                
    load     i64       8                
    iloadx   r64 /1                     
    abs      r64                        
    load     u64       a                
    load     i64       8                
    istorex  r64 /1                     
    jump               #8075            
#8078: 
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_decimal.var_dupl_dec
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_decimal.var_abs_dec
    jump               #8075            
#8079: 
    setcall      /2/1                   
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       "abs"            
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8075: 
    retproc                             
endproc

proc qq_vars.var_inot:
    param    u64       a
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #8082            
    load     i64       5                
    jumpeq   i64       #8083            
    jump               #8084            
#8082: 
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    bitnot   i64                        
    load     u64       a                
    load     i64       8                
    istorex  i64 /1                     
    jump               #8081            
#8083: 
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_sets.var_dupl_set
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_sets.var_inotto_set
    jump               #8081            
#8084: 
    setcall      /2/1                   
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       "inot"           
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8081: 
    retproc                             
endproc

proc qq_vars.var_istruel:
    param    u64       a
    rettype  i64
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #8087            
    load     i64       14               
    jumpeq   i64 /1    #8087            
    load     i64       16               
    jumpeq   i64 /1    #8087            
    load     i64       15               
    jumpeq   i64 /1    #8087            
    load     i64       18               
    jumpeq   i64 /1    #8087            
    load     i64       17               
    jumpeq   i64 /1    #8087            
    load     i64       2                
    jumpeq   i64 /1    #8088            
    load     i64       9                
    jumpeq   i64 /1    #8089            
    load     i64       10               
    jumpeq   i64 /1    #8089            
    load     i64       11               
    jumpeq   i64 /1    #8089            
    load     i64       8                
    jumpeq   i64 /1    #8089            
    load     i64       7                
    jumpeq   i64 /1    #8089            
    load     i64       5                
    jumpeq   i64 /1    #8090            
    load     i64       12               
    jumpeq   i64 /1    #8091            
    load     i64       13               
    jumpeq   i64 /1    #8091            
    load     i64       3                
    jumpeq   i64 /1    #8092            
    load     i64       0                
    jumpeq   i64       #8093            
    jump               #8094            
#8087: 
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    toboolt  i64/i64                    
    jumpret  i64       #8085            
    jump               #8086            
#8088: 
    startmx                             
    load     u64       a                
    load     i64       8                
    iloadx   r64 /1                     
    load     r64       0.0000000000000000e+000
    jumpeq   r64       #8096            
    load     i64       1                
    resetmx  i64                        
    jump               #8095            
#8096: 
    load     i64       0                
    endmx    i64                        
#8095: 
    jumpret  i64       #8085            
    jump               #8086            
#8089: 
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       0                
    setne    i64                        
    jumpret  i64       #8085            
    jump               #8086            
#8090: 
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       0                
    setne    i64                        
    jumpret  i64       #8085            
    jump               #8086            
#8091: 
    load     i64       1                
    jumpret  i64       #8085            
    jump               #8086            
#8092: 
    setcall  i64 /1/1                   
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callf    i64 /1    &qq_decimal.bn_iszero
    toboolf  i64/i64                    
    jumpret  i64       #8085            
    jump               #8086            
#8093: 
    load     i64       0                
    jumpret  i64       #8085            
    jump               #8086            
#8094: 
    setcall      /2/1                   
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       "istruel"        
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8086: 
    load     i64       0                
    jumpret  i64       #8085            
#8085: 
    retfn    i64                        
endproc

proc qq_vars.var_add:
    param    u64       a
    param    u64       b
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    jumpeq   i64       #8099            
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_vars.var_addmixed
    jump               #8097            
#8099: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #8101            
    load     i64       2                
    jumpeq   i64 /1    #8102            
    load     i64       3                
    jumpeq   i64 /1    #8103            
    load     i64       9                
    jumpeq   i64 /1    #8104            
    load     i64       5                
    jumpeq   i64       #8105            
    jump               #8106            
#8101: 
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       a                
    load     i64       8                
    addpx    u64 /1                     
    addto    i64                        
    jump               #8100            
#8102: 
    load     u64       b                
    load     i64       8                
    iloadx   r64 /1                     
    load     u64       a                
    load     i64       8                
    addpx    u64 /1                     
    addto    r64                        
    jump               #8100            
#8103: 
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_decimal.var_add_dec
    jump               #8100            
#8104: 
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_strings.var_add_string
    jump               #8100            
#8105: 
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_sets.var_dupl_set
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_sets.var_iorto_set
    jump               #8100            
#8106: 
    setcall      /2/1                   
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       "add"            
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8100: 
#8097: 
    retproc                             
endproc

proc qq_vars.var_addmixed:
    param    u64       a
    param    u64       b
    local    i64       newtag
    local    i64       tt
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       newtag           
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       16               
    shl      i64                        
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    bitor    i64                        
    load     i64       65538            
    jumpeq   i64 /1    #8109            
    load     i64       131073           
    jumpeq   i64 /1    #8110            
    load     i64       65539            
    jumpeq   i64 /1    #8111            
    load     i64       131075           
    jumpeq   i64 /1    #8111            
    load     i64       196609           
    jumpeq   i64 /1    #8112            
    load     i64       196610           
    jumpeq   i64 /1    #8112            
    load     i64       1048577          
    jumpeq   i64       #8113            
    jump               #8114            
#8109: 
    load     i64       2                
    store    i64       newtag           
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    float    r64/i64                    
    load     u64       b                
    load     i64       8                
    iloadx   r64 /1                     
    add      r64                        
    load     u64       a                
    load     i64       8                
    istorex  r64 /1                     
    jump               #8108            
#8110: 
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    float    r64/i64                    
    load     u64       a                
    load     i64       8                
    addpx    u64 /1                     
    addto    r64                        
    jump               #8108            
#8111: 
    load     i64       3                
    store    i64       newtag           
    setcall      /2                     
    load     u64       b                
    setarg   u64 /2                     
    setcall  u64 /1                     
    load     u64       a                
    setarg   u64 /1                     
    callf    u64 /1    &qq_decimal.dectemp
    setarg   u64 /1                     
    callp        /2    &qq_decimal.var_add_dec
    setcall      /0/1                   
    callp        /0    &qq_decimal.freedectemp
    jump               #8108            
#8112: 
    setcall      /2                     
    setcall  u64 /1                     
    load     u64       b                
    setarg   u64 /1                     
    callf    u64 /1    &qq_decimal.dectemp
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_decimal.var_add_dec
    jump               #8108            
#8113: 
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    load     u64       0                
    jumpne   u64       #8116            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Nil+x"          
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#8116: 
    load     u64       &qq_tables.ttsize
    load     u64       a                
    load     i64       4                
    iloadx   u32 /1                     
    widen    i64/u32                    
    iloadx   i64 /8                     
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    mul      i64                        
    load     u64       a                
    load     i64       8                
    addpx    u64 /1                     
    addpxto  u64 /1                     
    jump               #8108            
#8114: 
    setcall      /3/1                   
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       "Addmixed"       
    setarg   u64 /1                     
    callp        /3    &qq_runaux.pcmxtypes
#8108: 
    load     i64       newtag           
    load     u64       a                
    load     i64       0                
    istorex  u8  /1                     
    retproc                             
endproc

proc qq_vars.var_addto:
    param    u64       p
    param    u64       b
    local    u64       a
    local    i64       newtag
    rettype  i64
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       a                
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       14               
    jumpeq   i64       #8119            
    load     i64       0                
    jumpret  i64       #8117            
#8119: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       newtag           
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    jumpeq   i64       #8121            
    load     i64       newtag           
    load     i64       9                
    jumpne   i64       #8123            
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpne   i64       #8123            
    setcall      /2/1                   
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_strings.var_addto_string_ch
    load     i64       1                
    jumpret  i64       #8117            
#8123: 
    load     i64       0                
    jumpret  i64       #8117            
#8121: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #8125            
    load     i64       2                
    jumpeq   i64 /1    #8126            
    load     i64       9                
    jumpeq   i64 /1    #8127            
    load     i64       5                
    jumpeq   i64       #8128            
    jump               #8129            
#8125: 
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       a                
    load     i64       8                
    addpx    u64 /1                     
    addto    i64                        
    jump               #8124            
#8126: 
    load     u64       b                
    load     i64       8                
    iloadx   r64 /1                     
    load     u64       a                
    load     i64       8                
    addpx    u64 /1                     
    addto    r64                        
    jump               #8124            
#8127: 
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_strings.var_addto_string
    jump               #8124            
#8128: 
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_sets.var_iorto_set
    jump               #8124            
#8129: 
    load     i64       0                
    jumpret  i64       #8117            
#8124: 
    load     i64       newtag           
    load     u64       a                
    load     i64       0                
    istorex  u8  /1                     
    load     i64       1                
    jumpret  i64       #8117            
#8117: 
    retfn    i64                        
endproc

proc qq_vars.var_sub:
    param    u64       a
    param    u64       b
    local    u64       p
    local    u64       q
    local    i64       elemsize
    local    i64       x
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    jumpeq   i64       #8132            
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_vars.var_submixed
    jump               #8130            
#8132: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #8134            
    load     i64       2                
    jumpeq   i64 /1    #8135            
    load     i64       3                
    jumpeq   i64 /1    #8136            
    load     i64       16               
    jumpeq   i64       #8137            
    jump               #8138            
#8134: 
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       a                
    load     i64       8                
    addpx    u64 /1                     
    subto    i64                        
    jump               #8133            
#8135: 
    load     u64       b                
    load     i64       8                
    iloadx   r64 /1                     
    load     u64       a                
    load     i64       8                
    addpx    u64 /1                     
    subto    r64                        
    jump               #8133            
#8136: 
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_decimal.var_sub_dec
    jump               #8133            
#8137: 
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       &qq_tables.ttsize
    load     u64       a                
    load     i64       4                
    iloadx   u32 /1                     
    widen    i64/u32                    
    iloadx   i64 /8                     
    double                              
    store    i64       elemsize         
    load     i64       1                
    jumpeq   i64 /1    #8140            
    load     i64       2                
    jumpeq   i64 /1    #8141            
    load     i64       4                
    jumpeq   i64       #8142            
    jump               #8143            
#8140: 
    load     u64       p                
    load     u64       q                
    subp     i64 /1                     
    store    i64       x                
    jump               #8139            
#8141: 
    load     u64       p                
    load     u64       q                
    subp     i64 /1                     
    load     i64       1                
    shr      i64                        
    store    i64       x                
    jump               #8139            
#8142: 
    load     u64       p                
    load     u64       q                
    subp     i64 /1                     
    load     i64       2                
    shr      i64                        
    store    i64       x                
    jump               #8139            
#8143: 
    load     u64       p                
    load     u64       q                
    subp     i64 /1                     
    load     i64       elemsize         
    idiv     i64                        
    store    i64       x                
#8139: 
    load     i64       1                
    load     u64       a                
    load     i64       0                
    istorex  u32 /1                     
    load     i64       x                
    load     u64       a                
    load     i64       8                
    istorex  i64 /1                     
    jump               #8133            
#8138: 
    setcall      /2/1                   
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       "sub"            
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8133: 
#8130: 
    retproc                             
endproc

proc qq_vars.var_submixed:
    param    u64       a
    param    u64       b
    local    i64       newtag
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       newtag           
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       16               
    shl      i64                        
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    bitor    i64                        
    load     i64       65538            
    jumpeq   i64 /1    #8146            
    load     i64       131073           
    jumpeq   i64 /1    #8147            
    load     i64       65539            
    jumpeq   i64 /1    #8148            
    load     i64       131075           
    jumpeq   i64 /1    #8148            
    load     i64       196609           
    jumpeq   i64 /1    #8149            
    load     i64       196610           
    jumpeq   i64 /1    #8149            
    load     i64       1048577          
    jumpeq   i64       #8150            
    jump               #8151            
#8146: 
    load     i64       2                
    store    i64       newtag           
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    float    r64/i64                    
    load     u64       b                
    load     i64       8                
    iloadx   r64 /1                     
    sub      r64                        
    load     u64       a                
    load     i64       8                
    istorex  r64 /1                     
    jump               #8145            
#8147: 
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    float    r64/i64                    
    load     u64       a                
    load     i64       8                
    addpx    u64 /1                     
    subto    r64                        
    jump               #8145            
#8148: 
    load     i64       3                
    store    i64       newtag           
    setcall      /2                     
    load     u64       b                
    setarg   u64 /2                     
    setcall  u64 /1                     
    load     u64       a                
    setarg   u64 /1                     
    callf    u64 /1    &qq_decimal.dectemp
    setarg   u64 /1                     
    callp        /2    &qq_decimal.var_sub_dec
    setcall      /0/1                   
    callp        /0    &qq_decimal.freedectemp
    jump               #8145            
#8149: 
    setcall      /2                     
    setcall  u64 /1                     
    load     u64       b                
    setarg   u64 /1                     
    callf    u64 /1    &qq_decimal.dectemp
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_decimal.var_sub_dec
    jump               #8145            
#8150: 
    load     u64       &qq_tables.ttsize
    load     u64       a                
    load     i64       4                
    iloadx   u32 /1                     
    widen    i64/u32                    
    iloadx   i64 /8                     
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    mul      i64                        
    load     u64       a                
    load     i64       8                
    addpx    u64 /1                     
    subpxto  u64 /1                     
    jump               #8145            
#8151: 
    setcall      /3/1                   
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       "Submixed"       
    setarg   u64 /1                     
    callp        /3    &qq_runaux.pcmxtypes
#8145: 
    load     i64       newtag           
    load     u64       a                
    load     i64       0                
    istorex  u8  /1                     
    retproc                             
endproc

proc qq_vars.var_mul:
    param    u64       a
    param    u64       b
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    jumpeq   i64       #8154            
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_vars.var_mulmixed
    jump               #8152            
#8154: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #8156            
    load     i64       2                
    jumpeq   i64 /1    #8157            
    load     i64       3                
    jumpeq   i64 /1    #8158            
    load     i64       5                
    jumpeq   i64       #8159            
    jump               #8160            
#8156: 
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       a                
    load     i64       8                
    addpx    u64 /1                     
    multo    i64                        
    jump               #8155            
#8157: 
    load     u64       b                
    load     i64       8                
    iloadx   r64 /1                     
    load     u64       a                
    load     i64       8                
    addpx    u64 /1                     
    multo    r64                        
    jump               #8155            
#8158: 
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_decimal.var_mul_dec
    jump               #8155            
#8159: 
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_sets.var_dupl_set
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_sets.var_iandto_set
    jump               #8155            
#8160: 
    setcall      /2/1                   
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       "mul"            
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8155: 
#8152: 
    retproc                             
endproc

proc qq_vars.var_mulmixed:
    param    u64       a
    param    u64       b
    local    i64       newtag
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       newtag           
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       16               
    shl      i64                        
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    bitor    i64                        
    load     i64       65538            
    jumpeq   i64 /1    #8163            
    load     i64       131073           
    jumpeq   i64 /1    #8164            
    load     i64       65539            
    jumpeq   i64 /1    #8165            
    load     i64       131075           
    jumpeq   i64 /1    #8165            
    load     i64       196609           
    jumpeq   i64 /1    #8166            
    load     i64       196610           
    jumpeq   i64 /1    #8166            
    load     i64       589825           
    jumpeq   i64 /1    #8167            
    load     i64       655361           
    jumpeq   i64       #8168            
    jump               #8169            
#8163: 
    load     i64       2                
    store    i64       newtag           
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    float    r64/i64                    
    load     u64       b                
    load     i64       8                
    iloadx   r64 /1                     
    mul      r64                        
    load     u64       a                
    load     i64       8                
    istorex  r64 /1                     
    jump               #8162            
#8164: 
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    float    r64/i64                    
    load     u64       a                
    load     i64       8                
    addpx    u64 /1                     
    multo    r64                        
    jump               #8162            
#8165: 
    load     i64       3                
    store    i64       newtag           
    setcall      /2                     
    load     u64       b                
    setarg   u64 /2                     
    setcall  u64 /1                     
    load     u64       a                
    setarg   u64 /1                     
    callf    u64 /1    &qq_decimal.dectemp
    setarg   u64 /1                     
    callp        /2    &qq_decimal.var_mul_dec
    setcall      /0/1                   
    callp        /0    &qq_decimal.freedectemp
    jump               #8162            
#8166: 
    setcall      /2                     
    setcall  u64 /1                     
    load     u64       b                
    setarg   u64 /1                     
    callf    u64 /1    &qq_decimal.dectemp
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_decimal.var_mul_dec
    jump               #8162            
#8167: 
    setcall      /2/1                   
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_strings.var_mul_string
    jump               #8162            
#8168: 
    setcall      /2/1                   
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_lists.var_mul_list
    jump               #8162            
#8169: 
    setcall      /3/1                   
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       "Mulmixed"       
    setarg   u64 /1                     
    callp        /3    &qq_runaux.pcmxtypes
#8162: 
    load     i64       newtag           
    load     u64       a                
    load     i64       0                
    istorex  u8  /1                     
    retproc                             
endproc

proc qq_vars.var_div:
    param    u64       a
    param    u64       b
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    jumpeq   i64       #8172            
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_vars.var_divmixed
    jump               #8170            
#8172: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #8174            
    load     i64       2                
    jumpeq   i64 /1    #8175            
    load     i64       3                
    jumpeq   i64       #8176            
    jump               #8177            
#8174: 
    load     i64       2                
    load     u64       a                
    load     i64       0                
    istorex  u32 /1                     
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    float    r64/i64                    
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    float    r64/i64                    
    div      r64                        
    load     u64       a                
    load     i64       8                
    istorex  r64 /1                     
    jump               #8173            
#8175: 
    load     u64       b                
    load     i64       8                
    iloadx   r64 /1                     
    load     u64       a                
    load     i64       8                
    addpx    u64 /1                     
    divto    r64                        
    jump               #8173            
#8176: 
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_decimal.var_div_dec
    jump               #8173            
#8177: 
    setcall      /2/1                   
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       "div"            
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8173: 
#8170: 
    retproc                             
endproc

proc qq_vars.var_divmixed:
    param    u64       a
    param    u64       b
    local    i64       newtag
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       newtag           
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       16               
    shl      i64                        
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    bitor    i64                        
    load     i64       65538            
    jumpeq   i64 /1    #8180            
    load     i64       131073           
    jumpeq   i64       #8181            
    jump               #8182            
#8180: 
    load     i64       2                
    store    i64       newtag           
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    float    r64/i64                    
    load     u64       b                
    load     i64       8                
    iloadx   r64 /1                     
    div      r64                        
    load     u64       a                
    load     i64       8                
    istorex  r64 /1                     
    jump               #8179            
#8181: 
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    float    r64/i64                    
    load     u64       a                
    load     i64       8                
    addpx    u64 /1                     
    divto    r64                        
    jump               #8179            
#8182: 
    setcall      /3/1                   
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       "Divmixed"       
    setarg   u64 /1                     
    callp        /3    &qq_runaux.pcmxtypes
#8179: 
    load     i64       newtag           
    load     u64       a                
    load     i64       0                
    istorex  u8  /1                     
    retproc                             
endproc

proc qq_vars.var_idiv:
    param    u64       a
    param    u64       b
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    jumpeq   i64       #8185            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "idivmixed"      
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
    jump               #8183            
#8185: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #8187            
    load     i64       3                
    jumpeq   i64       #8188            
    jump               #8189            
#8187: 
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    jumpf    i64       #8191            
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    idiv     i64                        
    load     u64       a                
    load     i64       8                
    istorex  i64 /1                     
    jump               #8190            
#8191: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Divide by 0"    
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#8190: 
    jump               #8186            
#8188: 
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_decimal.var_idiv_dec
    jump               #8186            
#8189: 
    setcall      /2/1                   
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       "idiv"           
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8186: 
#8183: 
    retproc                             
endproc

proc qq_vars.var_irem:
    param    u64       a
    param    u64       b
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    jumpeq   i64       #8194            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "iremmixed"      
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
    jump               #8192            
#8194: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #8196            
    load     i64       3                
    jumpeq   i64       #8197            
    jump               #8198            
#8196: 
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    irem     i64                        
    load     u64       a                
    load     i64       8                
    istorex  i64 /1                     
    jump               #8195            
#8197: 
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_decimal.var_irem_dec
    jump               #8195            
#8198: 
    setcall      /2/1                   
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       "irem"           
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8195: 
#8192: 
    retproc                             
endproc

proc qq_vars.var_iand:
    param    u64       a
    param    u64       b
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    jumpeq   i64       #8201            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "iand mixed"     
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
    jump               #8199            
#8201: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #8203            
    load     i64       5                
    jumpeq   i64       #8204            
    jump               #8205            
#8203: 
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       a                
    load     i64       8                
    addpx    u64 /1                     
    bitandto i64                        
    jump               #8202            
#8204: 
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_sets.var_dupl_set
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_sets.var_iandto_set
    jump               #8202            
#8205: 
    setcall      /2/1                   
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       "iand"           
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8202: 
#8199: 
    retproc                             
endproc

proc qq_vars.var_ior:
    param    u64       a
    param    u64       b
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    jumpeq   i64       #8208            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "ior mixed"      
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
    jump               #8206            
#8208: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #8210            
    load     i64       5                
    jumpeq   i64       #8211            
    jump               #8212            
#8210: 
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       a                
    load     i64       8                
    addpx    u64 /1                     
    bitorto  i64                        
    jump               #8209            
#8211: 
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_sets.var_dupl_set
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_sets.var_iorto_set
    jump               #8209            
#8212: 
    setcall      /2/1                   
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       "ior"            
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8209: 
#8206: 
    retproc                             
endproc

proc qq_vars.var_ixor:
    param    u64       a
    param    u64       b
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    jumpeq   i64       #8215            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "ixor mixed"     
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
    jump               #8213            
#8215: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #8217            
    load     i64       5                
    jumpeq   i64       #8218            
    jump               #8219            
#8217: 
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       a                
    load     i64       8                
    addpx    u64 /1                     
    bitxorto i64                        
    jump               #8216            
#8218: 
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_sets.var_dupl_set
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_sets.var_ixorto_set
    jump               #8216            
#8219: 
    setcall      /2/1                   
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       "ixor"           
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8216: 
#8213: 
    retproc                             
endproc

proc qq_vars.var_shl:
    param    u64       a
    param    u64       b
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    jumpeq   i64       #8222            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "ishl mixed"     
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
    jump               #8220            
#8222: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64       #8224            
    jump               #8225            
#8224: 
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       a                
    load     i64       8                
    addpx    u64 /1                     
    shlto    i64                        
    jump               #8223            
#8225: 
    setcall      /2/1                   
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       "shl"            
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8223: 
#8220: 
    retproc                             
endproc

proc qq_vars.var_shr:
    param    u64       a
    param    u64       b
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    jumpeq   i64       #8228            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "ishr mixed"     
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
    jump               #8226            
#8228: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64       #8230            
    jump               #8231            
#8230: 
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       a                
    load     i64       8                
    addpx    u64 /1                     
    shrto    i64                        
    jump               #8229            
#8231: 
    setcall      /2/1                   
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       "shr"            
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8229: 
#8226: 
    retproc                             
endproc

proc qq_vars.var_in:
    param    u64       a
    param    u64       b
    local    i64       n
    rettype  i64
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       16               
    shl      i64                        
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    bitor    i64                        
    load     i64       65541            
    jumpeq   i64 /1    #8234            
    load     i64       1179653          
    jumpeq   i64 /1    #8234            
    load     i64       65540            
    jumpeq   i64       #8235            
    jump               #8236            
#8234: 
    setcall  i64 /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /2    &qq_sets.var_in_set
    jumpret  i64       #8232            
    jump               #8233            
#8235: 
    startmx                             
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       b                
    load     i64       0                
    iloadx   i64 /1                     
    load     i64       16               
    load     i64       63               
    loadbf   i64                        
    jumplt   i64 /1    #8238            
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    jumpgt   i64       #8238            
    load     i64       1                
    resetmx  i64                        
    jump               #8237            
#8238: 
    load     i64       0                
    endmx    i64                        
#8237: 
    jumpret  i64       #8232            
    jump               #8233            
#8236: 
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       10               
    jumpeq   i64 /1    #8240            
    load     i64       9                
    jumpeq   i64 /1    #8240            
    load     i64       11               
    jumpeq   i64 /1    #8240            
    load     i64       7                
    jumpeq   i64       #8240            
    jump               #8241            
#8240: 
    setcall  i64 /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /2    &qq_vars.var_inx 
    store    i64       n                
    startmx                             
    load     i64       n                
    load     i64       -9223372036854775808
    jumpeq   i64       #8243            
    load     i64       1                
    resetmx  i64                        
    jump               #8242            
#8243: 
    load     i64       0                
    endmx    i64                        
#8242: 
    jumpret  i64       #8232            
    jump               #8239            
#8241: 
    setcall      /3/1                   
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       "in"             
    setarg   u64 /1                     
    callp        /3    &qq_runaux.pcmxtypes
#8239: 
#8233: 
    load     i64       0                
    jumpret  i64       #8232            
#8232: 
    retfn    i64                        
endproc

proc qq_vars.var_inx:
    param    u64       a
    param    u64       b
    local    i64       n
    rettype  i64
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       16               
    shl      i64                        
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    bitor    i64                        
    load     i64       589833           
    jumpeq   i64 /1    #8246            
    load     i64       65547            
    jumpeq   i64 /1    #8247            
    load     i64       131083           
    jumpeq   i64 /1    #8247            
    load     i64       65543            
    jumpeq   i64 /1    #8248            
    load     i64       131079           
    jumpeq   i64       #8248            
    jump               #8249            
#8246: 
    setcall  i64 /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /2    &qq_strings.var_inx_string
    jumpret  i64       #8244            
    jump               #8245            
#8247: 
    setcall  i64 /3/1                   
    load     i64       0                
    setarg   i64 /3                     
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /3    &qq_arrays.var_inx_array
    jumpret  i64       #8244            
    jump               #8245            
#8248: 
    setcall  i64 /3/1                   
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    setarg   i64 /3                     
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /3    &qq_arrays.var_inx_array
    jumpret  i64       #8244            
    jump               #8245            
#8249: 
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       10               
    jumpeq   i64       #8251            
    jump               #8252            
#8251: 
    setcall  i64 /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /2    &qq_lists.var_inx_list
    jumpret  i64       #8244            
    jump               #8250            
#8252: 
    setcall      /3/1                   
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       "inx"            
    setarg   u64 /1                     
    callp        /3    &qq_runaux.pcmxtypes
#8250: 
#8245: 
    load     i64       0                
    jumpret  i64       #8244            
#8244: 
    retfn    i64                        
endproc

proc qq_vars.var_equal:
    param    u64       a
    param    u64       b
    rettype  i64
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    jumpeq   i64       #8255            
    setcall  i64 /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /2    &qq_vars.var_equalmixed
    jumpret  i64       #8253            
#8255: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #8257            
    load     i64       14               
    jumpeq   i64 /1    #8257            
    load     i64       16               
    jumpeq   i64 /1    #8257            
    load     i64       18               
    jumpeq   i64 /1    #8257            
    load     i64       17               
    jumpeq   i64 /1    #8257            
    load     i64       19               
    jumpeq   i64 /1    #8257            
    load     i64       2                
    jumpeq   i64 /1    #8258            
    load     i64       3                
    jumpeq   i64 /1    #8259            
    load     i64       9                
    jumpeq   i64 /1    #8260            
    load     i64       5                
    jumpeq   i64 /1    #8261            
    load     i64       10               
    jumpeq   i64 /1    #8262            
    load     i64       6                
    jumpeq   i64 /1    #8263            
    load     i64       11               
    jumpeq   i64 /1    #8264            
    load     i64       7                
    jumpeq   i64 /1    #8264            
    load     i64       8                
    jumpeq   i64 /1    #8265            
    load     i64       12               
    jumpeq   i64 /1    #8266            
    load     i64       13               
    jumpeq   i64       #8267            
    jump               #8268            
#8257: 
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    seteq    i64                        
    jumpret  i64       #8253            
    jump               #8256            
#8258: 
    startmx                             
    load     u64       a                
    load     i64       8                
    iloadx   r64 /1                     
    load     u64       b                
    load     i64       8                
    iloadx   r64 /1                     
    jumpne   r64       #8270            
    load     i64       1                
    resetmx  i64                        
    jump               #8269            
#8270: 
    load     i64       0                
    endmx    i64                        
#8269: 
    jumpret  i64       #8253            
    jump               #8256            
#8259: 
    setcall  i64 /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /2    &qq_decimal.var_equal_dec
    jumpret  i64       #8253            
    jump               #8256            
#8260: 
    setcall  i64 /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /2    &qq_strings.var_equal_string
    jumpret  i64       #8253            
    jump               #8256            
#8261: 
    setcall  i64 /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /2    &qq_sets.var_equal_set
    jumpret  i64       #8253            
    jump               #8256            
#8262: 
    setcall  i64 /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /2    &qq_lists.var_equal_list
    jumpret  i64       #8253            
    jump               #8256            
#8263: 
    setcall  i64 /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /2    &qq_dicts.var_equal_dict
    jumpret  i64       #8253            
    jump               #8256            
#8264: 
    setcall  i64 /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /2    &qq_arrays.var_equal_array
    jumpret  i64       #8253            
    jump               #8256            
#8265: 
    setcall  i64 /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /2    &qq_bits.var_equal_bits
    jumpret  i64       #8253            
    jump               #8256            
#8266: 
    setcall  i64 /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /2    &qq_records.var_equal_record
    jumpret  i64       #8253            
    jump               #8256            
#8267: 
    setcall  i64 /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /2    &qq_packed.var_equal_struct
    jumpret  i64       #8253            
    jump               #8256            
#8268: 
    setcall      /2/1                   
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       "equal"          
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8256: 
    load     i64       0                
    jumpret  i64       #8253            
#8253: 
    retfn    i64                        
endproc

proc qq_vars.var_equalmixed:
    param    u64       a
    param    u64       b
    local    i64       result
    rettype  i64
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       16               
    shl      i64                        
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    bitor    i64                        
    load     i64       65538            
    jumpeq   i64 /1    #8273            
    load     i64       131073           
    jumpeq   i64 /1    #8274            
    load     i64       65539            
    jumpeq   i64 /1    #8275            
    load     i64       131075           
    jumpeq   i64 /1    #8275            
    load     i64       196609           
    jumpeq   i64 /1    #8276            
    load     i64       196610           
    jumpeq   i64       #8276            
    jump               #8277            
#8273: 
    startmx                             
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    float    r64/i64                    
    load     u64       b                
    load     i64       8                
    iloadx   r64 /1                     
    jumpne   r64       #8279            
    load     i64       1                
    resetmx  i64                        
    jump               #8278            
#8279: 
    load     i64       0                
    endmx    i64                        
#8278: 
    jumpret  i64       #8271            
    jump               #8272            
#8274: 
    startmx                             
    load     u64       a                
    load     i64       8                
    iloadx   r64 /1                     
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    float    r64/i64                    
    jumpne   r64       #8281            
    load     i64       1                
    resetmx  i64                        
    jump               #8280            
#8281: 
    load     i64       0                
    endmx    i64                        
#8280: 
    jumpret  i64       #8271            
    jump               #8272            
#8275: 
    setcall  i64 /2                     
    load     u64       b                
    setarg   u64 /2                     
    setcall  u64 /1                     
    load     u64       a                
    setarg   u64 /1                     
    callf    u64 /1    &qq_decimal.dectemp
    setarg   u64 /1                     
    callf    i64 /2    &qq_decimal.var_equal_dec
    store    i64       result           
    setcall      /0/1                   
    callp        /0    &qq_decimal.freedectemp
    load     i64       result           
    jumpret  i64       #8271            
    jump               #8272            
#8276: 
    setcall  i64 /2                     
    setcall  u64 /1                     
    load     u64       b                
    setarg   u64 /1                     
    callf    u64 /1    &qq_decimal.dectemp
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /2    &qq_decimal.var_equal_dec
    jumpret  i64       #8271            
    jump               #8272            
#8277: 
    load     i64       0                
    jumpret  i64       #8271            
#8272: 
    load     i64       0                
    jumpret  i64       #8271            
#8271: 
    retfn    i64                        
endproc

proc qq_vars.var_compare:
    param    u64       a
    param    u64       b
    rettype  i64
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    jumpeq   i64       #8284            
    setcall  i64 /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /2    &qq_vars.var_comparemixed
    jumpret  i64       #8282            
#8284: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #8286            
    load     i64       16               
    jumpeq   i64 /1    #8286            
    load     i64       2                
    jumpeq   i64 /1    #8287            
    load     i64       3                
    jumpeq   i64 /1    #8288            
    load     i64       9                
    jumpeq   i64       #8289            
    jump               #8290            
#8286: 
    startmx                             
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    jumpge   i64       #8292            
    load     i64       -1               
    resetmx  i64                        
    jump               #8291            
#8292: 
    startmx                             
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    jumple   i64       #8294            
    load     i64       1                
    resetmx  i64                        
    jump               #8293            
#8294: 
    load     i64       0                
    endmx    i64                        
#8293: 
    endmx    i64                        
#8291: 
    jumpret  i64       #8282            
    jump               #8285            
#8287: 
    startmx                             
    load     u64       a                
    load     i64       8                
    iloadx   r64 /1                     
    load     u64       b                
    load     i64       8                
    iloadx   r64 /1                     
    jumpge   r64       #8296            
    load     i64       -1               
    resetmx  i64                        
    jump               #8295            
#8296: 
    startmx                             
    load     u64       a                
    load     i64       8                
    iloadx   r64 /1                     
    load     u64       b                
    load     i64       8                
    iloadx   r64 /1                     
    jumple   r64       #8298            
    load     i64       1                
    resetmx  i64                        
    jump               #8297            
#8298: 
    load     i64       0                
    endmx    i64                        
#8297: 
    endmx    i64                        
#8295: 
    jumpret  i64       #8282            
    jump               #8285            
#8288: 
    setcall  i64 /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /2    &qq_decimal.var_compare_dec
    jumpret  i64       #8282            
    jump               #8285            
#8289: 
    setcall  i64 /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /2    &qq_strings.var_compare_string
    jumpret  i64       #8282            
    jump               #8285            
#8290: 
    setcall      /2/1                   
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       "compare"        
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8285: 
    load     i64       0                
    jumpret  i64       #8282            
#8282: 
    retfn    i64                        
endproc

proc qq_vars.var_comparemixed:
    param    u64       a
    param    u64       b
    rettype  i64
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       16               
    shl      i64                        
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    bitor    i64                        
    load     i64       65538            
    jumpeq   i64 /1    #8301            
    load     i64       131073           
    jumpeq   i64       #8302            
    jump               #8303            
#8301: 
    startmx                             
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    float    r64/i64                    
    load     u64       b                
    load     i64       8                
    iloadx   r64 /1                     
    jumpge   r64       #8305            
    load     i64       -1               
    resetmx  i64                        
    jump               #8304            
#8305: 
    startmx                             
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    float    r64/i64                    
    load     u64       b                
    load     i64       8                
    iloadx   r64 /1                     
    jumple   r64       #8307            
    load     i64       1                
    resetmx  i64                        
    jump               #8306            
#8307: 
    load     i64       0                
    endmx    i64                        
#8306: 
    endmx    i64                        
#8304: 
    jumpret  i64       #8299            
    jump               #8300            
#8302: 
    startmx                             
    load     u64       a                
    load     i64       8                
    iloadx   r64 /1                     
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    float    r64/i64                    
    jumpge   r64       #8309            
    load     i64       -1               
    resetmx  i64                        
    jump               #8308            
#8309: 
    startmx                             
    load     u64       a                
    load     i64       8                
    iloadx   r64 /1                     
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    float    r64/i64                    
    jumple   r64       #8311            
    load     i64       1                
    resetmx  i64                        
    jump               #8310            
#8311: 
    load     i64       0                
    endmx    i64                        
#8310: 
    endmx    i64                        
#8308: 
    jumpret  i64       #8299            
    jump               #8300            
#8303: 
    setcall      /3/1                   
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       "comparemixed"   
    setarg   u64 /1                     
    callp        /3    &qq_runaux.pcmxtypes
#8300: 
    load     i64       0                
    jumpret  i64       #8299            
#8299: 
    retfn    i64                        
endproc

proc qq_vars.var_concat:
    param    u64       a
    param    u64       b
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    jumpeq   i64       #8314            
    setcall      /3/1                   
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       "Concat"         
    setarg   u64 /1                     
    callp        /3    &qq_runaux.pcmxtypes
#8314: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       9                
    jumpeq   i64 /1    #8316            
    load     i64       10               
    jumpeq   i64 /1    #8317            
    load     i64       11               
    jumpeq   i64       #8318            
    jump               #8319            
#8316: 
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_strings.var_add_string
    jump               #8315            
#8317: 
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_lists.var_dupl_list
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_lists.var_concatto_list
    jump               #8315            
#8318: 
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_arrays.var_dupl_array
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_arrays.var_concatto_array
    jump               #8315            
#8319: 
    setcall      /2/1                   
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       "concat"         
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8315: 
    retproc                             
endproc

proc qq_vars.var_append:
    param    u64       a
    param    u64       b
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    jumpeq   i64       #8322            
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       10               
    jumpeq   i64 /1    #8324            
    load     i64       11               
    jumpeq   i64 /1    #8325            
    load     i64       8                
    jumpeq   i64       #8326            
    jump               #8327            
#8324: 
    jump               #8328            
    jump               #8323            
#8325: 
    jump               #8329            
    jump               #8323            
#8326: 
    jump               #8330            
    jump               #8323            
#8327: 
#8323: 
    jump               #8331            
    jump               #8321            
#8322: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       9                
    jumpeq   i64 /1    #8333            
    load     i64       10               
    jumpeq   i64 /1    #8334            
    load     i64       11               
    jumpeq   i64 /1    #8335            
    load     i64       8                
    jumpeq   i64       #8336            
    jump               #8337            
#8333: 
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_strings.var_add_string
    setcall      /1/1                   
    load     u64       b                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
    jump               #8332            
#8334: 
! qq_vars.var_append.dolist:
#8328: 
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_lists.var_dupl_list
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_lists.var_appendto_list
    jump               #8332            
#8335: 
! qq_vars.var_append.doarray:
#8329: 
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_arrays.var_dupl_array
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_arrays.var_appendto_array
    jump               #8332            
#8336: 
! qq_vars.var_append.dobits:
#8330: 
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_bits.var_dupl_bits
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_bits.var_appendto_bits
    jump               #8332            
#8337: 
! qq_vars.var_append.error:
#8331: 
    setcall      /2/1                   
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       "append"         
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8332: 
#8321: 
    retproc                             
endproc

proc qq_vars.var_min:
    param    u64       a
    param    u64       b
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    jumpeq   i64       #8340            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "VARMIN"         
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
    jump               #8338            
#8340: 
    setcall  i64 /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /2    &qq_vars.var_compare
    load     i64       0                
    jumpge   i64       #8342            
    load     u64       b                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #8344            
    setcall      /1/1                   
    load     u64       b                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#8344: 
    jump               #8341            
#8342: 
    load     u64       a                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #8346            
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#8346: 
    load     u64       b                
    iload    mem:16                     
    load     u64       a                
    istore   mem:16                     
#8341: 
#8338: 
    retproc                             
endproc

proc qq_vars.var_max:
    param    u64       a
    param    u64       b
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    jumpeq   i64       #8349            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "VARMAX"         
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
    jump               #8347            
#8349: 
    setcall  i64 /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callf    i64 /2    &qq_vars.var_compare
    load     i64       0                
    jumplt   i64       #8351            
    load     u64       b                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #8353            
    setcall      /1/1                   
    load     u64       b                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#8353: 
    jump               #8350            
#8351: 
    load     u64       a                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #8355            
    setcall      /1/1                   
    load     u64       a                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#8355: 
    load     u64       b                
    iload    mem:16                     
    load     u64       a                
    istore   mem:16                     
#8350: 
#8347: 
    retproc                             
endproc

proc qq_vars.var_concatto:
    param    u64       a
    param    u64       b
    rettype  i64
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    jumpeq   i64       #8358            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "concatto/mixed" 
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#8358: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       9                
    jumpeq   i64 /1    #8360            
    load     i64       10               
    jumpeq   i64 /1    #8361            
    load     i64       11               
    jumpeq   i64       #8362            
    jump               #8363            
#8360: 
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_strings.var_addto_string
    jump               #8359            
#8361: 
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_lists.var_concatto_list
    jump               #8359            
#8362: 
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_arrays.var_concatto_array
    jump               #8359            
#8363: 
    setcall      /2/1                   
    load     u64       a                
    setarg   u64 /2                     
    load     u64       "concat"         
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#8359: 
    load     i64       1                
    jumpret  i64       #8356            
#8356: 
    retfn    i64                        
endproc

proc qq_vars.var_appendto:
    param    u64       a
    param    u64       b
    rettype  i64
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    jumpeq   i64       #8366            
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       10               
    jumpeq   i64 /1    #8368            
    load     i64       11               
    jumpeq   i64 /1    #8369            
    load     i64       8                
    jumpeq   i64       #8370            
    jump               #8371            
#8368: 
    jump               #8372            
    jump               #8367            
#8369: 
    jump               #8373            
    jump               #8367            
#8370: 
    jump               #8374            
    jump               #8367            
#8371: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "appendto/mixed" 
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#8367: 
#8366: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       9                
    jumpeq   i64 /1    #8376            
    load     i64       10               
    jumpeq   i64 /1    #8377            
    load     i64       11               
    jumpeq   i64 /1    #8378            
    load     i64       8                
    jumpeq   i64       #8379            
    jump               #8380            
#8376: 
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_strings.var_addto_string
    setcall      /1/1                   
    load     u64       b                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
    jump               #8375            
#8377: 
! qq_vars.var_appendto.dolist:
#8372: 
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_lists.var_appendto_list
    jump               #8375            
#8378: 
! qq_vars.var_appendto.doarray:
#8373: 
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_arrays.var_appendto_array
    jump               #8375            
#8379: 
! qq_vars.var_appendto.dobits:
#8374: 
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_bits.var_appendto_bits
    jump               #8375            
#8380: 
    setcall      /2/1                   
    load     u64       a                
    setarg   u64 /2                     
    load     u64       "append"         
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
    load     i64       0                
    jumpret  i64       #8364            
#8375: 
    load     i64       1                
    jumpret  i64       #8364            
#8364: 
    retfn    i64                        
endproc

proc qq_vars.var_getix:
    param    u64       a
    param    i64       index
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       9                
    jumpeq   i64 /1    #8383            
    load     i64       10               
    jumpeq   i64 /1    #8384            
    load     i64       6                
    jumpeq   i64 /1    #8384            
    load     i64       11               
    jumpeq   i64 /1    #8385            
    load     i64       7                
    jumpeq   i64 /1    #8385            
    load     i64       8                
    jumpeq   i64 /1    #8386            
    load     i64       5                
    jumpeq   i64 /1    #8387            
    load     i64       12               
    jumpeq   i64 /1    #8388            
    load     i64       4                
    jumpeq   i64       #8389            
    jump               #8390            
#8383: 
    setcall      /2/1                   
    load     i64       index            
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_strings.var_getix_string
    jump               #8382            
#8384: 
    setcall      /2/1                   
    load     i64       index            
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_lists.var_getix_list
    jump               #8382            
#8385: 
    setcall      /2/1                   
    load     i64       index            
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_arrays.var_getix_array
    jump               #8382            
#8386: 
    setcall      /2/1                   
    load     i64       index            
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_bits.var_getix_bits
    jump               #8382            
#8387: 
    setcall      /2/1                   
    load     i64       index            
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_sets.var_getix_set
    jump               #8382            
#8388: 
    setcall      /2/1                   
    load     i64       index            
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_records.var_getix_record
    jump               #8382            
#8389: 
    load     i64       index            
    load     u64       a                
    load     i64       0                
    iloadx   i64 /1                     
    load     i64       16               
    load     i64       63               
    loadbf   i64                        
    jumplt   i64 /1    #8392            
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    jumpgt   i64       #8392            
    load     i64       1                
    load     u64       a                
    load     i64       0                
    istorex  u32 /1                     
    load     i64       index            
    load     u64       a                
    load     i64       8                
    istorex  i64 /1                     
    jump               #8391            
#8392: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "range/bounds"   
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#8391: 
    jump               #8382            
#8390: 
    setcall      /2/1                   
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       "getix"          
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8382: 
    retproc                             
endproc

proc qq_vars.var_putix:
    param    u64       a
    param    i64       index
    param    u64       x
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       9                
    jumpeq   i64 /1    #8395            
    load     i64       10               
    jumpeq   i64 /1    #8396            
    load     i64       11               
    jumpeq   i64 /1    #8397            
    load     i64       7                
    jumpeq   i64 /1    #8397            
    load     i64       8                
    jumpeq   i64 /1    #8398            
    load     i64       5                
    jumpeq   i64 /1    #8399            
    load     i64       12               
    jumpeq   i64       #8400            
    jump               #8401            
#8395: 
    setcall      /3/1                   
    load     u64       x                
    setarg   u64 /3                     
    load     i64       index            
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /3    &qq_strings.var_putix_string
    setcall      /1/1                   
    load     u64       x                
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
    jump               #8394            
#8396: 
    setcall      /3/1                   
    load     u64       x                
    setarg   u64 /3                     
    load     i64       index            
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /3    &qq_lists.var_putix_list
    jump               #8394            
#8397: 
    setcall      /3/1                   
    load     u64       x                
    setarg   u64 /3                     
    load     i64       index            
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /3    &qq_arrays.var_putix_array
    jump               #8394            
#8398: 
    setcall      /3/1                   
    load     u64       x                
    setarg   u64 /3                     
    load     i64       index            
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /3    &qq_bits.var_putix_bits
    jump               #8394            
#8399: 
    setcall      /3/1                   
    load     u64       x                
    setarg   u64 /3                     
    load     i64       index            
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /3    &qq_sets.var_putix_set
    jump               #8394            
#8400: 
    setcall      /3/1                   
    load     u64       x                
    setarg   u64 /3                     
    load     i64       index            
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /3    &qq_records.var_putix_record
    jump               #8394            
#8401: 
    setcall      /2/1                   
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       "putix"          
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8394: 
    retproc                             
endproc

proc qq_vars.var_getixref:
    param    u64       a
    param    i64       index
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       9                
    jumpeq   i64 /1    #8404            
    load     i64       10               
    jumpeq   i64 /1    #8405            
    load     i64       11               
    jumpeq   i64 /1    #8406            
    load     i64       7                
    jumpeq   i64 /1    #8406            
    load     i64       8                
    jumpeq   i64 /1    #8407            
    load     i64       5                
    jumpeq   i64 /1    #8408            
    load     i64       12               
    jumpeq   i64       #8409            
    jump               #8410            
#8404: 
    setcall      /2/1                   
    load     i64       index            
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_strings.var_getixref_string
    jump               #8403            
#8405: 
    setcall      /2/1                   
    load     i64       index            
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_lists.var_getixref_list
    jump               #8403            
#8406: 
    setcall      /2/1                   
    load     i64       index            
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_arrays.var_getixref_array
    jump               #8403            
#8407: 
    setcall      /2/1                   
    load     i64       index            
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_bits.var_getixref_bits
    jump               #8403            
#8408: 
    setcall      /2/1                   
    load     i64       index            
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_sets.var_getixref_set
    jump               #8403            
#8409: 
    setcall      /3/1                   
    load     u64       a                
    setarg   u64 /3                     
    load     i64       index            
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /3    &qq_records.var_getixref_record
    jump               #8403            
#8410: 
    setcall      /2/1                   
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       "getixref"       
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8403: 
    retproc                             
endproc

proc qq_vars.var_getslice:
    param    u64       a
    param    i64       i
    param    i64       j
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       9                
    jumpeq   i64 /1    #8413            
    load     i64       10               
    jumpeq   i64 /1    #8414            
    load     i64       11               
    jumpeq   i64 /1    #8415            
    load     i64       8                
    jumpeq   i64       #8416            
    jump               #8417            
#8413: 
    setcall      /3/1                   
    load     i64       j                
    setarg   i64 /3                     
    load     i64       i                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /3    &qq_strings.var_getslice_string
    jump               #8412            
#8414: 
    setcall      /3/1                   
    load     i64       j                
    setarg   i64 /3                     
    load     i64       i                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /3    &qq_lists.var_getslice_list
    jump               #8412            
#8415: 
    setcall      /3/1                   
    load     i64       j                
    setarg   i64 /3                     
    load     i64       i                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /3    &qq_arrays.var_getslice_array
    jump               #8412            
#8416: 
    setcall      /3/1                   
    load     i64       j                
    setarg   i64 /3                     
    load     i64       i                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /3    &qq_bits.var_getslice_bits
    jump               #8412            
#8417: 
    setcall      /2/1                   
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       "getslice"       
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8412: 
    retproc                             
endproc

proc qq_vars.var_putslice:
    param    u64       a
    param    i64       i
    param    i64       j
    param    u64       x
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    jumpeq   i64       #8420            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "putslice: not compatible"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#8420: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       9                
    jumpeq   i64 /1    #8422            
    load     i64       10               
    jumpeq   i64       #8423            
    jump               #8424            
#8422: 
    setcall      /4/1                   
    load     u64       x                
    setarg   u64 /4                     
    load     i64       j                
    setarg   i64 /3                     
    load     i64       i                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /4    &qq_strings.var_putslice_string
    jump               #8421            
#8423: 
    setcall      /4/1                   
    load     u64       x                
    setarg   u64 /4                     
    load     i64       j                
    setarg   i64 /3                     
    load     i64       i                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /4    &qq_lists.var_putslice_list
    jump               #8421            
#8424: 
    setcall      /2/1                   
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       "putslice"       
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8421: 
    retproc                             
endproc

proc qq_vars.var_getdotix:
    param    u64       a
    param    i64       index
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #8427            
    load     i64       9                
    jumpeq   i64 /1    #8428            
    load     i64       12               
    jumpeq   i64       #8429            
    jump               #8430            
#8427: 
    load     i64       index            
    load     i64       0                
    jumplt   i64 /1    #8433            
    load     i64       63               
    jumple   i64       #8432            
#8433: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "int.[int] bounds"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#8432: 
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    load     i64       index            
    shr      i64                        
    load     i64       1                
    bitand   i64                        
    load     u64       a                
    load     i64       8                
    istorex  i64 /1                     
    jump               #8426            
#8428: 
    setcall      /2/1                   
    load     i64       index            
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_strings.var_getdotix_string
    jump               #8426            
#8429: 
    setcall      /2/1                   
    load     i64       index            
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_records.var_getix_record
    jump               #8426            
#8430: 
    setcall      /2/1                   
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       "getdotix"       
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8426: 
    retproc                             
endproc

proc qq_vars.var_putdotix:
    param    u64       p
    param    i64       index
    param    u64       x
    local    u64       a
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       14               
    jumpne   i64       #8436            
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       a                
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #8438            
    load     i64       9                
    jumpeq   i64 /1    #8439            
    load     i64       12               
    jumpeq   i64       #8440            
    jump               #8441            
#8438: 
    load     i64       index            
    load     i64       0                
    jumplt   i64 /1    #8444            
    load     i64       63               
    jumple   i64       #8443            
#8444: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "int.[int]:= bounds"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#8443: 
    setcall      /5/1                   
    load     i64       1                
    setarg   i64 /5                     
    load     i64       33               
    setarg   i64 /4                     
    load     u64       x                
    setarg   u64 /3                     
    load     i64       index            
    setarg   i64 /2                     
    load     u64       a                
    load     i64       8                
    addpx    u64 /1                     
    setarg   u64 /1                     
    callp        /5    &qq_vars.var_storebit
    jump               #8437            
#8439: 
    setcall      /3/1                   
    load     u64       x                
    setarg   u64 /3                     
    load     i64       index            
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /3    &qq_strings.var_putdotix_string
    jump               #8437            
#8440: 
    setcall      /3/1                   
    load     u64       x                
    setarg   u64 /3                     
    load     i64       index            
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /3    &qq_records.var_putix_record
    jump               #8437            
#8441: 
    setcall      /2/1                   
    load     u64       a                
    setarg   u64 /2                     
    load     u64       "putdotix"       
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#8437: 
    jump               #8435            
#8436: 
    setcall      /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     u64       "putdotix"       
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#8435: 
    retproc                             
endproc

proc qq_vars.var_getdotixref:
    param    u64       p
    param    i64       index
    local    u64       a
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       14               
    jumpne   i64       #8447            
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       a                
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #8449            
    load     i64       9                
    jumpeq   i64 /1    #8450            
    load     i64       12               
    jumpeq   i64       #8451            
    jump               #8452            
#8449: 
    load     i64       index            
    load     i64       0                
    jumplt   i64 /1    #8455            
    load     i64       63               
    jumple   i64       #8454            
#8455: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "&int.[int] bounds"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#8454: 
    load     u64       a                
    load     i64       8                
    addpx    u64 /1                     
    load     u64       p                
    load     i64       8                
    istorex  u64 /1                     
    load     i64       15               
    load     u64       p                
    load     i64       0                
    istorex  u32 /1                     
    load     i64       33               
    load     u64       p                
    load     i64       4                
    istorex  u32 /1                     
    load     i64       index            
    load     u64       p                
    load     i64       2                
    istorex  u8  /1                     
    load     i64       1                
    load     u64       p                
    load     i64       3                
    istorex  u8  /1                     
    jump               #8448            
#8450: 
    setcall      /3/1                   
    load     u64       p                
    setarg   u64 /3                     
    load     i64       index            
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /3    &qq_strings.var_getdotixref_string
    jump               #8448            
#8451: 
    setcall      /3/1                   
    load     u64       p                
    setarg   u64 /3                     
    load     i64       index            
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /3    &qq_records.var_getixref_record
    jump               #8448            
#8452: 
    setcall      /2/1                   
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       "getdotixref"    
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8448: 
    jump               #8446            
#8447: 
    setcall      /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     u64       "not refvar"     
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#8446: 
    retproc                             
endproc

proc qq_vars.var_getdotslice:
    param    u64       a
    param    i64       i
    param    i64       j
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #8458            
    load     i64       9                
    jumpeq   i64       #8459            
    jump               #8460            
#8458: 
    load     i64       i                
    load     i64       j                
    jumple   i64       #8462            
    load     u64 /1    &i               
    load     u64 /1    &j               
    iswap    i64                        
#8462: 
    load     i64       i                
    load     i64       0                
    jumplt   i64       #8465            
    load     i64       j                
    load     i64       63               
    jumple   i64       #8464            
#8465: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "int.[slice] bounds"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#8464: 
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    load     i64       i                
    shr      i64                        
    load     u64       -1               
    load     i64       j                
    load     i64       i                
    sub      i64                        
    load     i64       1                
    add      i64                        
    shl      u64                        
    bitnot   u64                        
    bitand   i64                        
    load     u64       a                
    load     i64       8                
    istorex  i64 /1                     
    jump               #8457            
#8459: 
    setcall      /3/1                   
    load     i64       j                
    setarg   i64 /3                     
    load     i64       i                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /3    &qq_strings.var_getslice_string
    jump               #8457            
#8460: 
    setcall      /2/1                   
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       "getdotslice"    
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8457: 
    retproc                             
endproc

proc qq_vars.var_putdotslice:
    param    u64       p
    param    i64       i
    param    i64       j
    param    u64       x
    local    u64       a
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       14               
    jumpne   i64       #8468            
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       a                
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #8470            
    load     i64       9                
    jumpeq   i64       #8471            
    jump               #8472            
#8470: 
    load     i64       i                
    load     i64       j                
    jumple   i64       #8474            
    load     u64 /1    &i               
    load     u64 /1    &j               
    iswap    i64                        
#8474: 
    load     i64       i                
    load     i64       0                
    jumplt   i64       #8477            
    load     i64       j                
    load     i64       63               
    jumple   i64       #8476            
#8477: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "int.[slice]:= bounds"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#8476: 
    setcall      /5/1                   
    load     i64       j                
    load     i64       i                
    sub      i64                        
    load     i64       1                
    add      i64                        
    setarg   i64 /5                     
    load     i64       33               
    setarg   i64 /4                     
    load     u64       x                
    setarg   u64 /3                     
    load     i64       i                
    setarg   i64 /2                     
    load     u64       a                
    load     i64       8                
    addpx    u64 /1                     
    setarg   u64 /1                     
    callp        /5    &qq_vars.var_storebit
    jump               #8469            
#8471: 
    setcall      /4/1                   
    load     u64       x                
    setarg   u64 /4                     
    load     i64       j                
    setarg   i64 /3                     
    load     i64       i                
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /4    &qq_strings.var_putslice_string
    jump               #8469            
#8472: 
    setcall      /2/1                   
    load     u64       a                
    setarg   u64 /2                     
    load     u64       "putdotslice"    
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#8469: 
    jump               #8467            
#8468: 
    setcall      /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     u64       "not ref"        
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#8467: 
    retproc                             
endproc

proc qq_vars.var_getdotsliceref:
    param    u64       p
    param    i64       i
    param    i64       j
    local    u64       a
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       14               
    jumpne   i64       #8480            
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       a                
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64       #8482            
    jump               #8483            
#8482: 
    load     i64       i                
    load     i64       j                
    jumple   i64       #8485            
    load     u64 /1    &i               
    load     u64 /1    &j               
    iswap    i64                        
#8485: 
    load     i64       i                
    load     i64       0                
    jumplt   i64       #8488            
    load     i64       j                
    load     i64       63               
    jumple   i64       #8487            
#8488: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "&int.[slice] bounds"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#8487: 
    load     u64       a                
    load     i64       8                
    addpx    u64 /1                     
    load     u64       p                
    load     i64       8                
    istorex  u64 /1                     
    load     i64       15               
    load     u64       p                
    load     i64       0                
    istorex  u32 /1                     
    load     i64       33               
    load     u64       p                
    load     i64       4                
    istorex  u32 /1                     
    load     i64       i                
    load     u64       p                
    load     i64       2                
    istorex  u8  /1                     
    load     i64       j                
    load     i64       i                
    sub      i64                        
    load     i64       1                
    add      i64                        
    load     u64       p                
    load     i64       3                
    istorex  u8  /1                     
    jump               #8481            
#8483: 
    setcall      /2/1                   
    load     u64       a                
    setarg   u64 /2                     
    load     u64       "getdotsliceref" 
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#8481: 
    jump               #8479            
#8480: 
    setcall      /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     u64       "not ref"        
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#8479: 
    retproc                             
endproc

proc qq_vars.var_expand:
    param    u64       a
    param    u64       dest
    param    i64       m
    local    u64       b
    local    u64       c
    local    u64       p
    local    u64       s
    local    i64       n
    local    i64       length
    local    i64       av_1
    local    i64       av_2
    load     i64       m                
    load     i64       2                
    jumpge   i64       #8491            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "Expand: LHS too few"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#8491: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       10               
    jumpeq   i64 /1    #8493            
    load     i64       4                
    jumpeq   i64 /1    #8494            
    load     i64       9                
    jumpeq   i64 /1    #8495            
    load     i64       12               
    jumpeq   i64 /1    #8496            
    load     i64       11               
    jumpeq   i64 /1    #8497            
    load     i64       7                
    jumpeq   i64       #8497            
    jump               #8498            
#8493: 
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       p                
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       length           
! qq_vars.var_expand.dolist:
#8499: 
    load     u64       dest             
    store    u64       b                
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       c                
    load     i64       1                
    store    i64       n                
    load     i64       m                
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #8502            
#8500: 
    load     i64       n                
    load     i64       length           
    jumple   i64       #8504            
    load     i64       0                
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    jump               #8503            
#8504: 
    load     u64       c                
    iload    mem:16                     
    load     u64       dest             
    istore   mem:16                     
    load     u64       dest             
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #8506            
    load     u64       dest             
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#8506: 
    load     u64 /1    &c               
    incrto   u64 /16                    
#8503: 
    load     u64 /1    &n               
    incrto   i64 /1                     
    load     u64 /1    &dest            
    decrto   u64 /16                    
    to       i64       #8500            
    opnd     i64       av_1             
#8502: 
    jump               #8492            
#8494: 
    load     i64       1                
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     u64       a                
    load     i64       0                
    iloadx   i64 /1                     
    load     i64       16               
    load     i64       63               
    loadbf   i64                        
    load     u64       dest             
    load     i64       8                
    istorex  i64 /1                     
    load     u64 /1    &dest            
    decrto   u64 /16                    
    load     i64       1                
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       dest             
    load     i64       8                
    istorex  i64 /1                     
    load     i64       m                
    load     i64       2                
    sub      i64                        
    store    i64       av_2             
    load     i64       av_2             
    load     i64       0                
    jumple   i64       #8509            
#8507: 
    load     u64 /1    &dest            
    decrto   u64 /16                    
    load     i64       0                
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    to       i64       #8507            
    opnd     i64       av_2             
#8509: 
    jump               #8492            
#8495: 
    setcall      /3/1                   
    load     i64       m                
    setarg   i64 /3                     
    load     u64       dest             
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /3    &qq_strings.var_expand_string
    jump               #8492            
#8496: 
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       p                
    load     u64       &qq_tables.ttlength
    load     u64       p                
    load     i64       6                
    iloadx   u16 /1                     
    widen    i64/u16                    
    iloadx   i64 /8                     
    store    i64       length           
    jump               #8499            
    jump               #8492            
#8497: 
    setcall      /3/1                   
    load     i64       m                
    setarg   i64 /3                     
    load     u64       dest             
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /3    &qq_arrays.var_expand_array
    jump               #8492            
#8498: 
    setcall      /2/1                   
    load     u64       a                
    setarg   u64 /2                     
    load     u64       "expand"         
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#8492: 
    retproc                             
endproc

proc qq_vars.var_inplace:
    param    i64       index
    param    u64       px
    param    u64       y
    local    u64       fnadd
    local    u64       fnaddmixed
    local    mem:16       x
    local    mem:16       z
    load     u64       &qq_pcltabs.bintotable
    load     i64       index            
    addpx    mem:24 /24/-24             
    load     i64       0                
    iloadx   i64 /1                     
    load     i64       101              
    jumpne   i64       #8512            
    setcall  i64 /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       px               
    setarg   u64 /1                     
    callf    i64 /2    &qq_vars.var_addto
    jumpf    i64       #8514            
    jump               #8510            
#8514: 
#8512: 
    load     u64       &qq_pcltabs.bintotable
    load     i64       index            
    addpx    mem:24 /24/-24             
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       fnadd            
    load     u64       &qq_pcltabs.bintotable
    load     i64       index            
    addpx    mem:24 /24/-24             
    load     i64       16               
    iloadx   u64 /1                     
    store    u64       fnaddmixed       
    setcall      /2/1                   
    load     u64       &x               
    setarg   u64 /2                     
    load     u64       px               
    setarg   u64 /1                     
    callp        /2    &qq_vars.var_loadptr
    load     u64       &x               
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       y                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    jumpne   i64       #8516            
    setcall      /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       &x               
    setarg   u64 /1                     
    load     u64       fnadd            
    icallp       /2                     
    jump               #8515            
#8516: 
    load     u64       fnaddmixed       
    jumpf    u64       #8517            
    setcall      /2/1                   
    load     u64       y                
    setarg   u64 /2                     
    load     u64       &x               
    setarg   u64 /1                     
    load     u64       fnaddmixed       
    icallp       /2                     
    jump               #8515            
#8517: 
    setcall      /0/1                   
    callp        /0    &msysc.m$print_startcon
    setcall      /1/1                   
    load     u64       &qq_pcltabs.pclnames
    load     u64       &qq_pcltabs.bintotable
    load     i64       index            
    addpx    mem:24 /24/-24             
    load     i64       0                
    iloadx   i64 /1                     
    iloadx   u64 /8                     
    setarg   u64 /1                     
    callp        /1    &msysc.m$print_str_nf
    setcall      /0/1                   
    callp        /0    &msysc.m$print_newline
    setcall      /0/1                   
    callp        /0    &msysc.m$print_end
    setcall      /3/1                   
    load     u64       y                
    setarg   u64 /3                     
    load     u64       &x               
    setarg   u64 /2                     
    load     u64       "Inplace mixed"  
    setarg   u64 /1                     
    callp        /3    &qq_runaux.pcmxtypes
#8515: 
    setcall      /2/1                   
    load     u64       &x               
    setarg   u64 /2                     
    load     u64       px               
    setarg   u64 /1                     
    callp        /2    &qq_vars.var_storeptr
#8510: 
    retproc                             
endproc

proc qq_vars.var_inplace_unary:
    param    u64       px
    param    u64       fnneg
    local    mem:16       x
    setcall      /2/1                   
    load     u64       &x               
    setarg   u64 /2                     
    load     u64       px               
    setarg   u64 /1                     
    callp        /2    &qq_vars.var_loadptr
    setcall      /1/1                   
    load     u64       &x               
    setarg   u64 /1                     
    load     u64       fnneg            
    icallp       /1                     
    setcall      /2/1                   
    load     u64       &x               
    setarg   u64 /2                     
    load     u64       px               
    setarg   u64 /1                     
    callp        /2    &qq_vars.var_storeptr
    retproc                             
endproc

proc qq_vars.var_loadptr:
    param    u64       x
    param    u64       y
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       14               
    jumpeq   i64 /1    #8521            
    load     i64       16               
    jumpeq   i64 /1    #8522            
    load     i64       15               
    jumpeq   i64       #8523            
    jump               #8524            
#8521: 
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    iload    mem:16                     
    load     u64       y                
    istore   mem:16                     
    load     u64       y                
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #8526            
    load     u64       y                
    load     i64       8                
    iloadx   u64 /1                     
    incrto   u32 /1                     
#8526: 
    jump               #8520            
#8522: 
    setcall      /4/1                   
    load     u64       0                
    setarg   u64 /4                     
    load     u64       y                
    setarg   u64 /3                     
    load     u64       x                
    load     i64       4                
    iloadx   u32 /1                     
    widen    i64/u32                    
    setarg   i64 /2                     
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /4    &qq_packed.var_loadpacked
    jump               #8520            
#8523: 
    setcall      /5/1                   
    load     u64       y                
    setarg   u64 /5                     
    load     u64       x                
    load     i64       3                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /4                     
    load     u64       x                
    load     i64       4                
    iloadx   u32 /1                     
    widen    i64/u32                    
    setarg   i64 /3                     
    load     u64       x                
    load     i64       2                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /5    &qq_vars.var_loadbit
    jump               #8520            
#8524: 
    setcall      /2/1                   
    load     u64       x                
    setarg   u64 /2                     
    load     u64       "var_loadptr"    
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#8520: 
    retproc                             
endproc

proc qq_vars.var_storeptr:
    param    u64       p
    param    u64       q
    local    u64       dest
    local    u64       pptr
    local    u64       qptr
    local    mem:16       v
    local    i64       i
    local    i64       n
    local    i64       etag
    local    i64       poffset
    local    i64       qoffset
    local    i64       bitwidthx
    local    u64       pp
    local    u64       qq
    local    i64       aa
    local    i64       bb
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       14               
    jumpeq   i64 /1    #8529            
    load     i64       16               
    jumpeq   i64 /1    #8530            
    load     i64       15               
    jumpeq   i64       #8531            
    jump               #8532            
#8529: 
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       dest             
    load     u64       dest             
    load     i64       1                
    iloadx   u8  /1                     
    jumpf    u8        #8534            
    setcall      /1/1                   
    load     u64       dest             
    setarg   u64 /1                     
    callp        /1    &qq_vars.var_unshareu
#8534: 
    load     u64       q                
    iload    mem:16                     
    load     u64       dest             
    istore   mem:16                     
    jump               #8528            
#8530: 
    setcall      /3/1                   
    load     u64       p                
    load     i64       4                
    iloadx   u32 /1                     
    widen    i64/u32                    
    setarg   i64 /3                     
    load     u64       q                
    setarg   u64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &qq_packed.var_storepacked
    jump               #8528            
#8531: 
    setcall      /5/1                   
    load     u64       p                
    load     i64       3                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /5                     
    load     u64       p                
    load     i64       4                
    iloadx   u32 /1                     
    widen    i64/u32                    
    setarg   i64 /4                     
    load     u64       q                
    setarg   u64 /3                     
    load     u64       p                
    load     i64       2                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /5    &qq_vars.var_storebit
    jump               #8528            
#8532: 
    setcall      /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     u64       "var_popptr"     
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#8528: 
    retproc                             
endproc

proc qq_vars.var_loadbit:
    param    u64       p
    param    i64       shift
    param    i64       t
    param    i64       bitlength
    param    u64       dest
    local    u64       pd
    local    u64       mask
    load     i64       1                
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     i64       t                
    load     i64       33               
    jumpeq   i64 /1    #8537            
    load     i64       34               
    jumpeq   i64 /1    #8538            
    load     i64       35               
    jumpeq   i64       #8539            
    jump               #8540            
#8537: 
    load     i64       bitlength        
    load     i64       0                
    jumpne   i64       #8542            
    load     u64       p                
    iload    u8                         
    widen    i64/u8                     
    load     i64       1                
    load     i64       shift            
    shl      i64                        
    bitand   i64                        
    toboolt  i64/i64                    
    load     u64       dest             
    load     i64       8                
    istorex  i64 /1                     
    jump               #8541            
#8542: 
    load     u64       p                
    store    u64       pd               
    load     u64       -2               
    store    u64       mask             
    load     i64       bitlength        
    load     i64       1                
    jumpeq   i64 /1    #8544            
    load     i64       64               
    jumpeq   i64       #8545            
    jump               #8546            
#8544: 
    jump               #8543            
#8545: 
    load     u64       0                
    store    u64       mask             
    jump               #8543            
#8546: 
    load     i64       bitlength        
    load     i64       1                
    sub      i64                        
    load     u64 /1    &mask            
    shlto    u64                        
#8543: 
    load     u64       pd               
    iload    u64                        
    load     i64       shift            
    shr      u64                        
    load     u64       mask             
    bitnot   u64                        
    bitand   i64                        
    load     u64       dest             
    load     i64       8                
    istorex  i64 /1                     
#8541: 
    jump               #8536            
#8538: 
    load     u64       p                
    iload    u8                         
    widen    i64/u8                     
    load     i64       3                
    load     i64       shift            
    shl      i64                        
    bitand   i64                        
    load     i64       shift            
    shr      i64                        
    load     u64       dest             
    load     i64       8                
    istorex  i64 /1                     
    jump               #8536            
#8539: 
    load     u64       p                
    iload    u8                         
    widen    i64/u8                     
    load     i64       15               
    load     i64       shift            
    shl      i64                        
    bitand   i64                        
    load     i64       shift            
    shr      i64                        
    load     u64       dest             
    load     i64       8                
    istorex  i64 /1                     
    jump               #8536            
#8540: 
    setcall      /2/1                   
    load     i64       t                
    setarg   i64 /2                     
    load     u64       "loadbit"        
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8536: 
    retproc                             
endproc

proc qq_vars.var_storebit:
    param    u64       p
    param    i64       shift
    param    u64       q
    param    i64       t
    param    i64       bitlength
    local    u64       pd
    local    u8       bb
    local    u64       mask1
    local    u64       mask2
    local    u64       newvalue
    load     u64       q                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64       #8549            
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "storebit not int"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#8549: 
    load     i64       t                
    load     i64       33               
    jumpeq   i64 /1    #8551            
    load     i64       34               
    jumpeq   i64 /1    #8552            
    load     i64       35               
    jumpeq   i64       #8553            
    jump               #8554            
#8551: 
    load     i64       bitlength        
    load     i64       0                
    jumpne   i64       #8556            
    load     u64       p                
    iload    u8                         
    widen    i64/u8                     
    load     i64       1                
    load     i64       shift            
    shl      i64                        
    bitnot   i64                        
    bitand   i64                        
    load     u64       q                
    load     i64       8                
    iloadx   i64 /1                     
    load     i64       1                
    bitand   i64                        
    load     i64       shift            
    shl      i64                        
    bitor    i64                        
    load     u64       p                
    istore   u8                         
    jump               #8555            
#8556: 
    load     u64       p                
    store    u64       pd               
    load     u64       -2               
    store    u64       mask1            
    load     i64       bitlength        
    load     i64       1                
    jumpeq   i64 /1    #8558            
    load     i64       64               
    jumpeq   i64       #8559            
    jump               #8560            
#8558: 
    jump               #8557            
#8559: 
    load     u64       0                
    store    u64       mask1            
    jump               #8557            
#8560: 
    load     i64       bitlength        
    load     i64       1                
    sub      i64                        
    load     u64 /1    &mask1           
    shlto    u64                        
#8557: 
    load     u64       mask1            
    bitnot   u64                        
    store    u64       mask1            
    load     i64       shift            
    jumpf    i64       #8562            
    load     i64       shift            
    load     u64 /1    &mask1           
    shlto    u64                        
#8562: 
    load     u64       mask1            
    bitnot   u64                        
    store    u64       mask2            
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       newvalue         
    load     i64       shift            
    jumpf    i64       #8564            
    load     i64       shift            
    load     u64 /1    &newvalue        
    shlto    u64                        
#8564: 
    load     u64       pd               
    iload    u64                        
    load     u64       mask2            
    bitand   u64                        
    load     u64       newvalue         
    load     u64       mask1            
    bitand   u64                        
    bitor    u64                        
    load     u64       pd               
    istore   u64                        
#8555: 
    jump               #8550            
#8552: 
    load     u64       p                
    iload    u8                         
    widen    i64/u8                     
    load     i64       3                
    load     i64       shift            
    shl      i64                        
    bitnot   i64                        
    bitand   i64                        
    load     u64       q                
    load     i64       8                
    iloadx   i64 /1                     
    load     i64       3                
    bitand   i64                        
    load     i64       shift            
    shl      i64                        
    bitor    i64                        
    load     u64       p                
    istore   u8                         
    jump               #8550            
#8553: 
    load     u64       p                
    iload    u8                         
    widen    i64/u8                     
    load     i64       15               
    load     i64       shift            
    shl      i64                        
    bitnot   i64                        
    bitand   i64                        
    load     u64       q                
    load     i64       8                
    iloadx   i64 /1                     
    load     i64       15               
    bitand   i64                        
    load     i64       shift            
    shl      i64                        
    bitor    i64                        
    load     u64       p                
    istore   u8                         
    jump               #8550            
#8554: 
    setcall      /2/1                   
    load     i64       t                
    setarg   i64 /2                     
    load     u64       "storebit"       
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8550: 
    retproc                             
endproc

proc qq_vars.var_convert:
    param    u64       x
    param    i64       t
    param    u64       dest
    local    i64       s
    local    i64       tbase
    local    i64       aa
    local    mem:16       bn
    load     u64       x                
    iload    mem:16                     
    load     u64       dest             
    istore   mem:16                     
    load     u64       x                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       s                
    load     i64       s                
    load     i64       t                
    jumpne   i64       #8567            
    jump               #8565            
#8567: 
    load     i64       t                
    store    i64       tbase            
    load     i64       t                
    load     u64       dest             
    load     i64       0                
    istorex  u8  /1                     
    load     i64       s                
    load     i64       1                
    jumpeq   i64 /1    #8569            
    load     i64       2                
    jumpeq   i64 /1    #8570            
    load     i64       16               
    jumpeq   i64 /1    #8571            
    load     i64       14               
    jumpeq   i64 /1    #8571            
    load     i64       15               
    jumpeq   i64 /1    #8571            
    load     i64       9                
    jumpeq   i64 /1    #8572            
    load     i64       18               
    jumpeq   i64 /1    #8573            
    load     i64       3                
    jumpeq   i64       #8574            
    jump               #8575            
#8569: 
    load     i64       tbase            
    load     i64       1                
    jumpeq   i64 /1    #8577            
    load     i64       2                
    jumpeq   i64 /1    #8578            
    load     i64       3                
    jumpeq   i64       #8579            
    jump               #8580            
#8577: 
    jump               #8576            
#8578: 
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    float    r64/i64                    
    load     u64       dest             
    load     i64       8                
    istorex  r64 /1                     
    jump               #8576            
#8579: 
    setcall      /2/1                   
    load     u64       dest             
    setarg   u64 /2                     
    load     u64       x                
    load     i64       8                
    iloadx   i64 /1                     
    setarg   i64 /1                     
    callp        /2    &qq_decimal.var_make_dec_int
    jump               #8576            
#8580: 
    setcall      /2/1                   
    load     i64       t                
    setarg   i64 /2                     
    load     u64       "conv int=>"     
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8576: 
    jump               #8568            
#8570: 
    load     i64       tbase            
    load     i64       1                
    jumpeq   i64       #8582            
    jump               #8583            
#8582: 
    load     u64       x                
    load     i64       8                
    iloadx   r64 /1                     
    fix      i64/r64                    
    load     u64       dest             
    load     i64       8                
    istorex  i64 /1                     
    jump               #8581            
#8583: 
    setcall      /2/1                   
    load     i64       t                
    setarg   i64 /2                     
    load     u64       "conv real=>"    
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8581: 
    jump               #8568            
#8571: 
    load     u64       &qq_tables.ttbasetype
    load     i64       tbase            
    iloadx   i16 /2                     
    widen    i64/i16                    
    load     i64       1                
    jumpeq   i64 /1    #8585            
    load     i64       16               
    jumpeq   i64       #8586            
    jump               #8587            
#8585: 
    jump               #8584            
#8586: 
    load     i64       16               
    load     u64       dest             
    load     i64       0                
    istorex  u8  /1                     
    load     u64       &qq_tables.tttarget
    load     i64       t                
    iloadx   i16 /2                     
    widen    i64/i16                    
    load     u64       dest             
    load     i64       4                
    istorex  u32 /1                     
    jump               #8584            
#8587: 
    setcall      /2/1                   
    load     i64       t                
    setarg   i64 /2                     
    load     u64       "conv ptr=>"     
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8584: 
    jump               #8568            
#8572: 
    load     i64       tbase            
    load     i64       10               
    jumpeq   i64 /1    #8589            
    load     i64       3                
    jumpeq   i64 /1    #8590            
    load     i64       9                
    jumpeq   i64       #8591            
    jump               #8592            
#8589: 
    setcall      /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     i64       t                
    setarg   i64 /2                     
    load     u64       x                
    setarg   u64 /1                     
    callp        /3    &qq_strings.var_convert_string_list
    jump               #8588            
#8590: 
    setcall      /3/1                   
    load     u64       dest             
    setarg   u64 /3                     
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     u64       x                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    setarg   u64 /1                     
    callp        /3    &qq_decimal.var_make_dec_str
    jump               #8588            
#8591: 
    jump               #8588            
#8592: 
    setcall      /2/1                   
    load     i64       t                
    setarg   i64 /2                     
    load     u64       "string=>"       
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8588: 
    jump               #8568            
#8573: 
    load     i64       tbase            
    load     i64       1                
    jumpeq   i64       #8594            
    setcall      /2/1                   
    load     i64       t                
    setarg   i64 /2                     
    load     u64       "type=>"         
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8594: 
    jump               #8568            
#8574: 
    load     i64       tbase            
    load     i64       1                
    jumpeq   i64       #8596            
    jump               #8597            
#8596: 
    setcall  i64 /1/1                   
    load     u64       x                
    setarg   u64 /1                     
    callf    i64 /1    &qq_decimal.var_convert_dec_int
    store    i64       aa               
    load     i64       1                
    load     u64       dest             
    load     i64       0                
    istorex  u32 /1                     
    load     i64       aa               
    load     u64       dest             
    load     i64       8                
    istorex  i64 /1                     
    jump               #8595            
#8597: 
    setcall      /2/1                   
    load     i64       t                
    setarg   i64 /2                     
    load     u64       "decimal=>"      
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8595: 
    jump               #8568            
#8575: 
    setcall      /3/1                   
    load     i64       t                
    setarg   i64 /3                     
    load     i64       s                
    setarg   i64 /2                     
    load     u64       "Convert s.t"    
    setarg   u64 /1                     
    callp        /3    &qq_runaux.pcmxtypestt
#8568: 
#8565: 
    retproc                             
endproc

proc qq_vars.var_gethashvalue:
    param    u64       p
    local    i64       hsum
    local    i64       csum
    local    i64       c
    local    i64       n
    local    i64       i
    local    i64       result
    local    u64       s
    local    u64       s0
    local    u64       q
    local    i64       av_1
    rettype  i64
    load     u64       p                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       9                
    jumpeq   i64 /1    #8600            
    load     i64       1                
    jumpeq   i64 /1    #8601            
    load     i64       2                
    jumpeq   i64 /1    #8601            
    load     i64       4                
    jumpeq   i64 /1    #8601            
    load     i64       3                
    jumpeq   i64 /1    #8602            
    load     i64       12               
    jumpeq   i64       #8603            
    jump               #8604            
#8600: 
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       16               
    iloadx   i64 /1                     
    store    i64       n                
    load     i64       n                
    jumpt    i64       #8606            
    load     i64       0                
    jumpret  i64       #8598            
#8606: 
    load     i64       0                
    store    i64       hsum             
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       s                
    load     i64       n                
    store    i64       av_1             
    load     i64       av_1             
    load     i64       0                
    jumple   i64       #8609            
#8607: 
    load     u64 /1    &s               
    loadincr u64 /1                     
    iload    u8                         
    widen    i64/u8                     
    store    i64       c                
    load     i64       hsum             
    load     i64       4                
    shl      i64                        
    load     i64       hsum             
    sub      i64                        
    load     i64       c                
    add      i64                        
    store    i64       hsum             
    to       i64       #8607            
    opnd     i64       av_1             
#8609: 
    load     i64       hsum             
    load     i64       5                
    shl      i64                        
    load     i64       hsum             
    sub      i64                        
    store    i64       result           
    load     i64       result           
    load     i64       9223372036854775807
    bitand   i64                        
    jumpret  i64       #8598            
    jump               #8599            
#8601: 
    load     u64       p                
    load     i64       8                
    iloadx   i64 /1                     
    jumpret  i64       #8598            
    jump               #8599            
#8602: 
    load     u64       p                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       q                
    load     u64       q                
    load     i64       16               
    iloadx   i64 /1                     
    load     i64       0                
    jumpne   i64       #8611            
    load     i64       0                
    jumpret  i64       #8598            
    jump               #8610            
#8611: 
    load     u64       q                
    load     i64       8                
    iloadx   u64 /1                     
    load     i64       0                
    iloadx   i32 /4                     
    widen    i64/i32                    
    jumpret  i64       #8598            
#8610: 
    jump               #8599            
#8603: 
    load     u64       p                
    load     i64       8                
    iloadx   i64 /1                     
    jumpret  i64       #8598            
    jump               #8599            
#8604: 
    setcall      /2/1                   
    load     u64       p                
    setarg   u64 /2                     
    load     u64       "Can't hash:"    
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype
#8599: 
    load     i64       0                
    jumpret  i64       #8598            
#8598: 
    retfn    i64                        
endproc

proc qq_vars.var_objtovar:
    param    i64       tag
    param    u64       p
    param    u64       q
    load     i64       tag              
    load     i64       256              
    bitor    i64                        
    load     u64       q                
    load     i64       0                
    istorex  u32 /1                     
    load     u64       p                
    load     u64       q                
    load     i64       8                
    istorex  u64 /1                     
    retproc                             
endproc

proc qq_vars.var_putdotix_intint:
    param    u64       a
    param    i64       index
    param    u64       b
    local    u64       x
    local    u64       y
    load     u64       a                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       x                
    load     u64       b                
    load     i64       8                
    iloadx   u64 /1                     
    store    u64       y                
    load     i64       index            
    load     i64       0                
    jumplt   i64 /1    #8616            
    load     i64       63               
    jumple   i64       #8615            
#8616: 
    setcall      /2/1                   
    load     u64       ""               
    setarg   u64 /2                     
    load     u64       "int.[int]:= bounds"
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcerror
#8615: 
    load     u64       x                
    load     i64       1                
    load     i64       index            
    shl      i64                        
    bitnot   i64                        
    bitand   i64                        
    load     u64       y                
    load     i64       index            
    shl      i64                        
    bitor    i64                        
    load     u64       a                
    load     i64       8                
    istorex  i64 /1                     
    retproc                             
endproc

proc qq_vars.var_power:
    param    u64       a
    param    u64       b
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    jumpeq   i64       #8619            
    setcall      /2/1                   
    load     u64       b                
    setarg   u64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_vars.var_powermixed
    jump               #8617            
#8619: 
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       1                
    jumpeq   i64 /1    #8621            
    load     i64       2                
    jumpeq   i64 /1    #8622            
    load     i64       3                
    jumpeq   i64       #8623            
    jump               #8624            
#8621: 
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    power    i64                        
    load     u64       a                
    load     i64       8                
    istorex  i64 /1                     
    jump               #8620            
#8622: 
    setcall  r64 /2/1                   
    load     u64       b                
    load     i64       8                
    iloadx   r64 /1                     
    setarg   r64 /2                     
    load     u64       a                
    load     i64       8                
    iloadx   r64 /1                     
    setarg   r64 /1                     
    callf    r64 /2    &pow             
    load     u64       a                
    load     i64       8                
    istorex  r64 /1                     
    jump               #8620            
#8623: 
    setcall      /2                     
    setcall  i64 /1                     
    load     u64       b                
    setarg   u64 /1                     
    callf    i64 /1    &qq_decimal.var_convert_dec_int
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_decimal.var_power_dec
    jump               #8620            
#8624: 
    setcall      /2/1                   
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    setarg   i64 /2                     
    load     u64       "power"          
    setarg   u64 /1                     
    callp        /2    &qq_runaux.pcustype_t
#8620: 
#8617: 
    retproc                             
endproc

proc qq_vars.var_powermixed:
    param    u64       a
    param    u64       b
    local    i64       newtag
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    store    i64       newtag           
    load     u64       a                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    load     i64       16               
    shl      i64                        
    load     u64       b                
    load     i64       0                
    iloadx   u8  /1                     
    widen    i64/u8                     
    bitor    i64                        
    load     i64       65538            
    jumpeq   i64 /1    #8627            
    load     i64       131073           
    jumpeq   i64 /1    #8628            
    load     i64       196609           
    jumpeq   i64       #8629            
    jump               #8630            
#8627: 
    load     i64       2                
    store    i64       newtag           
    setcall  r64 /2/1                   
    load     u64       b                
    load     i64       8                
    iloadx   r64 /1                     
    setarg   r64 /2                     
    load     u64       a                
    load     i64       8                
    iloadx   i64 /1                     
    float    r64/i64                    
    setarg   r64 /1                     
    callf    r64 /2    &pow             
    load     u64       a                
    load     i64       8                
    istorex  r64 /1                     
    jump               #8626            
#8628: 
    setcall  r64 /2/1                   
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    float    r64/i64                    
    setarg   r64 /2                     
    load     u64       a                
    load     i64       8                
    iloadx   r64 /1                     
    setarg   r64 /1                     
    callf    r64 /2    &pow             
    load     u64       a                
    load     i64       8                
    istorex  r64 /1                     
    jump               #8626            
#8629: 
    setcall      /2/1                   
    load     u64       b                
    load     i64       8                
    iloadx   i64 /1                     
    setarg   i64 /2                     
    load     u64       a                
    setarg   u64 /1                     
    callp        /2    &qq_decimal.var_power_dec
    jump               #8626            
#8630: 
    setcall      /3/1                   
    load     u64       b                
    setarg   u64 /3                     
    load     u64       a                
    setarg   u64 /2                     
    load     u64       "Powermixed"     
    setarg   u64 /1                     
    callp        /3    &qq_runaux.pcmxtypes
#8626: 
    load     i64       newtag           
    load     u64       a                
    load     i64       0                
    istorex  u8  /1                     
    retproc                             
endproc

proc qq_cli.start:
    setcall      /0/1                   
    callp        /0    &qq_lex.start    
    setcall      /0/1                   
    callp        /0    &qq_lists.start  
    setcall      /0/1                   
    callp        /0    &qq_pcllib.start 
    setcall      /0/1                   
    callp        /0    &qq_runx.start   
    setcall      /0/1                   
    callp        /0    &qq_strings.start
    setcall      /0/1                   
    callp        /0    &qq_tables.start 
    retproc                             
endproc

istatic  mem:8       $procaddr:         
    data     u64       &qq_print.pch_strstartprint
istatic  mem:8       $procname:         
    data     u64       "pch_strstartprint"
istatic  i64       $nprocs:             
    data     i64       1                
endprog
    nop                                 

